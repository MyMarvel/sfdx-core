{"version":3,"file":"printer.js","sources":["../../src/schema/printer.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport {\n  asJsonArray,\n  asJsonMap,\n  asNumber,\n  asString,\n  isJsonMap,\n  JsonArray,\n  JsonMap,\n  Optional\n} from '@salesforce/ts-types';\nimport { Logger } from '../logger';\nimport { SfdxError } from '../sfdxError';\n\n/**\n * Renders schema properties.  By default, this is simply an identity transform.  Subclasses may provide more\n * interesting decorations of each values, such as ANSI coloring.\n */\nexport class SchemaPropertyRenderer {\n  /**\n   * Renders a name.\n   *\n   * @param name The name value to render.\n   */\n  public renderName(name: string): string {\n    return name;\n  }\n\n  /**\n   * Renders a title.\n   *\n   * @param title The title value to render.\n   */\n  public renderTitle(title: string): string {\n    return title;\n  }\n\n  /**\n   * Renders a description.\n   *\n   * @param description The description value to render.\n   */\n  public renderDescription(description: string): string {\n    return description;\n  }\n\n  /**\n   * Renders a type.\n   *\n   * @param propertyType The type value to render.\n   */\n  public renderType(propertyType: string): string {\n    return propertyType;\n  }\n}\n\n/**\n * Prints a JSON schema in a human-friendly format.\n *\n * ```\n * import chalk from 'chalk';\n * class MyPropertyRenderer extends SchemaPropertyRenderer {\n *   renderName(name) { return chalk.bold.blue(name); }\n * }\n *\n * const printer = new SchemaPrinter(logger, schema, new MyPropertyRenderer());\n * printer.getLines().forEach(console.log);\n * ```\n */\nexport class SchemaPrinter {\n  private logger: Logger;\n  private lines: string[] = [];\n\n  /**\n   * Constructs a new `SchemaPrinter`.\n   *\n   * @param logger The logger to use when emitting the printed schema.\n   * @param schema The schema to print.\n   * @param propertyRenderer The property renderer.\n   */\n  public constructor(\n    logger: Logger,\n    private schema: JsonMap,\n    private propertyRenderer: SchemaPropertyRenderer = new SchemaPropertyRenderer()\n  ) {\n    this.logger = logger.child('SchemaPrinter');\n\n    if (!this.schema.properties && !this.schema.items) {\n      // No need to add to messages, since this should never happen. In fact,\n      // this will cause a test failure if there is a command that uses a schema\n      // with no properties defined.\n      throw new SfdxError('There is no purpose to print a schema with no properties or items');\n    }\n\n    const startLevel = 0;\n    const add = this.addFn(startLevel);\n\n    // For object schemas, print out the \"header\" and first level properties differently\n    if (this.schema.properties) {\n      if (typeof this.schema.description === 'string') {\n        // Output the overall schema description before printing the properties\n        add(this.schema.description);\n        add('');\n      }\n\n      Object.keys(this.schema.properties).forEach(key => {\n        const properties = asJsonMap(this.schema.properties);\n        if (!properties) {\n          return;\n        }\n        this.parseProperty(key, asJsonMap(properties[key]), startLevel);\n        add('');\n      });\n    } else {\n      this.parseProperty('schema', this.schema, startLevel);\n    }\n  }\n\n  /**\n   * Gets a read-only array of ready-to-display lines.\n   */\n  public getLines(): ReadonlyArray<string> {\n    return this.lines;\n  }\n\n  /**\n   * Gets a ready-to-display line by index.\n   *\n   * @param index The line index to get.\n   */\n  public getLine(index: number): string {\n    return this.lines[index];\n  }\n\n  /**\n   * Prints the accumulated set of schema lines as info log lines to the logger.\n   */\n  public print(): void {\n    this.lines.forEach(line => this.logger.info(line));\n  }\n\n  private addFn(level: number): (line: string) => void {\n    const indent = ' '.repeat(level * 4);\n    return (line: string) => {\n      this.lines.push(`${indent}${line}`);\n    };\n  }\n\n  private parseProperty(name: string, rawProperty?: JsonMap, level = 0): void {\n    if (!rawProperty) {\n      return;\n    }\n\n    const add = this.addFn(level);\n    const property = new SchemaProperty(this.logger, this.schema, name, rawProperty, this.propertyRenderer);\n\n    add(property.renderHeader());\n\n    if (property.type === 'object' && property.properties) {\n      Object.keys(property.properties).forEach(key => {\n        this.parseProperty(key, property.getProperty(key), level + 1);\n      });\n    }\n    if (property.type === 'array') {\n      add(`    ${property.renderArrayHeader()}`);\n      if (property.items && property.items.type === 'object' && property.items.properties) {\n        Object.keys(property.items.properties).forEach(key => {\n          const items = asJsonMap(property.items);\n          if (!items) {\n            return;\n          }\n          const properties = asJsonMap(items.properties);\n          if (!properties) {\n            return;\n          }\n          this.parseProperty(key, asJsonMap(properties[key]), level + 2);\n        });\n      }\n    }\n    if (property.required) {\n      add(`Required: ${property.required.join(', ')}`);\n    }\n  }\n}\n\nclass SchemaProperty {\n  public constructor(\n    private readonly logger: Logger,\n    private readonly schema: JsonMap,\n    private readonly name: string,\n    private rawProperty: JsonMap,\n    private propertyRenderer: SchemaPropertyRenderer\n  ) {\n    this.name = name;\n\n    // Capture the referenced definition, if specified\n    if (typeof this.rawProperty.$ref === 'string') {\n      // Copy the referenced property while adding the original property's properties on top of that --\n      // if they are defined here, they take precedence over referenced definition properties.\n      this.rawProperty = Object.assign({}, resolveRef(this.schema, this.rawProperty), rawProperty);\n    }\n\n    const oneOfs = asJsonArray(this.rawProperty.oneOf);\n    if (oneOfs && !this.rawProperty.type) {\n      this.rawProperty.type = oneOfs\n        .map(value => {\n          return isJsonMap(value) ? value.type || value.$ref : value;\n        })\n        .join('|');\n    }\n\n    // Handle items references\n    if (isJsonMap(this.items) && this.items && this.items.$ref) {\n      Object.assign(this.items, resolveRef(this.schema, this.items));\n    }\n  }\n\n  public renderName(): string {\n    return this.propertyRenderer.renderName(this.name);\n  }\n\n  public renderTitle(): string {\n    return this.propertyRenderer.renderTitle(this.title || '');\n  }\n\n  public renderDescription(): string {\n    return this.propertyRenderer.renderDescription(this.description || '');\n  }\n\n  public renderType(): string {\n    return this.propertyRenderer.renderType(this.type || '');\n  }\n\n  public renderHeader(): string {\n    return `${this.renderName()}(${this.renderType()}) - ${this.renderTitle()}: ${this.renderDescription()}`;\n  }\n\n  public renderArrayHeader(): string {\n    if (!this.items) {\n      return '';\n    }\n    const minItems = this.minItems ? ` - min ${this.minItems}` : '';\n    const prop = new SchemaProperty(this.logger, this.schema, 'items', this.items, this.propertyRenderer);\n    return `items(${prop.renderType()}${minItems}) - ${prop.renderTitle()}: ${prop.renderDescription()}`;\n  }\n\n  public get title(): Optional<string> {\n    return asString(this.rawProperty.title);\n  }\n\n  public get description(): Optional<string> {\n    return asString(this.rawProperty.description);\n  }\n\n  public get type(): Optional<string> {\n    return asString(this.rawProperty.type);\n  }\n\n  public get required(): Optional<JsonArray> {\n    return asJsonArray(this.rawProperty.required);\n  }\n\n  public get properties(): Optional<JsonMap> {\n    return asJsonMap(this.rawProperty.properties);\n  }\n\n  public get items(): Optional<JsonMap> {\n    return asJsonMap(this.rawProperty.items);\n  }\n\n  public get minItems(): Optional<number> {\n    return asNumber(this.rawProperty.minItems);\n  }\n\n  public getProperty(key: string): Optional<JsonMap> {\n    const properties = this.getProperties();\n    return asJsonMap(properties && properties[key]);\n  }\n\n  public getProperties(): Optional<JsonMap> {\n    return asJsonMap(this.rawProperty.properties);\n  }\n}\n\n/**\n * Get the referenced definition by following the reference path on the current schema.\n *\n * @param schema The source schema containing the property containing a `$ref` field.\n * @param property The property that contains the `$ref` field.\n */\nfunction resolveRef(schema: JsonMap, property: JsonMap): JsonMap | null {\n  const ref = property.$ref;\n  if (!ref || typeof ref !== 'string') {\n    return null;\n  }\n  return ref.split('/').reduce((prev, key) => {\n    const next = prev[key];\n    return key === '#' ? schema : isJsonMap(next) ? next : {};\n  }, property);\n}\n"],"names":["SfdxError","asJsonMap","asJsonArray","isJsonMap","asString","asNumber"],"mappings":"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"}