{"version":3,"file":"sfdxError.js","sources":["../src/sfdxError.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { NamedError } from '@salesforce/kit';\nimport { ensure, hasString, isString, JsonMap, Optional } from '@salesforce/ts-types';\nimport { Messages, Tokens } from './messages';\n\n/**\n * A class to manage all the keys and tokens for a message bundle to use with SfdxError.\n *\n * ```\n * SfdxError.create(new SfdxErrorConfig('MyPackage', 'apex', 'runTest').addAction('apexErrorAction1', [className]));\n * ```\n */\nexport class SfdxErrorConfig {\n  /**\n   * The name of the package\n   */\n  public readonly packageName: string;\n\n  /**\n   * The name of the bundle\n   */\n  public readonly bundleName: string;\n\n  /**\n   * The error key\n   */\n  public errorKey: string;\n\n  private errorTokens: Tokens;\n  private messages?: Messages;\n  private actions = new Map<string, Tokens>();\n\n  /**\n   * Create a new SfdxErrorConfig.\n   * @param packageName The name of the package.\n   * @param bundleName The message bundle.\n   * @param errorKey The error message key.\n   * @param errorTokens The tokens to use when getting the error message.\n   * @param actionKey The action message key.\n   * @param actionTokens The tokens to use when getting the action message(s).\n   */\n  constructor(\n    packageName: string,\n    bundleName: string,\n    errorKey: string,\n    errorTokens: Tokens = [],\n    actionKey?: string,\n    actionTokens?: Tokens\n  ) {\n    this.packageName = packageName;\n    this.bundleName = bundleName;\n    this.errorKey = errorKey;\n    this.errorTokens = errorTokens;\n    if (actionKey) this.addAction(actionKey, actionTokens);\n  }\n\n  /**\n   * Set the error key.\n   * @param key The key to set.\n   * @returns {SfdxErrorConfig} For convenience `this` object is returned.\n   */\n  public setErrorKey(key: string): SfdxErrorConfig {\n    this.errorKey = key;\n    return this;\n  }\n\n  /**\n   * Set the error tokens.\n   * @param tokens The tokens to set. For convenience `this` object is returned.\n   */\n  public setErrorTokens(tokens: Tokens): SfdxErrorConfig {\n    this.errorTokens = tokens;\n    return this;\n  }\n\n  /**\n   * Add an error action to assist the user with a resolution. For convenience `this` object is returned.\n   * @param actionKey The action key in the message bundle.\n   * @param actionTokens The action tokens for the string.\n   */\n  public addAction(actionKey: string, actionTokens: Tokens = []): SfdxErrorConfig {\n    this.actions.set(actionKey, actionTokens);\n    return this;\n  }\n\n  /**\n   * Load the messages using `Messages.loadMessages`. Returns the loaded messages.\n   */\n  public load(): Messages {\n    this.messages = Messages.loadMessages(this.packageName, this.bundleName);\n    return this.messages;\n  }\n\n  /**\n   * Get the error message using messages.getMessage.\n   * **Throws** If `errorMessages.load` was not called first.\n   */\n  public getError(): string {\n    if (!this.messages) {\n      throw new SfdxError('SfdxErrorConfig not loaded.');\n    }\n    return this.messages.getMessage(this.errorKey, this.errorTokens);\n  }\n\n  /**\n   * Get the action messages using messages.getMessage.\n   * **@throws** If `errorMessages.load` was not called first.\n   */\n  public getActions(): Optional<string[]> {\n    if (!this.messages) {\n      throw new SfdxError('SfdxErrorConfig not loaded.');\n    }\n\n    if (this.actions.size === 0) return;\n\n    const actions: string[] = [];\n    this.actions.forEach((tokens, key) => {\n      const messages = this.messages;\n      if (messages) {\n        actions.push(messages.getMessage(key, tokens));\n      }\n    });\n    return actions;\n  }\n\n  /**\n   * Remove all actions from this error config. Useful when reusing SfdxErrorConfig for other error messages within\n   * the same bundle. For convenience `this` object is returned.\n   */\n  public removeActions(): SfdxErrorConfig {\n    this.actions = new Map();\n    return this;\n  }\n}\n\n/**\n * A generalized sfdx error which also contains an action. The action is used in the\n * CLI to help guide users past the error.\n *\n * To throw an error in a synchronous function you must either pass the error message and actions\n * directly to the constructor, e.g.\n *\n * ```\n * // To load a message bundle:\n * Messages.importMessagesDirectory(__dirname);\n * this.messages = Messages.loadMessages('myPackageName', 'myBundleName');\n * // Note that __dirname should contain a messages folder.\n *\n * // To throw an error associated with the message from the bundle:\n * throw SfdxError.create('myPackageName', 'myBundleName', 'MyErrorMessageKey', [messageToken1]);\n *\n * // To throw a non-bundle based error:\n * throw new SfdxError(myErrMsg, 'MyErrorName');\n * ```\n */\nexport class SfdxError extends NamedError {\n  /**\n   * Create a new `SfdxError`.\n   * @param packageName The message package name used to create the `SfdxError`.\n   * @param bundleName The message bundle name used to create the `SfdxError`.\n   * @param key The key within the bundle for the message.\n   * @param tokens The values to use for message tokenization.\n   */\n  public static create(packageName: string, bundleName: string, key: string, tokens?: Tokens): SfdxError;\n\n  /**\n   * Create a new SfdxError.\n   * @param errorConfig The `SfdxErrorConfig` object used to create the SfdxError.\n   */\n  public static create(errorConfig: SfdxErrorConfig): SfdxError;\n\n  // The create implementation function.\n  public static create(\n    nameOrConfig: string | SfdxErrorConfig,\n    bundleName?: string,\n    key?: string,\n    tokens?: Tokens\n  ): SfdxError {\n    let errorConfig: SfdxErrorConfig;\n\n    if (isString(nameOrConfig)) {\n      errorConfig = new SfdxErrorConfig(nameOrConfig, ensure(bundleName), ensure(key), tokens);\n    } else {\n      errorConfig = nameOrConfig;\n    }\n\n    errorConfig.load();\n\n    return new SfdxError(errorConfig.getError(), errorConfig.errorKey, errorConfig.getActions());\n  }\n\n  /**\n   * Convert an Error to an SfdxError.\n   * @param err The error to convert.\n   */\n  public static wrap(err: Error | string): SfdxError {\n    if (isString(err)) {\n      return new SfdxError(err);\n    }\n    const sfdxError = new SfdxError(err.message, err.name);\n    if (sfdxError.stack) {\n      sfdxError.stack = sfdxError.stack.replace(`${err.name}: ${err.message}`, 'Outer stack:');\n      sfdxError.stack = `${err.stack}\\n${sfdxError.stack}`;\n    }\n\n    // If the original error has a code, use that instead of name.\n    if (hasString(err, 'code')) {\n      sfdxError.code = err.code;\n    }\n    return sfdxError;\n  }\n\n  /**\n   * The message string. Error.message\n   */\n  public message!: string;\n\n  /**\n   * Action messages. Hints to the users regarding what can be done to fix related issues.\n   */\n  public actions?: string[];\n\n  /**\n   * SfdxCommand can return this process exit code.\n   */\n  public exitCode: number;\n\n  /**\n   * The related command name for this error.\n   */\n  public commandName?: string;\n\n  // Additional data helpful for consumers of this error.  E.g., API call result\n  public data: any; // tslint:disable-line:no-any\n\n  /**\n   * Some errors support `error.code` instead of `error.name`. This keeps backwards compatability.\n   */\n  private _code?: string;\n\n  /**\n   * Create an SfdxError.\n   * @param message The error message.\n   * @param name The error name. Defaults to 'SfdxError'.\n   * @param actions The action message(s).\n   * @param exitCode The exit code which will be used by SfdxCommand.\n   * @param cause The underlying error that caused this error to be raised.\n   */\n  constructor(message: string, name?: string, actions?: string[], exitCode?: number, cause?: Error) {\n    super(name || 'SfdxError', message, cause);\n    this.actions = actions;\n    this.exitCode = exitCode || 1;\n  }\n\n  public get code() {\n    return this._code || this.name;\n  }\n\n  public set code(code: string) {\n    this._code = code;\n  }\n\n  /**\n   * Sets the name of the command. For convenience `this` object is returned.\n   * @param commandName The command name.\n   */\n  public setCommandName(commandName: string): SfdxError {\n    this.commandName = commandName;\n    return this;\n  }\n\n  /**\n   * An additional payload for the error. For convenience `this` object is returned.\n   * @param data The payload data.\n   */\n  public setData(data: unknown): SfdxError {\n    this.data = data;\n    return this;\n  }\n\n  /**\n   * Convert an {@link SfdxError} state to an object. Returns a plain object representing the state of this error.\n   */\n  public toObject(): JsonMap {\n    const obj: JsonMap = {\n      name: this.name,\n      message: this.message || this.name,\n      exitCode: this.exitCode,\n      actions: this.actions\n    };\n\n    if (this.commandName) {\n      obj.commandName = this.commandName;\n    }\n\n    if (this.data) {\n      obj.data = this.data;\n    }\n\n    return obj;\n  }\n}\n"],"names":["Messages","NamedError","isString","ensure","hasString"],"mappings":"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"}