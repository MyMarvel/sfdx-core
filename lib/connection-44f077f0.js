'use strict';

var index$1 = require('./index-aea73a28.js');
var index = require('./index-ffe6ca9f.js');
var _commonjsHelpers = require('./_commonjsHelpers-49936489.js');
var events$1 = require('events');
var util$3 = require('util');
var driver = require('./driver-39f7bd00.js');
var querystring = require('querystring');
var crypto = require('crypto');
var http = require('http');
var https = require('https');
var url = require('url');
var Stream$5 = require('stream');
var zlib = require('zlib');
var assert = require('assert');
var buffer = require('buffer');
var path = require('path');
var net = require('net');
var tls = require('tls');
var fs = require('fs');
var require$$0$4 = require('string_decoder');
var require$$4$1 = require('timers');
var Punycode = require('punycode');
var config_configAggregator = require('./config/configAggregator.js');
var logger$1 = require('./logger.js');
var sfdxError = require('./sfdxError.js');
var util_sfdc = require('./util/sfdc.js');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : { default: e };
}

var events__default = /*#__PURE__*/ _interopDefaultLegacy(events$1);
var util__default = /*#__PURE__*/ _interopDefaultLegacy(util$3);
var querystring__default = /*#__PURE__*/ _interopDefaultLegacy(querystring);
var crypto__default = /*#__PURE__*/ _interopDefaultLegacy(crypto);
var http__default = /*#__PURE__*/ _interopDefaultLegacy(http);
var https__default = /*#__PURE__*/ _interopDefaultLegacy(https);
var url__default = /*#__PURE__*/ _interopDefaultLegacy(url);
var Stream__default = /*#__PURE__*/ _interopDefaultLegacy(Stream$5);
var zlib__default = /*#__PURE__*/ _interopDefaultLegacy(zlib);
var assert__default = /*#__PURE__*/ _interopDefaultLegacy(assert);
var buffer__default = /*#__PURE__*/ _interopDefaultLegacy(buffer);
var path__default = /*#__PURE__*/ _interopDefaultLegacy(path);
var net__default = /*#__PURE__*/ _interopDefaultLegacy(net);
var tls__default = /*#__PURE__*/ _interopDefaultLegacy(tls);
var fs__default = /*#__PURE__*/ _interopDefaultLegacy(fs);
var require$$0__default = /*#__PURE__*/ _interopDefaultLegacy(require$$0$4);
var require$$4__default = /*#__PURE__*/ _interopDefaultLegacy(require$$4$1);
var Punycode__default = /*#__PURE__*/ _interopDefaultLegacy(Punycode);

/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash core -o ./dist/lodash.core.js`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

var core = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  (function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined$1;

    /** Used as the semantic version number. */
    var VERSION = '4.17.15';

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
      WRAP_PARTIAL_FLAG = 32;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

    /** Used to match HTML entities and HTML characters. */
    var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Detect free variable `global` from Node.js. */
    var freeGlobal =
      typeof _commonjsHelpers.commonjsGlobal == 'object' &&
      _commonjsHelpers.commonjsGlobal &&
      _commonjsHelpers.commonjsGlobal.Object === Object &&
      _commonjsHelpers.commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /*--------------------------------------------------------------------------*/

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      array.push.apply(array, values);
      return array;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum ? ((initAccum = false), value) : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return baseMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /*--------------------------------------------------------------------------*/

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
      objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Built-in value references. */
    var objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsFinite = root.isFinite,
      nativeKeys = overArg(Object.keys, Object),
      nativeMax = Math.max;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      return value instanceof LodashWrapper ? value : new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = undefined$1;
        return result;
      };
    })();

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
    }

    LodashWrapper.prototype = baseCreate(lodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      object[key] = value;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() {
        func.apply(undefined$1, args);
      }, wait);
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
        length = array.length;

      while (++index < length) {
        var value = array[index],
          current = iteratee(value);

        if (
          current != null &&
          (computed === undefined$1 ? current === current && !false : comparator(current, computed))
        ) {
          var computed = current,
            result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
        length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return baseFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      return objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    var baseIsArguments = noop;

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : baseGetTag(object),
        othTag = othIsArr ? arrayTag : baseGetTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

      stack || (stack = []);
      var objStack = find(stack, function(entry) {
        return entry[0] == object;
      });
      var othStack = find(stack, function(entry) {
        return entry[0] == other;
      });
      if (objStack && othStack) {
        return objStack[1] == other;
      }
      stack.push([object, other]);
      stack.push([other, object]);
      if (isSameTag && !objIsObj) {
        var result = objIsArr
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag);
        stack.pop();
        return result;
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

          var result = equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          stack.pop();
          return result;
        }
      }
      if (!isSameTag) {
        return false;
      }
      var result = equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      stack.pop();
      return result;
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(func) {
      if (typeof func == 'function') {
        return func;
      }
      if (func == null) {
        return identity;
      }
      return (typeof func == 'object' ? baseMatches : baseProperty)(func);
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var props = nativeKeys(source);
      return function(object) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length];
          if (
            !(key in object && baseIsEqual(source[key], object[key], COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG))
          ) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return reduce(
        props,
        function(result, key) {
          if (key in object) {
            result[key] = object[key];
          }
          return result;
        },
        {}
      );
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
        length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end - start) >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source) {
      return baseSlice(source, 0, source.length);
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      return reduce(
        actions,
        function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        },
        result
      );
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined$1,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = false;

        var othIsDefined = other !== undefined$1,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = false;

        if (
          (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive
        ) {
          return 1;
        }
        if (
          (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive
        ) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
        length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;

        if (newValue === undefined$1) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined$1;

        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined$1;

        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        var thisBinding = baseCreate(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate);
          collection = keys(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var isBind = bitmask & WRAP_BIND_FLAG,
        Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength),
          fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? [] : undefined$1;

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
          othValue = other[index];

        var compared;
        if (compared !== undefined$1) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (
            !baseSome(other, function(othValue, othIndex) {
              if (
                !indexOf(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))
              ) {
                return seen.push(othIndex);
              }
            })
          ) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == other + '';
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var result = true;

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
          othValue = other[key];

        var compared;
        // Recursively compare objects (susceptible to call stack limits).
        if (
          !(compared === undefined$1
            ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)
            : compared)
        ) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
          othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (
          objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(
            typeof objCtor == 'function' &&
            objCtor instanceof objCtor &&
            typeof othCtor == 'function' &&
            othCtor instanceof othCtor
          )
        ) {
          result = false;
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined$1, flatten));
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return (
        !!length &&
        (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length)
      );
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (
        type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object
      ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = identity;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      return baseFilter(array, Boolean);
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
        array = arguments[0],
        index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, baseIteratee(predicate), index);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array && array.length ? array[0] : undefined$1;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else {
        fromIndex = 0;
      }
      var index = (fromIndex || 0) - 1,
        isReflexive = value === value;

      while (++index < length) {
        var other = array[index];
        if (isReflexive ? other === value : other !== other) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      start = start == null ? 0 : +start;
      end = end === undefined$1 ? length : +end;
      return length ? baseSlice(array, start, end) : [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      predicate = guard ? undefined$1 : predicate;
      return baseEvery(collection, baseIteratee(predicate));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      return baseFilter(collection, baseIteratee(predicate));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      return baseEach(collection, baseIteratee(iteratee));
    }

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      return baseMap(collection, baseIteratee(iteratee));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      return baseReduce(collection, baseIteratee(iteratee), accumulator, arguments.length < 3, baseEach);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      collection = isArrayLike(collection) ? collection : nativeKeys(collection);
      return collection.length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      predicate = guard ? undefined$1 : predicate;
      return baseSome(collection, baseIteratee(predicate));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    function sortBy(collection, iteratee) {
      var index = 0;
      iteratee = baseIteratee(iteratee);

      return baseMap(
        baseMap(collection, function(value, key, collection) {
          return { value: value, index: index++, criteria: iteratee(value, key, collection) };
        }).sort(function(object, other) {
          return compareAscending(object.criteria, other.criteria) || object.index - other.index;
        }),
        baseProperty('value')
      );
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      return createPartial(func, WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG, thisArg, partials);
    });

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      if (!isObject(value)) {
        return value;
      }
      return isArray(value) ? copyArray(value) : copyObject(value, nativeKeys(value));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments()
      ? baseIsArguments
      : function(value) {
          return (
            isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee')
          );
        };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = baseIsDate;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))) {
        return !value.length;
      }
      return !nativeKeys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = baseIsRegExp;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!isArrayLike(value)) {
        return values(value);
      }
      return value.length ? copyArray(value) : [];
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    var toInteger = Number;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    var toNumber = Number;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      if (typeof value == 'string') {
        return value;
      }
      return value == null ? '' : value + '';
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      copyObject(source, nativeKeys(source), object);
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, nativeKeysIn(source), object);
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : assign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined$1;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined$1 || (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasOwnProperty.call(object, path);
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = nativeKeys;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    var keysIn = nativeKeysIn;

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var value = object == null ? undefined$1 : object[path];
      if (value === undefined$1) {
        value = defaultValue;
      }
      return isFunction(value) ? value.call(object) : value;
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    /*------------------------------------------------------------------------*/

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    var iteratee = baseIteratee;

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(assign({}, source));
    }

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
        methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
        isFunc = isFunction(object);

      baseEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                actions = (result.__actions__ = copyArray(this.__actions__));

              actions.push({ func: func, args: arguments, thisArg: object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.assignIn = assignIn;
    lodash.before = before;
    lodash.bind = bind;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.create = create;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.iteratee = iteratee;
    lodash.keys = keys;
    lodash.map = map;
    lodash.matches = matches;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.once = once;
    lodash.pick = pick;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.values = values;

    // Add aliases.
    lodash.extend = assignIn;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.clone = clone;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.forEach = forEach;
    lodash.has = has;
    lodash.head = head;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.last = last;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.reduce = reduce;
    lodash.result = result;
    lodash.size = size;
    lodash.some = some;
    lodash.uniqueId = uniqueId;

    // Add aliases.
    lodash.each = forEach;
    lodash.first = head;

    mixin(
      lodash,
      (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      })(),
      { chain: false }
    );

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Add `Array` methods to `lodash.prototype`.
    baseEach(['pop', 'join', 'replace', 'reverse', 'split', 'push', 'shift', 'sort', 'splice', 'unshift'], function(
      methodName
    ) {
      var func = (/^(?:replace|split)$/.test(methodName) ? String.prototype : arrayProto)[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:pop|join|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    /*--------------------------------------------------------------------------*/

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = lodash)._ = lodash;
      // Export for CommonJS support.
      freeExports._ = lodash;
    } else {
      // Export to the global object.
      root._ = lodash;
    }
  }.call(_commonjsHelpers.commonjsGlobal));
});

var VERSION = '1.9.3';

var inherits_browser = _commonjsHelpers.createCommonjsModule(function(module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

var inherits = _commonjsHelpers.createCommonjsModule(function(module) {
  try {
    var util = util__default['default'];
    /* istanbul ignore next */
    if (typeof util.inherits !== 'function') throw '';
    module.exports = util.inherits;
  } catch (e) {
    /* istanbul ignore next */
    module.exports = inherits_browser;
  }
});

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.

// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

var core$1 = Promise$1;

function Promise$1(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError("Promise constructor's argument is not a function");
  }
  this._40 = 0;
  this._65 = 0;
  this._55 = null;
  this._72 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise$1._37 = null;
Promise$1._87 = null;
Promise$1._61 = noop;

Promise$1.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise$1) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise$1(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function(resolve, reject) {
    var res = new Promise$1(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
}
function handle(self, deferred) {
  while (self._65 === 3) {
    self = self._55;
  }
  if (Promise$1._37) {
    Promise$1._37(self);
  }
  if (self._65 === 0) {
    if (self._40 === 0) {
      self._40 = 1;
      self._72 = deferred;
      return;
    }
    if (self._40 === 1) {
      self._40 = 2;
      self._72 = [self._72, deferred];
      return;
    }
    self._72.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  driver.raw(function() {
    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._65 === 1) {
        resolve(deferred.promise, self._55);
      } else {
        reject(deferred.promise, self._55);
      }
      return;
    }
    var ret = tryCallOne(cb, self._55);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }
  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (then === self.then && newValue instanceof Promise$1) {
      self._65 = 3;
      self._55 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._65 = 1;
  self._55 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._65 = 2;
  self._55 = newValue;
  if (Promise$1._87) {
    Promise$1._87(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._40 === 1) {
    handle(self, self._72);
    self._72 = null;
  }
  if (self._40 === 2) {
    for (var i = 0; i < self._72.length; i++) {
      handle(self, self._72[i]);
    }
    self._72 = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(
    fn,
    function(value) {
      if (done) return;
      done = true;
      resolve(promise, value);
    },
    function(reason) {
      if (done) return;
      done = true;
      reject(promise, reason);
    }
  );
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

//This file contains the ES6 extensions to the core Promises/A+ API

var es6Extensions = core$1;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new core$1(core$1._61);
  p._65 = 1;
  p._55 = value;
  return p;
}
core$1.resolve = function(value) {
  if (value instanceof core$1) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new core$1(then.bind(value));
      }
    } catch (ex) {
      return new core$1(function(resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

core$1.all = function(arr) {
  var args = Array.prototype.slice.call(arr);

  return new core$1(function(resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof core$1 && val.then === core$1.prototype.then) {
          while (val._65 === 3) {
            val = val._55;
          }
          if (val._65 === 1) return res(i, val._55);
          if (val._65 === 2) reject(val._55);
          val.then(function(val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new core$1(then.bind(val));
            p.then(function(val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

core$1.reject = function(value) {
  return new core$1(function(resolve, reject) {
    reject(value);
  });
};

core$1.race = function(values) {
  return new core$1(function(resolve, reject) {
    values.forEach(function(value) {
      core$1.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

core$1.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

/*global process*/

/**
 * @callback ResolvedCallback
 * @param {T} result - Resolved value
 * @returns {S}
 * @template T,S
 */

/**
 * @callback RejectedCallback
 * @param {Error} reason - Rejected reason
 * @returns {S}
 * @template S
 */

/**
 * @callback ResolveCallback
 * @param {T} result
 * @template T
 */

/**
 * @callback RejectedCallback
 * @param {Error} reason - Rejected reason
 * @returns {S}
 * @template S
 */

/**
 * @callback PromiseCallback
 * @param {ResolveCallback.<T>} resolve
 * @param {RejectCallback} reject
 * @template T
 */

/**
 * Promise class with a little extension
 *
 * @class Promise
 * @constructor
 * @param {PromiseCallback.<T>}
 * @template T
 */

/**
 * The "then" method from the Promises/A+ specification
 *
 * @method Promise#then
 * @param {FulfilledCallback.<T, S1>} [onFulfilled]
 * @param {RejectedCallback.<S2>} [onRejected]
 * @returns {Promise.<S1|S2>}
 */

/**
 * Call "then" using given node-style callback function.
 * This is basically same as "nodeify" except that it always return the original promise
 *
 * @method Promise#thenCall
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Promise}
 */
es6Extensions.prototype.thenCall = function(callback) {
  if (core.isFunction(callback)) {
    this.then(
      function(res) {
        process.nextTick(function() {
          callback(null, res);
        });
      },
      function(err) {
        process.nextTick(function() {
          callback(err);
        });
      }
    );
  }
  return this;
};

/**
 * A sugar method, equivalent to promise.then(undefined, onRejected).
 *
 * @method Promise#catch
 * @param {RejectedCallback.<S>} onRejected
 * @returns {Promise.<S>}
 */

/**
 * Synonym of Promise#catch
 *
 * @method Promise#fail
 * @param {RejectedCallback.<S>} onRejected
 * @returns {Promise.<S>}
 */
es6Extensions.prototype.fail = es6Extensions.prototype['catch'];

/**
 * Returns resolving promise with given reason
 *
 * @method Promise.resolve
 * @param {*} result - Resolved value
 * @returns {Promise}
 */

/**
 * Returns rejecting promise with given reason
 *
 * @method Promise.reject
 * @param {Error} reason - Rejecting reason
 * @returns {Promise}
 */

/**
 * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise,
 * or is rejected with the same rejection reason as the first promise to be rejected.
 *
 * @method Promise.all
 * @param {Array.<Promise.<*>|*>} promises
 * @returns {Promise.<Array.<*>>}
 */

/**
 * Returns a deferred object
 *
 * @method Promise.defer
 * @returns {Deferred}
 */
es6Extensions.defer = function() {
  return new Deferred();
};

/**
 * Deferred object
 *
 * @protected
 * @constructor
 */
var Deferred = function() {
  var self = this;
  this.promise = new es6Extensions(function(resolve, reject) {
    self.resolve = resolve;
    self.reject = reject;
  });
};

/**
 * Resolve promise
 * @method Deferred#resolve
 * @param {*} result - Resolving result
 */

/**
 * Reject promise
 * @method Deferred#reject
 * @param {Error} error - Rejecting reason
 */

/**
 *
 */
var promise = es6Extensions;

var logger = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * @protected
   * @class
   * @constructor
   * @param {String|Number} logLevel - Log level
   */
  var Logger = (module.exports = function(logLevel) {
    if (typeof logLevel === 'string') {
      logLevel = LogLevels[logLevel];
    }
    if (!logLevel) {
      logLevel = LogLevels.INFO;
    }
    this._logLevel = logLevel;
  });

  /**
   * @memberof Logger
   */
  var LogLevels = (Logger.LogLevels = {
    DEBUG: 1,
    INFO: 2,
    WARN: 3,
    ERROR: 4,
    FATAL: 5
  });

  /**
   * Output log
   *
   * @param {String} level - Logging target level
   * @param {String} message - Message to log
   */
  Logger.prototype.log = function(level, message) {
    if (this._logLevel <= level) {
      if (level < LogLevels.ERROR) {
        console.log(message);
      } else {
        console.error(message);
      }
    }
  };

  for (var level in LogLevels) {
    Logger.prototype[level.toLowerCase()] = createLoggerFunction(LogLevels[level]);
  }

  function createLoggerFunction(level) {
    return function(message) {
      this.log(level, message);
    };
  }
});

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
  if (typeof Array.isArray === 'function') {
    return Array.isArray(arr);
  }

  return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
  if (!obj || toStr.call(obj) !== '[object Object]') {
    return false;
  }

  var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  var hasIsPrototypeOf =
    obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  // Not own constructor property must be Object
  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    return false;
  }

  // Own properties are enumerated firstly, so to speed up,
  // if last one is own, then all properties are own.
  var key;
  for (key in obj) {
    /**/
  }

  return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
  if (defineProperty && options.name === '__proto__') {
    defineProperty(target, options.name, {
      enumerable: true,
      configurable: true,
      value: options.newValue,
      writable: true
    });
  } else {
    target[options.name] = options.newValue;
  }
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
  if (name === '__proto__') {
    if (!hasOwn.call(obj, name)) {
      return void 0;
    } else if (gOPD) {
      // In early versions of node, obj['__proto__'] is buggy when obj has
      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
      return gOPD(obj, name).value;
    }
  }

  return obj[name];
};

var extend = function extend() {
  var options, name, src, copy, copyIsArray, clone;
  var target = arguments[0];
  var i = 1;
  var length = arguments.length;
  var deep = false;

  // Handle a deep copy situation
  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    // skip the boolean and the target
    i = 2;
  }
  if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
    target = {};
  }

  for (; i < length; ++i) {
    options = arguments[i];
    // Only deal with non-null/undefined values
    if (options != null) {
      // Extend the base object
      for (name in options) {
        src = getProperty(target, name);
        copy = getProperty(options, name);

        // Prevent never-ending loop
        if (target !== copy) {
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && isArray(src) ? src : [];
            } else {
              clone = src && isPlainObject(src) ? src : {};
            }

            // Never move original objects, clone them
            setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

            // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            setProperty(target, { name: name, newValue: copy });
          }
        }
      }
    }
  }

  // Return the modified object
  return target;
};

var Cookie = driver.cookie.Cookie;
var CookieJar = driver.cookie.CookieJar;

var parse = function(str) {
  if (str && str.uri) {
    str = str.uri;
  }
  if (typeof str !== 'string') {
    throw new Error('The cookie function only accepts STRING as param');
  }
  return Cookie.parse(str, { loose: true });
};

// Adapt the sometimes-Async api of tough.CookieJar to our requirements
function RequestJar(store) {
  var self = this;
  self._jar = new CookieJar(store, { looseMode: true });
}
RequestJar.prototype.setCookie = function(cookieOrStr, uri, options) {
  var self = this;
  return self._jar.setCookieSync(cookieOrStr, uri, options || {});
};
RequestJar.prototype.getCookieString = function(uri) {
  var self = this;
  return self._jar.getCookieStringSync(uri);
};
RequestJar.prototype.getCookies = function(uri) {
  var self = this;
  return self._jar.getCookiesSync(uri);
};

var jar = function(store) {
  return new RequestJar(store);
};

var cookies = {
  parse: parse,
  jar: jar
};

var stringify_1 = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  exports = module.exports = stringify;
  exports.getSerialize = serializer;

  function stringify(obj, replacer, spaces, cycleReplacer) {
    return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
  }

  function serializer(replacer, cycleReplacer) {
    var stack = [],
      keys = [];

    if (cycleReplacer == null)
      cycleReplacer = function(key, value) {
        if (stack[0] === value) return '[Circular ~]';
        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
      };

    return function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
        if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);
      } else stack.push(value);

      return replacer == null ? value : replacer.call(this, key, value);
    };
  }
});

var Buffer$1 = driver.safeBuffer.Buffer;

var defer = typeof setImmediate === 'undefined' ? process.nextTick : setImmediate;

function paramsHaveRequestBody(params) {
  return (
    params.body || params.requestBodyStream || (params.json && typeof params.json !== 'boolean') || params.multipart
  );
}

function safeStringify(obj, replacer) {
  var ret;
  try {
    ret = JSON.stringify(obj, replacer);
  } catch (e) {
    ret = stringify_1(obj, replacer);
  }
  return ret;
}

function md5(str) {
  return crypto__default['default']
    .createHash('md5')
    .update(str)
    .digest('hex');
}

function isReadStream(rs) {
  return rs.readable && rs.path && rs.mode;
}

function toBase64(str) {
  return Buffer$1.from(str || '', 'utf8').toString('base64');
}

function copy(obj) {
  var o = {};
  Object.keys(obj).forEach(function(i) {
    o[i] = obj[i];
  });
  return o;
}

function version() {
  var numbers = process.version.replace('v', '').split('.');
  return {
    major: parseInt(numbers[0], 10),
    minor: parseInt(numbers[1], 10),
    patch: parseInt(numbers[2], 10)
  };
}

var paramsHaveRequestBody_1 = paramsHaveRequestBody;
var safeStringify_1 = safeStringify;
var md5_1 = md5;
var isReadStream_1 = isReadStream;
var toBase64_1 = toBase64;
var copy_1 = copy;
var version_1 = version;
var defer_1 = defer;

var helpers = {
  paramsHaveRequestBody: paramsHaveRequestBody_1,
  safeStringify: safeStringify_1,
  md5: md5_1,
  isReadStream: isReadStream_1,
  toBase64: toBase64_1,
  copy: copy_1,
  version: version_1,
  defer: defer_1
};

/*!
 *  Copyright 2010 LearnBoost <dev@learnboost.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Module dependencies.
 */

var parse$1 = url__default['default'].parse;
/**
 * Valid keys.
 */

var keys = [
  'acl',
  'location',
  'logging',
  'notification',
  'partNumber',
  'policy',
  'requestPayment',
  'torrent',
  'uploadId',
  'uploads',
  'versionId',
  'versioning',
  'versions',
  'website'
];

/**
 * Return an "Authorization" header value with the given `options`
 * in the form of "AWS <key>:<signature>"
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function authorization(options) {
  return 'AWS ' + options.key + ':' + sign(options);
}

var awsSign2 = authorization;
var authorization_1 = authorization;

/**
 * Simple HMAC-SHA1 Wrapper
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function hmacSha1(options) {
  return crypto__default['default']
    .createHmac('sha1', options.secret)
    .update(options.message)
    .digest('base64');
}

var hmacSha1_1 = hmacSha1;

/**
 * Create a base64 sha1 HMAC for `options`.
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function sign(options) {
  options.message = stringToSign(options);
  return hmacSha1(options);
}
var sign_1 = sign;

/**
 * Create a base64 sha1 HMAC for `options`.
 *
 * Specifically to be used with S3 presigned URLs
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function signQuery(options) {
  options.message = queryStringToSign(options);
  return hmacSha1(options);
}
var signQuery_1 = signQuery;

/**
 * Return a string for sign() with the given `options`.
 *
 * Spec:
 *
 *    <verb>\n
 *    <md5>\n
 *    <content-type>\n
 *    <date>\n
 *    [headers\n]
 *    <resource>
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function stringToSign(options) {
  var headers = options.amazonHeaders || '';
  if (headers) headers += '\n';
  var r = [
    options.verb,
    options.md5,
    options.contentType,
    options.date ? options.date.toUTCString() : '',
    headers + options.resource
  ];
  return r.join('\n');
}
var stringToSign_1 = stringToSign;

/**
 * Return a string for sign() with the given `options`, but is meant exclusively
 * for S3 presigned URLs
 *
 * Spec:
 *
 *    <date>\n
 *    <resource>
 *
 * @param {Object} options
 * @return {String}
 * @api private
 */

function queryStringToSign(options) {
  return 'GET\n\n\n' + options.date + '\n' + options.resource;
}
var queryStringToSign_1 = queryStringToSign;

/**
 * Perform the following:
 *
 *  - ignore non-amazon headers
 *  - lowercase fields
 *  - sort lexicographically
 *  - trim whitespace between ":"
 *  - join with newline
 *
 * @param {Object} headers
 * @return {String}
 * @api private
 */

function canonicalizeHeaders(headers) {
  var buf = [],
    fields = Object.keys(headers);
  for (var i = 0, len = fields.length; i < len; ++i) {
    var field = fields[i],
      val = headers[field],
      field = field.toLowerCase();
    if (0 !== field.indexOf('x-amz')) continue;
    buf.push(field + ':' + val);
  }
  return buf.sort().join('\n');
}
var canonicalizeHeaders_1 = canonicalizeHeaders;

/**
 * Perform the following:
 *
 *  - ignore non sub-resources
 *  - sort lexicographically
 *
 * @param {String} resource
 * @return {String}
 * @api private
 */

function canonicalizeResource(resource) {
  var url = parse$1(resource, true),
    path = url.pathname,
    buf = [];
  Object.keys(url.query).forEach(function(key) {
    if (!~keys.indexOf(key)) return;
    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);
    buf.push(key + val);
  });

  return path + (buf.length ? '?' + buf.sort().join('&') : '');
}
var canonicalizeResource_1 = canonicalizeResource;
awsSign2.authorization = authorization_1;
awsSign2.hmacSha1 = hmacSha1_1;
awsSign2.sign = sign_1;
awsSign2.signQuery = signQuery_1;
awsSign2.stringToSign = stringToSign_1;
awsSign2.queryStringToSign = queryStringToSign_1;
awsSign2.canonicalizeHeaders = canonicalizeHeaders_1;
awsSign2.canonicalizeResource = canonicalizeResource_1;

var lru = function(size) {
  return new LruCache(size);
};

function LruCache(size) {
  this.capacity = size | 0;
  this.map = Object.create(null);
  this.list = new DoublyLinkedList();
}

LruCache.prototype.get = function(key) {
  var node = this.map[key];
  if (node == null) return undefined;
  this.used(node);
  return node.val;
};

LruCache.prototype.set = function(key, val) {
  var node = this.map[key];
  if (node != null) {
    node.val = val;
  } else {
    if (!this.capacity) this.prune();
    if (!this.capacity) return false;
    node = new DoublyLinkedNode(key, val);
    this.map[key] = node;
    this.capacity--;
  }
  this.used(node);
  return true;
};

LruCache.prototype.used = function(node) {
  this.list.moveToFront(node);
};

LruCache.prototype.prune = function() {
  var node = this.list.pop();
  if (node != null) {
    delete this.map[node.key];
    this.capacity++;
  }
};

function DoublyLinkedList() {
  this.firstNode = null;
  this.lastNode = null;
}

DoublyLinkedList.prototype.moveToFront = function(node) {
  if (this.firstNode == node) return;

  this.remove(node);

  if (this.firstNode == null) {
    this.firstNode = node;
    this.lastNode = node;
    node.prev = null;
    node.next = null;
  } else {
    node.prev = null;
    node.next = this.firstNode;
    node.next.prev = node;
    this.firstNode = node;
  }
};

DoublyLinkedList.prototype.pop = function() {
  var lastNode = this.lastNode;
  if (lastNode != null) {
    this.remove(lastNode);
  }
  return lastNode;
};

DoublyLinkedList.prototype.remove = function(node) {
  if (this.firstNode == node) {
    this.firstNode = node.next;
  } else if (node.prev != null) {
    node.prev.next = node.next;
  }
  if (this.lastNode == node) {
    this.lastNode = node.prev;
  } else if (node.next != null) {
    node.next.prev = node.prev;
  }
};

function DoublyLinkedNode(key, val) {
  this.key = key;
  this.val = val;
  this.prev = null;
  this.next = null;
}

var aws4_1 = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  var aws4 = exports,
    credentialsCache = lru(1000);

  // http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html

  function hmac(key, string, encoding) {
    return crypto__default['default']
      .createHmac('sha256', key)
      .update(string, 'utf8')
      .digest(encoding);
  }

  function hash(string, encoding) {
    return crypto__default['default']
      .createHash('sha256')
      .update(string, 'utf8')
      .digest(encoding);
  }

  // This function assumes the string has already been percent encoded
  function encodeRfc3986(urlEncodedString) {
    return urlEncodedString.replace(/[!'()*]/g, function(c) {
      return (
        '%' +
        c
          .charCodeAt(0)
          .toString(16)
          .toUpperCase()
      );
    });
  }

  // request: { path | body, [host], [method], [headers], [service], [region] }
  // credentials: { accessKeyId, secretAccessKey, [sessionToken] }
  function RequestSigner(request, credentials) {
    if (typeof request === 'string') request = url__default['default'].parse(request);

    var headers = (request.headers = request.headers || {}),
      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host);

    this.request = request;
    this.credentials = credentials || this.defaultCredentials();

    this.service = request.service || hostParts[0] || '';
    this.region = request.region || hostParts[1] || 'us-east-1';

    // SES uses a different domain from the service name
    if (this.service === 'email') this.service = 'ses';

    if (!request.method && request.body) request.method = 'POST';

    if (!headers.Host && !headers.host) {
      headers.Host = request.hostname || request.host || this.createHost();

      // If a port is specified explicitly, use it as is
      if (request.port) headers.Host += ':' + request.port;
    }
    if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;

    this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT';
  }

  RequestSigner.prototype.matchHost = function(host) {
    var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com(\.cn)?$/);
    var hostParts = (match || []).slice(1, 3);

    // ES's hostParts are sometimes the other way round, if the value that is expected
    // to be region equals ‘es’ switch them back
    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
    if (hostParts[1] === 'es') hostParts = hostParts.reverse();

    return hostParts;
  };

  // http://docs.aws.amazon.com/general/latest/gr/rande.html
  RequestSigner.prototype.isSingleRegion = function() {
    // Special case for S3 and SimpleDB in us-east-1
    if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true;

    return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts'].indexOf(this.service) >= 0;
  };

  RequestSigner.prototype.createHost = function() {
    var region = this.isSingleRegion()
        ? ''
        : (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,
      service = this.service === 'ses' ? 'email' : this.service;
    return service + region + '.amazonaws.com';
  };

  RequestSigner.prototype.prepareRequest = function() {
    this.parsePath();

    var request = this.request,
      headers = request.headers,
      query;

    if (request.signQuery) {
      this.parsedPath.query = query = this.parsedPath.query || {};

      if (this.credentials.sessionToken) query['X-Amz-Security-Token'] = this.credentials.sessionToken;

      if (this.service === 's3' && !query['X-Amz-Expires']) query['X-Amz-Expires'] = 86400;

      if (query['X-Amz-Date']) this.datetime = query['X-Amz-Date'];
      else query['X-Amz-Date'] = this.getDateTime();

      query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
      query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();
      query['X-Amz-SignedHeaders'] = this.signedHeaders();
    } else {
      if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
        if (request.body && !headers['Content-Type'] && !headers['content-type'])
          headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';

        if (request.body && !headers['Content-Length'] && !headers['content-length'])
          headers['Content-Length'] = Buffer.byteLength(request.body);

        if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token'])
          headers['X-Amz-Security-Token'] = this.credentials.sessionToken;

        if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256'])
          headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex');

        if (headers['X-Amz-Date'] || headers['x-amz-date'])
          this.datetime = headers['X-Amz-Date'] || headers['x-amz-date'];
        else headers['X-Amz-Date'] = this.getDateTime();
      }

      delete headers.Authorization;
      delete headers.authorization;
    }
  };

  RequestSigner.prototype.sign = function() {
    if (!this.parsedPath) this.prepareRequest();

    if (this.request.signQuery) {
      this.parsedPath.query['X-Amz-Signature'] = this.signature();
    } else {
      this.request.headers.Authorization = this.authHeader();
    }

    this.request.path = this.formatPath();

    return this.request;
  };

  RequestSigner.prototype.getDateTime = function() {
    if (!this.datetime) {
      var headers = this.request.headers,
        date = new Date(headers.Date || headers.date || new Date());

      this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '');

      // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
      if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);
    }
    return this.datetime;
  };

  RequestSigner.prototype.getDate = function() {
    return this.getDateTime().substr(0, 8);
  };

  RequestSigner.prototype.authHeader = function() {
    return [
      'AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(),
      'SignedHeaders=' + this.signedHeaders(),
      'Signature=' + this.signature()
    ].join(', ');
  };

  RequestSigner.prototype.signature = function() {
    var date = this.getDate(),
      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
      kDate,
      kRegion,
      kService,
      kCredentials = credentialsCache.get(cacheKey);
    if (!kCredentials) {
      kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);
      kRegion = hmac(kDate, this.region);
      kService = hmac(kRegion, this.service);
      kCredentials = hmac(kService, 'aws4_request');
      credentialsCache.set(cacheKey, kCredentials);
    }
    return hmac(kCredentials, this.stringToSign(), 'hex');
  };

  RequestSigner.prototype.stringToSign = function() {
    return ['AWS4-HMAC-SHA256', this.getDateTime(), this.credentialString(), hash(this.canonicalString(), 'hex')].join(
      '\n'
    );
  };

  RequestSigner.prototype.canonicalString = function() {
    if (!this.parsedPath) this.prepareRequest();

    var pathStr = this.parsedPath.path,
      query = this.parsedPath.query,
      headers = this.request.headers,
      queryStr = '',
      normalizePath = this.service !== 's3',
      decodePath = this.service === 's3' || this.request.doNotEncodePath,
      decodeSlashesInPath = this.service === 's3',
      firstValOnly = this.service === 's3',
      bodyHash;

    if (this.service === 's3' && this.request.signQuery) {
      bodyHash = 'UNSIGNED-PAYLOAD';
    } else if (this.isCodeCommitGit) {
      bodyHash = '';
    } else {
      bodyHash =
        headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] || hash(this.request.body || '', 'hex');
    }

    if (query) {
      var reducedQuery = Object.keys(query).reduce(function(obj, key) {
        if (!key) return obj;
        obj[key] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key].slice().sort();
        return obj;
      }, {});
      var encodedQueryPieces = [];
      Object.keys(reducedQuery).forEach(function(key) {
        var encodedPrefix = encodeURIComponent(key) + '=';
        if (!Array.isArray(reducedQuery[key])) {
          encodedQueryPieces.push(encodeRfc3986(encodedPrefix + encodeURIComponent(reducedQuery[key])));
        } else {
          reducedQuery[key].forEach(function(val) {
            encodedQueryPieces.push(encodeRfc3986(encodedPrefix + encodeURIComponent(val)));
          });
        }
      });
      queryStr = encodedQueryPieces.sort().join('&');
    }
    if (pathStr !== '/') {
      if (normalizePath) pathStr = pathStr.replace(/\/{2,}/g, '/');
      pathStr = pathStr
        .split('/')
        .reduce(function(path, piece) {
          if (normalizePath && piece === '..') {
            path.pop();
          } else if (!normalizePath || piece !== '.') {
            if (decodePath) piece = decodeURIComponent(piece).replace(/\+/g, ' ');
            path.push(encodeRfc3986(encodeURIComponent(piece)));
          }
          return path;
        }, [])
        .join('/');
      if (pathStr[0] !== '/') pathStr = '/' + pathStr;
      if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');
    }

    return [
      this.request.method || 'GET',
      pathStr,
      queryStr,
      this.canonicalHeaders() + '\n',
      this.signedHeaders(),
      bodyHash
    ].join('\n');
  };

  RequestSigner.prototype.canonicalHeaders = function() {
    var headers = this.request.headers;
    function trimAll(header) {
      return header
        .toString()
        .trim()
        .replace(/\s+/g, ' ');
    }
    return Object.keys(headers)
      .sort(function(a, b) {
        return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
      })
      .map(function(key) {
        return key.toLowerCase() + ':' + trimAll(headers[key]);
      })
      .join('\n');
  };

  RequestSigner.prototype.signedHeaders = function() {
    return Object.keys(this.request.headers)
      .map(function(key) {
        return key.toLowerCase();
      })
      .sort()
      .join(';');
  };

  RequestSigner.prototype.credentialString = function() {
    return [this.getDate(), this.region, this.service, 'aws4_request'].join('/');
  };

  RequestSigner.prototype.defaultCredentials = function() {
    var env = process.env;
    return {
      accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
      secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
      sessionToken: env.AWS_SESSION_TOKEN
    };
  };

  RequestSigner.prototype.parsePath = function() {
    var path = this.request.path || '/';

    // S3 doesn't always encode characters > 127 correctly and
    // all services don't encode characters > 255 correctly
    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
    if (/[^0-9A-Za-z;,/?:@&=+$\-_.!~*'()#%]/.test(path)) {
      path = encodeURI(decodeURI(path));
    }

    var queryIx = path.indexOf('?'),
      query = null;

    if (queryIx >= 0) {
      query = querystring__default['default'].parse(path.slice(queryIx + 1));
      path = path.slice(0, queryIx);
    }

    this.parsedPath = {
      path: path,
      query: query
    };
  };

  RequestSigner.prototype.formatPath = function() {
    var path = this.parsedPath.path,
      query = this.parsedPath.query;

    if (!query) return path;

    // Services don't support empty query string keys
    if (query[''] != null) delete query[''];

    return path + '?' + encodeRfc3986(querystring__default['default'].stringify(query));
  };

  aws4.RequestSigner = RequestSigner;

  aws4.sign = function(request, credentials) {
    return new RequestSigner(request, credentials).sign();
  };
});

// Copyright (c) 2012, Mark Cavage. All rights reserved.
// Copyright 2015 Joyent, Inc.

var Stream = Stream__default['default'].Stream;

///--- Globals

/* JSSTYLED */
var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;

///--- Internal

function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function _toss(name, expected, oper, arg, actual) {
  throw new assert__default['default'].AssertionError({
    message: util__default['default'].format('%s (%s) is required', name, expected),
    actual: actual === undefined ? typeof arg : actual(arg),
    expected: expected,
    operator: oper || '===',
    stackStartFunction: _toss.caller
  });
}

function _getClass(arg) {
  return Object.prototype.toString.call(arg).slice(8, -1);
}

function noop$1() {
  // Why even bother with asserts?
}

///--- Exports

var types = {
  bool: {
    check: function(arg) {
      return typeof arg === 'boolean';
    }
  },
  func: {
    check: function(arg) {
      return typeof arg === 'function';
    }
  },
  string: {
    check: function(arg) {
      return typeof arg === 'string';
    }
  },
  object: {
    check: function(arg) {
      return typeof arg === 'object' && arg !== null;
    }
  },
  number: {
    check: function(arg) {
      return typeof arg === 'number' && !isNaN(arg);
    }
  },
  finite: {
    check: function(arg) {
      return typeof arg === 'number' && !isNaN(arg) && isFinite(arg);
    }
  },
  buffer: {
    check: function(arg) {
      return Buffer.isBuffer(arg);
    },
    operator: 'Buffer.isBuffer'
  },
  array: {
    check: function(arg) {
      return Array.isArray(arg);
    },
    operator: 'Array.isArray'
  },
  stream: {
    check: function(arg) {
      return arg instanceof Stream;
    },
    operator: 'instanceof',
    actual: _getClass
  },
  date: {
    check: function(arg) {
      return arg instanceof Date;
    },
    operator: 'instanceof',
    actual: _getClass
  },
  regexp: {
    check: function(arg) {
      return arg instanceof RegExp;
    },
    operator: 'instanceof',
    actual: _getClass
  },
  uuid: {
    check: function(arg) {
      return typeof arg === 'string' && UUID_REGEXP.test(arg);
    },
    operator: 'isUUID'
  }
};

function _setExports(ndebug) {
  var keys = Object.keys(types);
  var out;

  /* re-export standard assert */
  if (process.env.NODE_NDEBUG) {
    out = noop$1;
  } else {
    out = function(arg, msg) {
      if (!arg) {
        _toss(msg, 'true', arg);
      }
    };
  }

  /* standard checks */
  keys.forEach(function(k) {
    if (ndebug) {
      out[k] = noop$1;
      return;
    }
    var type = types[k];
    out[k] = function(arg, msg) {
      if (!type.check(arg)) {
        _toss(msg, k, type.operator, arg, type.actual);
      }
    };
  });

  /* optional checks */
  keys.forEach(function(k) {
    var name = 'optional' + _capitalize(k);
    if (ndebug) {
      out[name] = noop$1;
      return;
    }
    var type = types[k];
    out[name] = function(arg, msg) {
      if (arg === undefined || arg === null) {
        return;
      }
      if (!type.check(arg)) {
        _toss(msg, k, type.operator, arg, type.actual);
      }
    };
  });

  /* arrayOf checks */
  keys.forEach(function(k) {
    var name = 'arrayOf' + _capitalize(k);
    if (ndebug) {
      out[name] = noop$1;
      return;
    }
    var type = types[k];
    var expected = '[' + k + ']';
    out[name] = function(arg, msg) {
      if (!Array.isArray(arg)) {
        _toss(msg, expected, type.operator, arg, type.actual);
      }
      var i;
      for (i = 0; i < arg.length; i++) {
        if (!type.check(arg[i])) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
      }
    };
  });

  /* optionalArrayOf checks */
  keys.forEach(function(k) {
    var name = 'optionalArrayOf' + _capitalize(k);
    if (ndebug) {
      out[name] = noop$1;
      return;
    }
    var type = types[k];
    var expected = '[' + k + ']';
    out[name] = function(arg, msg) {
      if (arg === undefined || arg === null) {
        return;
      }
      if (!Array.isArray(arg)) {
        _toss(msg, expected, type.operator, arg, type.actual);
      }
      var i;
      for (i = 0; i < arg.length; i++) {
        if (!type.check(arg[i])) {
          _toss(msg, expected, type.operator, arg, type.actual);
        }
      }
    };
  });

  /* re-export built-in assertions */
  Object.keys(assert__default['default']).forEach(function(k) {
    if (k === 'AssertionError') {
      out[k] = assert__default['default'][k];
      return;
    }
    if (ndebug) {
      out[k] = noop$1;
      return;
    }
    out[k] = assert__default['default'][k];
  });

  /* export ourselves (for unit tests _only_) */
  out._setExports = _setExports;

  return out;
}

var assert_1 = _setExports(process.env.NODE_NDEBUG);

/* eslint-disable node/no-deprecated-api */

var Buffer$2 = buffer__default['default'].Buffer;

var safer = {};

var key;

for (key in buffer__default['default']) {
  if (!buffer__default['default'].hasOwnProperty(key)) continue;
  if (key === 'SlowBuffer' || key === 'Buffer') continue;
  safer[key] = buffer__default['default'][key];
}

var Safer = (safer.Buffer = {});
for (key in Buffer$2) {
  if (!Buffer$2.hasOwnProperty(key)) continue;
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
  Safer[key] = Buffer$2[key];
}

safer.Buffer.prototype = Buffer$2.prototype;

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
          typeof value
      );
    }
    return Buffer$2(value, encodingOrOffset, length);
  };
}

if (!Safer.alloc) {
  Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
    var buf = Buffer$2(size);
    if (!fill || fill.length === 0) {
      buf.fill(0);
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
    return buf;
  };
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  };
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
  }
}

var safer_1 = safer;

// Copyright 2015 Joyent, Inc.

var Buffer$3 = safer_1.Buffer;

var algInfo = {
  dsa: {
    parts: ['p', 'q', 'g', 'y'],
    sizePart: 'p'
  },
  rsa: {
    parts: ['e', 'n'],
    sizePart: 'n'
  },
  ecdsa: {
    parts: ['curve', 'Q'],
    sizePart: 'Q'
  },
  ed25519: {
    parts: ['A'],
    sizePart: 'A'
  }
};
algInfo['curve25519'] = algInfo['ed25519'];

var algPrivInfo = {
  dsa: {
    parts: ['p', 'q', 'g', 'y', 'x']
  },
  rsa: {
    parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']
  },
  ecdsa: {
    parts: ['curve', 'Q', 'd']
  },
  ed25519: {
    parts: ['A', 'k']
  }
};
algPrivInfo['curve25519'] = algPrivInfo['ed25519'];

var hashAlgs = {
  md5: true,
  sha1: true,
  sha256: true,
  sha384: true,
  sha512: true
};

/*
 * Taken from
 * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
 */
var curves = {
  nistp256: {
    size: 256,
    pkcs8oid: '1.2.840.10045.3.1.7',
    p: Buffer$3.from(
      ('00' + 'ffffffff 00000001 00000000 00000000' + '00000000 ffffffff ffffffff ffffffff').replace(/ /g, ''),
      'hex'
    ),
    a: Buffer$3.from(
      ('00' + 'FFFFFFFF 00000001 00000000 00000000' + '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').replace(/ /g, ''),
      'hex'
    ),
    b: Buffer$3.from(
      ('5ac635d8 aa3a93e7 b3ebbd55 769886bc' + '651d06b0 cc53b0f6 3bce3c3e 27d2604b').replace(/ /g, ''),
      'hex'
    ),
    s: Buffer$3.from(('00' + 'c49d3608 86e70493 6a6678e1 139d26b7' + '819f7e90').replace(/ /g, ''), 'hex'),
    n: Buffer$3.from(
      ('00' + 'ffffffff 00000000 ffffffff ffffffff' + 'bce6faad a7179e84 f3b9cac2 fc632551').replace(/ /g, ''),
      'hex'
    ),
    G: Buffer$3.from(
      (
        '04' +
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2' +
        '77037d81 2deb33a0 f4a13945 d898c296' +
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' +
        '2bce3357 6b315ece cbb64068 37bf51f5'
      ).replace(/ /g, ''),
      'hex'
    )
  },
  nistp384: {
    size: 384,
    pkcs8oid: '1.3.132.0.34',
    p: Buffer$3.from(
      (
        '00' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff ffffffff fffffffe' +
        'ffffffff 00000000 00000000 ffffffff'
      ).replace(/ /g, ''),
      'hex'
    ),
    a: Buffer$3.from(
      (
        '00' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' +
        'FFFFFFFF 00000000 00000000 FFFFFFFC'
      ).replace(/ /g, ''),
      'hex'
    ),
    b: Buffer$3.from(
      (
        'b3312fa7 e23ee7e4 988e056b e3f82d19' +
        '181d9c6e fe814112 0314088f 5013875a' +
        'c656398d 8a2ed19d 2a85c8ed d3ec2aef'
      ).replace(/ /g, ''),
      'hex'
    ),
    s: Buffer$3.from(('00' + 'a335926a a319a27a 1d00896a 6773a482' + '7acdac73').replace(/ /g, ''), 'hex'),
    n: Buffer$3.from(
      (
        '00' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff c7634d81 f4372ddf' +
        '581a0db2 48b0a77a ecec196a ccc52973'
      ).replace(/ /g, ''),
      'hex'
    ),
    G: Buffer$3.from(
      (
        '04' +
        'aa87ca22 be8b0537 8eb1c71e f320ad74' +
        '6e1d3b62 8ba79b98 59f741e0 82542a38' +
        '5502f25d bf55296c 3a545e38 72760ab7' +
        '3617de4a 96262c6f 5d9e98bf 9292dc29' +
        'f8f41dbd 289a147c e9da3113 b5f0b8c0' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
      ).replace(/ /g, ''),
      'hex'
    )
  },
  nistp521: {
    size: 521,
    pkcs8oid: '1.3.132.0.35',
    p: Buffer$3.from(
      (
        '01ffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffff'
      ).replace(/ /g, ''),
      'hex'
    ),
    a: Buffer$3.from(
      (
        '01FF' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' +
        'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC'
      ).replace(/ /g, ''),
      'hex'
    ),
    b: Buffer$3.from(
      (
        '51' +
        '953eb961 8e1c9a1f 929a21a0 b68540ee' +
        'a2da725b 99b315f3 b8b48991 8ef109e1' +
        '56193951 ec7e937b 1652c0bd 3bb1bf07' +
        '3573df88 3d2c34f1 ef451fd4 6b503f00'
      ).replace(/ /g, ''),
      'hex'
    ),
    s: Buffer$3.from(('00' + 'd09e8800 291cb853 96cc6717 393284aa' + 'a0da64ba').replace(/ /g, ''), 'hex'),
    n: Buffer$3.from(
      (
        '01ff' +
        'ffffffff ffffffff ffffffff ffffffff' +
        'ffffffff ffffffff ffffffff fffffffa' +
        '51868783 bf2f966b 7fcc0148 f709a5d0' +
        '3bb5c9b8 899c47ae bb6fb71e 91386409'
      ).replace(/ /g, ''),
      'hex'
    ),
    G: Buffer$3.from(
      (
        '04' +
        '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' +
        '9c648139 053fb521 f828af60 6b4d3dba' +
        'a14b5e77 efe75928 fe1dc127 a2ffa8de' +
        '3348b3c1 856a429b f97e7e31 c2e5bd66' +
        '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' +
        '98f54449 579b4468 17afbd17 273e662c' +
        '97ee7299 5ef42640 c550b901 3fad0761' +
        '353c7086 a272c240 88be9476 9fd16650'
      ).replace(/ /g, ''),
      'hex'
    )
  }
};

var algs = {
  info: algInfo,
  privInfo: algPrivInfo,
  hashAlgs: hashAlgs,
  curves: curves
};

// Copyright 2015 Joyent, Inc.

function FingerprintFormatError(fp, format) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);
  this.name = 'FingerprintFormatError';
  this.fingerprint = fp;
  this.format = format;
  this.message = 'Fingerprint format is not supported, or is invalid: ';
  if (fp !== undefined) this.message += ' fingerprint = ' + fp;
  if (format !== undefined) this.message += ' format = ' + format;
}
util__default['default'].inherits(FingerprintFormatError, Error);

function InvalidAlgorithmError(alg) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);
  this.name = 'InvalidAlgorithmError';
  this.algorithm = alg;
  this.message = 'Algorithm "' + alg + '" is not supported';
}
util__default['default'].inherits(InvalidAlgorithmError, Error);

function KeyParseError(name, format, innerErr) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);
  this.name = 'KeyParseError';
  this.format = format;
  this.keyName = name;
  this.innerErr = innerErr;
  this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format key: ' + innerErr.message;
}
util__default['default'].inherits(KeyParseError, Error);

function SignatureParseError(type, format, innerErr) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);
  this.name = 'SignatureParseError';
  this.type = type;
  this.format = format;
  this.innerErr = innerErr;
  this.message =
    'Failed to parse the given data as a ' + type + ' signature in ' + format + ' format: ' + innerErr.message;
}
util__default['default'].inherits(SignatureParseError, Error);

function CertificateParseError(name, format, innerErr) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);
  this.name = 'CertificateParseError';
  this.format = format;
  this.certName = name;
  this.innerErr = innerErr;
  this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format certificate: ' + innerErr.message;
}
util__default['default'].inherits(CertificateParseError, Error);

function KeyEncryptedError(name, format) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);
  this.name = 'KeyEncryptedError';
  this.format = format;
  this.keyName = name;
  this.message =
    'The ' +
    format +
    ' format key ' +
    name +
    ' is ' +
    'encrypted (password-protected), and no passphrase was ' +
    'provided in `options`';
}
util__default['default'].inherits(KeyEncryptedError, Error);

var errors = {
  FingerprintFormatError: FingerprintFormatError,
  InvalidAlgorithmError: InvalidAlgorithmError,
  KeyParseError: KeyParseError,
  SignatureParseError: SignatureParseError,
  KeyEncryptedError: KeyEncryptedError,
  CertificateParseError: CertificateParseError
};

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var errors$1 = {
  newInvalidAsn1Error: function(msg) {
    var e = new Error();
    e.name = 'InvalidAsn1Error';
    e.message = msg || '';
    return e;
  }
};

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var types$1 = {
  EOC: 0,
  Boolean: 1,
  Integer: 2,
  BitString: 3,
  OctetString: 4,
  Null: 5,
  OID: 6,
  ObjectDescriptor: 7,
  External: 8,
  Real: 9, // float
  Enumeration: 10,
  PDV: 11,
  Utf8String: 12,
  RelativeOID: 13,
  Sequence: 16,
  Set: 17,
  NumericString: 18,
  PrintableString: 19,
  T61String: 20,
  VideotexString: 21,
  IA5String: 22,
  UTCTime: 23,
  GeneralizedTime: 24,
  GraphicString: 25,
  VisibleString: 26,
  GeneralString: 28,
  UniversalString: 29,
  CharacterString: 30,
  BMPString: 31,
  Constructor: 32,
  Context: 128
};

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var Buffer$4 = safer_1.Buffer;

// --- Globals

var newInvalidAsn1Error = errors$1.newInvalidAsn1Error;

// --- API

function Reader(data) {
  if (!data || !Buffer$4.isBuffer(data)) throw new TypeError('data must be a node Buffer');

  this._buf = data;
  this._size = data.length;

  // These hold the "current" state
  this._len = 0;
  this._offset = 0;
}

Object.defineProperty(Reader.prototype, 'length', {
  enumerable: true,
  get: function() {
    return this._len;
  }
});

Object.defineProperty(Reader.prototype, 'offset', {
  enumerable: true,
  get: function() {
    return this._offset;
  }
});

Object.defineProperty(Reader.prototype, 'remain', {
  get: function() {
    return this._size - this._offset;
  }
});

Object.defineProperty(Reader.prototype, 'buffer', {
  get: function() {
    return this._buf.slice(this._offset);
  }
});

/**
 * Reads a single byte and advances offset; you can pass in `true` to make this
 * a "peek" operation (i.e., get the byte, but don't advance the offset).
 *
 * @param {Boolean} peek true means don't move offset.
 * @return {Number} the next byte, null if not enough data.
 */
Reader.prototype.readByte = function(peek) {
  if (this._size - this._offset < 1) return null;

  var b = this._buf[this._offset] & 0xff;

  if (!peek) this._offset += 1;

  return b;
};

Reader.prototype.peek = function() {
  return this.readByte(true);
};

/**
 * Reads a (potentially) variable length off the BER buffer.  This call is
 * not really meant to be called directly, as callers have to manipulate
 * the internal buffer afterwards.
 *
 * As a result of this call, you can call `Reader.length`, until the
 * next thing called that does a readLength.
 *
 * @return {Number} the amount of offset to advance the buffer.
 * @throws {InvalidAsn1Error} on bad ASN.1
 */
Reader.prototype.readLength = function(offset) {
  if (offset === undefined) offset = this._offset;

  if (offset >= this._size) return null;

  var lenB = this._buf[offset++] & 0xff;
  if (lenB === null) return null;

  if ((lenB & 0x80) === 0x80) {
    lenB &= 0x7f;

    if (lenB === 0) throw newInvalidAsn1Error('Indefinite length not supported');

    if (lenB > 4) throw newInvalidAsn1Error('encoding too long');

    if (this._size - offset < lenB) return null;

    this._len = 0;
    for (var i = 0; i < lenB; i++) this._len = (this._len << 8) + (this._buf[offset++] & 0xff);
  } else {
    // Wasn't a variable length
    this._len = lenB;
  }

  return offset;
};

/**
 * Parses the next sequence in this BER buffer.
 *
 * To get the length of the sequence, call `Reader.length`.
 *
 * @return {Number} the sequence's tag.
 */
Reader.prototype.readSequence = function(tag) {
  var seq = this.peek();
  if (seq === null) return null;
  if (tag !== undefined && tag !== seq)
    throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + seq.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null) return null;

  this._offset = o;
  return seq;
};

Reader.prototype.readInt = function() {
  return this._readTag(types$1.Integer);
};

Reader.prototype.readBoolean = function() {
  return this._readTag(types$1.Boolean) === 0 ? false : true;
};

Reader.prototype.readEnumeration = function() {
  return this._readTag(types$1.Enumeration);
};

Reader.prototype.readString = function(tag, retbuf) {
  if (!tag) tag = types$1.OctetString;

  var b = this.peek();
  if (b === null) return null;

  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`

  if (o === null) return null;

  if (this.length > this._size - o) return null;

  this._offset = o;

  if (this.length === 0) return retbuf ? Buffer$4.alloc(0) : '';

  var str = this._buf.slice(this._offset, this._offset + this.length);
  this._offset += this.length;

  return retbuf ? str : str.toString('utf8');
};

Reader.prototype.readOID = function(tag) {
  if (!tag) tag = types$1.OID;

  var b = this.readString(tag, true);
  if (b === null) return null;

  var values = [];
  var value = 0;

  for (var i = 0; i < b.length; i++) {
    var byte = b[i] & 0xff;

    value <<= 7;
    value += byte & 0x7f;
    if ((byte & 0x80) === 0) {
      values.push(value);
      value = 0;
    }
  }

  value = values.shift();
  values.unshift(value % 40);
  values.unshift((value / 40) >> 0);

  return values.join('.');
};

Reader.prototype._readTag = function(tag) {
  assert__default['default'].ok(tag !== undefined);

  var b = this.peek();

  if (b === null) return null;

  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));

  var o = this.readLength(this._offset + 1); // stored in `length`
  if (o === null) return null;

  if (this.length > 4) throw newInvalidAsn1Error('Integer too long: ' + this.length);

  if (this.length > this._size - o) return null;
  this._offset = o;

  var fb = this._buf[this._offset];
  var value = 0;

  for (var i = 0; i < this.length; i++) {
    value <<= 8;
    value |= this._buf[this._offset++] & 0xff;
  }

  if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << (i * 8);

  return value >> 0;
};

// --- Exported API

var reader = Reader;

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

var Buffer$5 = safer_1.Buffer;

// --- Globals

var newInvalidAsn1Error$1 = errors$1.newInvalidAsn1Error;

var DEFAULT_OPTS = {
  size: 1024,
  growthFactor: 8
};

// --- Helpers

function merge(from, to) {
  assert__default['default'].ok(from);
  assert__default['default'].equal(typeof from, 'object');
  assert__default['default'].ok(to);
  assert__default['default'].equal(typeof to, 'object');

  var keys = Object.getOwnPropertyNames(from);
  keys.forEach(function(key) {
    if (to[key]) return;

    var value = Object.getOwnPropertyDescriptor(from, key);
    Object.defineProperty(to, key, value);
  });

  return to;
}

// --- API

function Writer(options) {
  options = merge(DEFAULT_OPTS, options || {});

  this._buf = Buffer$5.alloc(options.size || 1024);
  this._size = this._buf.length;
  this._offset = 0;
  this._options = options;

  // A list of offsets in the buffer where we need to insert
  // sequence tag/len pairs.
  this._seq = [];
}

Object.defineProperty(Writer.prototype, 'buffer', {
  get: function() {
    if (this._seq.length) throw newInvalidAsn1Error$1(this._seq.length + ' unended sequence(s)');

    return this._buf.slice(0, this._offset);
  }
});

Writer.prototype.writeByte = function(b) {
  if (typeof b !== 'number') throw new TypeError('argument must be a Number');

  this._ensure(1);
  this._buf[this._offset++] = b;
};

Writer.prototype.writeInt = function(i, tag) {
  if (typeof i !== 'number') throw new TypeError('argument must be a Number');
  if (typeof tag !== 'number') tag = types$1.Integer;

  var sz = 4;

  while (((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1) {
    sz--;
    i <<= 8;
  }

  if (sz > 4) throw newInvalidAsn1Error$1('BER ints cannot be > 0xffffffff');

  this._ensure(2 + sz);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = sz;

  while (sz-- > 0) {
    this._buf[this._offset++] = (i & 0xff000000) >>> 24;
    i <<= 8;
  }
};

Writer.prototype.writeNull = function() {
  this.writeByte(types$1.Null);
  this.writeByte(0x00);
};

Writer.prototype.writeEnumeration = function(i, tag) {
  if (typeof i !== 'number') throw new TypeError('argument must be a Number');
  if (typeof tag !== 'number') tag = types$1.Enumeration;

  return this.writeInt(i, tag);
};

Writer.prototype.writeBoolean = function(b, tag) {
  if (typeof b !== 'boolean') throw new TypeError('argument must be a Boolean');
  if (typeof tag !== 'number') tag = types$1.Boolean;

  this._ensure(3);
  this._buf[this._offset++] = tag;
  this._buf[this._offset++] = 0x01;
  this._buf[this._offset++] = b ? 0xff : 0x00;
};

Writer.prototype.writeString = function(s, tag) {
  if (typeof s !== 'string') throw new TypeError('argument must be a string (was: ' + typeof s + ')');
  if (typeof tag !== 'number') tag = types$1.OctetString;

  var len = Buffer$5.byteLength(s);
  this.writeByte(tag);
  this.writeLength(len);
  if (len) {
    this._ensure(len);
    this._buf.write(s, this._offset);
    this._offset += len;
  }
};

Writer.prototype.writeBuffer = function(buf, tag) {
  if (typeof tag !== 'number') throw new TypeError('tag must be a number');
  if (!Buffer$5.isBuffer(buf)) throw new TypeError('argument must be a buffer');

  this.writeByte(tag);
  this.writeLength(buf.length);
  this._ensure(buf.length);
  buf.copy(this._buf, this._offset, 0, buf.length);
  this._offset += buf.length;
};

Writer.prototype.writeStringArray = function(strings) {
  if (!strings instanceof Array) throw new TypeError('argument must be an Array[String]');

  var self = this;
  strings.forEach(function(s) {
    self.writeString(s);
  });
};

// This is really to solve DER cases, but whatever for now
Writer.prototype.writeOID = function(s, tag) {
  if (typeof s !== 'string') throw new TypeError('argument must be a string');
  if (typeof tag !== 'number') tag = types$1.OID;

  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s)) throw new Error('argument is not a valid OID string');

  function encodeOctet(bytes, octet) {
    if (octet < 128) {
      bytes.push(octet);
    } else if (octet < 16384) {
      bytes.push((octet >>> 7) | 0x80);
      bytes.push(octet & 0x7f);
    } else if (octet < 2097152) {
      bytes.push((octet >>> 14) | 0x80);
      bytes.push(((octet >>> 7) | 0x80) & 0xff);
      bytes.push(octet & 0x7f);
    } else if (octet < 268435456) {
      bytes.push((octet >>> 21) | 0x80);
      bytes.push(((octet >>> 14) | 0x80) & 0xff);
      bytes.push(((octet >>> 7) | 0x80) & 0xff);
      bytes.push(octet & 0x7f);
    } else {
      bytes.push(((octet >>> 28) | 0x80) & 0xff);
      bytes.push(((octet >>> 21) | 0x80) & 0xff);
      bytes.push(((octet >>> 14) | 0x80) & 0xff);
      bytes.push(((octet >>> 7) | 0x80) & 0xff);
      bytes.push(octet & 0x7f);
    }
  }

  var tmp = s.split('.');
  var bytes = [];
  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
  tmp.slice(2).forEach(function(b) {
    encodeOctet(bytes, parseInt(b, 10));
  });

  var self = this;
  this._ensure(2 + bytes.length);
  this.writeByte(tag);
  this.writeLength(bytes.length);
  bytes.forEach(function(b) {
    self.writeByte(b);
  });
};

Writer.prototype.writeLength = function(len) {
  if (typeof len !== 'number') throw new TypeError('argument must be a Number');

  this._ensure(4);

  if (len <= 0x7f) {
    this._buf[this._offset++] = len;
  } else if (len <= 0xff) {
    this._buf[this._offset++] = 0x81;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffff) {
    this._buf[this._offset++] = 0x82;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else if (len <= 0xffffff) {
    this._buf[this._offset++] = 0x83;
    this._buf[this._offset++] = len >> 16;
    this._buf[this._offset++] = len >> 8;
    this._buf[this._offset++] = len;
  } else {
    throw newInvalidAsn1Error$1('Length too long (> 4 bytes)');
  }
};

Writer.prototype.startSequence = function(tag) {
  if (typeof tag !== 'number') tag = types$1.Sequence | types$1.Constructor;

  this.writeByte(tag);
  this._seq.push(this._offset);
  this._ensure(3);
  this._offset += 3;
};

Writer.prototype.endSequence = function() {
  var seq = this._seq.pop();
  var start = seq + 3;
  var len = this._offset - start;

  if (len <= 0x7f) {
    this._shift(start, len, -2);
    this._buf[seq] = len;
  } else if (len <= 0xff) {
    this._shift(start, len, -1);
    this._buf[seq] = 0x81;
    this._buf[seq + 1] = len;
  } else if (len <= 0xffff) {
    this._buf[seq] = 0x82;
    this._buf[seq + 1] = len >> 8;
    this._buf[seq + 2] = len;
  } else if (len <= 0xffffff) {
    this._shift(start, len, 1);
    this._buf[seq] = 0x83;
    this._buf[seq + 1] = len >> 16;
    this._buf[seq + 2] = len >> 8;
    this._buf[seq + 3] = len;
  } else {
    throw newInvalidAsn1Error$1('Sequence too long');
  }
};

Writer.prototype._shift = function(start, len, shift) {
  assert__default['default'].ok(start !== undefined);
  assert__default['default'].ok(len !== undefined);
  assert__default['default'].ok(shift);

  this._buf.copy(this._buf, start + shift, start, start + len);
  this._offset += shift;
};

Writer.prototype._ensure = function(len) {
  assert__default['default'].ok(len);

  if (this._size - this._offset < len) {
    var sz = this._size * this._options.growthFactor;
    if (sz - this._offset < len) sz += len;

    var buf = Buffer$5.alloc(sz);

    this._buf.copy(buf, 0, 0, this._offset);
    this._buf = buf;
    this._size = sz;
  }
};

// --- Exported API

var writer = Writer;

var ber = _commonjsHelpers.createCommonjsModule(function(module) {
  // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

  // --- Exports

  module.exports = {
    Reader: reader,

    Writer: writer
  };

  for (var t in types$1) {
    if (types$1.hasOwnProperty(t)) module.exports[t] = types$1[t];
  }
  for (var e in errors$1) {
    if (errors$1.hasOwnProperty(e)) module.exports[e] = errors$1[e];
  }
});

// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

// If you have no idea what ASN.1 or BER is, see this:
// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc

// --- Exported API

var lib = {
  Ber: ber,

  BerReader: ber.Reader,

  BerWriter: ber.Writer
};

var jsbn = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  (function() {
    // Copyright (c) 2005  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Basic JavaScript BN library - subset useful for RSA encryption.

    // Bits per digit
    var dbits;

    // JavaScript engine analysis
    var canary = 0xdeadbeefcafe;
    var j_lm = (canary & 0xffffff) == 0xefcafe;

    // (public) Constructor
    function BigInteger(a, b, c) {
      if (a != null)
        if ('number' == typeof a) this.fromNumber(a, b, c);
        else if (b == null && 'string' != typeof a) this.fromString(a, 256);
        else this.fromString(a, b);
    }

    // return new, unset BigInteger
    function nbi() {
      return new BigInteger(null);
    }

    // am: Compute w_j += (x*this_i), propagate carries,
    // c is initial carry, returns final carry.
    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
    // We need to select the fastest one that works in this environment.

    // am1: use a single mult and divide to get the high bits,
    // max digit bits should be 26 because
    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
    function am1(i, x, w, j, c, n) {
      while (--n >= 0) {
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
      }
      return c;
    }
    // am2 avoids a big mult-and-extract completely.
    // Max digit bits should be <= 30 because we do bitwise ops
    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
    function am2(i, x, w, j, c, n) {
      var xl = x & 0x7fff,
        xh = x >> 15;
      while (--n >= 0) {
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
      }
      return c;
    }
    // Alternately, set max digit bits to 28 since some
    // browsers slow down when dealing with 32-bit numbers.
    function am3(i, x, w, j, c, n) {
      var xl = x & 0x3fff,
        xh = x >> 14;
      while (--n >= 0) {
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
      }
      return c;
    }
    var inBrowser = typeof navigator !== 'undefined';
    if (inBrowser && j_lm && navigator.appName == 'Microsoft Internet Explorer') {
      BigInteger.prototype.am = am2;
      dbits = 30;
    } else if (inBrowser && j_lm && navigator.appName != 'Netscape') {
      BigInteger.prototype.am = am1;
      dbits = 26;
    } else {
      // Mozilla/Netscape seems to prefer am3
      BigInteger.prototype.am = am3;
      dbits = 28;
    }

    BigInteger.prototype.DB = dbits;
    BigInteger.prototype.DM = (1 << dbits) - 1;
    BigInteger.prototype.DV = 1 << dbits;

    var BI_FP = 52;
    BigInteger.prototype.FV = Math.pow(2, BI_FP);
    BigInteger.prototype.F1 = BI_FP - dbits;
    BigInteger.prototype.F2 = 2 * dbits - BI_FP;

    // Digit conversions
    var BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';
    var BI_RC = new Array();
    var rr, vv;
    rr = '0'.charCodeAt(0);
    for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
    rr = 'a'.charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
    rr = 'A'.charCodeAt(0);
    for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

    function int2char(n) {
      return BI_RM.charAt(n);
    }
    function intAt(s, i) {
      var c = BI_RC[s.charCodeAt(i)];
      return c == null ? -1 : c;
    }

    // (protected) copy this to r
    function bnpCopyTo(r) {
      for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];
      r.t = this.t;
      r.s = this.s;
    }

    // (protected) set from integer value x, -DV <= x < DV
    function bnpFromInt(x) {
      this.t = 1;
      this.s = x < 0 ? -1 : 0;
      if (x > 0) this[0] = x;
      else if (x < -1) this[0] = x + this.DV;
      else this.t = 0;
    }

    // return bigint initialized to value
    function nbv(i) {
      var r = nbi();
      r.fromInt(i);
      return r;
    }

    // (protected) set from string and radix
    function bnpFromString(s, b) {
      var k;
      if (b == 16) k = 4;
      else if (b == 8) k = 3;
      else if (b == 256) k = 8;
      // byte array
      else if (b == 2) k = 1;
      else if (b == 32) k = 5;
      else if (b == 4) k = 2;
      else {
        this.fromRadix(s, b);
        return;
      }
      this.t = 0;
      this.s = 0;
      var i = s.length,
        mi = false,
        sh = 0;
      while (--i >= 0) {
        var x = k == 8 ? s[i] & 0xff : intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == '-') mi = true;
          continue;
        }
        mi = false;
        if (sh == 0) this[this.t++] = x;
        else if (sh + k > this.DB) {
          this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
          this[this.t++] = x >> (this.DB - sh);
        } else this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
      }
      if (k == 8 && (s[0] & 0x80) != 0) {
        this.s = -1;
        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;
      }
      this.clamp();
      if (mi) BigInteger.ZERO.subTo(this, this);
    }

    // (protected) clamp off excess high words
    function bnpClamp() {
      var c = this.s & this.DM;
      while (this.t > 0 && this[this.t - 1] == c) --this.t;
    }

    // (public) return string representation in given radix
    function bnToString(b) {
      if (this.s < 0) return '-' + this.negate().toString(b);
      var k;
      if (b == 16) k = 4;
      else if (b == 8) k = 3;
      else if (b == 2) k = 1;
      else if (b == 32) k = 5;
      else if (b == 4) k = 2;
      else return this.toRadix(b);
      var km = (1 << k) - 1,
        d,
        m = false,
        r = '',
        i = this.t;
      var p = this.DB - ((i * this.DB) % k);
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
          m = true;
          r = int2char(d);
        }
        while (i >= 0) {
          if (p < k) {
            d = (this[i] & ((1 << p) - 1)) << (k - p);
            d |= this[--i] >> (p += this.DB - k);
          } else {
            d = (this[i] >> (p -= k)) & km;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if (d > 0) m = true;
          if (m) r += int2char(d);
        }
      }
      return m ? r : '0';
    }

    // (public) -this
    function bnNegate() {
      var r = nbi();
      BigInteger.ZERO.subTo(this, r);
      return r;
    }

    // (public) |this|
    function bnAbs() {
      return this.s < 0 ? this.negate() : this;
    }

    // (public) return + if this > a, - if this < a, 0 if equal
    function bnCompareTo(a) {
      var r = this.s - a.s;
      if (r != 0) return r;
      var i = this.t;
      r = i - a.t;
      if (r != 0) return this.s < 0 ? -r : r;
      while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;
      return 0;
    }

    // returns bit length of the integer x
    function nbits(x) {
      var r = 1,
        t;
      if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
      }
      if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
      }
      if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
      }
      if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
      }
      if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
      }
      return r;
    }

    // (public) return the number of bits in "this"
    function bnBitLength() {
      if (this.t <= 0) return 0;
      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
    }

    // (protected) r = this << n*DB
    function bnpDLShiftTo(n, r) {
      var i;
      for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];
      for (i = n - 1; i >= 0; --i) r[i] = 0;
      r.t = this.t + n;
      r.s = this.s;
    }

    // (protected) r = this >> n*DB
    function bnpDRShiftTo(n, r) {
      for (var i = n; i < this.t; ++i) r[i - n] = this[i];
      r.t = Math.max(this.t - n, 0);
      r.s = this.s;
    }

    // (protected) r = this << n
    function bnpLShiftTo(n, r) {
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << cbs) - 1;
      var ds = Math.floor(n / this.DB),
        c = (this.s << bs) & this.DM,
        i;
      for (i = this.t - 1; i >= 0; --i) {
        r[i + ds + 1] = (this[i] >> cbs) | c;
        c = (this[i] & bm) << bs;
      }
      for (i = ds - 1; i >= 0; --i) r[i] = 0;
      r[ds] = c;
      r.t = this.t + ds + 1;
      r.s = this.s;
      r.clamp();
    }

    // (protected) r = this >> n
    function bnpRShiftTo(n, r) {
      r.s = this.s;
      var ds = Math.floor(n / this.DB);
      if (ds >= this.t) {
        r.t = 0;
        return;
      }
      var bs = n % this.DB;
      var cbs = this.DB - bs;
      var bm = (1 << bs) - 1;
      r[0] = this[ds] >> bs;
      for (var i = ds + 1; i < this.t; ++i) {
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
      }
      if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
      r.t = this.t - ds;
      r.clamp();
    }

    // (protected) r = this - a
    function bnpSubTo(a, r) {
      var i = 0,
        c = 0,
        m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c -= a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c -= a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c -= a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c < -1) r[i++] = this.DV + c;
      else if (c > 0) r[i++] = c;
      r.t = i;
      r.clamp();
    }

    // (protected) r = this * a, r != this,a (HAC 14.12)
    // "this" should be the larger one if appropriate.
    function bnpMultiplyTo(a, r) {
      var x = this.abs(),
        y = a.abs();
      var i = x.t;
      r.t = i + y.t;
      while (--i >= 0) r[i] = 0;
      for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
      r.s = 0;
      r.clamp();
      if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
    }

    // (protected) r = this^2, r != this (HAC 14.16)
    function bnpSquareTo(r) {
      var x = this.abs();
      var i = (r.t = 2 * x.t);
      while (--i >= 0) r[i] = 0;
      for (i = 0; i < x.t - 1; ++i) {
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
          r[i + x.t] -= x.DV;
          r[i + x.t + 1] = 1;
        }
      }
      if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
      r.s = 0;
      r.clamp();
    }

    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
    // r != q, this != m.  q or r may be null.
    function bnpDivRemTo(m, q, r) {
      var pm = m.abs();
      if (pm.t <= 0) return;
      var pt = this.abs();
      if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
      }
      if (r == null) r = nbi();
      var y = nbi(),
        ts = this.s,
        ms = m.s;
      var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
      if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
      } else {
        pm.copyTo(y);
        pt.copyTo(r);
      }
      var ys = y.t;
      var y0 = y[ys - 1];
      if (y0 == 0) return;
      var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
      var d1 = this.FV / yt,
        d2 = (1 << this.F1) / yt,
        e = 1 << this.F2;
      var i = r.t,
        j = i - ys,
        t = q == null ? nbi() : q;
      y.dlShiftTo(j, t);
      if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
      }
      BigInteger.ONE.dlShiftTo(ys, t);
      t.subTo(y, y); // "negative" y so we can replace sub with am later
      while (y.t < ys) y[y.t++] = 0;
      while (--j >= 0) {
        // Estimate quotient digit
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
          // Try it out
          y.dlShiftTo(j, t);
          r.subTo(t, r);
          while (r[i] < --qd) r.subTo(t, r);
        }
      }
      if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
      }
      r.t = ys;
      r.clamp();
      if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
      if (ts < 0) BigInteger.ZERO.subTo(r, r);
    }

    // (public) this mod a
    function bnMod(a) {
      var r = nbi();
      this.abs().divRemTo(a, null, r);
      if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
      return r;
    }

    // Modular reduction using "classic" algorithm
    function Classic(m) {
      this.m = m;
    }
    function cConvert(x) {
      if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
      else return x;
    }
    function cRevert(x) {
      return x;
    }
    function cReduce(x) {
      x.divRemTo(this.m, null, x);
    }
    function cMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }
    function cSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }

    Classic.prototype.convert = cConvert;
    Classic.prototype.revert = cRevert;
    Classic.prototype.reduce = cReduce;
    Classic.prototype.mulTo = cMulTo;
    Classic.prototype.sqrTo = cSqrTo;

    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
    // justification:
    //         xy == 1 (mod m)
    //         xy =  1+km
    //   xy(2-xy) = (1+km)(1-km)
    // x[y(2-xy)] = 1-k^2m^2
    // x[y(2-xy)] == 1 (mod m^2)
    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
    // JS multiply "overflows" differently from C/C++, so care is needed here.
    function bnpInvDigit() {
      if (this.t < 1) return 0;
      var x = this[0];
      if ((x & 1) == 0) return 0;
      var y = x & 3; // y == 1/x mod 2^2
      y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
      y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
      y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16
      // last step - calculate inverse mod DV directly;
      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
      y = (y * (2 - ((x * y) % this.DV))) % this.DV; // y == 1/x mod 2^dbits
      // we really want the negative inverse, and -DV < y < DV
      return y > 0 ? this.DV - y : -y;
    }

    // Montgomery reduction
    function Montgomery(m) {
      this.m = m;
      this.mp = m.invDigit();
      this.mpl = this.mp & 0x7fff;
      this.mph = this.mp >> 15;
      this.um = (1 << (m.DB - 15)) - 1;
      this.mt2 = 2 * m.t;
    }

    // xR mod m
    function montConvert(x) {
      var r = nbi();
      x.abs().dlShiftTo(this.m.t, r);
      r.divRemTo(this.m, null, r);
      if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
      return r;
    }

    // x/R mod m
    function montRevert(x) {
      var r = nbi();
      x.copyTo(r);
      this.reduce(r);
      return r;
    }

    // x = x/R mod m (HAC 14.32)
    function montReduce(x) {
      while (
        x.t <= this.mt2 // pad x so am has enough room later
      )
        x[x.t++] = 0;
      for (var i = 0; i < this.m.t; ++i) {
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while (x[j] >= x.DV) {
          x[j] -= x.DV;
          x[++j]++;
        }
      }
      x.clamp();
      x.drShiftTo(this.m.t, x);
      if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }

    // r = "x^2/R mod m"; x != r
    function montSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }

    // r = "xy/R mod m"; x,y != r
    function montMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }

    Montgomery.prototype.convert = montConvert;
    Montgomery.prototype.revert = montRevert;
    Montgomery.prototype.reduce = montReduce;
    Montgomery.prototype.mulTo = montMulTo;
    Montgomery.prototype.sqrTo = montSqrTo;

    // (protected) true iff this is even
    function bnpIsEven() {
      return (this.t > 0 ? this[0] & 1 : this.s) == 0;
    }

    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
    function bnpExp(e, z) {
      if (e > 0xffffffff || e < 1) return BigInteger.ONE;
      var r = nbi(),
        r2 = nbi(),
        g = z.convert(this),
        i = nbits(e) - 1;
      g.copyTo(r);
      while (--i >= 0) {
        z.sqrTo(r, r2);
        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
        else {
          var t = r;
          r = r2;
          r2 = t;
        }
      }
      return z.revert(r);
    }

    // (public) this^e % m, 0 <= e < 2^32
    function bnModPowInt(e, m) {
      var z;
      if (e < 256 || m.isEven()) z = new Classic(m);
      else z = new Montgomery(m);
      return this.exp(e, z);
    }

    // protected
    BigInteger.prototype.copyTo = bnpCopyTo;
    BigInteger.prototype.fromInt = bnpFromInt;
    BigInteger.prototype.fromString = bnpFromString;
    BigInteger.prototype.clamp = bnpClamp;
    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
    BigInteger.prototype.lShiftTo = bnpLShiftTo;
    BigInteger.prototype.rShiftTo = bnpRShiftTo;
    BigInteger.prototype.subTo = bnpSubTo;
    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
    BigInteger.prototype.squareTo = bnpSquareTo;
    BigInteger.prototype.divRemTo = bnpDivRemTo;
    BigInteger.prototype.invDigit = bnpInvDigit;
    BigInteger.prototype.isEven = bnpIsEven;
    BigInteger.prototype.exp = bnpExp;

    // public
    BigInteger.prototype.toString = bnToString;
    BigInteger.prototype.negate = bnNegate;
    BigInteger.prototype.abs = bnAbs;
    BigInteger.prototype.compareTo = bnCompareTo;
    BigInteger.prototype.bitLength = bnBitLength;
    BigInteger.prototype.mod = bnMod;
    BigInteger.prototype.modPowInt = bnModPowInt;

    // "constants"
    BigInteger.ZERO = nbv(0);
    BigInteger.ONE = nbv(1);

    // Copyright (c) 2005-2009  Tom Wu
    // All Rights Reserved.
    // See "LICENSE" for details.

    // Extended JavaScript BN functions, required for RSA private ops.

    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
    // Version 1.2: square() API, isProbablePrime fix

    // (public)
    function bnClone() {
      var r = nbi();
      this.copyTo(r);
      return r;
    }

    // (public) return value as integer
    function bnIntValue() {
      if (this.s < 0) {
        if (this.t == 1) return this[0] - this.DV;
        else if (this.t == 0) return -1;
      } else if (this.t == 1) return this[0];
      else if (this.t == 0) return 0;
      // assumes 16 < DB < 32
      return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];
    }

    // (public) return value as byte
    function bnByteValue() {
      return this.t == 0 ? this.s : (this[0] << 24) >> 24;
    }

    // (public) return value as short (assumes DB>=16)
    function bnShortValue() {
      return this.t == 0 ? this.s : (this[0] << 16) >> 16;
    }

    // (protected) return x s.t. r^x < DV
    function bnpChunkSize(r) {
      return Math.floor((Math.LN2 * this.DB) / Math.log(r));
    }

    // (public) 0 if this == 0, 1 if this > 0
    function bnSigNum() {
      if (this.s < 0) return -1;
      else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
      else return 1;
    }

    // (protected) convert to radix string
    function bnpToRadix(b) {
      if (b == null) b = 10;
      if (this.signum() == 0 || b < 2 || b > 36) return '0';
      var cs = this.chunkSize(b);
      var a = Math.pow(b, cs);
      var d = nbv(a),
        y = nbi(),
        z = nbi(),
        r = '';
      this.divRemTo(d, y, z);
      while (y.signum() > 0) {
        r = (a + z.intValue()).toString(b).substr(1) + r;
        y.divRemTo(d, y, z);
      }
      return z.intValue().toString(b) + r;
    }

    // (protected) convert from radix string
    function bnpFromRadix(s, b) {
      this.fromInt(0);
      if (b == null) b = 10;
      var cs = this.chunkSize(b);
      var d = Math.pow(b, cs),
        mi = false,
        j = 0,
        w = 0;
      for (var i = 0; i < s.length; ++i) {
        var x = intAt(s, i);
        if (x < 0) {
          if (s.charAt(i) == '-' && this.signum() == 0) mi = true;
          continue;
        }
        w = b * w + x;
        if (++j >= cs) {
          this.dMultiply(d);
          this.dAddOffset(w, 0);
          j = 0;
          w = 0;
        }
      }
      if (j > 0) {
        this.dMultiply(Math.pow(b, j));
        this.dAddOffset(w, 0);
      }
      if (mi) BigInteger.ZERO.subTo(this, this);
    }

    // (protected) alternate constructor
    function bnpFromNumber(a, b, c) {
      if ('number' == typeof b) {
        // new BigInteger(int,int,RNG)
        if (a < 2) this.fromInt(1);
        else {
          this.fromNumber(a, c);
          if (!this.testBit(a - 1))
            // force MSB set
            this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
          if (this.isEven()) this.dAddOffset(1, 0); // force odd
          while (!this.isProbablePrime(b)) {
            this.dAddOffset(2, 0);
            if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
          }
        }
      } else {
        // new BigInteger(int,RNG)
        var x = new Array(),
          t = a & 7;
        x.length = (a >> 3) + 1;
        b.nextBytes(x);
        if (t > 0) x[0] &= (1 << t) - 1;
        else x[0] = 0;
        this.fromString(x, 256);
      }
    }

    // (public) convert to bigendian byte array
    function bnToByteArray() {
      var i = this.t,
        r = new Array();
      r[0] = this.s;
      var p = this.DB - ((i * this.DB) % 8),
        d,
        k = 0;
      if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | (this.s << (this.DB - p));
        while (i >= 0) {
          if (p < 8) {
            d = (this[i] & ((1 << p) - 1)) << (8 - p);
            d |= this[--i] >> (p += this.DB - 8);
          } else {
            d = (this[i] >> (p -= 8)) & 0xff;
            if (p <= 0) {
              p += this.DB;
              --i;
            }
          }
          if ((d & 0x80) != 0) d |= -256;
          if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
          if (k > 0 || d != this.s) r[k++] = d;
        }
      }
      return r;
    }

    function bnEquals(a) {
      return this.compareTo(a) == 0;
    }
    function bnMin(a) {
      return this.compareTo(a) < 0 ? this : a;
    }
    function bnMax(a) {
      return this.compareTo(a) > 0 ? this : a;
    }

    // (protected) r = this op a (bitwise)
    function bnpBitwiseTo(a, op, r) {
      var i,
        f,
        m = Math.min(a.t, this.t);
      for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
      if (a.t < this.t) {
        f = a.s & this.DM;
        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);
        r.t = this.t;
      } else {
        f = this.s & this.DM;
        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
        r.t = a.t;
      }
      r.s = op(this.s, a.s);
      r.clamp();
    }

    // (public) this & a
    function op_and(x, y) {
      return x & y;
    }
    function bnAnd(a) {
      var r = nbi();
      this.bitwiseTo(a, op_and, r);
      return r;
    }

    // (public) this | a
    function op_or(x, y) {
      return x | y;
    }
    function bnOr(a) {
      var r = nbi();
      this.bitwiseTo(a, op_or, r);
      return r;
    }

    // (public) this ^ a
    function op_xor(x, y) {
      return x ^ y;
    }
    function bnXor(a) {
      var r = nbi();
      this.bitwiseTo(a, op_xor, r);
      return r;
    }

    // (public) this & ~a
    function op_andnot(x, y) {
      return x & ~y;
    }
    function bnAndNot(a) {
      var r = nbi();
      this.bitwiseTo(a, op_andnot, r);
      return r;
    }

    // (public) ~this
    function bnNot() {
      var r = nbi();
      for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];
      r.t = this.t;
      r.s = ~this.s;
      return r;
    }

    // (public) this << n
    function bnShiftLeft(n) {
      var r = nbi();
      if (n < 0) this.rShiftTo(-n, r);
      else this.lShiftTo(n, r);
      return r;
    }

    // (public) this >> n
    function bnShiftRight(n) {
      var r = nbi();
      if (n < 0) this.lShiftTo(-n, r);
      else this.rShiftTo(n, r);
      return r;
    }

    // return index of lowest 1-bit in x, x < 2^31
    function lbit(x) {
      if (x == 0) return -1;
      var r = 0;
      if ((x & 0xffff) == 0) {
        x >>= 16;
        r += 16;
      }
      if ((x & 0xff) == 0) {
        x >>= 8;
        r += 8;
      }
      if ((x & 0xf) == 0) {
        x >>= 4;
        r += 4;
      }
      if ((x & 3) == 0) {
        x >>= 2;
        r += 2;
      }
      if ((x & 1) == 0) ++r;
      return r;
    }

    // (public) returns index of lowest 1-bit (or -1 if none)
    function bnGetLowestSetBit() {
      for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);
      if (this.s < 0) return this.t * this.DB;
      return -1;
    }

    // return number of 1 bits in x
    function cbit(x) {
      var r = 0;
      while (x != 0) {
        x &= x - 1;
        ++r;
      }
      return r;
    }

    // (public) return number of set bits
    function bnBitCount() {
      var r = 0,
        x = this.s & this.DM;
      for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);
      return r;
    }

    // (public) true iff nth bit is set
    function bnTestBit(n) {
      var j = Math.floor(n / this.DB);
      if (j >= this.t) return this.s != 0;
      return (this[j] & (1 << n % this.DB)) != 0;
    }

    // (protected) this op (1<<n)
    function bnpChangeBit(n, op) {
      var r = BigInteger.ONE.shiftLeft(n);
      this.bitwiseTo(r, op, r);
      return r;
    }

    // (public) this | (1<<n)
    function bnSetBit(n) {
      return this.changeBit(n, op_or);
    }

    // (public) this & ~(1<<n)
    function bnClearBit(n) {
      return this.changeBit(n, op_andnot);
    }

    // (public) this ^ (1<<n)
    function bnFlipBit(n) {
      return this.changeBit(n, op_xor);
    }

    // (protected) r = this + a
    function bnpAddTo(a, r) {
      var i = 0,
        c = 0,
        m = Math.min(a.t, this.t);
      while (i < m) {
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
      }
      if (a.t < this.t) {
        c += a.s;
        while (i < this.t) {
          c += this[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += this.s;
      } else {
        c += this.s;
        while (i < a.t) {
          c += a[i];
          r[i++] = c & this.DM;
          c >>= this.DB;
        }
        c += a.s;
      }
      r.s = c < 0 ? -1 : 0;
      if (c > 0) r[i++] = c;
      else if (c < -1) r[i++] = this.DV + c;
      r.t = i;
      r.clamp();
    }

    // (public) this + a
    function bnAdd(a) {
      var r = nbi();
      this.addTo(a, r);
      return r;
    }

    // (public) this - a
    function bnSubtract(a) {
      var r = nbi();
      this.subTo(a, r);
      return r;
    }

    // (public) this * a
    function bnMultiply(a) {
      var r = nbi();
      this.multiplyTo(a, r);
      return r;
    }

    // (public) this^2
    function bnSquare() {
      var r = nbi();
      this.squareTo(r);
      return r;
    }

    // (public) this / a
    function bnDivide(a) {
      var r = nbi();
      this.divRemTo(a, r, null);
      return r;
    }

    // (public) this % a
    function bnRemainder(a) {
      var r = nbi();
      this.divRemTo(a, null, r);
      return r;
    }

    // (public) [this/a,this%a]
    function bnDivideAndRemainder(a) {
      var q = nbi(),
        r = nbi();
      this.divRemTo(a, q, r);
      return new Array(q, r);
    }

    // (protected) this *= n, this >= 0, 1 < n < DV
    function bnpDMultiply(n) {
      this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
      ++this.t;
      this.clamp();
    }

    // (protected) this += n << w words, this >= 0
    function bnpDAddOffset(n, w) {
      if (n == 0) return;
      while (this.t <= w) this[this.t++] = 0;
      this[w] += n;
      while (this[w] >= this.DV) {
        this[w] -= this.DV;
        if (++w >= this.t) this[this.t++] = 0;
        ++this[w];
      }
    }

    // A "null" reducer
    function NullExp() {}
    function nNop(x) {
      return x;
    }
    function nMulTo(x, y, r) {
      x.multiplyTo(y, r);
    }
    function nSqrTo(x, r) {
      x.squareTo(r);
    }

    NullExp.prototype.convert = nNop;
    NullExp.prototype.revert = nNop;
    NullExp.prototype.mulTo = nMulTo;
    NullExp.prototype.sqrTo = nSqrTo;

    // (public) this^e
    function bnPow(e) {
      return this.exp(e, new NullExp());
    }

    // (protected) r = lower n words of "this * a", a.t <= n
    // "this" should be the larger one if appropriate.
    function bnpMultiplyLowerTo(a, n, r) {
      var i = Math.min(this.t + a.t, n);
      r.s = 0; // assumes a,this >= 0
      r.t = i;
      while (i > 0) r[--i] = 0;
      var j;
      for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
      for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);
      r.clamp();
    }

    // (protected) r = "this * a" without lower n words, n > 0
    // "this" should be the larger one if appropriate.
    function bnpMultiplyUpperTo(a, n, r) {
      --n;
      var i = (r.t = this.t + a.t - n);
      r.s = 0; // assumes a,this >= 0
      while (--i >= 0) r[i] = 0;
      for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
      r.clamp();
      r.drShiftTo(1, r);
    }

    // Barrett modular reduction
    function Barrett(m) {
      // setup Barrett
      this.r2 = nbi();
      this.q3 = nbi();
      BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
      this.mu = this.r2.divide(m);
      this.m = m;
    }

    function barrettConvert(x) {
      if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);
      else if (x.compareTo(this.m) < 0) return x;
      else {
        var r = nbi();
        x.copyTo(r);
        this.reduce(r);
        return r;
      }
    }

    function barrettRevert(x) {
      return x;
    }

    // x = x mod m (HAC 14.42)
    function barrettReduce(x) {
      x.drShiftTo(this.m.t - 1, this.r2);
      if (x.t > this.m.t + 1) {
        x.t = this.m.t + 1;
        x.clamp();
      }
      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
      while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);
      x.subTo(this.r2, x);
      while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
    }

    // r = x^2 mod m; x != r
    function barrettSqrTo(x, r) {
      x.squareTo(r);
      this.reduce(r);
    }

    // r = x*y mod m; x,y != r
    function barrettMulTo(x, y, r) {
      x.multiplyTo(y, r);
      this.reduce(r);
    }

    Barrett.prototype.convert = barrettConvert;
    Barrett.prototype.revert = barrettRevert;
    Barrett.prototype.reduce = barrettReduce;
    Barrett.prototype.mulTo = barrettMulTo;
    Barrett.prototype.sqrTo = barrettSqrTo;

    // (public) this^e % m (HAC 14.85)
    function bnModPow(e, m) {
      var i = e.bitLength(),
        k,
        r = nbv(1),
        z;
      if (i <= 0) return r;
      else if (i < 18) k = 1;
      else if (i < 48) k = 3;
      else if (i < 144) k = 4;
      else if (i < 768) k = 5;
      else k = 6;
      if (i < 8) z = new Classic(m);
      else if (m.isEven()) z = new Barrett(m);
      else z = new Montgomery(m);

      // precomputation
      var g = new Array(),
        n = 3,
        k1 = k - 1,
        km = (1 << k) - 1;
      g[1] = z.convert(this);
      if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while (n <= km) {
          g[n] = nbi();
          z.mulTo(g2, g[n - 2], g[n]);
          n += 2;
        }
      }

      var j = e.t - 1,
        w,
        is1 = true,
        r2 = nbi(),
        t;
      i = nbits(e[j]) - 1;
      while (j >= 0) {
        if (i >= k1) w = (e[j] >> (i - k1)) & km;
        else {
          w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
          if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
        }

        n = k;
        while ((w & 1) == 0) {
          w >>= 1;
          --n;
        }
        if ((i -= n) < 0) {
          i += this.DB;
          --j;
        }
        if (is1) {
          // ret == 1, don't bother squaring or multiplying it
          g[w].copyTo(r);
          is1 = false;
        } else {
          while (n > 1) {
            z.sqrTo(r, r2);
            z.sqrTo(r2, r);
            n -= 2;
          }
          if (n > 0) z.sqrTo(r, r2);
          else {
            t = r;
            r = r2;
            r2 = t;
          }
          z.mulTo(r2, g[w], r);
        }

        while (j >= 0 && (e[j] & (1 << i)) == 0) {
          z.sqrTo(r, r2);
          t = r;
          r = r2;
          r2 = t;
          if (--i < 0) {
            i = this.DB - 1;
            --j;
          }
        }
      }
      return z.revert(r);
    }

    // (public) gcd(this,a) (HAC 14.54)
    function bnGCD(a) {
      var x = this.s < 0 ? this.negate() : this.clone();
      var y = a.s < 0 ? a.negate() : a.clone();
      if (x.compareTo(y) < 0) {
        var t = x;
        x = y;
        y = t;
      }
      var i = x.getLowestSetBit(),
        g = y.getLowestSetBit();
      if (g < 0) return x;
      if (i < g) g = i;
      if (g > 0) {
        x.rShiftTo(g, x);
        y.rShiftTo(g, y);
      }
      while (x.signum() > 0) {
        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
        if (x.compareTo(y) >= 0) {
          x.subTo(y, x);
          x.rShiftTo(1, x);
        } else {
          y.subTo(x, y);
          y.rShiftTo(1, y);
        }
      }
      if (g > 0) y.lShiftTo(g, y);
      return y;
    }

    // (protected) this % n, n < 2^26
    function bnpModInt(n) {
      if (n <= 0) return 0;
      var d = this.DV % n,
        r = this.s < 0 ? n - 1 : 0;
      if (this.t > 0)
        if (d == 0) r = this[0] % n;
        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;
      return r;
    }

    // (public) 1/this % m (HAC 14.61)
    function bnModInverse(m) {
      var ac = m.isEven();
      if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
      var u = m.clone(),
        v = this.clone();
      var a = nbv(1),
        b = nbv(0),
        c = nbv(0),
        d = nbv(1);
      while (u.signum() != 0) {
        while (u.isEven()) {
          u.rShiftTo(1, u);
          if (ac) {
            if (!a.isEven() || !b.isEven()) {
              a.addTo(this, a);
              b.subTo(m, b);
            }
            a.rShiftTo(1, a);
          } else if (!b.isEven()) b.subTo(m, b);
          b.rShiftTo(1, b);
        }
        while (v.isEven()) {
          v.rShiftTo(1, v);
          if (ac) {
            if (!c.isEven() || !d.isEven()) {
              c.addTo(this, c);
              d.subTo(m, d);
            }
            c.rShiftTo(1, c);
          } else if (!d.isEven()) d.subTo(m, d);
          d.rShiftTo(1, d);
        }
        if (u.compareTo(v) >= 0) {
          u.subTo(v, u);
          if (ac) a.subTo(c, a);
          b.subTo(d, b);
        } else {
          v.subTo(u, v);
          if (ac) c.subTo(a, c);
          d.subTo(b, d);
        }
      }
      if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
      if (d.compareTo(m) >= 0) return d.subtract(m);
      if (d.signum() < 0) d.addTo(m, d);
      else return d;
      if (d.signum() < 0) return d.add(m);
      else return d;
    }

    var lowprimes = [
      2,
      3,
      5,
      7,
      11,
      13,
      17,
      19,
      23,
      29,
      31,
      37,
      41,
      43,
      47,
      53,
      59,
      61,
      67,
      71,
      73,
      79,
      83,
      89,
      97,
      101,
      103,
      107,
      109,
      113,
      127,
      131,
      137,
      139,
      149,
      151,
      157,
      163,
      167,
      173,
      179,
      181,
      191,
      193,
      197,
      199,
      211,
      223,
      227,
      229,
      233,
      239,
      241,
      251,
      257,
      263,
      269,
      271,
      277,
      281,
      283,
      293,
      307,
      311,
      313,
      317,
      331,
      337,
      347,
      349,
      353,
      359,
      367,
      373,
      379,
      383,
      389,
      397,
      401,
      409,
      419,
      421,
      431,
      433,
      439,
      443,
      449,
      457,
      461,
      463,
      467,
      479,
      487,
      491,
      499,
      503,
      509,
      521,
      523,
      541,
      547,
      557,
      563,
      569,
      571,
      577,
      587,
      593,
      599,
      601,
      607,
      613,
      617,
      619,
      631,
      641,
      643,
      647,
      653,
      659,
      661,
      673,
      677,
      683,
      691,
      701,
      709,
      719,
      727,
      733,
      739,
      743,
      751,
      757,
      761,
      769,
      773,
      787,
      797,
      809,
      811,
      821,
      823,
      827,
      829,
      839,
      853,
      857,
      859,
      863,
      877,
      881,
      883,
      887,
      907,
      911,
      919,
      929,
      937,
      941,
      947,
      953,
      967,
      971,
      977,
      983,
      991,
      997
    ];
    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

    // (public) test primality with certainty >= 1-.5^t
    function bnIsProbablePrime(t) {
      var i,
        x = this.abs();
      if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
        for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;
        return false;
      }
      if (x.isEven()) return false;
      i = 1;
      while (i < lowprimes.length) {
        var m = lowprimes[i],
          j = i + 1;
        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];
        m = x.modInt(m);
        while (i < j) if (m % lowprimes[i++] == 0) return false;
      }
      return x.millerRabin(t);
    }

    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
    function bnpMillerRabin(t) {
      var n1 = this.subtract(BigInteger.ONE);
      var k = n1.getLowestSetBit();
      if (k <= 0) return false;
      var r = n1.shiftRight(k);
      t = (t + 1) >> 1;
      if (t > lowprimes.length) t = lowprimes.length;
      var a = nbi();
      for (var i = 0; i < t; ++i) {
        //Pick bases at random, instead of starting at 2
        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
        var y = a.modPow(r, this);
        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
          var j = 1;
          while (j++ < k && y.compareTo(n1) != 0) {
            y = y.modPowInt(2, this);
            if (y.compareTo(BigInteger.ONE) == 0) return false;
          }
          if (y.compareTo(n1) != 0) return false;
        }
      }
      return true;
    }

    // protected
    BigInteger.prototype.chunkSize = bnpChunkSize;
    BigInteger.prototype.toRadix = bnpToRadix;
    BigInteger.prototype.fromRadix = bnpFromRadix;
    BigInteger.prototype.fromNumber = bnpFromNumber;
    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
    BigInteger.prototype.changeBit = bnpChangeBit;
    BigInteger.prototype.addTo = bnpAddTo;
    BigInteger.prototype.dMultiply = bnpDMultiply;
    BigInteger.prototype.dAddOffset = bnpDAddOffset;
    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
    BigInteger.prototype.modInt = bnpModInt;
    BigInteger.prototype.millerRabin = bnpMillerRabin;

    // public
    BigInteger.prototype.clone = bnClone;
    BigInteger.prototype.intValue = bnIntValue;
    BigInteger.prototype.byteValue = bnByteValue;
    BigInteger.prototype.shortValue = bnShortValue;
    BigInteger.prototype.signum = bnSigNum;
    BigInteger.prototype.toByteArray = bnToByteArray;
    BigInteger.prototype.equals = bnEquals;
    BigInteger.prototype.min = bnMin;
    BigInteger.prototype.max = bnMax;
    BigInteger.prototype.and = bnAnd;
    BigInteger.prototype.or = bnOr;
    BigInteger.prototype.xor = bnXor;
    BigInteger.prototype.andNot = bnAndNot;
    BigInteger.prototype.not = bnNot;
    BigInteger.prototype.shiftLeft = bnShiftLeft;
    BigInteger.prototype.shiftRight = bnShiftRight;
    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
    BigInteger.prototype.bitCount = bnBitCount;
    BigInteger.prototype.testBit = bnTestBit;
    BigInteger.prototype.setBit = bnSetBit;
    BigInteger.prototype.clearBit = bnClearBit;
    BigInteger.prototype.flipBit = bnFlipBit;
    BigInteger.prototype.add = bnAdd;
    BigInteger.prototype.subtract = bnSubtract;
    BigInteger.prototype.multiply = bnMultiply;
    BigInteger.prototype.divide = bnDivide;
    BigInteger.prototype.remainder = bnRemainder;
    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
    BigInteger.prototype.modPow = bnModPow;
    BigInteger.prototype.modInverse = bnModInverse;
    BigInteger.prototype.pow = bnPow;
    BigInteger.prototype.gcd = bnGCD;
    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

    // JSBN-specific extension
    BigInteger.prototype.square = bnSquare;

    // Expose the Barrett function
    BigInteger.prototype.Barrett = Barrett;

    // BigInteger interfaces not implemented in jsbn:

    // BigInteger(int signum, byte[] magnitude)
    // double doubleValue()
    // float floatValue()
    // int hashCode()
    // long longValue()
    // static BigInteger valueOf(long val)

    // Random number generator - requires a PRNG backend, e.g. prng4.js

    // For best results, put code like
    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
    // in your main HTML document.

    var rng_state;
    var rng_pool;
    var rng_pptr;

    // Mix in a 32-bit integer into the pool
    function rng_seed_int(x) {
      rng_pool[rng_pptr++] ^= x & 255;
      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
      if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;
    }

    // Mix in the current time (w/milliseconds) into the pool
    function rng_seed_time() {
      rng_seed_int(new Date().getTime());
    }

    // Initialize the pool with junk if needed.
    if (rng_pool == null) {
      rng_pool = new Array();
      rng_pptr = 0;
      var t;
      if (typeof window !== 'undefined' && window.crypto) {
        if (window.crypto.getRandomValues) {
          // Use webcrypto if available
          var ua = new Uint8Array(32);
          window.crypto.getRandomValues(ua);
          for (t = 0; t < 32; ++t) rng_pool[rng_pptr++] = ua[t];
        } else if (navigator.appName == 'Netscape' && navigator.appVersion < '5') {
          // Extract entropy (256 bits) from NS4 RNG if available
          var z = window.crypto.random(32);
          for (t = 0; t < z.length; ++t) rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
      while (rng_pptr < rng_psize) {
        // extract some randomness from Math.random()
        t = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = t >>> 8;
        rng_pool[rng_pptr++] = t & 255;
      }
      rng_pptr = 0;
      rng_seed_time();
      //rng_seed_int(window.screenX);
      //rng_seed_int(window.screenY);
    }

    function rng_get_byte() {
      if (rng_state == null) {
        rng_seed_time();
        rng_state = prng_newstate();
        rng_state.init(rng_pool);
        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) rng_pool[rng_pptr] = 0;
        rng_pptr = 0;
        //rng_pool = null;
      }
      // TODO: allow reseeding after first request
      return rng_state.next();
    }

    function rng_get_bytes(ba) {
      var i;
      for (i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
    }

    function SecureRandom() {}

    SecureRandom.prototype.nextBytes = rng_get_bytes;

    // prng4.js - uses Arcfour as a PRNG

    function Arcfour() {
      this.i = 0;
      this.j = 0;
      this.S = new Array();
    }

    // Initialize arcfour context from key, an array of ints, each from [0..255]
    function ARC4init(key) {
      var i, j, t;
      for (i = 0; i < 256; ++i) this.S[i] = i;
      j = 0;
      for (i = 0; i < 256; ++i) {
        j = (j + this.S[i] + key[i % key.length]) & 255;
        t = this.S[i];
        this.S[i] = this.S[j];
        this.S[j] = t;
      }
      this.i = 0;
      this.j = 0;
    }

    function ARC4next() {
      var t;
      this.i = (this.i + 1) & 255;
      this.j = (this.j + this.S[this.i]) & 255;
      t = this.S[this.i];
      this.S[this.i] = this.S[this.j];
      this.S[this.j] = t;
      return this.S[(t + this.S[this.i]) & 255];
    }

    Arcfour.prototype.init = ARC4init;
    Arcfour.prototype.next = ARC4next;

    // Plug in your RNG constructor here
    function prng_newstate() {
      return new Arcfour();
    }

    // Pool size must be a multiple of 4 and greater than 32.
    // An array of bytes the size of the pool will be passed to init()
    var rng_psize = 256;

    BigInteger.SecureRandom = SecureRandom;
    BigInteger.BigInteger = BigInteger;
    {
      module.exports = BigInteger;
    }
  }.call(_commonjsHelpers.commonjsGlobal));
});

// Basic Javascript Elliptic Curve implementation
// Ported loosely from BouncyCastle's Java EC code
// Only Fp curves implemented for now

// Requires jsbn.js and jsbn2.js
var BigInteger = jsbn.BigInteger;
var Barrett = BigInteger.prototype.Barrett;

// ----------------
// ECFieldElementFp

// constructor
function ECFieldElementFp(q, x) {
  this.x = x;
  // TODO if(x.compareTo(q) >= 0) error
  this.q = q;
}

function feFpEquals(other) {
  if (other == this) return true;
  return this.q.equals(other.q) && this.x.equals(other.x);
}

function feFpToBigInteger() {
  return this.x;
}

function feFpNegate() {
  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
}

function feFpAdd(b) {
  return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
}

function feFpSubtract(b) {
  return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
}

function feFpMultiply(b) {
  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
}

function feFpSquare() {
  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
}

function feFpDivide(b) {
  return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
}

ECFieldElementFp.prototype.equals = feFpEquals;
ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
ECFieldElementFp.prototype.negate = feFpNegate;
ECFieldElementFp.prototype.add = feFpAdd;
ECFieldElementFp.prototype.subtract = feFpSubtract;
ECFieldElementFp.prototype.multiply = feFpMultiply;
ECFieldElementFp.prototype.square = feFpSquare;
ECFieldElementFp.prototype.divide = feFpDivide;

// ----------------
// ECPointFp

// constructor
function ECPointFp(curve, x, y, z) {
  this.curve = curve;
  this.x = x;
  this.y = y;
  // Projective coordinates: either zinv == null or z * zinv == 1
  // z and zinv are just BigIntegers, not fieldElements
  if (z == null) {
    this.z = BigInteger.ONE;
  } else {
    this.z = z;
  }
  this.zinv = null;
  //TODO: compression flag
}

function pointFpGetX() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }
  var r = this.x.toBigInteger().multiply(this.zinv);
  this.curve.reduce(r);
  return this.curve.fromBigInteger(r);
}

function pointFpGetY() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }
  var r = this.y.toBigInteger().multiply(this.zinv);
  this.curve.reduce(r);
  return this.curve.fromBigInteger(r);
}

function pointFpEquals(other) {
  if (other == this) return true;
  if (this.isInfinity()) return other.isInfinity();
  if (other.isInfinity()) return this.isInfinity();
  var u, v;
  // u = Y2 * Z1 - Y1 * Z2
  u = other.y
    .toBigInteger()
    .multiply(this.z)
    .subtract(this.y.toBigInteger().multiply(other.z))
    .mod(this.curve.q);
  if (!u.equals(BigInteger.ZERO)) return false;
  // v = X2 * Z1 - X1 * Z2
  v = other.x
    .toBigInteger()
    .multiply(this.z)
    .subtract(this.x.toBigInteger().multiply(other.z))
    .mod(this.curve.q);
  return v.equals(BigInteger.ZERO);
}

function pointFpIsInfinity() {
  if (this.x == null && this.y == null) return true;
  return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
}

function pointFpNegate() {
  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
}

function pointFpAdd(b) {
  if (this.isInfinity()) return b;
  if (b.isInfinity()) return this;

  // u = Y2 * Z1 - Y1 * Z2
  var u = b.y
    .toBigInteger()
    .multiply(this.z)
    .subtract(this.y.toBigInteger().multiply(b.z))
    .mod(this.curve.q);
  // v = X2 * Z1 - X1 * Z2
  var v = b.x
    .toBigInteger()
    .multiply(this.z)
    .subtract(this.x.toBigInteger().multiply(b.z))
    .mod(this.curve.q);

  if (BigInteger.ZERO.equals(v)) {
    if (BigInteger.ZERO.equals(u)) {
      return this.twice(); // this == b, so double
    }
    return this.curve.getInfinity(); // this = -b, so infinity
  }

  var THREE = new BigInteger('3');
  var x1 = this.x.toBigInteger();
  var y1 = this.y.toBigInteger();
  b.x.toBigInteger();
  b.y.toBigInteger();

  var v2 = v.square();
  var v3 = v2.multiply(v);
  var x1v2 = x1.multiply(v2);
  var zu2 = u.square().multiply(this.z);

  // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
  var x3 = zu2
    .subtract(x1v2.shiftLeft(1))
    .multiply(b.z)
    .subtract(v3)
    .multiply(v)
    .mod(this.curve.q);
  // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
  var y3 = x1v2
    .multiply(THREE)
    .multiply(u)
    .subtract(y1.multiply(v3))
    .subtract(zu2.multiply(u))
    .multiply(b.z)
    .add(u.multiply(v3))
    .mod(this.curve.q);
  // z3 = v^3 * z1 * z2
  var z3 = v3
    .multiply(this.z)
    .multiply(b.z)
    .mod(this.curve.q);

  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
}

function pointFpTwice() {
  if (this.isInfinity()) return this;
  if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();

  // TODO: optimized handling of constants
  var THREE = new BigInteger('3');
  var x1 = this.x.toBigInteger();
  var y1 = this.y.toBigInteger();

  var y1z1 = y1.multiply(this.z);
  var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
  var a = this.curve.a.toBigInteger();

  // w = 3 * x1^2 + a * z1^2
  var w = x1.square().multiply(THREE);
  if (!BigInteger.ZERO.equals(a)) {
    w = w.add(this.z.square().multiply(a));
  }
  w = w.mod(this.curve.q);
  //this.curve.reduce(w);
  // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
  var x3 = w
    .square()
    .subtract(x1.shiftLeft(3).multiply(y1sqz1))
    .shiftLeft(1)
    .multiply(y1z1)
    .mod(this.curve.q);
  // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
  var y3 = w
    .multiply(THREE)
    .multiply(x1)
    .subtract(y1sqz1.shiftLeft(1))
    .shiftLeft(2)
    .multiply(y1sqz1)
    .subtract(w.square().multiply(w))
    .mod(this.curve.q);
  // z3 = 8 * (y1 * z1)^3
  var z3 = y1z1
    .square()
    .multiply(y1z1)
    .shiftLeft(3)
    .mod(this.curve.q);

  return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
}

// Simple NAF (Non-Adjacent Form) multiplication algorithm
// TODO: modularize the multiplication algorithm
function pointFpMultiply(k) {
  if (this.isInfinity()) return this;
  if (k.signum() == 0) return this.curve.getInfinity();

  var e = k;
  var h = e.multiply(new BigInteger('3'));

  var neg = this.negate();
  var R = this;

  var i;
  for (i = h.bitLength() - 2; i > 0; --i) {
    R = R.twice();

    var hBit = h.testBit(i);
    var eBit = e.testBit(i);

    if (hBit != eBit) {
      R = R.add(hBit ? this : neg);
    }
  }

  return R;
}

// Compute this*j + x*k (simultaneous multiplication)
function pointFpMultiplyTwo(j, x, k) {
  var i;
  if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;
  else i = k.bitLength() - 1;

  var R = this.curve.getInfinity();
  var both = this.add(x);
  while (i >= 0) {
    R = R.twice();
    if (j.testBit(i)) {
      if (k.testBit(i)) {
        R = R.add(both);
      } else {
        R = R.add(this);
      }
    } else {
      if (k.testBit(i)) {
        R = R.add(x);
      }
    }
    --i;
  }

  return R;
}

ECPointFp.prototype.getX = pointFpGetX;
ECPointFp.prototype.getY = pointFpGetY;
ECPointFp.prototype.equals = pointFpEquals;
ECPointFp.prototype.isInfinity = pointFpIsInfinity;
ECPointFp.prototype.negate = pointFpNegate;
ECPointFp.prototype.add = pointFpAdd;
ECPointFp.prototype.twice = pointFpTwice;
ECPointFp.prototype.multiply = pointFpMultiply;
ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;

// ----------------
// ECCurveFp

// constructor
function ECCurveFp(q, a, b) {
  this.q = q;
  this.a = this.fromBigInteger(a);
  this.b = this.fromBigInteger(b);
  this.infinity = new ECPointFp(this, null, null);
  this.reducer = new Barrett(this.q);
}

function curveFpGetQ() {
  return this.q;
}

function curveFpGetA() {
  return this.a;
}

function curveFpGetB() {
  return this.b;
}

function curveFpEquals(other) {
  if (other == this) return true;
  return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);
}

function curveFpGetInfinity() {
  return this.infinity;
}

function curveFpFromBigInteger(x) {
  return new ECFieldElementFp(this.q, x);
}

function curveReduce(x) {
  this.reducer.reduce(x);
}

function curveFpEncodePointHex(p) {
  if (p.isInfinity()) return '00';
  var xHex = p
    .getX()
    .toBigInteger()
    .toString(16);
  var yHex = p
    .getY()
    .toBigInteger()
    .toString(16);
  var oLen = this.getQ().toString(16).length;
  if (oLen % 2 != 0) oLen++;
  while (xHex.length < oLen) {
    xHex = '0' + xHex;
  }
  while (yHex.length < oLen) {
    yHex = '0' + yHex;
  }
  return '04' + xHex + yHex;
}

ECCurveFp.prototype.getQ = curveFpGetQ;
ECCurveFp.prototype.getA = curveFpGetA;
ECCurveFp.prototype.getB = curveFpGetB;
ECCurveFp.prototype.equals = curveFpEquals;
ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
ECCurveFp.prototype.reduce = curveReduce;
//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
ECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;

// from: https://github.com/kaielvin/jsbn-ec-point-compression
ECCurveFp.prototype.decodePointHex = function(s) {
  var yIsEven;
  switch (
    parseInt(s.substr(0, 2), 16) // first byte
  ) {
    case 0:
      return this.infinity;
    case 2:
      yIsEven = false;
    case 3:
      if (yIsEven == undefined) yIsEven = true;
      var len = s.length - 2;
      var xHex = s.substr(2, len);
      var x = this.fromBigInteger(new BigInteger(xHex, 16));
      var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());
      var beta = alpha.sqrt();

      if (beta == null) throw 'Invalid point compression';

      var betaValue = beta.toBigInteger();
      if (betaValue.testBit(0) != yIsEven) {
        // Use the other root
        beta = this.fromBigInteger(this.getQ().subtract(betaValue));
      }
      return new ECPointFp(this, x, beta);
    case 4:
    case 6:
    case 7:
      var len = (s.length - 2) / 2;
      var xHex = s.substr(2, len);
      var yHex = s.substr(len + 2, len);

      return new ECPointFp(
        this,
        this.fromBigInteger(new BigInteger(xHex, 16)),
        this.fromBigInteger(new BigInteger(yHex, 16))
      );

    default:
      // unsupported
      return null;
  }
};
ECCurveFp.prototype.encodeCompressedPointHex = function(p) {
  if (p.isInfinity()) return '00';
  var xHex = p
    .getX()
    .toBigInteger()
    .toString(16);
  var oLen = this.getQ().toString(16).length;
  if (oLen % 2 != 0) oLen++;
  while (xHex.length < oLen) xHex = '0' + xHex;
  var yPrefix;
  if (
    p
      .getY()
      .toBigInteger()
      .isEven()
  )
    yPrefix = '02';
  else yPrefix = '03';

  return yPrefix + xHex;
};

ECFieldElementFp.prototype.getR = function() {
  if (this.r != undefined) return this.r;

  this.r = null;
  var bitLength = this.q.bitLength();
  if (bitLength > 128) {
    var firstWord = this.q.shiftRight(bitLength - 64);
    if (firstWord.intValue() == -1) {
      this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);
    }
  }
  return this.r;
};
ECFieldElementFp.prototype.modMult = function(x1, x2) {
  return this.modReduce(x1.multiply(x2));
};
ECFieldElementFp.prototype.modReduce = function(x) {
  if (this.getR() != null) {
    var qLen = q.bitLength();
    while (x.bitLength() > qLen + 1) {
      var u = x.shiftRight(qLen);
      var v = x.subtract(u.shiftLeft(qLen));
      if (!this.getR().equals(BigInteger.ONE)) {
        u = u.multiply(this.getR());
      }
      x = u.add(v);
    }
    while (x.compareTo(q) >= 0) {
      x = x.subtract(q);
    }
  } else {
    x = x.mod(q);
  }
  return x;
};
ECFieldElementFp.prototype.sqrt = function() {
  if (!this.q.testBit(0)) throw 'unsupported';

  // p mod 4 == 3
  if (this.q.testBit(1)) {
    var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));
    return z.square().equals(this) ? z : null;
  }

  // p mod 4 == 1
  var qMinusOne = this.q.subtract(BigInteger.ONE);

  var legendreExponent = qMinusOne.shiftRight(1);
  if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {
    return null;
  }

  var u = qMinusOne.shiftRight(2);
  var k = u.shiftLeft(1).add(BigInteger.ONE);

  var Q = this.x;
  var fourQ = modDouble(modDouble(Q));

  var U, V;
  do {
    var P;
    do {
      P = new BigInteger(this.q.bitLength(), new SecureRandom());
    } while (
      P.compareTo(this.q) >= 0 ||
      !P.multiply(P)
        .subtract(fourQ)
        .modPow(legendreExponent, this.q)
        .equals(qMinusOne)
    );

    var result = this.lucasSequence(P, Q, k);
    U = result[0];
    V = result[1];

    if (this.modMult(V, V).equals(fourQ)) {
      // Integer division by 2, mod q
      if (V.testBit(0)) {
        V = V.add(q);
      }

      V = V.shiftRight(1);

      return new ECFieldElementFp(q, V);
    }
  } while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));

  return null;
};
ECFieldElementFp.prototype.lucasSequence = function(P, Q, k) {
  var n = k.bitLength();
  var s = k.getLowestSetBit();

  var Uh = BigInteger.ONE;
  var Vl = BigInteger.TWO;
  var Vh = P;
  var Ql = BigInteger.ONE;
  var Qh = BigInteger.ONE;

  for (var j = n - 1; j >= s + 1; --j) {
    Ql = this.modMult(Ql, Qh);

    if (k.testBit(j)) {
      Qh = this.modMult(Ql, Q);
      Uh = this.modMult(Uh, Vh);
      Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
      Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));
    } else {
      Qh = Ql;
      Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
      Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
      Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
    }
  }

  Ql = this.modMult(Ql, Qh);
  Qh = this.modMult(Ql, Q);
  Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
  Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
  Ql = this.modMult(Ql, Qh);

  for (var j = 1; j <= s; ++j) {
    Uh = this.modMult(Uh, Vl);
    Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
    Ql = this.modMult(Ql, Ql);
  }

  return [Uh, Vl];
};

var exports$1 = {
  ECCurveFp: ECCurveFp,
  ECPointFp: ECPointFp,
  ECFieldElementFp: ECFieldElementFp
};

var ec = exports$1;

var naclFast = _commonjsHelpers.createCommonjsModule(function(module) {
  (function(nacl) {
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/

    var gf = function(init) {
      var i,
        r = new Float64Array(16);
      if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
      return r;
    };

    //  Pluggable, initialized in high-level API below.
    var randombytes = function(/* x, n */) {
      throw new Error('no PRNG');
    };

    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;

    var gf0 = gf(),
      gf1 = gf([1]),
      _121665 = gf([0xdb41, 1]),
      D = gf([
        0x78a3,
        0x1359,
        0x4dca,
        0x75eb,
        0xd8ab,
        0x4141,
        0x0a4d,
        0x0070,
        0xe898,
        0x7779,
        0x4079,
        0x8cc7,
        0xfe73,
        0x2b6f,
        0x6cee,
        0x5203
      ]),
      D2 = gf([
        0xf159,
        0x26b2,
        0x9b94,
        0xebd6,
        0xb156,
        0x8283,
        0x149a,
        0x00e0,
        0xd130,
        0xeef3,
        0x80f2,
        0x198e,
        0xfce7,
        0x56df,
        0xd9dc,
        0x2406
      ]),
      X = gf([
        0xd51a,
        0x8f25,
        0x2d60,
        0xc956,
        0xa7b2,
        0x9525,
        0xc760,
        0x692c,
        0xdc5c,
        0xfdd6,
        0xe231,
        0xc0a4,
        0x53fe,
        0xcd6e,
        0x36d3,
        0x2169
      ]),
      Y = gf([
        0x6658,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666
      ]),
      I = gf([
        0xa0b0,
        0x4a0e,
        0x1b27,
        0xc4ee,
        0xe478,
        0xad2f,
        0x1806,
        0x2f43,
        0xd7a7,
        0x3dfb,
        0x0099,
        0x2b4d,
        0xdf0b,
        0x4fc1,
        0x2480,
        0x2b83
      ]);

    function ts64(x, i, h, l) {
      x[i] = (h >> 24) & 0xff;
      x[i + 1] = (h >> 16) & 0xff;
      x[i + 2] = (h >> 8) & 0xff;
      x[i + 3] = h & 0xff;
      x[i + 4] = (l >> 24) & 0xff;
      x[i + 5] = (l >> 16) & 0xff;
      x[i + 6] = (l >> 8) & 0xff;
      x[i + 7] = l & 0xff;
    }

    function vn(x, xi, y, yi, n) {
      var i,
        d = 0;
      for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
      return (1 & ((d - 1) >>> 8)) - 1;
    }

    function crypto_verify_16(x, xi, y, yi) {
      return vn(x, xi, y, yi, 16);
    }

    function crypto_verify_32(x, xi, y, yi) {
      return vn(x, xi, y, yi, 32);
    }

    function core_salsa20(o, p, k, c) {
      var j0 = (c[0] & 0xff) | ((c[1] & 0xff) << 8) | ((c[2] & 0xff) << 16) | ((c[3] & 0xff) << 24),
        j1 = (k[0] & 0xff) | ((k[1] & 0xff) << 8) | ((k[2] & 0xff) << 16) | ((k[3] & 0xff) << 24),
        j2 = (k[4] & 0xff) | ((k[5] & 0xff) << 8) | ((k[6] & 0xff) << 16) | ((k[7] & 0xff) << 24),
        j3 = (k[8] & 0xff) | ((k[9] & 0xff) << 8) | ((k[10] & 0xff) << 16) | ((k[11] & 0xff) << 24),
        j4 = (k[12] & 0xff) | ((k[13] & 0xff) << 8) | ((k[14] & 0xff) << 16) | ((k[15] & 0xff) << 24),
        j5 = (c[4] & 0xff) | ((c[5] & 0xff) << 8) | ((c[6] & 0xff) << 16) | ((c[7] & 0xff) << 24),
        j6 = (p[0] & 0xff) | ((p[1] & 0xff) << 8) | ((p[2] & 0xff) << 16) | ((p[3] & 0xff) << 24),
        j7 = (p[4] & 0xff) | ((p[5] & 0xff) << 8) | ((p[6] & 0xff) << 16) | ((p[7] & 0xff) << 24),
        j8 = (p[8] & 0xff) | ((p[9] & 0xff) << 8) | ((p[10] & 0xff) << 16) | ((p[11] & 0xff) << 24),
        j9 = (p[12] & 0xff) | ((p[13] & 0xff) << 8) | ((p[14] & 0xff) << 16) | ((p[15] & 0xff) << 24),
        j10 = (c[8] & 0xff) | ((c[9] & 0xff) << 8) | ((c[10] & 0xff) << 16) | ((c[11] & 0xff) << 24),
        j11 = (k[16] & 0xff) | ((k[17] & 0xff) << 8) | ((k[18] & 0xff) << 16) | ((k[19] & 0xff) << 24),
        j12 = (k[20] & 0xff) | ((k[21] & 0xff) << 8) | ((k[22] & 0xff) << 16) | ((k[23] & 0xff) << 24),
        j13 = (k[24] & 0xff) | ((k[25] & 0xff) << 8) | ((k[26] & 0xff) << 16) | ((k[27] & 0xff) << 24),
        j14 = (k[28] & 0xff) | ((k[29] & 0xff) << 8) | ((k[30] & 0xff) << 16) | ((k[31] & 0xff) << 24),
        j15 = (c[12] & 0xff) | ((c[13] & 0xff) << 8) | ((c[14] & 0xff) << 16) | ((c[15] & 0xff) << 24);

      var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;

      for (var i = 0; i < 20; i += 2) {
        u = (x0 + x12) | 0;
        x4 ^= (u << 7) | (u >>> (32 - 7));
        u = (x4 + x0) | 0;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = (x8 + x4) | 0;
        x12 ^= (u << 13) | (u >>> (32 - 13));
        u = (x12 + x8) | 0;
        x0 ^= (u << 18) | (u >>> (32 - 18));

        u = (x5 + x1) | 0;
        x9 ^= (u << 7) | (u >>> (32 - 7));
        u = (x9 + x5) | 0;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = (x13 + x9) | 0;
        x1 ^= (u << 13) | (u >>> (32 - 13));
        u = (x1 + x13) | 0;
        x5 ^= (u << 18) | (u >>> (32 - 18));

        u = (x10 + x6) | 0;
        x14 ^= (u << 7) | (u >>> (32 - 7));
        u = (x14 + x10) | 0;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = (x2 + x14) | 0;
        x6 ^= (u << 13) | (u >>> (32 - 13));
        u = (x6 + x2) | 0;
        x10 ^= (u << 18) | (u >>> (32 - 18));

        u = (x15 + x11) | 0;
        x3 ^= (u << 7) | (u >>> (32 - 7));
        u = (x3 + x15) | 0;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = (x7 + x3) | 0;
        x11 ^= (u << 13) | (u >>> (32 - 13));
        u = (x11 + x7) | 0;
        x15 ^= (u << 18) | (u >>> (32 - 18));

        u = (x0 + x3) | 0;
        x1 ^= (u << 7) | (u >>> (32 - 7));
        u = (x1 + x0) | 0;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = (x2 + x1) | 0;
        x3 ^= (u << 13) | (u >>> (32 - 13));
        u = (x3 + x2) | 0;
        x0 ^= (u << 18) | (u >>> (32 - 18));

        u = (x5 + x4) | 0;
        x6 ^= (u << 7) | (u >>> (32 - 7));
        u = (x6 + x5) | 0;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = (x7 + x6) | 0;
        x4 ^= (u << 13) | (u >>> (32 - 13));
        u = (x4 + x7) | 0;
        x5 ^= (u << 18) | (u >>> (32 - 18));

        u = (x10 + x9) | 0;
        x11 ^= (u << 7) | (u >>> (32 - 7));
        u = (x11 + x10) | 0;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = (x8 + x11) | 0;
        x9 ^= (u << 13) | (u >>> (32 - 13));
        u = (x9 + x8) | 0;
        x10 ^= (u << 18) | (u >>> (32 - 18));

        u = (x15 + x14) | 0;
        x12 ^= (u << 7) | (u >>> (32 - 7));
        u = (x12 + x15) | 0;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = (x13 + x12) | 0;
        x14 ^= (u << 13) | (u >>> (32 - 13));
        u = (x14 + x13) | 0;
        x15 ^= (u << 18) | (u >>> (32 - 18));
      }
      x0 = (x0 + j0) | 0;
      x1 = (x1 + j1) | 0;
      x2 = (x2 + j2) | 0;
      x3 = (x3 + j3) | 0;
      x4 = (x4 + j4) | 0;
      x5 = (x5 + j5) | 0;
      x6 = (x6 + j6) | 0;
      x7 = (x7 + j7) | 0;
      x8 = (x8 + j8) | 0;
      x9 = (x9 + j9) | 0;
      x10 = (x10 + j10) | 0;
      x11 = (x11 + j11) | 0;
      x12 = (x12 + j12) | 0;
      x13 = (x13 + j13) | 0;
      x14 = (x14 + j14) | 0;
      x15 = (x15 + j15) | 0;

      o[0] = (x0 >>> 0) & 0xff;
      o[1] = (x0 >>> 8) & 0xff;
      o[2] = (x0 >>> 16) & 0xff;
      o[3] = (x0 >>> 24) & 0xff;

      o[4] = (x1 >>> 0) & 0xff;
      o[5] = (x1 >>> 8) & 0xff;
      o[6] = (x1 >>> 16) & 0xff;
      o[7] = (x1 >>> 24) & 0xff;

      o[8] = (x2 >>> 0) & 0xff;
      o[9] = (x2 >>> 8) & 0xff;
      o[10] = (x2 >>> 16) & 0xff;
      o[11] = (x2 >>> 24) & 0xff;

      o[12] = (x3 >>> 0) & 0xff;
      o[13] = (x3 >>> 8) & 0xff;
      o[14] = (x3 >>> 16) & 0xff;
      o[15] = (x3 >>> 24) & 0xff;

      o[16] = (x4 >>> 0) & 0xff;
      o[17] = (x4 >>> 8) & 0xff;
      o[18] = (x4 >>> 16) & 0xff;
      o[19] = (x4 >>> 24) & 0xff;

      o[20] = (x5 >>> 0) & 0xff;
      o[21] = (x5 >>> 8) & 0xff;
      o[22] = (x5 >>> 16) & 0xff;
      o[23] = (x5 >>> 24) & 0xff;

      o[24] = (x6 >>> 0) & 0xff;
      o[25] = (x6 >>> 8) & 0xff;
      o[26] = (x6 >>> 16) & 0xff;
      o[27] = (x6 >>> 24) & 0xff;

      o[28] = (x7 >>> 0) & 0xff;
      o[29] = (x7 >>> 8) & 0xff;
      o[30] = (x7 >>> 16) & 0xff;
      o[31] = (x7 >>> 24) & 0xff;

      o[32] = (x8 >>> 0) & 0xff;
      o[33] = (x8 >>> 8) & 0xff;
      o[34] = (x8 >>> 16) & 0xff;
      o[35] = (x8 >>> 24) & 0xff;

      o[36] = (x9 >>> 0) & 0xff;
      o[37] = (x9 >>> 8) & 0xff;
      o[38] = (x9 >>> 16) & 0xff;
      o[39] = (x9 >>> 24) & 0xff;

      o[40] = (x10 >>> 0) & 0xff;
      o[41] = (x10 >>> 8) & 0xff;
      o[42] = (x10 >>> 16) & 0xff;
      o[43] = (x10 >>> 24) & 0xff;

      o[44] = (x11 >>> 0) & 0xff;
      o[45] = (x11 >>> 8) & 0xff;
      o[46] = (x11 >>> 16) & 0xff;
      o[47] = (x11 >>> 24) & 0xff;

      o[48] = (x12 >>> 0) & 0xff;
      o[49] = (x12 >>> 8) & 0xff;
      o[50] = (x12 >>> 16) & 0xff;
      o[51] = (x12 >>> 24) & 0xff;

      o[52] = (x13 >>> 0) & 0xff;
      o[53] = (x13 >>> 8) & 0xff;
      o[54] = (x13 >>> 16) & 0xff;
      o[55] = (x13 >>> 24) & 0xff;

      o[56] = (x14 >>> 0) & 0xff;
      o[57] = (x14 >>> 8) & 0xff;
      o[58] = (x14 >>> 16) & 0xff;
      o[59] = (x14 >>> 24) & 0xff;

      o[60] = (x15 >>> 0) & 0xff;
      o[61] = (x15 >>> 8) & 0xff;
      o[62] = (x15 >>> 16) & 0xff;
      o[63] = (x15 >>> 24) & 0xff;
    }

    function core_hsalsa20(o, p, k, c) {
      var j0 = (c[0] & 0xff) | ((c[1] & 0xff) << 8) | ((c[2] & 0xff) << 16) | ((c[3] & 0xff) << 24),
        j1 = (k[0] & 0xff) | ((k[1] & 0xff) << 8) | ((k[2] & 0xff) << 16) | ((k[3] & 0xff) << 24),
        j2 = (k[4] & 0xff) | ((k[5] & 0xff) << 8) | ((k[6] & 0xff) << 16) | ((k[7] & 0xff) << 24),
        j3 = (k[8] & 0xff) | ((k[9] & 0xff) << 8) | ((k[10] & 0xff) << 16) | ((k[11] & 0xff) << 24),
        j4 = (k[12] & 0xff) | ((k[13] & 0xff) << 8) | ((k[14] & 0xff) << 16) | ((k[15] & 0xff) << 24),
        j5 = (c[4] & 0xff) | ((c[5] & 0xff) << 8) | ((c[6] & 0xff) << 16) | ((c[7] & 0xff) << 24),
        j6 = (p[0] & 0xff) | ((p[1] & 0xff) << 8) | ((p[2] & 0xff) << 16) | ((p[3] & 0xff) << 24),
        j7 = (p[4] & 0xff) | ((p[5] & 0xff) << 8) | ((p[6] & 0xff) << 16) | ((p[7] & 0xff) << 24),
        j8 = (p[8] & 0xff) | ((p[9] & 0xff) << 8) | ((p[10] & 0xff) << 16) | ((p[11] & 0xff) << 24),
        j9 = (p[12] & 0xff) | ((p[13] & 0xff) << 8) | ((p[14] & 0xff) << 16) | ((p[15] & 0xff) << 24),
        j10 = (c[8] & 0xff) | ((c[9] & 0xff) << 8) | ((c[10] & 0xff) << 16) | ((c[11] & 0xff) << 24),
        j11 = (k[16] & 0xff) | ((k[17] & 0xff) << 8) | ((k[18] & 0xff) << 16) | ((k[19] & 0xff) << 24),
        j12 = (k[20] & 0xff) | ((k[21] & 0xff) << 8) | ((k[22] & 0xff) << 16) | ((k[23] & 0xff) << 24),
        j13 = (k[24] & 0xff) | ((k[25] & 0xff) << 8) | ((k[26] & 0xff) << 16) | ((k[27] & 0xff) << 24),
        j14 = (k[28] & 0xff) | ((k[29] & 0xff) << 8) | ((k[30] & 0xff) << 16) | ((k[31] & 0xff) << 24),
        j15 = (c[12] & 0xff) | ((c[13] & 0xff) << 8) | ((c[14] & 0xff) << 16) | ((c[15] & 0xff) << 24);

      var x0 = j0,
        x1 = j1,
        x2 = j2,
        x3 = j3,
        x4 = j4,
        x5 = j5,
        x6 = j6,
        x7 = j7,
        x8 = j8,
        x9 = j9,
        x10 = j10,
        x11 = j11,
        x12 = j12,
        x13 = j13,
        x14 = j14,
        x15 = j15,
        u;

      for (var i = 0; i < 20; i += 2) {
        u = (x0 + x12) | 0;
        x4 ^= (u << 7) | (u >>> (32 - 7));
        u = (x4 + x0) | 0;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = (x8 + x4) | 0;
        x12 ^= (u << 13) | (u >>> (32 - 13));
        u = (x12 + x8) | 0;
        x0 ^= (u << 18) | (u >>> (32 - 18));

        u = (x5 + x1) | 0;
        x9 ^= (u << 7) | (u >>> (32 - 7));
        u = (x9 + x5) | 0;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = (x13 + x9) | 0;
        x1 ^= (u << 13) | (u >>> (32 - 13));
        u = (x1 + x13) | 0;
        x5 ^= (u << 18) | (u >>> (32 - 18));

        u = (x10 + x6) | 0;
        x14 ^= (u << 7) | (u >>> (32 - 7));
        u = (x14 + x10) | 0;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = (x2 + x14) | 0;
        x6 ^= (u << 13) | (u >>> (32 - 13));
        u = (x6 + x2) | 0;
        x10 ^= (u << 18) | (u >>> (32 - 18));

        u = (x15 + x11) | 0;
        x3 ^= (u << 7) | (u >>> (32 - 7));
        u = (x3 + x15) | 0;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = (x7 + x3) | 0;
        x11 ^= (u << 13) | (u >>> (32 - 13));
        u = (x11 + x7) | 0;
        x15 ^= (u << 18) | (u >>> (32 - 18));

        u = (x0 + x3) | 0;
        x1 ^= (u << 7) | (u >>> (32 - 7));
        u = (x1 + x0) | 0;
        x2 ^= (u << 9) | (u >>> (32 - 9));
        u = (x2 + x1) | 0;
        x3 ^= (u << 13) | (u >>> (32 - 13));
        u = (x3 + x2) | 0;
        x0 ^= (u << 18) | (u >>> (32 - 18));

        u = (x5 + x4) | 0;
        x6 ^= (u << 7) | (u >>> (32 - 7));
        u = (x6 + x5) | 0;
        x7 ^= (u << 9) | (u >>> (32 - 9));
        u = (x7 + x6) | 0;
        x4 ^= (u << 13) | (u >>> (32 - 13));
        u = (x4 + x7) | 0;
        x5 ^= (u << 18) | (u >>> (32 - 18));

        u = (x10 + x9) | 0;
        x11 ^= (u << 7) | (u >>> (32 - 7));
        u = (x11 + x10) | 0;
        x8 ^= (u << 9) | (u >>> (32 - 9));
        u = (x8 + x11) | 0;
        x9 ^= (u << 13) | (u >>> (32 - 13));
        u = (x9 + x8) | 0;
        x10 ^= (u << 18) | (u >>> (32 - 18));

        u = (x15 + x14) | 0;
        x12 ^= (u << 7) | (u >>> (32 - 7));
        u = (x12 + x15) | 0;
        x13 ^= (u << 9) | (u >>> (32 - 9));
        u = (x13 + x12) | 0;
        x14 ^= (u << 13) | (u >>> (32 - 13));
        u = (x14 + x13) | 0;
        x15 ^= (u << 18) | (u >>> (32 - 18));
      }

      o[0] = (x0 >>> 0) & 0xff;
      o[1] = (x0 >>> 8) & 0xff;
      o[2] = (x0 >>> 16) & 0xff;
      o[3] = (x0 >>> 24) & 0xff;

      o[4] = (x5 >>> 0) & 0xff;
      o[5] = (x5 >>> 8) & 0xff;
      o[6] = (x5 >>> 16) & 0xff;
      o[7] = (x5 >>> 24) & 0xff;

      o[8] = (x10 >>> 0) & 0xff;
      o[9] = (x10 >>> 8) & 0xff;
      o[10] = (x10 >>> 16) & 0xff;
      o[11] = (x10 >>> 24) & 0xff;

      o[12] = (x15 >>> 0) & 0xff;
      o[13] = (x15 >>> 8) & 0xff;
      o[14] = (x15 >>> 16) & 0xff;
      o[15] = (x15 >>> 24) & 0xff;

      o[16] = (x6 >>> 0) & 0xff;
      o[17] = (x6 >>> 8) & 0xff;
      o[18] = (x6 >>> 16) & 0xff;
      o[19] = (x6 >>> 24) & 0xff;

      o[20] = (x7 >>> 0) & 0xff;
      o[21] = (x7 >>> 8) & 0xff;
      o[22] = (x7 >>> 16) & 0xff;
      o[23] = (x7 >>> 24) & 0xff;

      o[24] = (x8 >>> 0) & 0xff;
      o[25] = (x8 >>> 8) & 0xff;
      o[26] = (x8 >>> 16) & 0xff;
      o[27] = (x8 >>> 24) & 0xff;

      o[28] = (x9 >>> 0) & 0xff;
      o[29] = (x9 >>> 8) & 0xff;
      o[30] = (x9 >>> 16) & 0xff;
      o[31] = (x9 >>> 24) & 0xff;
    }

    function crypto_core_salsa20(out, inp, k, c) {
      core_salsa20(out, inp, k, c);
    }

    function crypto_core_hsalsa20(out, inp, k, c) {
      core_hsalsa20(out, inp, k, c);
    }

    var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
    // "expand 32-byte k"

    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
      var z = new Uint8Array(16),
        x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = (u + (z[i] & 0xff)) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
        mpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
      }
      return 0;
    }

    function crypto_stream_salsa20(c, cpos, b, n, k) {
      var z = new Uint8Array(16),
        x = new Uint8Array(64);
      var u, i;
      for (i = 0; i < 16; i++) z[i] = 0;
      for (i = 0; i < 8; i++) z[i] = n[i];
      while (b >= 64) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < 64; i++) c[cpos + i] = x[i];
        u = 1;
        for (i = 8; i < 16; i++) {
          u = (u + (z[i] & 0xff)) | 0;
          z[i] = u & 0xff;
          u >>>= 8;
        }
        b -= 64;
        cpos += 64;
      }
      if (b > 0) {
        crypto_core_salsa20(x, z, k, sigma);
        for (i = 0; i < b; i++) c[cpos + i] = x[i];
      }
      return 0;
    }

    function crypto_stream(c, cpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
      return crypto_stream_salsa20(c, cpos, d, sn, s);
    }

    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
      var s = new Uint8Array(32);
      crypto_core_hsalsa20(s, n, k, sigma);
      var sn = new Uint8Array(8);
      for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
      return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }

    /*
     * Port of Andrew Moon's Poly1305-donna-16. Public domain.
     * https://github.com/floodyberry/poly1305-donna
     */

    var poly1305 = function(key) {
      this.buffer = new Uint8Array(16);
      this.r = new Uint16Array(10);
      this.h = new Uint16Array(10);
      this.pad = new Uint16Array(8);
      this.leftover = 0;
      this.fin = 0;

      var t0, t1, t2, t3, t4, t5, t6, t7;

      t0 = (key[0] & 0xff) | ((key[1] & 0xff) << 8);
      this.r[0] = t0 & 0x1fff;
      t1 = (key[2] & 0xff) | ((key[3] & 0xff) << 8);
      this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
      t2 = (key[4] & 0xff) | ((key[5] & 0xff) << 8);
      this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
      t3 = (key[6] & 0xff) | ((key[7] & 0xff) << 8);
      this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
      t4 = (key[8] & 0xff) | ((key[9] & 0xff) << 8);
      this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
      this.r[5] = (t4 >>> 1) & 0x1ffe;
      t5 = (key[10] & 0xff) | ((key[11] & 0xff) << 8);
      this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
      t6 = (key[12] & 0xff) | ((key[13] & 0xff) << 8);
      this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
      t7 = (key[14] & 0xff) | ((key[15] & 0xff) << 8);
      this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
      this.r[9] = (t7 >>> 5) & 0x007f;

      this.pad[0] = (key[16] & 0xff) | ((key[17] & 0xff) << 8);
      this.pad[1] = (key[18] & 0xff) | ((key[19] & 0xff) << 8);
      this.pad[2] = (key[20] & 0xff) | ((key[21] & 0xff) << 8);
      this.pad[3] = (key[22] & 0xff) | ((key[23] & 0xff) << 8);
      this.pad[4] = (key[24] & 0xff) | ((key[25] & 0xff) << 8);
      this.pad[5] = (key[26] & 0xff) | ((key[27] & 0xff) << 8);
      this.pad[6] = (key[28] & 0xff) | ((key[29] & 0xff) << 8);
      this.pad[7] = (key[30] & 0xff) | ((key[31] & 0xff) << 8);
    };

    poly1305.prototype.blocks = function(m, mpos, bytes) {
      var hibit = this.fin ? 0 : 1 << 11;
      var t0, t1, t2, t3, t4, t5, t6, t7, c;
      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

      var h0 = this.h[0],
        h1 = this.h[1],
        h2 = this.h[2],
        h3 = this.h[3],
        h4 = this.h[4],
        h5 = this.h[5],
        h6 = this.h[6],
        h7 = this.h[7],
        h8 = this.h[8],
        h9 = this.h[9];

      var r0 = this.r[0],
        r1 = this.r[1],
        r2 = this.r[2],
        r3 = this.r[3],
        r4 = this.r[4],
        r5 = this.r[5],
        r6 = this.r[6],
        r7 = this.r[7],
        r8 = this.r[8],
        r9 = this.r[9];

      while (bytes >= 16) {
        t0 = (m[mpos + 0] & 0xff) | ((m[mpos + 1] & 0xff) << 8);
        h0 += t0 & 0x1fff;
        t1 = (m[mpos + 2] & 0xff) | ((m[mpos + 3] & 0xff) << 8);
        h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
        t2 = (m[mpos + 4] & 0xff) | ((m[mpos + 5] & 0xff) << 8);
        h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
        t3 = (m[mpos + 6] & 0xff) | ((m[mpos + 7] & 0xff) << 8);
        h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
        t4 = (m[mpos + 8] & 0xff) | ((m[mpos + 9] & 0xff) << 8);
        h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
        h5 += (t4 >>> 1) & 0x1fff;
        t5 = (m[mpos + 10] & 0xff) | ((m[mpos + 11] & 0xff) << 8);
        h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
        t6 = (m[mpos + 12] & 0xff) | ((m[mpos + 13] & 0xff) << 8);
        h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
        t7 = (m[mpos + 14] & 0xff) | ((m[mpos + 15] & 0xff) << 8);
        h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
        h9 += (t7 >>> 5) | hibit;

        c = 0;

        d0 = c;
        d0 += h0 * r0;
        d0 += h1 * (5 * r9);
        d0 += h2 * (5 * r8);
        d0 += h3 * (5 * r7);
        d0 += h4 * (5 * r6);
        c = d0 >>> 13;
        d0 &= 0x1fff;
        d0 += h5 * (5 * r5);
        d0 += h6 * (5 * r4);
        d0 += h7 * (5 * r3);
        d0 += h8 * (5 * r2);
        d0 += h9 * (5 * r1);
        c += d0 >>> 13;
        d0 &= 0x1fff;

        d1 = c;
        d1 += h0 * r1;
        d1 += h1 * r0;
        d1 += h2 * (5 * r9);
        d1 += h3 * (5 * r8);
        d1 += h4 * (5 * r7);
        c = d1 >>> 13;
        d1 &= 0x1fff;
        d1 += h5 * (5 * r6);
        d1 += h6 * (5 * r5);
        d1 += h7 * (5 * r4);
        d1 += h8 * (5 * r3);
        d1 += h9 * (5 * r2);
        c += d1 >>> 13;
        d1 &= 0x1fff;

        d2 = c;
        d2 += h0 * r2;
        d2 += h1 * r1;
        d2 += h2 * r0;
        d2 += h3 * (5 * r9);
        d2 += h4 * (5 * r8);
        c = d2 >>> 13;
        d2 &= 0x1fff;
        d2 += h5 * (5 * r7);
        d2 += h6 * (5 * r6);
        d2 += h7 * (5 * r5);
        d2 += h8 * (5 * r4);
        d2 += h9 * (5 * r3);
        c += d2 >>> 13;
        d2 &= 0x1fff;

        d3 = c;
        d3 += h0 * r3;
        d3 += h1 * r2;
        d3 += h2 * r1;
        d3 += h3 * r0;
        d3 += h4 * (5 * r9);
        c = d3 >>> 13;
        d3 &= 0x1fff;
        d3 += h5 * (5 * r8);
        d3 += h6 * (5 * r7);
        d3 += h7 * (5 * r6);
        d3 += h8 * (5 * r5);
        d3 += h9 * (5 * r4);
        c += d3 >>> 13;
        d3 &= 0x1fff;

        d4 = c;
        d4 += h0 * r4;
        d4 += h1 * r3;
        d4 += h2 * r2;
        d4 += h3 * r1;
        d4 += h4 * r0;
        c = d4 >>> 13;
        d4 &= 0x1fff;
        d4 += h5 * (5 * r9);
        d4 += h6 * (5 * r8);
        d4 += h7 * (5 * r7);
        d4 += h8 * (5 * r6);
        d4 += h9 * (5 * r5);
        c += d4 >>> 13;
        d4 &= 0x1fff;

        d5 = c;
        d5 += h0 * r5;
        d5 += h1 * r4;
        d5 += h2 * r3;
        d5 += h3 * r2;
        d5 += h4 * r1;
        c = d5 >>> 13;
        d5 &= 0x1fff;
        d5 += h5 * r0;
        d5 += h6 * (5 * r9);
        d5 += h7 * (5 * r8);
        d5 += h8 * (5 * r7);
        d5 += h9 * (5 * r6);
        c += d5 >>> 13;
        d5 &= 0x1fff;

        d6 = c;
        d6 += h0 * r6;
        d6 += h1 * r5;
        d6 += h2 * r4;
        d6 += h3 * r3;
        d6 += h4 * r2;
        c = d6 >>> 13;
        d6 &= 0x1fff;
        d6 += h5 * r1;
        d6 += h6 * r0;
        d6 += h7 * (5 * r9);
        d6 += h8 * (5 * r8);
        d6 += h9 * (5 * r7);
        c += d6 >>> 13;
        d6 &= 0x1fff;

        d7 = c;
        d7 += h0 * r7;
        d7 += h1 * r6;
        d7 += h2 * r5;
        d7 += h3 * r4;
        d7 += h4 * r3;
        c = d7 >>> 13;
        d7 &= 0x1fff;
        d7 += h5 * r2;
        d7 += h6 * r1;
        d7 += h7 * r0;
        d7 += h8 * (5 * r9);
        d7 += h9 * (5 * r8);
        c += d7 >>> 13;
        d7 &= 0x1fff;

        d8 = c;
        d8 += h0 * r8;
        d8 += h1 * r7;
        d8 += h2 * r6;
        d8 += h3 * r5;
        d8 += h4 * r4;
        c = d8 >>> 13;
        d8 &= 0x1fff;
        d8 += h5 * r3;
        d8 += h6 * r2;
        d8 += h7 * r1;
        d8 += h8 * r0;
        d8 += h9 * (5 * r9);
        c += d8 >>> 13;
        d8 &= 0x1fff;

        d9 = c;
        d9 += h0 * r9;
        d9 += h1 * r8;
        d9 += h2 * r7;
        d9 += h3 * r6;
        d9 += h4 * r5;
        c = d9 >>> 13;
        d9 &= 0x1fff;
        d9 += h5 * r4;
        d9 += h6 * r3;
        d9 += h7 * r2;
        d9 += h8 * r1;
        d9 += h9 * r0;
        c += d9 >>> 13;
        d9 &= 0x1fff;

        c = ((c << 2) + c) | 0;
        c = (c + d0) | 0;
        d0 = c & 0x1fff;
        c = c >>> 13;
        d1 += c;

        h0 = d0;
        h1 = d1;
        h2 = d2;
        h3 = d3;
        h4 = d4;
        h5 = d5;
        h6 = d6;
        h7 = d7;
        h8 = d8;
        h9 = d9;

        mpos += 16;
        bytes -= 16;
      }
      this.h[0] = h0;
      this.h[1] = h1;
      this.h[2] = h2;
      this.h[3] = h3;
      this.h[4] = h4;
      this.h[5] = h5;
      this.h[6] = h6;
      this.h[7] = h7;
      this.h[8] = h8;
      this.h[9] = h9;
    };

    poly1305.prototype.finish = function(mac, macpos) {
      var g = new Uint16Array(10);
      var c, mask, f, i;

      if (this.leftover) {
        i = this.leftover;
        this.buffer[i++] = 1;
        for (; i < 16; i++) this.buffer[i] = 0;
        this.fin = 1;
        this.blocks(this.buffer, 0, 16);
      }

      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      for (i = 2; i < 10; i++) {
        this.h[i] += c;
        c = this.h[i] >>> 13;
        this.h[i] &= 0x1fff;
      }
      this.h[0] += c * 5;
      c = this.h[0] >>> 13;
      this.h[0] &= 0x1fff;
      this.h[1] += c;
      c = this.h[1] >>> 13;
      this.h[1] &= 0x1fff;
      this.h[2] += c;

      g[0] = this.h[0] + 5;
      c = g[0] >>> 13;
      g[0] &= 0x1fff;
      for (i = 1; i < 10; i++) {
        g[i] = this.h[i] + c;
        c = g[i] >>> 13;
        g[i] &= 0x1fff;
      }
      g[9] -= 1 << 13;

      mask = (c ^ 1) - 1;
      for (i = 0; i < 10; i++) g[i] &= mask;
      mask = ~mask;
      for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

      this.h[0] = (this.h[0] | (this.h[1] << 13)) & 0xffff;
      this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
      this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
      this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
      this.h[4] = ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 0xffff;
      this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
      this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
      this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;

      f = this.h[0] + this.pad[0];
      this.h[0] = f & 0xffff;
      for (i = 1; i < 8; i++) {
        f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
        this.h[i] = f & 0xffff;
      }

      mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
      mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
      mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
      mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
      mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
      mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
      mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
      mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
      mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
      mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
      mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
      mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
      mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
      mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
      mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
      mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
    };

    poly1305.prototype.update = function(m, mpos, bytes) {
      var i, want;

      if (this.leftover) {
        want = 16 - this.leftover;
        if (want > bytes) want = bytes;
        for (i = 0; i < want; i++) this.buffer[this.leftover + i] = m[mpos + i];
        bytes -= want;
        mpos += want;
        this.leftover += want;
        if (this.leftover < 16) return;
        this.blocks(this.buffer, 0, 16);
        this.leftover = 0;
      }

      if (bytes >= 16) {
        want = bytes - (bytes % 16);
        this.blocks(m, mpos, want);
        mpos += want;
        bytes -= want;
      }

      if (bytes) {
        for (i = 0; i < bytes; i++) this.buffer[this.leftover + i] = m[mpos + i];
        this.leftover += bytes;
      }
    };

    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
      var s = new poly1305(k);
      s.update(m, mpos, n);
      s.finish(out, outpos);
      return 0;
    }

    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
      var x = new Uint8Array(16);
      crypto_onetimeauth(x, 0, m, mpos, n, k);
      return crypto_verify_16(h, hpos, x, 0);
    }

    function crypto_secretbox(c, m, d, n, k) {
      var i;
      if (d < 32) return -1;
      crypto_stream_xor(c, 0, m, 0, d, n, k);
      crypto_onetimeauth(c, 16, c, 32, d - 32, c);
      for (i = 0; i < 16; i++) c[i] = 0;
      return 0;
    }

    function crypto_secretbox_open(m, c, d, n, k) {
      var i;
      var x = new Uint8Array(32);
      if (d < 32) return -1;
      crypto_stream(x, 0, 32, n, k);
      if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
      crypto_stream_xor(m, 0, c, 0, d, n, k);
      for (i = 0; i < 32; i++) m[i] = 0;
      return 0;
    }

    function set25519(r, a) {
      var i;
      for (i = 0; i < 16; i++) r[i] = a[i] | 0;
    }

    function car25519(o) {
      var i,
        v,
        c = 1;
      for (i = 0; i < 16; i++) {
        v = o[i] + c + 65535;
        c = Math.floor(v / 65536);
        o[i] = v - c * 65536;
      }
      o[0] += c - 1 + 37 * (c - 1);
    }

    function sel25519(p, q, b) {
      var t,
        c = ~(b - 1);
      for (var i = 0; i < 16; i++) {
        t = c & (p[i] ^ q[i]);
        p[i] ^= t;
        q[i] ^= t;
      }
    }

    function pack25519(o, n) {
      var i, j, b;
      var m = gf(),
        t = gf();
      for (i = 0; i < 16; i++) t[i] = n[i];
      car25519(t);
      car25519(t);
      car25519(t);
      for (j = 0; j < 2; j++) {
        m[0] = t[0] - 0xffed;
        for (i = 1; i < 15; i++) {
          m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
          m[i - 1] &= 0xffff;
        }
        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
        b = (m[15] >> 16) & 1;
        m[14] &= 0xffff;
        sel25519(t, m, 1 - b);
      }
      for (i = 0; i < 16; i++) {
        o[2 * i] = t[i] & 0xff;
        o[2 * i + 1] = t[i] >> 8;
      }
    }

    function neq25519(a, b) {
      var c = new Uint8Array(32),
        d = new Uint8Array(32);
      pack25519(c, a);
      pack25519(d, b);
      return crypto_verify_32(c, 0, d, 0);
    }

    function par25519(a) {
      var d = new Uint8Array(32);
      pack25519(d, a);
      return d[0] & 1;
    }

    function unpack25519(o, n) {
      var i;
      for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
      o[15] &= 0x7fff;
    }

    function A(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
    }

    function Z(o, a, b) {
      for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
    }

    function M(o, a, b) {
      var v,
        c,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0,
        t8 = 0,
        t9 = 0,
        t10 = 0,
        t11 = 0,
        t12 = 0,
        t13 = 0,
        t14 = 0,
        t15 = 0,
        t16 = 0,
        t17 = 0,
        t18 = 0,
        t19 = 0,
        t20 = 0,
        t21 = 0,
        t22 = 0,
        t23 = 0,
        t24 = 0,
        t25 = 0,
        t26 = 0,
        t27 = 0,
        t28 = 0,
        t29 = 0,
        t30 = 0,
        b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3],
        b4 = b[4],
        b5 = b[5],
        b6 = b[6],
        b7 = b[7],
        b8 = b[8],
        b9 = b[9],
        b10 = b[10],
        b11 = b[11],
        b12 = b[12],
        b13 = b[13],
        b14 = b[14],
        b15 = b[15];

      v = a[0];
      t0 += v * b0;
      t1 += v * b1;
      t2 += v * b2;
      t3 += v * b3;
      t4 += v * b4;
      t5 += v * b5;
      t6 += v * b6;
      t7 += v * b7;
      t8 += v * b8;
      t9 += v * b9;
      t10 += v * b10;
      t11 += v * b11;
      t12 += v * b12;
      t13 += v * b13;
      t14 += v * b14;
      t15 += v * b15;
      v = a[1];
      t1 += v * b0;
      t2 += v * b1;
      t3 += v * b2;
      t4 += v * b3;
      t5 += v * b4;
      t6 += v * b5;
      t7 += v * b6;
      t8 += v * b7;
      t9 += v * b8;
      t10 += v * b9;
      t11 += v * b10;
      t12 += v * b11;
      t13 += v * b12;
      t14 += v * b13;
      t15 += v * b14;
      t16 += v * b15;
      v = a[2];
      t2 += v * b0;
      t3 += v * b1;
      t4 += v * b2;
      t5 += v * b3;
      t6 += v * b4;
      t7 += v * b5;
      t8 += v * b6;
      t9 += v * b7;
      t10 += v * b8;
      t11 += v * b9;
      t12 += v * b10;
      t13 += v * b11;
      t14 += v * b12;
      t15 += v * b13;
      t16 += v * b14;
      t17 += v * b15;
      v = a[3];
      t3 += v * b0;
      t4 += v * b1;
      t5 += v * b2;
      t6 += v * b3;
      t7 += v * b4;
      t8 += v * b5;
      t9 += v * b6;
      t10 += v * b7;
      t11 += v * b8;
      t12 += v * b9;
      t13 += v * b10;
      t14 += v * b11;
      t15 += v * b12;
      t16 += v * b13;
      t17 += v * b14;
      t18 += v * b15;
      v = a[4];
      t4 += v * b0;
      t5 += v * b1;
      t6 += v * b2;
      t7 += v * b3;
      t8 += v * b4;
      t9 += v * b5;
      t10 += v * b6;
      t11 += v * b7;
      t12 += v * b8;
      t13 += v * b9;
      t14 += v * b10;
      t15 += v * b11;
      t16 += v * b12;
      t17 += v * b13;
      t18 += v * b14;
      t19 += v * b15;
      v = a[5];
      t5 += v * b0;
      t6 += v * b1;
      t7 += v * b2;
      t8 += v * b3;
      t9 += v * b4;
      t10 += v * b5;
      t11 += v * b6;
      t12 += v * b7;
      t13 += v * b8;
      t14 += v * b9;
      t15 += v * b10;
      t16 += v * b11;
      t17 += v * b12;
      t18 += v * b13;
      t19 += v * b14;
      t20 += v * b15;
      v = a[6];
      t6 += v * b0;
      t7 += v * b1;
      t8 += v * b2;
      t9 += v * b3;
      t10 += v * b4;
      t11 += v * b5;
      t12 += v * b6;
      t13 += v * b7;
      t14 += v * b8;
      t15 += v * b9;
      t16 += v * b10;
      t17 += v * b11;
      t18 += v * b12;
      t19 += v * b13;
      t20 += v * b14;
      t21 += v * b15;
      v = a[7];
      t7 += v * b0;
      t8 += v * b1;
      t9 += v * b2;
      t10 += v * b3;
      t11 += v * b4;
      t12 += v * b5;
      t13 += v * b6;
      t14 += v * b7;
      t15 += v * b8;
      t16 += v * b9;
      t17 += v * b10;
      t18 += v * b11;
      t19 += v * b12;
      t20 += v * b13;
      t21 += v * b14;
      t22 += v * b15;
      v = a[8];
      t8 += v * b0;
      t9 += v * b1;
      t10 += v * b2;
      t11 += v * b3;
      t12 += v * b4;
      t13 += v * b5;
      t14 += v * b6;
      t15 += v * b7;
      t16 += v * b8;
      t17 += v * b9;
      t18 += v * b10;
      t19 += v * b11;
      t20 += v * b12;
      t21 += v * b13;
      t22 += v * b14;
      t23 += v * b15;
      v = a[9];
      t9 += v * b0;
      t10 += v * b1;
      t11 += v * b2;
      t12 += v * b3;
      t13 += v * b4;
      t14 += v * b5;
      t15 += v * b6;
      t16 += v * b7;
      t17 += v * b8;
      t18 += v * b9;
      t19 += v * b10;
      t20 += v * b11;
      t21 += v * b12;
      t22 += v * b13;
      t23 += v * b14;
      t24 += v * b15;
      v = a[10];
      t10 += v * b0;
      t11 += v * b1;
      t12 += v * b2;
      t13 += v * b3;
      t14 += v * b4;
      t15 += v * b5;
      t16 += v * b6;
      t17 += v * b7;
      t18 += v * b8;
      t19 += v * b9;
      t20 += v * b10;
      t21 += v * b11;
      t22 += v * b12;
      t23 += v * b13;
      t24 += v * b14;
      t25 += v * b15;
      v = a[11];
      t11 += v * b0;
      t12 += v * b1;
      t13 += v * b2;
      t14 += v * b3;
      t15 += v * b4;
      t16 += v * b5;
      t17 += v * b6;
      t18 += v * b7;
      t19 += v * b8;
      t20 += v * b9;
      t21 += v * b10;
      t22 += v * b11;
      t23 += v * b12;
      t24 += v * b13;
      t25 += v * b14;
      t26 += v * b15;
      v = a[12];
      t12 += v * b0;
      t13 += v * b1;
      t14 += v * b2;
      t15 += v * b3;
      t16 += v * b4;
      t17 += v * b5;
      t18 += v * b6;
      t19 += v * b7;
      t20 += v * b8;
      t21 += v * b9;
      t22 += v * b10;
      t23 += v * b11;
      t24 += v * b12;
      t25 += v * b13;
      t26 += v * b14;
      t27 += v * b15;
      v = a[13];
      t13 += v * b0;
      t14 += v * b1;
      t15 += v * b2;
      t16 += v * b3;
      t17 += v * b4;
      t18 += v * b5;
      t19 += v * b6;
      t20 += v * b7;
      t21 += v * b8;
      t22 += v * b9;
      t23 += v * b10;
      t24 += v * b11;
      t25 += v * b12;
      t26 += v * b13;
      t27 += v * b14;
      t28 += v * b15;
      v = a[14];
      t14 += v * b0;
      t15 += v * b1;
      t16 += v * b2;
      t17 += v * b3;
      t18 += v * b4;
      t19 += v * b5;
      t20 += v * b6;
      t21 += v * b7;
      t22 += v * b8;
      t23 += v * b9;
      t24 += v * b10;
      t25 += v * b11;
      t26 += v * b12;
      t27 += v * b13;
      t28 += v * b14;
      t29 += v * b15;
      v = a[15];
      t15 += v * b0;
      t16 += v * b1;
      t17 += v * b2;
      t18 += v * b3;
      t19 += v * b4;
      t20 += v * b5;
      t21 += v * b6;
      t22 += v * b7;
      t23 += v * b8;
      t24 += v * b9;
      t25 += v * b10;
      t26 += v * b11;
      t27 += v * b12;
      t28 += v * b13;
      t29 += v * b14;
      t30 += v * b15;

      t0 += 38 * t16;
      t1 += 38 * t17;
      t2 += 38 * t18;
      t3 += 38 * t19;
      t4 += 38 * t20;
      t5 += 38 * t21;
      t6 += 38 * t22;
      t7 += 38 * t23;
      t8 += 38 * t24;
      t9 += 38 * t25;
      t10 += 38 * t26;
      t11 += 38 * t27;
      t12 += 38 * t28;
      t13 += 38 * t29;
      t14 += 38 * t30;
      // t15 left as is

      // first car
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);

      // second car
      c = 1;
      v = t0 + c + 65535;
      c = Math.floor(v / 65536);
      t0 = v - c * 65536;
      v = t1 + c + 65535;
      c = Math.floor(v / 65536);
      t1 = v - c * 65536;
      v = t2 + c + 65535;
      c = Math.floor(v / 65536);
      t2 = v - c * 65536;
      v = t3 + c + 65535;
      c = Math.floor(v / 65536);
      t3 = v - c * 65536;
      v = t4 + c + 65535;
      c = Math.floor(v / 65536);
      t4 = v - c * 65536;
      v = t5 + c + 65535;
      c = Math.floor(v / 65536);
      t5 = v - c * 65536;
      v = t6 + c + 65535;
      c = Math.floor(v / 65536);
      t6 = v - c * 65536;
      v = t7 + c + 65535;
      c = Math.floor(v / 65536);
      t7 = v - c * 65536;
      v = t8 + c + 65535;
      c = Math.floor(v / 65536);
      t8 = v - c * 65536;
      v = t9 + c + 65535;
      c = Math.floor(v / 65536);
      t9 = v - c * 65536;
      v = t10 + c + 65535;
      c = Math.floor(v / 65536);
      t10 = v - c * 65536;
      v = t11 + c + 65535;
      c = Math.floor(v / 65536);
      t11 = v - c * 65536;
      v = t12 + c + 65535;
      c = Math.floor(v / 65536);
      t12 = v - c * 65536;
      v = t13 + c + 65535;
      c = Math.floor(v / 65536);
      t13 = v - c * 65536;
      v = t14 + c + 65535;
      c = Math.floor(v / 65536);
      t14 = v - c * 65536;
      v = t15 + c + 65535;
      c = Math.floor(v / 65536);
      t15 = v - c * 65536;
      t0 += c - 1 + 37 * (c - 1);

      o[0] = t0;
      o[1] = t1;
      o[2] = t2;
      o[3] = t3;
      o[4] = t4;
      o[5] = t5;
      o[6] = t6;
      o[7] = t7;
      o[8] = t8;
      o[9] = t9;
      o[10] = t10;
      o[11] = t11;
      o[12] = t12;
      o[13] = t13;
      o[14] = t14;
      o[15] = t15;
    }

    function S(o, a) {
      M(o, a, a);
    }

    function inv25519(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 253; a >= 0; a--) {
        S(c, c);
        if (a !== 2 && a !== 4) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function pow2523(o, i) {
      var c = gf();
      var a;
      for (a = 0; a < 16; a++) c[a] = i[a];
      for (a = 250; a >= 0; a--) {
        S(c, c);
        if (a !== 1) M(c, c, i);
      }
      for (a = 0; a < 16; a++) o[a] = c[a];
    }

    function crypto_scalarmult(q, n, p) {
      var z = new Uint8Array(32);
      var x = new Float64Array(80),
        r,
        i;
      var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf();
      for (i = 0; i < 31; i++) z[i] = n[i];
      z[31] = (n[31] & 127) | 64;
      z[0] &= 248;
      unpack25519(x, p);
      for (i = 0; i < 16; i++) {
        b[i] = x[i];
        d[i] = a[i] = c[i] = 0;
      }
      a[0] = d[0] = 1;
      for (i = 254; i >= 0; --i) {
        r = (z[i >>> 3] >>> (i & 7)) & 1;
        sel25519(a, b, r);
        sel25519(c, d, r);
        A(e, a, c);
        Z(a, a, c);
        A(c, b, d);
        Z(b, b, d);
        S(d, e);
        S(f, a);
        M(a, c, a);
        M(c, b, e);
        A(e, a, c);
        Z(a, a, c);
        S(b, a);
        Z(c, d, f);
        M(a, c, _121665);
        A(a, a, d);
        M(c, c, a);
        M(a, d, f);
        M(d, b, x);
        S(b, e);
        sel25519(a, b, r);
        sel25519(c, d, r);
      }
      for (i = 0; i < 16; i++) {
        x[i + 16] = a[i];
        x[i + 32] = c[i];
        x[i + 48] = b[i];
        x[i + 64] = d[i];
      }
      var x32 = x.subarray(32);
      var x16 = x.subarray(16);
      inv25519(x32, x32);
      M(x16, x16, x32);
      pack25519(q, x16);
      return 0;
    }

    function crypto_scalarmult_base(q, n) {
      return crypto_scalarmult(q, n, _9);
    }

    function crypto_box_keypair(y, x) {
      randombytes(x, 32);
      return crypto_scalarmult_base(y, x);
    }

    function crypto_box_beforenm(k, y, x) {
      var s = new Uint8Array(32);
      crypto_scalarmult(s, x, y);
      return crypto_core_hsalsa20(k, _0, s, sigma);
    }

    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;

    function crypto_box(c, m, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_afternm(c, m, d, n, k);
    }

    function crypto_box_open(m, c, d, n, y, x) {
      var k = new Uint8Array(32);
      crypto_box_beforenm(k, y, x);
      return crypto_box_open_afternm(m, c, d, n, k);
    }

    var K = [
      0x428a2f98,
      0xd728ae22,
      0x71374491,
      0x23ef65cd,
      0xb5c0fbcf,
      0xec4d3b2f,
      0xe9b5dba5,
      0x8189dbbc,
      0x3956c25b,
      0xf348b538,
      0x59f111f1,
      0xb605d019,
      0x923f82a4,
      0xaf194f9b,
      0xab1c5ed5,
      0xda6d8118,
      0xd807aa98,
      0xa3030242,
      0x12835b01,
      0x45706fbe,
      0x243185be,
      0x4ee4b28c,
      0x550c7dc3,
      0xd5ffb4e2,
      0x72be5d74,
      0xf27b896f,
      0x80deb1fe,
      0x3b1696b1,
      0x9bdc06a7,
      0x25c71235,
      0xc19bf174,
      0xcf692694,
      0xe49b69c1,
      0x9ef14ad2,
      0xefbe4786,
      0x384f25e3,
      0x0fc19dc6,
      0x8b8cd5b5,
      0x240ca1cc,
      0x77ac9c65,
      0x2de92c6f,
      0x592b0275,
      0x4a7484aa,
      0x6ea6e483,
      0x5cb0a9dc,
      0xbd41fbd4,
      0x76f988da,
      0x831153b5,
      0x983e5152,
      0xee66dfab,
      0xa831c66d,
      0x2db43210,
      0xb00327c8,
      0x98fb213f,
      0xbf597fc7,
      0xbeef0ee4,
      0xc6e00bf3,
      0x3da88fc2,
      0xd5a79147,
      0x930aa725,
      0x06ca6351,
      0xe003826f,
      0x14292967,
      0x0a0e6e70,
      0x27b70a85,
      0x46d22ffc,
      0x2e1b2138,
      0x5c26c926,
      0x4d2c6dfc,
      0x5ac42aed,
      0x53380d13,
      0x9d95b3df,
      0x650a7354,
      0x8baf63de,
      0x766a0abb,
      0x3c77b2a8,
      0x81c2c92e,
      0x47edaee6,
      0x92722c85,
      0x1482353b,
      0xa2bfe8a1,
      0x4cf10364,
      0xa81a664b,
      0xbc423001,
      0xc24b8b70,
      0xd0f89791,
      0xc76c51a3,
      0x0654be30,
      0xd192e819,
      0xd6ef5218,
      0xd6990624,
      0x5565a910,
      0xf40e3585,
      0x5771202a,
      0x106aa070,
      0x32bbd1b8,
      0x19a4c116,
      0xb8d2d0c8,
      0x1e376c08,
      0x5141ab53,
      0x2748774c,
      0xdf8eeb99,
      0x34b0bcb5,
      0xe19b48a8,
      0x391c0cb3,
      0xc5c95a63,
      0x4ed8aa4a,
      0xe3418acb,
      0x5b9cca4f,
      0x7763e373,
      0x682e6ff3,
      0xd6b2b8a3,
      0x748f82ee,
      0x5defb2fc,
      0x78a5636f,
      0x43172f60,
      0x84c87814,
      0xa1f0ab72,
      0x8cc70208,
      0x1a6439ec,
      0x90befffa,
      0x23631e28,
      0xa4506ceb,
      0xde82bde9,
      0xbef9a3f7,
      0xb2c67915,
      0xc67178f2,
      0xe372532b,
      0xca273ece,
      0xea26619c,
      0xd186b8c7,
      0x21c0c207,
      0xeada7dd6,
      0xcde0eb1e,
      0xf57d4f7f,
      0xee6ed178,
      0x06f067aa,
      0x72176fba,
      0x0a637dc5,
      0xa2c898a6,
      0x113f9804,
      0xbef90dae,
      0x1b710b35,
      0x131c471b,
      0x28db77f5,
      0x23047d84,
      0x32caab7b,
      0x40c72493,
      0x3c9ebe0a,
      0x15c9bebc,
      0x431d67c4,
      0x9c100d4c,
      0x4cc5d4be,
      0xcb3e42b6,
      0x597f299c,
      0xfc657e2a,
      0x5fcb6fab,
      0x3ad6faec,
      0x6c44198c,
      0x4a475817
    ];

    function crypto_hashblocks_hl(hh, hl, m, n) {
      var wh = new Int32Array(16),
        wl = new Int32Array(16),
        bh0,
        bh1,
        bh2,
        bh3,
        bh4,
        bh5,
        bh6,
        bh7,
        bl0,
        bl1,
        bl2,
        bl3,
        bl4,
        bl5,
        bl6,
        bl7,
        th,
        tl,
        i,
        j,
        h,
        l,
        a,
        b,
        c,
        d;

      var ah0 = hh[0],
        ah1 = hh[1],
        ah2 = hh[2],
        ah3 = hh[3],
        ah4 = hh[4],
        ah5 = hh[5],
        ah6 = hh[6],
        ah7 = hh[7],
        al0 = hl[0],
        al1 = hl[1],
        al2 = hl[2],
        al3 = hl[3],
        al4 = hl[4],
        al5 = hl[5],
        al6 = hl[6],
        al7 = hl[7];

      var pos = 0;
      while (n >= 128) {
        for (i = 0; i < 16; i++) {
          j = 8 * i + pos;
          wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
          wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
        }
        for (i = 0; i < 80; i++) {
          bh0 = ah0;
          bh1 = ah1;
          bh2 = ah2;
          bh3 = ah3;
          bh4 = ah4;
          bh5 = ah5;
          bh6 = ah6;
          bh7 = ah7;

          bl0 = al0;
          bl1 = al1;
          bl2 = al2;
          bl3 = al3;
          bl4 = al4;
          bl5 = al5;
          bl6 = al6;
          bl7 = al7;

          // add
          h = ah7;
          l = al7;

          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;

          // Sigma1
          h =
            ((ah4 >>> 14) | (al4 << (32 - 14))) ^
            ((ah4 >>> 18) | (al4 << (32 - 18))) ^
            ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
          l =
            ((al4 >>> 14) | (ah4 << (32 - 14))) ^
            ((al4 >>> 18) | (ah4 << (32 - 18))) ^
            ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // Ch
          h = (ah4 & ah5) ^ (~ah4 & ah6);
          l = (al4 & al5) ^ (~al4 & al6);

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // K
          h = K[i * 2];
          l = K[i * 2 + 1];

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // w
          h = wh[i % 16];
          l = wl[i % 16];

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          th = (c & 0xffff) | (d << 16);
          tl = (a & 0xffff) | (b << 16);

          // add
          h = th;
          l = tl;

          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;

          // Sigma0
          h =
            ((ah0 >>> 28) | (al0 << (32 - 28))) ^
            ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^
            ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
          l =
            ((al0 >>> 28) | (ah0 << (32 - 28))) ^
            ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^
            ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          // Maj
          h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
          l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh7 = (c & 0xffff) | (d << 16);
          bl7 = (a & 0xffff) | (b << 16);

          // add
          h = bh3;
          l = bl3;

          a = l & 0xffff;
          b = l >>> 16;
          c = h & 0xffff;
          d = h >>> 16;

          h = th;
          l = tl;

          a += l & 0xffff;
          b += l >>> 16;
          c += h & 0xffff;
          d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          bh3 = (c & 0xffff) | (d << 16);
          bl3 = (a & 0xffff) | (b << 16);

          ah1 = bh0;
          ah2 = bh1;
          ah3 = bh2;
          ah4 = bh3;
          ah5 = bh4;
          ah6 = bh5;
          ah7 = bh6;
          ah0 = bh7;

          al1 = bl0;
          al2 = bl1;
          al3 = bl2;
          al4 = bl3;
          al5 = bl4;
          al6 = bl5;
          al7 = bl6;
          al0 = bl7;

          if (i % 16 === 15) {
            for (j = 0; j < 16; j++) {
              // add
              h = wh[j];
              l = wl[j];

              a = l & 0xffff;
              b = l >>> 16;
              c = h & 0xffff;
              d = h >>> 16;

              h = wh[(j + 9) % 16];
              l = wl[(j + 9) % 16];

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              // sigma0
              th = wh[(j + 1) % 16];
              tl = wl[(j + 1) % 16];
              h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
              l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              // sigma1
              th = wh[(j + 14) % 16];
              tl = wl[(j + 14) % 16];
              h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
              l =
                ((tl >>> 19) | (th << (32 - 19))) ^
                ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^
                ((tl >>> 6) | (th << (32 - 6)));

              a += l & 0xffff;
              b += l >>> 16;
              c += h & 0xffff;
              d += h >>> 16;

              b += a >>> 16;
              c += b >>> 16;
              d += c >>> 16;

              wh[j] = (c & 0xffff) | (d << 16);
              wl[j] = (a & 0xffff) | (b << 16);
            }
          }
        }

        // add
        h = ah0;
        l = al0;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[0];
        l = hl[0];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[0] = ah0 = (c & 0xffff) | (d << 16);
        hl[0] = al0 = (a & 0xffff) | (b << 16);

        h = ah1;
        l = al1;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[1];
        l = hl[1];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[1] = ah1 = (c & 0xffff) | (d << 16);
        hl[1] = al1 = (a & 0xffff) | (b << 16);

        h = ah2;
        l = al2;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[2];
        l = hl[2];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[2] = ah2 = (c & 0xffff) | (d << 16);
        hl[2] = al2 = (a & 0xffff) | (b << 16);

        h = ah3;
        l = al3;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[3];
        l = hl[3];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[3] = ah3 = (c & 0xffff) | (d << 16);
        hl[3] = al3 = (a & 0xffff) | (b << 16);

        h = ah4;
        l = al4;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[4];
        l = hl[4];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[4] = ah4 = (c & 0xffff) | (d << 16);
        hl[4] = al4 = (a & 0xffff) | (b << 16);

        h = ah5;
        l = al5;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[5];
        l = hl[5];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[5] = ah5 = (c & 0xffff) | (d << 16);
        hl[5] = al5 = (a & 0xffff) | (b << 16);

        h = ah6;
        l = al6;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[6];
        l = hl[6];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[6] = ah6 = (c & 0xffff) | (d << 16);
        hl[6] = al6 = (a & 0xffff) | (b << 16);

        h = ah7;
        l = al7;

        a = l & 0xffff;
        b = l >>> 16;
        c = h & 0xffff;
        d = h >>> 16;

        h = hh[7];
        l = hl[7];

        a += l & 0xffff;
        b += l >>> 16;
        c += h & 0xffff;
        d += h >>> 16;

        b += a >>> 16;
        c += b >>> 16;
        d += c >>> 16;

        hh[7] = ah7 = (c & 0xffff) | (d << 16);
        hl[7] = al7 = (a & 0xffff) | (b << 16);

        pos += 128;
        n -= 128;
      }

      return n;
    }

    function crypto_hash(out, m, n) {
      var hh = new Int32Array(8),
        hl = new Int32Array(8),
        x = new Uint8Array(256),
        i,
        b = n;

      hh[0] = 0x6a09e667;
      hh[1] = 0xbb67ae85;
      hh[2] = 0x3c6ef372;
      hh[3] = 0xa54ff53a;
      hh[4] = 0x510e527f;
      hh[5] = 0x9b05688c;
      hh[6] = 0x1f83d9ab;
      hh[7] = 0x5be0cd19;

      hl[0] = 0xf3bcc908;
      hl[1] = 0x84caa73b;
      hl[2] = 0xfe94f82b;
      hl[3] = 0x5f1d36f1;
      hl[4] = 0xade682d1;
      hl[5] = 0x2b3e6c1f;
      hl[6] = 0xfb41bd6b;
      hl[7] = 0x137e2179;

      crypto_hashblocks_hl(hh, hl, m, n);
      n %= 128;

      for (i = 0; i < n; i++) x[i] = m[b - n + i];
      x[n] = 128;

      n = 256 - 128 * (n < 112 ? 1 : 0);
      x[n - 9] = 0;
      ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
      crypto_hashblocks_hl(hh, hl, x, n);

      for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

      return 0;
    }

    function add(p, q) {
      var a = gf(),
        b = gf(),
        c = gf(),
        d = gf(),
        e = gf(),
        f = gf(),
        g = gf(),
        h = gf(),
        t = gf();

      Z(a, p[1], p[0]);
      Z(t, q[1], q[0]);
      M(a, a, t);
      A(b, p[0], p[1]);
      A(t, q[0], q[1]);
      M(b, b, t);
      M(c, p[3], q[3]);
      M(c, c, D2);
      M(d, p[2], q[2]);
      A(d, d, d);
      Z(e, b, a);
      Z(f, d, c);
      A(g, d, c);
      A(h, b, a);

      M(p[0], e, f);
      M(p[1], h, g);
      M(p[2], g, f);
      M(p[3], e, h);
    }

    function cswap(p, q, b) {
      var i;
      for (i = 0; i < 4; i++) {
        sel25519(p[i], q[i], b);
      }
    }

    function pack(r, p) {
      var tx = gf(),
        ty = gf(),
        zi = gf();
      inv25519(zi, p[2]);
      M(tx, p[0], zi);
      M(ty, p[1], zi);
      pack25519(r, ty);
      r[31] ^= par25519(tx) << 7;
    }

    function scalarmult(p, q, s) {
      var b, i;
      set25519(p[0], gf0);
      set25519(p[1], gf1);
      set25519(p[2], gf1);
      set25519(p[3], gf0);
      for (i = 255; i >= 0; --i) {
        b = (s[(i / 8) | 0] >> (i & 7)) & 1;
        cswap(p, q, b);
        add(q, p);
        add(p, p);
        cswap(p, q, b);
      }
    }

    function scalarbase(p, s) {
      var q = [gf(), gf(), gf(), gf()];
      set25519(q[0], X);
      set25519(q[1], Y);
      set25519(q[2], gf1);
      M(q[3], X, Y);
      scalarmult(p, q, s);
    }

    function crypto_sign_keypair(pk, sk, seeded) {
      var d = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()];
      var i;

      if (!seeded) randombytes(sk, 32);
      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      scalarbase(p, d);
      pack(pk, p);

      for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
      return 0;
    }

    var L = new Float64Array([
      0xed,
      0xd3,
      0xf5,
      0x5c,
      0x1a,
      0x63,
      0x12,
      0x58,
      0xd6,
      0x9c,
      0xf7,
      0xa2,
      0xde,
      0xf9,
      0xde,
      0x14,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0x10
    ]);

    function modL(r, x) {
      var carry, i, j, k;
      for (i = 63; i >= 32; --i) {
        carry = 0;
        for (j = i - 32, k = i - 12; j < k; ++j) {
          x[j] += carry - 16 * x[i] * L[j - (i - 32)];
          carry = (x[j] + 128) >> 8;
          x[j] -= carry * 256;
        }
        x[j] += carry;
        x[i] = 0;
      }
      carry = 0;
      for (j = 0; j < 32; j++) {
        x[j] += carry - (x[31] >> 4) * L[j];
        carry = x[j] >> 8;
        x[j] &= 255;
      }
      for (j = 0; j < 32; j++) x[j] -= carry * L[j];
      for (i = 0; i < 32; i++) {
        x[i + 1] += x[i] >> 8;
        r[i] = x[i] & 255;
      }
    }

    function reduce(r) {
      var x = new Float64Array(64),
        i;
      for (i = 0; i < 64; i++) x[i] = r[i];
      for (i = 0; i < 64; i++) r[i] = 0;
      modL(r, x);
    }

    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
      var d = new Uint8Array(64),
        h = new Uint8Array(64),
        r = new Uint8Array(64);
      var i,
        j,
        x = new Float64Array(64);
      var p = [gf(), gf(), gf(), gf()];

      crypto_hash(d, sk, 32);
      d[0] &= 248;
      d[31] &= 127;
      d[31] |= 64;

      var smlen = n + 64;
      for (i = 0; i < n; i++) sm[64 + i] = m[i];
      for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

      crypto_hash(r, sm.subarray(32), n + 32);
      reduce(r);
      scalarbase(p, r);
      pack(sm, p);

      for (i = 32; i < 64; i++) sm[i] = sk[i];
      crypto_hash(h, sm, n + 64);
      reduce(h);

      for (i = 0; i < 64; i++) x[i] = 0;
      for (i = 0; i < 32; i++) x[i] = r[i];
      for (i = 0; i < 32; i++) {
        for (j = 0; j < 32; j++) {
          x[i + j] += h[i] * d[j];
        }
      }

      modL(sm.subarray(32), x);
      return smlen;
    }

    function unpackneg(r, p) {
      var t = gf(),
        chk = gf(),
        num = gf(),
        den = gf(),
        den2 = gf(),
        den4 = gf(),
        den6 = gf();

      set25519(r[2], gf1);
      unpack25519(r[1], p);
      S(num, r[1]);
      M(den, num, D);
      Z(num, num, r[2]);
      A(den, r[2], den);

      S(den2, den);
      S(den4, den2);
      M(den6, den4, den2);
      M(t, den6, num);
      M(t, t, den);

      pow2523(t, t);
      M(t, t, num);
      M(t, t, den);
      M(t, t, den);
      M(r[0], t, den);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) M(r[0], r[0], I);

      S(chk, r[0]);
      M(chk, chk, den);
      if (neq25519(chk, num)) return -1;

      if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);

      M(r[3], r[0], r[1]);
      return 0;
    }

    function crypto_sign_open(m, sm, n, pk) {
      var i, mlen;
      var t = new Uint8Array(32),
        h = new Uint8Array(64);
      var p = [gf(), gf(), gf(), gf()],
        q = [gf(), gf(), gf(), gf()];

      mlen = -1;
      if (n < 64) return -1;

      if (unpackneg(q, pk)) return -1;

      for (i = 0; i < n; i++) m[i] = sm[i];
      for (i = 0; i < 32; i++) m[i + 32] = pk[i];
      crypto_hash(h, m, n);
      reduce(h);
      scalarmult(p, q, h);

      scalarbase(q, sm.subarray(32));
      add(p, q);
      pack(t, p);

      n -= 64;
      if (crypto_verify_32(sm, 0, t, 0)) {
        for (i = 0; i < n; i++) m[i] = 0;
        return -1;
      }

      for (i = 0; i < n; i++) m[i] = sm[i + 64];
      mlen = n;
      return mlen;
    }

    var crypto_secretbox_KEYBYTES = 32,
      crypto_secretbox_NONCEBYTES = 24,
      crypto_secretbox_ZEROBYTES = 32,
      crypto_secretbox_BOXZEROBYTES = 16,
      crypto_scalarmult_BYTES = 32,
      crypto_scalarmult_SCALARBYTES = 32,
      crypto_box_PUBLICKEYBYTES = 32,
      crypto_box_SECRETKEYBYTES = 32,
      crypto_box_BEFORENMBYTES = 32,
      crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
      crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
      crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
      crypto_sign_BYTES = 64,
      crypto_sign_PUBLICKEYBYTES = 32,
      crypto_sign_SECRETKEYBYTES = 64,
      crypto_sign_SEEDBYTES = 32,
      crypto_hash_BYTES = 64;

    nacl.lowlevel = {
      crypto_core_hsalsa20: crypto_core_hsalsa20,
      crypto_stream_xor: crypto_stream_xor,
      crypto_stream: crypto_stream,
      crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
      crypto_stream_salsa20: crypto_stream_salsa20,
      crypto_onetimeauth: crypto_onetimeauth,
      crypto_onetimeauth_verify: crypto_onetimeauth_verify,
      crypto_verify_16: crypto_verify_16,
      crypto_verify_32: crypto_verify_32,
      crypto_secretbox: crypto_secretbox,
      crypto_secretbox_open: crypto_secretbox_open,
      crypto_scalarmult: crypto_scalarmult,
      crypto_scalarmult_base: crypto_scalarmult_base,
      crypto_box_beforenm: crypto_box_beforenm,
      crypto_box_afternm: crypto_box_afternm,
      crypto_box: crypto_box,
      crypto_box_open: crypto_box_open,
      crypto_box_keypair: crypto_box_keypair,
      crypto_hash: crypto_hash,
      crypto_sign: crypto_sign,
      crypto_sign_keypair: crypto_sign_keypair,
      crypto_sign_open: crypto_sign_open,

      crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
      crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
      crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
      crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
      crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
      crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
      crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
      crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
      crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
      crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
      crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
      crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
      crypto_sign_BYTES: crypto_sign_BYTES,
      crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
      crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
      crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
      crypto_hash_BYTES: crypto_hash_BYTES
    };

    /* High-level API */

    function checkLengths(k, n) {
      if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
      if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }

    function checkBoxLengths(pk, sk) {
      if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
      if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }

    function checkArrayTypes() {
      var t, i;
      for (i = 0; i < arguments.length; i++) {
        if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
          throw new TypeError('unexpected type ' + t + ', use Uint8Array');
      }
    }

    function cleanup(arr) {
      for (var i = 0; i < arr.length; i++) arr[i] = 0;
    }

    // TODO: Completely remove this in v0.15.
    if (!nacl.util) {
      nacl.util = {};
      nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
        throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
      };
    }

    nacl.randomBytes = function(n) {
      var b = new Uint8Array(n);
      randombytes(b, n);
      return b;
    };

    nacl.secretbox = function(msg, nonce, key) {
      checkArrayTypes(msg, nonce, key);
      checkLengths(key, nonce);
      var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
      var c = new Uint8Array(m.length);
      for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
      crypto_secretbox(c, m, m.length, nonce, key);
      return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };

    nacl.secretbox.open = function(box, nonce, key) {
      checkArrayTypes(box, nonce, key);
      checkLengths(key, nonce);
      var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
      var m = new Uint8Array(c.length);
      for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
      if (c.length < 32) return false;
      if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
      return m.subarray(crypto_secretbox_ZEROBYTES);
    };

    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

    nacl.scalarMult = function(n, p) {
      checkArrayTypes(n, p);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult(q, n, p);
      return q;
    };

    nacl.scalarMult.base = function(n) {
      checkArrayTypes(n);
      if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
      var q = new Uint8Array(crypto_scalarmult_BYTES);
      crypto_scalarmult_base(q, n);
      return q;
    };

    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

    nacl.box = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox(msg, nonce, k);
    };

    nacl.box.before = function(publicKey, secretKey) {
      checkArrayTypes(publicKey, secretKey);
      checkBoxLengths(publicKey, secretKey);
      var k = new Uint8Array(crypto_box_BEFORENMBYTES);
      crypto_box_beforenm(k, publicKey, secretKey);
      return k;
    };

    nacl.box.after = nacl.secretbox;

    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
      var k = nacl.box.before(publicKey, secretKey);
      return nacl.secretbox.open(msg, nonce, k);
    };

    nacl.box.open.after = nacl.secretbox.open;

    nacl.box.keyPair = function() {
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
      crypto_box_keypair(pk, sk);
      return { publicKey: pk, secretKey: sk };
    };

    nacl.box.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
      crypto_scalarmult_base(pk, secretKey);
      return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
    };

    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;

    nacl.sign = function(msg, secretKey) {
      checkArrayTypes(msg, secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
      var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
      crypto_sign(signedMsg, msg, msg.length, secretKey);
      return signedMsg;
    };

    nacl.sign.open = function(signedMsg, publicKey) {
      if (arguments.length !== 2)
        throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
      checkArrayTypes(signedMsg, publicKey);
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
      var tmp = new Uint8Array(signedMsg.length);
      var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
      if (mlen < 0) return null;
      var m = new Uint8Array(mlen);
      for (var i = 0; i < m.length; i++) m[i] = tmp[i];
      return m;
    };

    nacl.sign.detached = function(msg, secretKey) {
      var signedMsg = nacl.sign(msg, secretKey);
      var sig = new Uint8Array(crypto_sign_BYTES);
      for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
      return sig;
    };

    nacl.sign.detached.verify = function(msg, sig, publicKey) {
      checkArrayTypes(msg, sig, publicKey);
      if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
      if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
      var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
      var m = new Uint8Array(crypto_sign_BYTES + msg.length);
      var i;
      for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
      for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
      return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };

    nacl.sign.keyPair = function() {
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      crypto_sign_keypair(pk, sk);
      return { publicKey: pk, secretKey: sk };
    };

    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
      checkArrayTypes(secretKey);
      if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
      return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
    };

    nacl.sign.keyPair.fromSeed = function(seed) {
      checkArrayTypes(seed);
      if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
      var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
      var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
      for (var i = 0; i < 32; i++) sk[i] = seed[i];
      crypto_sign_keypair(pk, sk, true);
      return { publicKey: pk, secretKey: sk };
    };

    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;

    nacl.hash = function(msg) {
      checkArrayTypes(msg);
      var h = new Uint8Array(crypto_hash_BYTES);
      crypto_hash(h, msg, msg.length);
      return h;
    };

    nacl.hash.hashLength = crypto_hash_BYTES;

    nacl.verify = function(x, y) {
      checkArrayTypes(x, y);
      // Zero length arguments are considered not equal.
      if (x.length === 0 || y.length === 0) return false;
      if (x.length !== y.length) return false;
      return vn(x, 0, y, 0, x.length) === 0 ? true : false;
    };

    nacl.setPRNG = function(fn) {
      randombytes = fn;
    };

    (function() {
      // Initialize PRNG if environment provides CSPRNG.
      // If not, methods calling randombytes will throw.
      var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
      if (crypto && crypto.getRandomValues) {
        // Browsers.
        var QUOTA = 65536;
        nacl.setPRNG(function(x, n) {
          var i,
            v = new Uint8Array(n);
          for (i = 0; i < n; i += QUOTA) {
            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
          }
          for (i = 0; i < n; i++) x[i] = v[i];
          cleanup(v);
        });
      } else if (typeof _commonjsHelpers.commonjsRequire !== 'undefined') {
        // Node.js.
        crypto = crypto__default['default'];
        if (crypto && crypto.randomBytes) {
          nacl.setPRNG(function(x, n) {
            var i,
              v = crypto.randomBytes(n);
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        }
      }
    })();
  })(module.exports ? module.exports : (self.nacl = self.nacl || {}));
});

// Copyright 2015 Joyent, Inc.

var utils = {
  bufferSplit: bufferSplit,
  addRSAMissing: addRSAMissing,
  calculateDSAPublic: calculateDSAPublic,
  calculateED25519Public: calculateED25519Public,
  calculateX25519Public: calculateX25519Public,
  mpNormalize: mpNormalize,
  mpDenormalize: mpDenormalize,
  ecNormalize: ecNormalize,
  countZeros: countZeros,
  assertCompatible: assertCompatible,
  isCompatible: isCompatible,
  opensslKeyDeriv: opensslKeyDeriv,
  opensshCipherInfo: opensshCipherInfo,
  publicFromPrivateECDSA: publicFromPrivateECDSA,
  zeroPadToLength: zeroPadToLength,
  writeBitString: writeBitString,
  readBitString: readBitString,
  pbkdf2: pbkdf2
};

var Buffer$6 = safer_1.Buffer;

var jsbn$1 = jsbn.BigInteger;

var MAX_CLASS_DEPTH = 3;

function isCompatible(obj, klass, needVer) {
  if (obj === null || typeof obj !== 'object') return false;
  if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;
  if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;
  var proto = Object.getPrototypeOf(obj);
  var depth = 0;
  while (proto.constructor.name !== klass.name) {
    proto = Object.getPrototypeOf(proto);
    if (!proto || ++depth > MAX_CLASS_DEPTH) return false;
  }
  if (proto.constructor.name !== klass.name) return false;
  var ver = proto._sshpkApiVersion;
  if (ver === undefined) ver = klass._oldVersionDetect(obj);
  if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;
  return true;
}

function assertCompatible(obj, klass, needVer, name) {
  if (name === undefined) name = 'object';
  assert_1.ok(obj, name + ' must not be null');
  assert_1.object(obj, name + ' must be an object');
  if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;
  if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;
  var proto = Object.getPrototypeOf(obj);
  var depth = 0;
  while (proto.constructor.name !== klass.name) {
    proto = Object.getPrototypeOf(proto);
    assert_1.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + ' must be a ' + klass.name + ' instance');
  }
  assert_1.strictEqual(proto.constructor.name, klass.name, name + ' must be a ' + klass.name + ' instance');
  var ver = proto._sshpkApiVersion;
  if (ver === undefined) ver = klass._oldVersionDetect(obj);
  assert_1.ok(
    ver[0] == needVer[0] && ver[1] >= needVer[1],
    name + ' must be compatible with ' + klass.name + ' klass ' + 'version ' + needVer[0] + '.' + needVer[1]
  );
}

var CIPHER_LEN = {
  'des-ede3-cbc': { key: 24, iv: 8 },
  'aes-128-cbc': { key: 16, iv: 16 },
  'aes-256-cbc': { key: 32, iv: 16 }
};
var PKCS5_SALT_LEN = 8;

function opensslKeyDeriv(cipher, salt, passphrase, count) {
  assert_1.buffer(salt, 'salt');
  assert_1.buffer(passphrase, 'passphrase');
  assert_1.number(count, 'iteration count');

  var clen = CIPHER_LEN[cipher];
  assert_1.object(clen, 'supported cipher');

  salt = salt.slice(0, PKCS5_SALT_LEN);

  var D, D_prev, bufs;
  var material = Buffer$6.alloc(0);
  while (material.length < clen.key + clen.iv) {
    bufs = [];
    if (D_prev) bufs.push(D_prev);
    bufs.push(passphrase);
    bufs.push(salt);
    D = Buffer$6.concat(bufs);
    for (var j = 0; j < count; ++j)
      D = crypto__default['default']
        .createHash('md5')
        .update(D)
        .digest();
    material = Buffer$6.concat([material, D]);
    D_prev = D;
  }

  return {
    key: material.slice(0, clen.key),
    iv: material.slice(clen.key, clen.key + clen.iv)
  };
}

/* See: RFC2898 */
function pbkdf2(hashAlg, salt, iterations, size, passphrase) {
  var hkey = Buffer$6.alloc(salt.length + 4);
  salt.copy(hkey);

  var gen = 0,
    ts = [];
  var i = 1;
  while (gen < size) {
    var t = T(i++);
    gen += t.length;
    ts.push(t);
  }
  return Buffer$6.concat(ts).slice(0, size);

  function T(I) {
    hkey.writeUInt32BE(I, hkey.length - 4);

    var hmac = crypto__default['default'].createHmac(hashAlg, passphrase);
    hmac.update(hkey);

    var Ti = hmac.digest();
    var Uc = Ti;
    var c = 1;
    while (c++ < iterations) {
      hmac = crypto__default['default'].createHmac(hashAlg, passphrase);
      hmac.update(Uc);
      Uc = hmac.digest();
      for (var x = 0; x < Ti.length; ++x) Ti[x] ^= Uc[x];
    }
    return Ti;
  }
}

/* Count leading zero bits on a buffer */
function countZeros(buf) {
  var o = 0,
    obit = 8;
  while (o < buf.length) {
    var mask = 1 << obit;
    if ((buf[o] & mask) === mask) break;
    obit--;
    if (obit < 0) {
      o++;
      obit = 8;
    }
  }
  return o * 8 + (8 - obit) - 1;
}

function bufferSplit(buf, chr) {
  assert_1.buffer(buf);
  assert_1.string(chr);

  var parts = [];
  var lastPart = 0;
  var matches = 0;
  for (var i = 0; i < buf.length; ++i) {
    if (buf[i] === chr.charCodeAt(matches)) ++matches;
    else if (buf[i] === chr.charCodeAt(0)) matches = 1;
    else matches = 0;

    if (matches >= chr.length) {
      var newPart = i + 1;
      parts.push(buf.slice(lastPart, newPart - matches));
      lastPart = newPart;
      matches = 0;
    }
  }
  if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));

  return parts;
}

function ecNormalize(buf, addZero) {
  assert_1.buffer(buf);
  if (buf[0] === 0x00 && buf[1] === 0x04) {
    if (addZero) return buf;
    return buf.slice(1);
  } else if (buf[0] === 0x04) {
    if (!addZero) return buf;
  } else {
    while (buf[0] === 0x00) buf = buf.slice(1);
    if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error('Compressed elliptic curve points ' + 'are not supported');
    if (buf[0] !== 0x04) throw new Error('Not a valid elliptic curve point');
    if (!addZero) return buf;
  }
  var b = Buffer$6.alloc(buf.length + 1);
  b[0] = 0x0;
  buf.copy(b, 1);
  return b;
}

function readBitString(der, tag) {
  if (tag === undefined) tag = lib.Ber.BitString;
  var buf = der.readString(tag, true);
  assert_1.strictEqual(
    buf[0],
    0x00,
    'bit strings with unused bits are ' + 'not supported (0x' + buf[0].toString(16) + ')'
  );
  return buf.slice(1);
}

function writeBitString(der, buf, tag) {
  if (tag === undefined) tag = lib.Ber.BitString;
  var b = Buffer$6.alloc(buf.length + 1);
  b[0] = 0x00;
  buf.copy(b, 1);
  der.writeBuffer(b, tag);
}

function mpNormalize(buf) {
  assert_1.buffer(buf);
  while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00) buf = buf.slice(1);
  if ((buf[0] & 0x80) === 0x80) {
    var b = Buffer$6.alloc(buf.length + 1);
    b[0] = 0x00;
    buf.copy(b, 1);
    buf = b;
  }
  return buf;
}

function mpDenormalize(buf) {
  assert_1.buffer(buf);
  while (buf.length > 1 && buf[0] === 0x00) buf = buf.slice(1);
  return buf;
}

function zeroPadToLength(buf, len) {
  assert_1.buffer(buf);
  assert_1.number(len);
  while (buf.length > len) {
    assert_1.equal(buf[0], 0x00);
    buf = buf.slice(1);
  }
  while (buf.length < len) {
    var b = Buffer$6.alloc(buf.length + 1);
    b[0] = 0x00;
    buf.copy(b, 1);
    buf = b;
  }
  return buf;
}

function bigintToMpBuf(bigint) {
  var buf = Buffer$6.from(bigint.toByteArray());
  buf = mpNormalize(buf);
  return buf;
}

function calculateDSAPublic(g, p, x) {
  assert_1.buffer(g);
  assert_1.buffer(p);
  assert_1.buffer(x);
  g = new jsbn$1(g);
  p = new jsbn$1(p);
  x = new jsbn$1(x);
  var y = g.modPow(x, p);
  var ybuf = bigintToMpBuf(y);
  return ybuf;
}

function calculateED25519Public(k) {
  assert_1.buffer(k);

  var kp = naclFast.sign.keyPair.fromSeed(new Uint8Array(k));
  return Buffer$6.from(kp.publicKey);
}

function calculateX25519Public(k) {
  assert_1.buffer(k);

  var kp = naclFast.box.keyPair.fromSeed(new Uint8Array(k));
  return Buffer$6.from(kp.publicKey);
}

function addRSAMissing(key) {
  assert_1.object(key);
  assertCompatible(key, privateKey, [1, 1]);

  var d = new jsbn$1(key.part.d.data);
  var buf;

  if (!key.part.dmodp) {
    var p = new jsbn$1(key.part.p.data);
    var dmodp = d.mod(p.subtract(1));

    buf = bigintToMpBuf(dmodp);
    key.part.dmodp = { name: 'dmodp', data: buf };
    key.parts.push(key.part.dmodp);
  }
  if (!key.part.dmodq) {
    var q = new jsbn$1(key.part.q.data);
    var dmodq = d.mod(q.subtract(1));

    buf = bigintToMpBuf(dmodq);
    key.part.dmodq = { name: 'dmodq', data: buf };
    key.parts.push(key.part.dmodq);
  }
}

function publicFromPrivateECDSA(curveName, priv) {
  assert_1.string(curveName, 'curveName');
  assert_1.buffer(priv);
  var params = algs.curves[curveName];
  var p = new jsbn$1(params.p);
  var a = new jsbn$1(params.a);
  var b = new jsbn$1(params.b);
  var curve = new ec.ECCurveFp(p, a, b);
  var G = curve.decodePointHex(params.G.toString('hex'));

  var d = new jsbn$1(mpNormalize(priv));
  var pub = G.multiply(d);
  pub = Buffer$6.from(curve.encodePointHex(pub), 'hex');

  var parts = [];
  parts.push({ name: 'curve', data: Buffer$6.from(curveName) });
  parts.push({ name: 'Q', data: pub });

  var key = new key$1({ type: 'ecdsa', curve: curve, parts: parts });
  return key;
}

function opensshCipherInfo(cipher) {
  var inf = {};
  switch (cipher) {
    case '3des-cbc':
      inf.keySize = 24;
      inf.blockSize = 8;
      inf.opensslName = 'des-ede3-cbc';
      break;
    case 'blowfish-cbc':
      inf.keySize = 16;
      inf.blockSize = 8;
      inf.opensslName = 'bf-cbc';
      break;
    case 'aes128-cbc':
    case 'aes128-ctr':
    case 'aes128-gcm@openssh.com':
      inf.keySize = 16;
      inf.blockSize = 16;
      inf.opensslName = 'aes-128-' + cipher.slice(7, 10);
      break;
    case 'aes192-cbc':
    case 'aes192-ctr':
    case 'aes192-gcm@openssh.com':
      inf.keySize = 24;
      inf.blockSize = 16;
      inf.opensslName = 'aes-192-' + cipher.slice(7, 10);
      break;
    case 'aes256-cbc':
    case 'aes256-ctr':
    case 'aes256-gcm@openssh.com':
      inf.keySize = 32;
      inf.blockSize = 16;
      inf.opensslName = 'aes-256-' + cipher.slice(7, 10);
      break;
    default:
      throw new Error('Unsupported openssl cipher "' + cipher + '"');
  }
  return inf;
}

// Copyright 2015 Joyent, Inc.

var sshBuffer = SSHBuffer;

var Buffer$7 = safer_1.Buffer;

function SSHBuffer(opts) {
  assert_1.object(opts, 'options');
  if (opts.buffer !== undefined) assert_1.buffer(opts.buffer, 'options.buffer');

  this._size = opts.buffer ? opts.buffer.length : 1024;
  this._buffer = opts.buffer || Buffer$7.alloc(this._size);
  this._offset = 0;
}

SSHBuffer.prototype.toBuffer = function() {
  return this._buffer.slice(0, this._offset);
};

SSHBuffer.prototype.atEnd = function() {
  return this._offset >= this._buffer.length;
};

SSHBuffer.prototype.remainder = function() {
  return this._buffer.slice(this._offset);
};

SSHBuffer.prototype.skip = function(n) {
  this._offset += n;
};

SSHBuffer.prototype.expand = function() {
  this._size *= 2;
  var buf = Buffer$7.alloc(this._size);
  this._buffer.copy(buf, 0);
  this._buffer = buf;
};

SSHBuffer.prototype.readPart = function() {
  return { data: this.readBuffer() };
};

SSHBuffer.prototype.readBuffer = function() {
  var len = this._buffer.readUInt32BE(this._offset);
  this._offset += 4;
  assert_1.ok(
    this._offset + len <= this._buffer.length,
    'length out of bounds at +0x' + this._offset.toString(16) + ' (data truncated?)'
  );
  var buf = this._buffer.slice(this._offset, this._offset + len);
  this._offset += len;
  return buf;
};

SSHBuffer.prototype.readString = function() {
  return this.readBuffer().toString();
};

SSHBuffer.prototype.readCString = function() {
  var offset = this._offset;
  while (offset < this._buffer.length && this._buffer[offset] !== 0x00) offset++;
  assert_1.ok(offset < this._buffer.length, 'c string does not terminate');
  var str = this._buffer.slice(this._offset, offset).toString();
  this._offset = offset + 1;
  return str;
};

SSHBuffer.prototype.readInt = function() {
  var v = this._buffer.readUInt32BE(this._offset);
  this._offset += 4;
  return v;
};

SSHBuffer.prototype.readInt64 = function() {
  assert_1.ok(this._offset + 8 < this._buffer.length, 'buffer not long enough to read Int64');
  var v = this._buffer.slice(this._offset, this._offset + 8);
  this._offset += 8;
  return v;
};

SSHBuffer.prototype.readChar = function() {
  var v = this._buffer[this._offset++];
  return v;
};

SSHBuffer.prototype.writeBuffer = function(buf) {
  while (this._offset + 4 + buf.length > this._size) this.expand();
  this._buffer.writeUInt32BE(buf.length, this._offset);
  this._offset += 4;
  buf.copy(this._buffer, this._offset);
  this._offset += buf.length;
};

SSHBuffer.prototype.writeString = function(str) {
  this.writeBuffer(Buffer$7.from(str, 'utf8'));
};

SSHBuffer.prototype.writeCString = function(str) {
  while (this._offset + 1 + str.length > this._size) this.expand();
  this._buffer.write(str, this._offset);
  this._offset += str.length;
  this._buffer[this._offset++] = 0;
};

SSHBuffer.prototype.writeInt = function(v) {
  while (this._offset + 4 > this._size) this.expand();
  this._buffer.writeUInt32BE(v, this._offset);
  this._offset += 4;
};

SSHBuffer.prototype.writeInt64 = function(v) {
  assert_1.buffer(v, 'value');
  if (v.length > 8) {
    var lead = v.slice(0, v.length - 8);
    for (var i = 0; i < lead.length; ++i) {
      assert_1.strictEqual(lead[i], 0, 'must fit in 64 bits of precision');
    }
    v = v.slice(v.length - 8, v.length);
  }
  while (this._offset + 8 > this._size) this.expand();
  v.copy(this._buffer, this._offset);
  this._offset += 8;
};

SSHBuffer.prototype.writeChar = function(v) {
  while (this._offset + 1 > this._size) this.expand();
  this._buffer[this._offset++] = v;
};

SSHBuffer.prototype.writePart = function(p) {
  this.writeBuffer(p.data);
};

SSHBuffer.prototype.write = function(buf) {
  while (this._offset + buf.length > this._size) this.expand();
  buf.copy(this._buffer, this._offset);
  this._offset += buf.length;
};

// Copyright 2015 Joyent, Inc.

var signature = Signature;

var Buffer$8 = safer_1.Buffer;

var InvalidAlgorithmError$1 = errors.InvalidAlgorithmError;
var SignatureParseError$1 = errors.SignatureParseError;

function Signature(opts) {
  assert_1.object(opts, 'options');
  assert_1.arrayOfObject(opts.parts, 'options.parts');
  assert_1.string(opts.type, 'options.type');

  var partLookup = {};
  for (var i = 0; i < opts.parts.length; ++i) {
    var part = opts.parts[i];
    partLookup[part.name] = part;
  }

  this.type = opts.type;
  this.hashAlgorithm = opts.hashAlgo;
  this.curve = opts.curve;
  this.parts = opts.parts;
  this.part = partLookup;
}

Signature.prototype.toBuffer = function(format) {
  if (format === undefined) format = 'asn1';
  assert_1.string(format, 'format');

  var buf;
  var stype = 'ssh-' + this.type;

  switch (this.type) {
    case 'rsa':
      switch (this.hashAlgorithm) {
        case 'sha256':
          stype = 'rsa-sha2-256';
          break;
        case 'sha512':
          stype = 'rsa-sha2-512';
          break;
        case 'sha1':
        case undefined:
          break;
        default:
          throw new Error('SSH signature ' + 'format does not support hash ' + 'algorithm ' + this.hashAlgorithm);
      }
      if (format === 'ssh') {
        buf = new sshBuffer({});
        buf.writeString(stype);
        buf.writePart(this.part.sig);
        return buf.toBuffer();
      } else {
        return this.part.sig.data;
      }

    case 'ed25519':
      if (format === 'ssh') {
        buf = new sshBuffer({});
        buf.writeString(stype);
        buf.writePart(this.part.sig);
        return buf.toBuffer();
      } else {
        return this.part.sig.data;
      }

    case 'dsa':
    case 'ecdsa':
      var r, s;
      if (format === 'asn1') {
        var der = new lib.BerWriter();
        der.startSequence();
        r = utils.mpNormalize(this.part.r.data);
        s = utils.mpNormalize(this.part.s.data);
        der.writeBuffer(r, lib.Ber.Integer);
        der.writeBuffer(s, lib.Ber.Integer);
        der.endSequence();
        return der.buffer;
      } else if (format === 'ssh' && this.type === 'dsa') {
        buf = new sshBuffer({});
        buf.writeString('ssh-dss');
        r = this.part.r.data;
        if (r.length > 20 && r[0] === 0x00) r = r.slice(1);
        s = this.part.s.data;
        if (s.length > 20 && s[0] === 0x00) s = s.slice(1);
        if ((this.hashAlgorithm && this.hashAlgorithm !== 'sha1') || r.length + s.length !== 40) {
          throw new Error('OpenSSH only supports ' + 'DSA signatures with SHA1 hash');
        }
        buf.writeBuffer(Buffer$8.concat([r, s]));
        return buf.toBuffer();
      } else if (format === 'ssh' && this.type === 'ecdsa') {
        var inner = new sshBuffer({});
        r = this.part.r.data;
        inner.writeBuffer(r);
        inner.writePart(this.part.s);

        buf = new sshBuffer({});
        /* XXX: find a more proper way to do this? */
        var curve;
        if (r[0] === 0x00) r = r.slice(1);
        var sz = r.length * 8;
        if (sz === 256) curve = 'nistp256';
        else if (sz === 384) curve = 'nistp384';
        else if (sz === 528) curve = 'nistp521';
        buf.writeString('ecdsa-sha2-' + curve);
        buf.writeBuffer(inner.toBuffer());
        return buf.toBuffer();
      }
      throw new Error('Invalid signature format');
    default:
      throw new Error('Invalid signature data');
  }
};

Signature.prototype.toString = function(format) {
  assert_1.optionalString(format, 'format');
  return this.toBuffer(format).toString('base64');
};

Signature.parse = function(data, type, format) {
  if (typeof data === 'string') data = Buffer$8.from(data, 'base64');
  assert_1.buffer(data, 'data');
  assert_1.string(format, 'format');
  assert_1.string(type, 'type');

  var opts = {};
  opts.type = type.toLowerCase();
  opts.parts = [];

  try {
    assert_1.ok(data.length > 0, 'signature must not be empty');
    switch (opts.type) {
      case 'rsa':
        return parseOneNum(data, type, format, opts);
      case 'ed25519':
        return parseOneNum(data, type, format, opts);

      case 'dsa':
      case 'ecdsa':
        if (format === 'asn1') return parseDSAasn1(data, type, format, opts);
        else if (opts.type === 'dsa') return parseDSA(data, type, format, opts);
        else return parseECDSA(data, type, format, opts);

      default:
        throw new InvalidAlgorithmError$1(type);
    }
  } catch (e) {
    if (e instanceof InvalidAlgorithmError$1) throw e;
    throw new SignatureParseError$1(type, format, e);
  }
};

function parseOneNum(data, type, format, opts) {
  if (format === 'ssh') {
    try {
      var buf = new sshBuffer({ buffer: data });
      var head = buf.readString();
    } catch (e) {
      /* fall through */
    }
    if (buf !== undefined) {
      var msg = 'SSH signature does not match expected ' + 'type (expected ' + type + ', got ' + head + ')';
      switch (head) {
        case 'ssh-rsa':
          assert_1.strictEqual(type, 'rsa', msg);
          opts.hashAlgo = 'sha1';
          break;
        case 'rsa-sha2-256':
          assert_1.strictEqual(type, 'rsa', msg);
          opts.hashAlgo = 'sha256';
          break;
        case 'rsa-sha2-512':
          assert_1.strictEqual(type, 'rsa', msg);
          opts.hashAlgo = 'sha512';
          break;
        case 'ssh-ed25519':
          assert_1.strictEqual(type, 'ed25519', msg);
          opts.hashAlgo = 'sha512';
          break;
        default:
          throw new Error('Unknown SSH signature ' + 'type: ' + head);
      }
      var sig = buf.readPart();
      assert_1.ok(buf.atEnd(), 'extra trailing bytes');
      sig.name = 'sig';
      opts.parts.push(sig);
      return new Signature(opts);
    }
  }
  opts.parts.push({ name: 'sig', data: data });
  return new Signature(opts);
}

function parseDSAasn1(data, type, format, opts) {
  var der = new lib.BerReader(data);
  der.readSequence();
  var r = der.readString(lib.Ber.Integer, true);
  var s = der.readString(lib.Ber.Integer, true);

  opts.parts.push({ name: 'r', data: utils.mpNormalize(r) });
  opts.parts.push({ name: 's', data: utils.mpNormalize(s) });

  return new Signature(opts);
}

function parseDSA(data, type, format, opts) {
  if (data.length != 40) {
    var buf = new sshBuffer({ buffer: data });
    var d = buf.readBuffer();
    if (d.toString('ascii') === 'ssh-dss') d = buf.readBuffer();
    assert_1.ok(buf.atEnd(), 'extra trailing bytes');
    assert_1.strictEqual(d.length, 40, 'invalid inner length');
    data = d;
  }
  opts.parts.push({ name: 'r', data: data.slice(0, 20) });
  opts.parts.push({ name: 's', data: data.slice(20, 40) });
  return new Signature(opts);
}

function parseECDSA(data, type, format, opts) {
  var buf = new sshBuffer({ buffer: data });

  var r, s;
  var inner = buf.readBuffer();
  var stype = inner.toString('ascii');
  if (stype.slice(0, 6) === 'ecdsa-') {
    var parts = stype.split('-');
    assert_1.strictEqual(parts[0], 'ecdsa');
    assert_1.strictEqual(parts[1], 'sha2');
    opts.curve = parts[2];
    switch (opts.curve) {
      case 'nistp256':
        opts.hashAlgo = 'sha256';
        break;
      case 'nistp384':
        opts.hashAlgo = 'sha384';
        break;
      case 'nistp521':
        opts.hashAlgo = 'sha512';
        break;
      default:
        throw new Error('Unsupported ECDSA curve: ' + opts.curve);
    }
    inner = buf.readBuffer();
    assert_1.ok(buf.atEnd(), 'extra trailing bytes on outer');
    buf = new sshBuffer({ buffer: inner });
    r = buf.readPart();
  } else {
    r = { data: inner };
  }

  s = buf.readPart();
  assert_1.ok(buf.atEnd(), 'extra trailing bytes');

  r.name = 'r';
  s.name = 's';

  opts.parts.push(r);
  opts.parts.push(s);
  return new Signature(opts);
}

Signature.isSignature = function(obj, ver) {
  return utils.isCompatible(obj, Signature, ver);
};

/*
 * API versions for Signature:
 * [1,0] -- initial ver
 * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent
 *          hashAlgorithm property
 * [2,1] -- first tagged version
 */
Signature.prototype._sshpkApiVersion = [2, 1];

Signature._oldVersionDetect = function(obj) {
  assert_1.func(obj.toBuffer);
  if (obj.hasOwnProperty('hashAlgorithm')) return [2, 0];
  return [1, 0];
};

// Named EC curves

// Requires ec.js, jsbn.js, and jsbn2.js
jsbn.BigInteger;

jsbn.BigInteger;

// Copyright 2017 Joyent, Inc.

var dhe = {
  DiffieHellman: DiffieHellman,
  generateECDSA: generateECDSA,
  generateED25519: generateED25519
};

var Buffer$9 = safer_1.Buffer;

var CRYPTO_HAVE_ECDH = crypto__default['default'].createECDH !== undefined;

var jsbn$2 = jsbn.BigInteger;

function DiffieHellman(key) {
  utils.assertCompatible(key, key$1, [1, 4], 'key');
  this._isPriv = privateKey.isPrivateKey(key, [1, 3]);
  this._algo = key.type;
  this._curve = key.curve;
  this._key = key;
  if (key.type === 'dsa') {
    if (!CRYPTO_HAVE_ECDH) {
      throw new Error('Due to bugs in the node 0.10 ' + 'crypto API, node 0.12.x or later is required ' + 'to use DH');
    }
    this._dh = crypto__default['default'].createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);
    this._p = key.part.p;
    this._g = key.part.g;
    if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);
    this._dh.setPublicKey(key.part.y.data);
  } else if (key.type === 'ecdsa') {
    if (!CRYPTO_HAVE_ECDH) {
      this._ecParams = new X9ECParameters(this._curve);

      if (this._isPriv) {
        this._priv = new ECPrivate(this._ecParams, key.part.d.data);
      }
      return;
    }

    var curve = {
      nistp256: 'prime256v1',
      nistp384: 'secp384r1',
      nistp521: 'secp521r1'
    }[key.curve];
    this._dh = crypto__default['default'].createECDH(curve);
    if (typeof this._dh !== 'object' || typeof this._dh.setPrivateKey !== 'function') {
      CRYPTO_HAVE_ECDH = false;
      DiffieHellman.call(this, key);
      return;
    }
    if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);
    this._dh.setPublicKey(key.part.Q.data);
  } else if (key.type === 'curve25519') {
    if (this._isPriv) {
      utils.assertCompatible(key, privateKey, [1, 5], 'key');
      this._priv = key.part.k.data;
    }
  } else {
    throw new Error('DH not supported for ' + key.type + ' keys');
  }
}

DiffieHellman.prototype.getPublicKey = function() {
  if (this._isPriv) return this._key.toPublic();
  return this._key;
};

DiffieHellman.prototype.getPrivateKey = function() {
  if (this._isPriv) return this._key;
  else return undefined;
};
DiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;

DiffieHellman.prototype._keyCheck = function(pk, isPub) {
  assert_1.object(pk, 'key');
  if (!isPub) utils.assertCompatible(pk, privateKey, [1, 3], 'key');
  utils.assertCompatible(pk, key$1, [1, 4], 'key');

  if (pk.type !== this._algo) {
    throw new Error('A ' + pk.type + ' key cannot be used in ' + this._algo + ' Diffie-Hellman');
  }

  if (pk.curve !== this._curve) {
    throw new Error(
      'A key from the ' + pk.curve + ' curve ' + 'cannot be used with a ' + this._curve + ' Diffie-Hellman'
    );
  }

  if (pk.type === 'dsa') {
    assert_1.deepEqual(pk.part.p, this._p, 'DSA key prime does not match');
    assert_1.deepEqual(pk.part.g, this._g, 'DSA key generator does not match');
  }
};

DiffieHellman.prototype.setKey = function(pk) {
  this._keyCheck(pk);

  if (pk.type === 'dsa') {
    this._dh.setPrivateKey(pk.part.x.data);
    this._dh.setPublicKey(pk.part.y.data);
  } else if (pk.type === 'ecdsa') {
    if (CRYPTO_HAVE_ECDH) {
      this._dh.setPrivateKey(pk.part.d.data);
      this._dh.setPublicKey(pk.part.Q.data);
    } else {
      this._priv = new ECPrivate(this._ecParams, pk.part.d.data);
    }
  } else if (pk.type === 'curve25519') {
    var k = pk.part.k;
    if (!pk.part.k) k = pk.part.r;
    this._priv = k.data;
    if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);
    this._priv = this._priv.slice(0, 32);
  }
  this._key = pk;
  this._isPriv = true;
};
DiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;

DiffieHellman.prototype.computeSecret = function(otherpk) {
  this._keyCheck(otherpk, true);
  if (!this._isPriv) throw new Error('DH exchange has not been initialized with ' + 'a private key yet');

  var pub;
  if (this._algo === 'dsa') {
    return this._dh.computeSecret(otherpk.part.y.data);
  } else if (this._algo === 'ecdsa') {
    if (CRYPTO_HAVE_ECDH) {
      return this._dh.computeSecret(otherpk.part.Q.data);
    } else {
      pub = new ECPublic(this._ecParams, otherpk.part.Q.data);
      return this._priv.deriveSharedSecret(pub);
    }
  } else if (this._algo === 'curve25519') {
    pub = otherpk.part.A.data;
    while (pub[0] === 0x00 && pub.length > 32) pub = pub.slice(1);
    var priv = this._priv;
    assert_1.strictEqual(pub.length, 32);
    assert_1.strictEqual(priv.length, 32);

    var secret = naclFast.box.before(new Uint8Array(pub), new Uint8Array(priv));

    return Buffer$9.from(secret);
  }

  throw new Error('Invalid algorithm: ' + this._algo);
};

DiffieHellman.prototype.generateKey = function() {
  var parts = [];
  var priv, pub;
  if (this._algo === 'dsa') {
    this._dh.generateKeys();

    parts.push({ name: 'p', data: this._p.data });
    parts.push({ name: 'q', data: this._key.part.q.data });
    parts.push({ name: 'g', data: this._g.data });
    parts.push({ name: 'y', data: this._dh.getPublicKey() });
    parts.push({ name: 'x', data: this._dh.getPrivateKey() });
    this._key = new privateKey({
      type: 'dsa',
      parts: parts
    });
    this._isPriv = true;
    return this._key;
  } else if (this._algo === 'ecdsa') {
    if (CRYPTO_HAVE_ECDH) {
      this._dh.generateKeys();

      parts.push({ name: 'curve', data: Buffer$9.from(this._curve) });
      parts.push({ name: 'Q', data: this._dh.getPublicKey() });
      parts.push({ name: 'd', data: this._dh.getPrivateKey() });
      this._key = new privateKey({
        type: 'ecdsa',
        curve: this._curve,
        parts: parts
      });
      this._isPriv = true;
      return this._key;
    } else {
      var n = this._ecParams.getN();
      var r = new jsbn$2(crypto__default['default'].randomBytes(n.bitLength()));
      var n1 = n.subtract(jsbn$2.ONE);
      priv = r.mod(n1).add(jsbn$2.ONE);
      pub = this._ecParams.getG().multiply(priv);

      priv = Buffer$9.from(priv.toByteArray());
      pub = Buffer$9.from(this._ecParams.getCurve().encodePointHex(pub), 'hex');

      this._priv = new ECPrivate(this._ecParams, priv);

      parts.push({ name: 'curve', data: Buffer$9.from(this._curve) });
      parts.push({ name: 'Q', data: pub });
      parts.push({ name: 'd', data: priv });

      this._key = new privateKey({
        type: 'ecdsa',
        curve: this._curve,
        parts: parts
      });
      this._isPriv = true;
      return this._key;
    }
  } else if (this._algo === 'curve25519') {
    var pair = naclFast.box.keyPair();
    priv = Buffer$9.from(pair.secretKey);
    pub = Buffer$9.from(pair.publicKey);
    priv = Buffer$9.concat([priv, pub]);
    assert_1.strictEqual(priv.length, 64);
    assert_1.strictEqual(pub.length, 32);

    parts.push({ name: 'A', data: pub });
    parts.push({ name: 'k', data: priv });
    this._key = new privateKey({
      type: 'curve25519',
      parts: parts
    });
    this._isPriv = true;
    return this._key;
  }

  throw new Error('Invalid algorithm: ' + this._algo);
};
DiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;

/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */

function X9ECParameters(name) {
  var params = algs.curves[name];
  assert_1.object(params);

  var p = new jsbn$2(params.p);
  var a = new jsbn$2(params.a);
  var b = new jsbn$2(params.b);
  var n = new jsbn$2(params.n);
  var h = jsbn$2.ONE;
  var curve = new ec.ECCurveFp(p, a, b);
  var G = curve.decodePointHex(params.G.toString('hex'));

  this.curve = curve;
  this.g = G;
  this.n = n;
  this.h = h;
}
X9ECParameters.prototype.getCurve = function() {
  return this.curve;
};
X9ECParameters.prototype.getG = function() {
  return this.g;
};
X9ECParameters.prototype.getN = function() {
  return this.n;
};
X9ECParameters.prototype.getH = function() {
  return this.h;
};

function ECPublic(params, buffer) {
  this._params = params;
  if (buffer[0] === 0x00) buffer = buffer.slice(1);
  this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
}

function ECPrivate(params, buffer) {
  this._params = params;
  this._priv = new jsbn$2(utils.mpNormalize(buffer));
}
ECPrivate.prototype.deriveSharedSecret = function(pubKey) {
  assert_1.ok(pubKey instanceof ECPublic);
  var S = pubKey._pub.multiply(this._priv);
  return Buffer$9.from(
    S.getX()
      .toBigInteger()
      .toByteArray()
  );
};

function generateED25519() {
  var pair = naclFast.sign.keyPair();
  var priv = Buffer$9.from(pair.secretKey);
  var pub = Buffer$9.from(pair.publicKey);
  assert_1.strictEqual(priv.length, 64);
  assert_1.strictEqual(pub.length, 32);

  var parts = [];
  parts.push({ name: 'A', data: pub });
  parts.push({ name: 'k', data: priv.slice(0, 32) });
  var key = new privateKey({
    type: 'ed25519',
    parts: parts
  });
  return key;
}

/* Generates a new ECDSA private key on a given curve. */
function generateECDSA(curve) {
  var parts = [];
  var key;

  if (CRYPTO_HAVE_ECDH) {
    /*
     * Node crypto doesn't expose key generation directly, but the
     * ECDH instances can generate keys. It turns out this just
     * calls into the OpenSSL generic key generator, and we can
     * read its output happily without doing an actual DH. So we
     * use that here.
     */
    var osCurve = {
      nistp256: 'prime256v1',
      nistp384: 'secp384r1',
      nistp521: 'secp521r1'
    }[curve];

    var dh = crypto__default['default'].createECDH(osCurve);
    dh.generateKeys();

    parts.push({ name: 'curve', data: Buffer$9.from(curve) });
    parts.push({ name: 'Q', data: dh.getPublicKey() });
    parts.push({ name: 'd', data: dh.getPrivateKey() });

    key = new privateKey({
      type: 'ecdsa',
      curve: curve,
      parts: parts
    });
    return key;
  } else {
    var ecParams = new X9ECParameters(curve);

    /* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */
    var n = ecParams.getN();
    /*
     * The crypto.randomBytes() function can only give us whole
     * bytes, so taking a nod from X9.62, we round up.
     */
    var cByteLen = Math.ceil((n.bitLength() + 64) / 8);
    var c = new jsbn$2(crypto__default['default'].randomBytes(cByteLen));

    var n1 = n.subtract(jsbn$2.ONE);
    var priv = c.mod(n1).add(jsbn$2.ONE);
    var pub = ecParams.getG().multiply(priv);

    priv = Buffer$9.from(priv.toByteArray());
    pub = Buffer$9.from(ecParams.getCurve().encodePointHex(pub), 'hex');

    parts.push({ name: 'curve', data: Buffer$9.from(curve) });
    parts.push({ name: 'Q', data: pub });
    parts.push({ name: 'd', data: priv });

    key = new privateKey({
      type: 'ecdsa',
      curve: curve,
      parts: parts
    });
    return key;
  }
}

// Copyright 2015 Joyent, Inc.

var edCompat = {
  Verifier: Verifier,
  Signer: Signer
};

var Buffer$a = safer_1.Buffer;

function Verifier(key, hashAlgo) {
  if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');

  this.key = key;
  this.chunks = [];

  Stream__default['default'].Writable.call(this, {});
}
util__default['default'].inherits(Verifier, Stream__default['default'].Writable);

Verifier.prototype._write = function(chunk, enc, cb) {
  this.chunks.push(chunk);
  cb();
};

Verifier.prototype.update = function(chunk) {
  if (typeof chunk === 'string') chunk = Buffer$a.from(chunk, 'binary');
  this.chunks.push(chunk);
};

Verifier.prototype.verify = function(signature$1, fmt) {
  var sig;
  if (signature.isSignature(signature$1, [2, 0])) {
    if (signature$1.type !== 'ed25519') return false;
    sig = signature$1.toBuffer('raw');
  } else if (typeof signature$1 === 'string') {
    sig = Buffer$a.from(signature$1, 'base64');
  } else if (signature.isSignature(signature$1, [1, 0])) {
    throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');
  }

  assert_1.buffer(sig);
  return naclFast.sign.detached.verify(
    new Uint8Array(Buffer$a.concat(this.chunks)),
    new Uint8Array(sig),
    new Uint8Array(this.key.part.A.data)
  );
};

function Signer(key, hashAlgo) {
  if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');

  this.key = key;
  this.chunks = [];

  Stream__default['default'].Writable.call(this, {});
}
util__default['default'].inherits(Signer, Stream__default['default'].Writable);

Signer.prototype._write = function(chunk, enc, cb) {
  this.chunks.push(chunk);
  cb();
};

Signer.prototype.update = function(chunk) {
  if (typeof chunk === 'string') chunk = Buffer$a.from(chunk, 'binary');
  this.chunks.push(chunk);
};

Signer.prototype.sign = function() {
  var sig = naclFast.sign.detached(
    new Uint8Array(Buffer$a.concat(this.chunks)),
    new Uint8Array(Buffer$a.concat([this.key.part.k.data, this.key.part.A.data]))
  );
  var sigBuf = Buffer$a.from(sig);
  var sigObj = signature.parse(sigBuf, 'ed25519', 'raw');
  sigObj.hashAlgorithm = 'sha512';
  return sigObj;
};

// Copyright 2018 Joyent, Inc.

var pkcs8 = {
  read: read,
  readPkcs8: readPkcs8,
  write: write,
  writePkcs8: writePkcs8,
  pkcs8ToBuffer: pkcs8ToBuffer,

  readECDSACurve: readECDSACurve,
  writeECDSACurve: writeECDSACurve
};

var Buffer$b = safer_1.Buffer;

function read(buf, options) {
  return pem.read(buf, options, 'pkcs8');
}

function write(key, options) {
  return pem.write(key, options, 'pkcs8');
}

/* Helper to read in a single mpint */
function readMPInt(der, nm) {
  assert_1.strictEqual(der.peek(), lib.Ber.Integer, nm + ' is not an Integer');
  return utils.mpNormalize(der.readString(lib.Ber.Integer, true));
}

function readPkcs8(alg, type, der) {
  /* Private keys in pkcs#8 format have a weird extra int */
  if (der.peek() === lib.Ber.Integer) {
    assert_1.strictEqual(type, 'private', 'unexpected Integer at start of public key');
    der.readString(lib.Ber.Integer, true);
  }

  der.readSequence();
  var next = der.offset + der.length;

  var oid = der.readOID();
  switch (oid) {
    case '1.2.840.113549.1.1.1':
      der._offset = next;
      if (type === 'public') return readPkcs8RSAPublic(der);
      else return readPkcs8RSAPrivate(der);
    case '1.2.840.10040.4.1':
      if (type === 'public') return readPkcs8DSAPublic(der);
      else return readPkcs8DSAPrivate(der);
    case '1.2.840.10045.2.1':
      if (type === 'public') return readPkcs8ECDSAPublic(der);
      else return readPkcs8ECDSAPrivate(der);
    case '1.3.101.112':
      if (type === 'public') {
        return readPkcs8EdDSAPublic(der);
      } else {
        return readPkcs8EdDSAPrivate(der);
      }
    case '1.3.101.110':
      if (type === 'public') {
        return readPkcs8X25519Public(der);
      } else {
        return readPkcs8X25519Private(der);
      }
    default:
      throw new Error('Unknown key type OID ' + oid);
  }
}

function readPkcs8RSAPublic(der) {
  // bit string sequence
  der.readSequence(lib.Ber.BitString);
  der.readByte();
  der.readSequence();

  // modulus
  var n = readMPInt(der, 'modulus');
  var e = readMPInt(der, 'exponent');

  // now, make the key
  var key = {
    type: 'rsa',
    source: der.originalInput,
    parts: [{ name: 'e', data: e }, { name: 'n', data: n }]
  };

  return new key$1(key);
}

function readPkcs8RSAPrivate(der) {
  der.readSequence(lib.Ber.OctetString);
  der.readSequence();

  var ver = readMPInt(der, 'version');
  assert_1.equal(ver[0], 0x0, 'unknown RSA private key version');

  // modulus then public exponent
  var n = readMPInt(der, 'modulus');
  var e = readMPInt(der, 'public exponent');
  var d = readMPInt(der, 'private exponent');
  var p = readMPInt(der, 'prime1');
  var q = readMPInt(der, 'prime2');
  var dmodp = readMPInt(der, 'exponent1');
  var dmodq = readMPInt(der, 'exponent2');
  var iqmp = readMPInt(der, 'iqmp');

  // now, make the key
  var key = {
    type: 'rsa',
    parts: [
      { name: 'n', data: n },
      { name: 'e', data: e },
      { name: 'd', data: d },
      { name: 'iqmp', data: iqmp },
      { name: 'p', data: p },
      { name: 'q', data: q },
      { name: 'dmodp', data: dmodp },
      { name: 'dmodq', data: dmodq }
    ]
  };

  return new privateKey(key);
}

function readPkcs8DSAPublic(der) {
  der.readSequence();

  var p = readMPInt(der, 'p');
  var q = readMPInt(der, 'q');
  var g = readMPInt(der, 'g');

  // bit string sequence
  der.readSequence(lib.Ber.BitString);
  der.readByte();

  var y = readMPInt(der, 'y');

  // now, make the key
  var key = {
    type: 'dsa',
    parts: [{ name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }, { name: 'y', data: y }]
  };

  return new key$1(key);
}

function readPkcs8DSAPrivate(der) {
  der.readSequence();

  var p = readMPInt(der, 'p');
  var q = readMPInt(der, 'q');
  var g = readMPInt(der, 'g');

  der.readSequence(lib.Ber.OctetString);
  var x = readMPInt(der, 'x');

  /* The pkcs#8 format does not include the public key */
  var y = utils.calculateDSAPublic(g, p, x);

  var key = {
    type: 'dsa',
    parts: [
      { name: 'p', data: p },
      { name: 'q', data: q },
      { name: 'g', data: g },
      { name: 'y', data: y },
      { name: 'x', data: x }
    ]
  };

  return new privateKey(key);
}

function readECDSACurve(der) {
  var curveName, curveNames;
  var j, c, cd;

  if (der.peek() === lib.Ber.OID) {
    var oid = der.readOID();

    curveNames = Object.keys(algs.curves);
    for (j = 0; j < curveNames.length; ++j) {
      c = curveNames[j];
      cd = algs.curves[c];
      if (cd.pkcs8oid === oid) {
        curveName = c;
        break;
      }
    }
  } else {
    // ECParameters sequence
    der.readSequence();
    var version = der.readString(lib.Ber.Integer, true);
    assert_1.strictEqual(version[0], 1, 'ECDSA key not version 1');

    var curve = {};

    // FieldID sequence
    der.readSequence();
    var fieldTypeOid = der.readOID();
    assert_1.strictEqual(fieldTypeOid, '1.2.840.10045.1.1', 'ECDSA key is not from a prime-field');
    var p = (curve.p = utils.mpNormalize(der.readString(lib.Ber.Integer, true)));
    /*
     * p always starts with a 1 bit, so count the zeros to get its
     * real size.
     */
    curve.size = p.length * 8 - utils.countZeros(p);

    // Curve sequence
    der.readSequence();
    curve.a = utils.mpNormalize(der.readString(lib.Ber.OctetString, true));
    curve.b = utils.mpNormalize(der.readString(lib.Ber.OctetString, true));
    if (der.peek() === lib.Ber.BitString) curve.s = der.readString(lib.Ber.BitString, true);

    // Combined Gx and Gy
    curve.G = der.readString(lib.Ber.OctetString, true);
    assert_1.strictEqual(curve.G[0], 0x4, 'uncompressed G is required');

    curve.n = utils.mpNormalize(der.readString(lib.Ber.Integer, true));
    curve.h = utils.mpNormalize(der.readString(lib.Ber.Integer, true));
    assert_1.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' + 'required');

    curveNames = Object.keys(algs.curves);
    var ks = Object.keys(curve);
    for (j = 0; j < curveNames.length; ++j) {
      c = curveNames[j];
      cd = algs.curves[c];
      var equal = true;
      for (var i = 0; i < ks.length; ++i) {
        var k = ks[i];
        if (cd[k] === undefined) continue;
        if (typeof cd[k] === 'object' && cd[k].equals !== undefined) {
          if (!cd[k].equals(curve[k])) {
            equal = false;
            break;
          }
        } else if (Buffer$b.isBuffer(cd[k])) {
          if (cd[k].toString('binary') !== curve[k].toString('binary')) {
            equal = false;
            break;
          }
        } else {
          if (cd[k] !== curve[k]) {
            equal = false;
            break;
          }
        }
      }
      if (equal) {
        curveName = c;
        break;
      }
    }
  }
  return curveName;
}

function readPkcs8ECDSAPrivate(der) {
  var curveName = readECDSACurve(der);
  assert_1.string(curveName, 'a known elliptic curve');

  der.readSequence(lib.Ber.OctetString);
  der.readSequence();

  var version = readMPInt(der, 'version');
  assert_1.equal(version[0], 1, 'unknown version of ECDSA key');

  var d = der.readString(lib.Ber.OctetString, true);
  var Q;

  if (der.peek() == 0xa0) {
    der.readSequence(0xa0);
    der._offset += der.length;
  }
  if (der.peek() == 0xa1) {
    der.readSequence(0xa1);
    Q = der.readString(lib.Ber.BitString, true);
    Q = utils.ecNormalize(Q);
  }

  if (Q === undefined) {
    var pub = utils.publicFromPrivateECDSA(curveName, d);
    Q = pub.part.Q.data;
  }

  var key = {
    type: 'ecdsa',
    parts: [{ name: 'curve', data: Buffer$b.from(curveName) }, { name: 'Q', data: Q }, { name: 'd', data: d }]
  };

  return new privateKey(key);
}

function readPkcs8ECDSAPublic(der) {
  var curveName = readECDSACurve(der);
  assert_1.string(curveName, 'a known elliptic curve');

  var Q = der.readString(lib.Ber.BitString, true);
  Q = utils.ecNormalize(Q);

  var key = {
    type: 'ecdsa',
    parts: [{ name: 'curve', data: Buffer$b.from(curveName) }, { name: 'Q', data: Q }]
  };

  return new key$1(key);
}

function readPkcs8EdDSAPublic(der) {
  if (der.peek() === 0x00) der.readByte();

  var A = utils.readBitString(der);

  var key = {
    type: 'ed25519',
    parts: [{ name: 'A', data: utils.zeroPadToLength(A, 32) }]
  };

  return new key$1(key);
}

function readPkcs8X25519Public(der) {
  var A = utils.readBitString(der);

  var key = {
    type: 'curve25519',
    parts: [{ name: 'A', data: utils.zeroPadToLength(A, 32) }]
  };

  return new key$1(key);
}

function readPkcs8EdDSAPrivate(der) {
  if (der.peek() === 0x00) der.readByte();

  der.readSequence(lib.Ber.OctetString);
  var k = der.readString(lib.Ber.OctetString, true);
  k = utils.zeroPadToLength(k, 32);

  var A;
  if (der.peek() === lib.Ber.BitString) {
    A = utils.readBitString(der);
    A = utils.zeroPadToLength(A, 32);
  } else {
    A = utils.calculateED25519Public(k);
  }

  var key = {
    type: 'ed25519',
    parts: [{ name: 'A', data: utils.zeroPadToLength(A, 32) }, { name: 'k', data: utils.zeroPadToLength(k, 32) }]
  };

  return new privateKey(key);
}

function readPkcs8X25519Private(der) {
  if (der.peek() === 0x00) der.readByte();

  der.readSequence(lib.Ber.OctetString);
  var k = der.readString(lib.Ber.OctetString, true);
  k = utils.zeroPadToLength(k, 32);

  var A = utils.calculateX25519Public(k);

  var key = {
    type: 'curve25519',
    parts: [{ name: 'A', data: utils.zeroPadToLength(A, 32) }, { name: 'k', data: utils.zeroPadToLength(k, 32) }]
  };

  return new privateKey(key);
}

function pkcs8ToBuffer(key) {
  var der = new lib.BerWriter();
  writePkcs8(der, key);
  return der.buffer;
}

function writePkcs8(der, key) {
  der.startSequence();

  if (privateKey.isPrivateKey(key)) {
    var sillyInt = Buffer$b.from([0]);
    der.writeBuffer(sillyInt, lib.Ber.Integer);
  }

  der.startSequence();
  switch (key.type) {
    case 'rsa':
      der.writeOID('1.2.840.113549.1.1.1');
      if (privateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);
      else writePkcs8RSAPublic(key, der);
      break;
    case 'dsa':
      der.writeOID('1.2.840.10040.4.1');
      if (privateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);
      else writePkcs8DSAPublic(key, der);
      break;
    case 'ecdsa':
      der.writeOID('1.2.840.10045.2.1');
      if (privateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);
      else writePkcs8ECDSAPublic(key, der);
      break;
    case 'ed25519':
      der.writeOID('1.3.101.112');
      if (privateKey.isPrivateKey(key)) throw new Error('Ed25519 private keys in pkcs8 ' + 'format are not supported');
      writePkcs8EdDSAPublic(key, der);
      break;
    default:
      throw new Error('Unsupported key type: ' + key.type);
  }

  der.endSequence();
}

function writePkcs8RSAPrivate(key, der) {
  der.writeNull();
  der.endSequence();

  der.startSequence(lib.Ber.OctetString);
  der.startSequence();

  var version = Buffer$b.from([0]);
  der.writeBuffer(version, lib.Ber.Integer);

  der.writeBuffer(key.part.n.data, lib.Ber.Integer);
  der.writeBuffer(key.part.e.data, lib.Ber.Integer);
  der.writeBuffer(key.part.d.data, lib.Ber.Integer);
  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);
  der.writeBuffer(key.part.dmodp.data, lib.Ber.Integer);
  der.writeBuffer(key.part.dmodq.data, lib.Ber.Integer);
  der.writeBuffer(key.part.iqmp.data, lib.Ber.Integer);

  der.endSequence();
  der.endSequence();
}

function writePkcs8RSAPublic(key, der) {
  der.writeNull();
  der.endSequence();

  der.startSequence(lib.Ber.BitString);
  der.writeByte(0x00);

  der.startSequence();
  der.writeBuffer(key.part.n.data, lib.Ber.Integer);
  der.writeBuffer(key.part.e.data, lib.Ber.Integer);
  der.endSequence();

  der.endSequence();
}

function writePkcs8DSAPrivate(key, der) {
  der.startSequence();
  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  der.writeBuffer(key.part.g.data, lib.Ber.Integer);
  der.endSequence();

  der.endSequence();

  der.startSequence(lib.Ber.OctetString);
  der.writeBuffer(key.part.x.data, lib.Ber.Integer);
  der.endSequence();
}

function writePkcs8DSAPublic(key, der) {
  der.startSequence();
  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  der.writeBuffer(key.part.g.data, lib.Ber.Integer);
  der.endSequence();
  der.endSequence();

  der.startSequence(lib.Ber.BitString);
  der.writeByte(0x00);
  der.writeBuffer(key.part.y.data, lib.Ber.Integer);
  der.endSequence();
}

function writeECDSACurve(key, der) {
  var curve = algs.curves[key.curve];
  if (curve.pkcs8oid) {
    /* This one has a name in pkcs#8, so just write the oid */
    der.writeOID(curve.pkcs8oid);
  } else {
    // ECParameters sequence
    der.startSequence();

    var version = Buffer$b.from([1]);
    der.writeBuffer(version, lib.Ber.Integer);

    // FieldID sequence
    der.startSequence();
    der.writeOID('1.2.840.10045.1.1'); // prime-field
    der.writeBuffer(curve.p, lib.Ber.Integer);
    der.endSequence();

    // Curve sequence
    der.startSequence();
    var a = curve.p;
    if (a[0] === 0x0) a = a.slice(1);
    der.writeBuffer(a, lib.Ber.OctetString);
    der.writeBuffer(curve.b, lib.Ber.OctetString);
    der.writeBuffer(curve.s, lib.Ber.BitString);
    der.endSequence();

    der.writeBuffer(curve.G, lib.Ber.OctetString);
    der.writeBuffer(curve.n, lib.Ber.Integer);
    var h = curve.h;
    if (!h) {
      h = Buffer$b.from([1]);
    }
    der.writeBuffer(h, lib.Ber.Integer);

    // ECParameters
    der.endSequence();
  }
}

function writePkcs8ECDSAPublic(key, der) {
  writeECDSACurve(key, der);
  der.endSequence();

  var Q = utils.ecNormalize(key.part.Q.data, true);
  der.writeBuffer(Q, lib.Ber.BitString);
}

function writePkcs8ECDSAPrivate(key, der) {
  writeECDSACurve(key, der);
  der.endSequence();

  der.startSequence(lib.Ber.OctetString);
  der.startSequence();

  var version = Buffer$b.from([1]);
  der.writeBuffer(version, lib.Ber.Integer);

  der.writeBuffer(key.part.d.data, lib.Ber.OctetString);

  der.startSequence(0xa1);
  var Q = utils.ecNormalize(key.part.Q.data, true);
  der.writeBuffer(Q, lib.Ber.BitString);
  der.endSequence();

  der.endSequence();
  der.endSequence();
}

function writePkcs8EdDSAPublic(key, der) {
  der.endSequence();

  utils.writeBitString(der, key.part.A.data);
}

// Copyright 2015 Joyent, Inc.

var pkcs1 = {
  read: read$1,
  readPkcs1: readPkcs1,
  write: write$1,
  writePkcs1: writePkcs1
};

var Buffer$c = safer_1.Buffer;

var readECDSACurve$1 = pkcs8.readECDSACurve;

function read$1(buf, options) {
  return pem.read(buf, options, 'pkcs1');
}

function write$1(key, options) {
  return pem.write(key, options, 'pkcs1');
}

/* Helper to read in a single mpint */
function readMPInt$1(der, nm) {
  assert_1.strictEqual(der.peek(), lib.Ber.Integer, nm + ' is not an Integer');
  return utils.mpNormalize(der.readString(lib.Ber.Integer, true));
}

function readPkcs1(alg, type, der) {
  switch (alg) {
    case 'RSA':
      if (type === 'public') return readPkcs1RSAPublic(der);
      else if (type === 'private') return readPkcs1RSAPrivate(der);
      throw new Error('Unknown key type: ' + type);
    case 'DSA':
      if (type === 'public') return readPkcs1DSAPublic(der);
      else if (type === 'private') return readPkcs1DSAPrivate(der);
      throw new Error('Unknown key type: ' + type);
    case 'EC':
    case 'ECDSA':
      if (type === 'private') return readPkcs1ECDSAPrivate(der);
      else if (type === 'public') return readPkcs1ECDSAPublic(der);
      throw new Error('Unknown key type: ' + type);
    case 'EDDSA':
    case 'EdDSA':
      if (type === 'private') return readPkcs1EdDSAPrivate(der);
      throw new Error(type + ' keys not supported with EdDSA');
    default:
      throw new Error('Unknown key algo: ' + alg);
  }
}

function readPkcs1RSAPublic(der) {
  // modulus and exponent
  var n = readMPInt$1(der, 'modulus');
  var e = readMPInt$1(der, 'exponent');

  // now, make the key
  var key = {
    type: 'rsa',
    parts: [{ name: 'e', data: e }, { name: 'n', data: n }]
  };

  return new key$1(key);
}

function readPkcs1RSAPrivate(der) {
  var version = readMPInt$1(der, 'version');
  assert_1.strictEqual(version[0], 0);

  // modulus then public exponent
  var n = readMPInt$1(der, 'modulus');
  var e = readMPInt$1(der, 'public exponent');
  var d = readMPInt$1(der, 'private exponent');
  var p = readMPInt$1(der, 'prime1');
  var q = readMPInt$1(der, 'prime2');
  var dmodp = readMPInt$1(der, 'exponent1');
  var dmodq = readMPInt$1(der, 'exponent2');
  var iqmp = readMPInt$1(der, 'iqmp');

  // now, make the key
  var key = {
    type: 'rsa',
    parts: [
      { name: 'n', data: n },
      { name: 'e', data: e },
      { name: 'd', data: d },
      { name: 'iqmp', data: iqmp },
      { name: 'p', data: p },
      { name: 'q', data: q },
      { name: 'dmodp', data: dmodp },
      { name: 'dmodq', data: dmodq }
    ]
  };

  return new privateKey(key);
}

function readPkcs1DSAPrivate(der) {
  var version = readMPInt$1(der, 'version');
  assert_1.strictEqual(version.readUInt8(0), 0);

  var p = readMPInt$1(der, 'p');
  var q = readMPInt$1(der, 'q');
  var g = readMPInt$1(der, 'g');
  var y = readMPInt$1(der, 'y');
  var x = readMPInt$1(der, 'x');

  // now, make the key
  var key = {
    type: 'dsa',
    parts: [
      { name: 'p', data: p },
      { name: 'q', data: q },
      { name: 'g', data: g },
      { name: 'y', data: y },
      { name: 'x', data: x }
    ]
  };

  return new privateKey(key);
}

function readPkcs1EdDSAPrivate(der) {
  var version = readMPInt$1(der, 'version');
  assert_1.strictEqual(version.readUInt8(0), 1);

  // private key
  var k = der.readString(lib.Ber.OctetString, true);

  der.readSequence(0xa0);
  var oid = der.readOID();
  assert_1.strictEqual(oid, '1.3.101.112', 'the ed25519 curve identifier');

  der.readSequence(0xa1);
  var A = utils.readBitString(der);

  var key = {
    type: 'ed25519',
    parts: [{ name: 'A', data: utils.zeroPadToLength(A, 32) }, { name: 'k', data: k }]
  };

  return new privateKey(key);
}

function readPkcs1DSAPublic(der) {
  var y = readMPInt$1(der, 'y');
  var p = readMPInt$1(der, 'p');
  var q = readMPInt$1(der, 'q');
  var g = readMPInt$1(der, 'g');

  var key = {
    type: 'dsa',
    parts: [{ name: 'y', data: y }, { name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }]
  };

  return new key$1(key);
}

function readPkcs1ECDSAPublic(der) {
  der.readSequence();

  var oid = der.readOID();
  assert_1.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');

  var curveOid = der.readOID();

  var curve;
  var curves = Object.keys(algs.curves);
  for (var j = 0; j < curves.length; ++j) {
    var c = curves[j];
    var cd = algs.curves[c];
    if (cd.pkcs8oid === curveOid) {
      curve = c;
      break;
    }
  }
  assert_1.string(curve, 'a known ECDSA named curve');

  var Q = der.readString(lib.Ber.BitString, true);
  Q = utils.ecNormalize(Q);

  var key = {
    type: 'ecdsa',
    parts: [{ name: 'curve', data: Buffer$c.from(curve) }, { name: 'Q', data: Q }]
  };

  return new key$1(key);
}

function readPkcs1ECDSAPrivate(der) {
  var version = readMPInt$1(der, 'version');
  assert_1.strictEqual(version.readUInt8(0), 1);

  // private key
  var d = der.readString(lib.Ber.OctetString, true);

  der.readSequence(0xa0);
  var curve = readECDSACurve$1(der);
  assert_1.string(curve, 'a known elliptic curve');

  der.readSequence(0xa1);
  var Q = der.readString(lib.Ber.BitString, true);
  Q = utils.ecNormalize(Q);

  var key = {
    type: 'ecdsa',
    parts: [{ name: 'curve', data: Buffer$c.from(curve) }, { name: 'Q', data: Q }, { name: 'd', data: d }]
  };

  return new privateKey(key);
}

function writePkcs1(der, key) {
  der.startSequence();

  switch (key.type) {
    case 'rsa':
      if (privateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);
      else writePkcs1RSAPublic(der, key);
      break;
    case 'dsa':
      if (privateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);
      else writePkcs1DSAPublic(der, key);
      break;
    case 'ecdsa':
      if (privateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);
      else writePkcs1ECDSAPublic(der, key);
      break;
    case 'ed25519':
      if (privateKey.isPrivateKey(key)) writePkcs1EdDSAPrivate(der, key);
      else writePkcs1EdDSAPublic();
      break;
    default:
      throw new Error('Unknown key algo: ' + key.type);
  }

  der.endSequence();
}

function writePkcs1RSAPublic(der, key) {
  der.writeBuffer(key.part.n.data, lib.Ber.Integer);
  der.writeBuffer(key.part.e.data, lib.Ber.Integer);
}

function writePkcs1RSAPrivate(der, key) {
  var ver = Buffer$c.from([0]);
  der.writeBuffer(ver, lib.Ber.Integer);

  der.writeBuffer(key.part.n.data, lib.Ber.Integer);
  der.writeBuffer(key.part.e.data, lib.Ber.Integer);
  der.writeBuffer(key.part.d.data, lib.Ber.Integer);
  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);
  der.writeBuffer(key.part.dmodp.data, lib.Ber.Integer);
  der.writeBuffer(key.part.dmodq.data, lib.Ber.Integer);
  der.writeBuffer(key.part.iqmp.data, lib.Ber.Integer);
}

function writePkcs1DSAPrivate(der, key) {
  var ver = Buffer$c.from([0]);
  der.writeBuffer(ver, lib.Ber.Integer);

  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  der.writeBuffer(key.part.g.data, lib.Ber.Integer);
  der.writeBuffer(key.part.y.data, lib.Ber.Integer);
  der.writeBuffer(key.part.x.data, lib.Ber.Integer);
}

function writePkcs1DSAPublic(der, key) {
  der.writeBuffer(key.part.y.data, lib.Ber.Integer);
  der.writeBuffer(key.part.p.data, lib.Ber.Integer);
  der.writeBuffer(key.part.q.data, lib.Ber.Integer);
  der.writeBuffer(key.part.g.data, lib.Ber.Integer);
}

function writePkcs1ECDSAPublic(der, key) {
  der.startSequence();

  der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */
  var curve = key.part.curve.data.toString();
  var curveOid = algs.curves[curve].pkcs8oid;
  assert_1.string(curveOid, 'a known ECDSA named curve');
  der.writeOID(curveOid);

  der.endSequence();

  var Q = utils.ecNormalize(key.part.Q.data, true);
  der.writeBuffer(Q, lib.Ber.BitString);
}

function writePkcs1ECDSAPrivate(der, key) {
  var ver = Buffer$c.from([1]);
  der.writeBuffer(ver, lib.Ber.Integer);

  der.writeBuffer(key.part.d.data, lib.Ber.OctetString);

  der.startSequence(0xa0);
  var curve = key.part.curve.data.toString();
  var curveOid = algs.curves[curve].pkcs8oid;
  assert_1.string(curveOid, 'a known ECDSA named curve');
  der.writeOID(curveOid);
  der.endSequence();

  der.startSequence(0xa1);
  var Q = utils.ecNormalize(key.part.Q.data, true);
  der.writeBuffer(Q, lib.Ber.BitString);
  der.endSequence();
}

function writePkcs1EdDSAPrivate(der, key) {
  var ver = Buffer$c.from([1]);
  der.writeBuffer(ver, lib.Ber.Integer);

  der.writeBuffer(key.part.k.data, lib.Ber.OctetString);

  der.startSequence(0xa0);
  der.writeOID('1.3.101.112');
  der.endSequence();

  der.startSequence(0xa1);
  utils.writeBitString(der, key.part.A.data);
  der.endSequence();
}

function writePkcs1EdDSAPublic(der, key) {
  throw new Error('Public keys are not supported for EdDSA PKCS#1');
}

// Copyright 2015 Joyent, Inc.

var rfc4253 = {
  read: read$2.bind(undefined, false, undefined),
  readType: read$2.bind(undefined, false),
  write: write$2,
  /* semi-private api, used by sshpk-agent */
  readPartial: read$2.bind(undefined, true),

  /* shared with ssh format */
  readInternal: read$2,
  keyTypeToAlg: keyTypeToAlg,
  algToKeyType: algToKeyType
};

var Buffer$d = safer_1.Buffer;

function algToKeyType(alg) {
  assert_1.string(alg);
  if (alg === 'ssh-dss') return 'dsa';
  else if (alg === 'ssh-rsa') return 'rsa';
  else if (alg === 'ssh-ed25519') return 'ed25519';
  else if (alg === 'ssh-curve25519') return 'curve25519';
  else if (alg.match(/^ecdsa-sha2-/)) return 'ecdsa';
  else throw new Error('Unknown algorithm ' + alg);
}

function keyTypeToAlg(key) {
  assert_1.object(key);
  if (key.type === 'dsa') return 'ssh-dss';
  else if (key.type === 'rsa') return 'ssh-rsa';
  else if (key.type === 'ed25519') return 'ssh-ed25519';
  else if (key.type === 'curve25519') return 'ssh-curve25519';
  else if (key.type === 'ecdsa') return 'ecdsa-sha2-' + key.part.curve.data.toString();
  else throw new Error('Unknown key type ' + key.type);
}

function read$2(partial, type, buf, options) {
  if (typeof buf === 'string') buf = Buffer$d.from(buf);
  assert_1.buffer(buf, 'buf');

  var key = {};

  var parts = (key.parts = []);
  var sshbuf = new sshBuffer({ buffer: buf });

  var alg = sshbuf.readString();
  assert_1.ok(!sshbuf.atEnd(), 'key must have at least one part');

  key.type = algToKeyType(alg);

  var partCount = algs.info[key.type].parts.length;
  if (type && type === 'private') partCount = algs.privInfo[key.type].parts.length;

  while (!sshbuf.atEnd() && parts.length < partCount) parts.push(sshbuf.readPart());
  while (!partial && !sshbuf.atEnd()) parts.push(sshbuf.readPart());

  assert_1.ok(parts.length >= 1, 'key must have at least one part');
  assert_1.ok(partial || sshbuf.atEnd(), 'leftover bytes at end of key');

  var Constructor = key$1;
  var algInfo = algs.info[key.type];
  if (type === 'private' || algInfo.parts.length !== parts.length) {
    algInfo = algs.privInfo[key.type];
    Constructor = privateKey;
  }
  assert_1.strictEqual(algInfo.parts.length, parts.length);

  if (key.type === 'ecdsa') {
    var res = /^ecdsa-sha2-(.+)$/.exec(alg);
    assert_1.ok(res !== null);
    assert_1.strictEqual(res[1], parts[0].data.toString());
  }

  var normalized = true;
  for (var i = 0; i < algInfo.parts.length; ++i) {
    var p = parts[i];
    p.name = algInfo.parts[i];
    /*
     * OpenSSH stores ed25519 "private" keys as seed + public key
     * concat'd together (k followed by A). We want to keep them
     * separate for other formats that don't do this.
     */
    if (key.type === 'ed25519' && p.name === 'k') p.data = p.data.slice(0, 32);

    if (p.name !== 'curve' && algInfo.normalize !== false) {
      var nd;
      if (key.type === 'ed25519') {
        nd = utils.zeroPadToLength(p.data, 32);
      } else {
        nd = utils.mpNormalize(p.data);
      }
      if (nd.toString('binary') !== p.data.toString('binary')) {
        p.data = nd;
        normalized = false;
      }
    }
  }

  if (normalized) key._rfc4253Cache = sshbuf.toBuffer();

  if (partial && typeof partial === 'object') {
    partial.remainder = sshbuf.remainder();
    partial.consumed = sshbuf._offset;
  }

  return new Constructor(key);
}

function write$2(key, options) {
  assert_1.object(key);

  var alg = keyTypeToAlg(key);
  var i;

  var algInfo = algs.info[key.type];
  if (privateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];
  var parts = algInfo.parts;

  var buf = new sshBuffer({});

  buf.writeString(alg);

  for (i = 0; i < parts.length; ++i) {
    var data = key.part[parts[i]].data;
    if (algInfo.normalize !== false) {
      if (key.type === 'ed25519') data = utils.zeroPadToLength(data, 32);
      else data = utils.mpNormalize(data);
    }
    if (key.type === 'ed25519' && parts[i] === 'k') data = Buffer$d.concat([data, key.part.A.data]);
    buf.writeBuffer(data);
  }

  return buf.toBuffer();
}

var crypto_hash_sha512 = naclFast.lowlevel.crypto_hash;

/*
 * This file is a 1:1 port from the OpenBSD blowfish.c and bcrypt_pbkdf.c. As a
 * result, it retains the original copyright and license. The two files are
 * under slightly different (but compatible) licenses, and are here combined in
 * one file.
 *
 * Credit for the actual porting work goes to:
 *  Devi Mandiri <me@devi.web.id>
 */

/*
 * The Blowfish portions are under the following license:
 *
 * Blowfish block cipher for OpenBSD
 * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>
 * All rights reserved.
 *
 * Implementation advice by David Mazieres <dm@lcs.mit.edu>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * The bcrypt_pbkdf portions are under the following license:
 *
 * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Performance improvements (Javascript-specific):
 *
 * Copyright 2016, Joyent Inc
 * Author: Alex Wilson <alex.wilson@joyent.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

// Ported from OpenBSD bcrypt_pbkdf.c v1.9

var BLF_J = 0;

var Blowfish = function() {
  this.S = [
    new Uint32Array([
      0xd1310ba6,
      0x98dfb5ac,
      0x2ffd72db,
      0xd01adfb7,
      0xb8e1afed,
      0x6a267e96,
      0xba7c9045,
      0xf12c7f99,
      0x24a19947,
      0xb3916cf7,
      0x0801f2e2,
      0x858efc16,
      0x636920d8,
      0x71574e69,
      0xa458fea3,
      0xf4933d7e,
      0x0d95748f,
      0x728eb658,
      0x718bcd58,
      0x82154aee,
      0x7b54a41d,
      0xc25a59b5,
      0x9c30d539,
      0x2af26013,
      0xc5d1b023,
      0x286085f0,
      0xca417918,
      0xb8db38ef,
      0x8e79dcb0,
      0x603a180e,
      0x6c9e0e8b,
      0xb01e8a3e,
      0xd71577c1,
      0xbd314b27,
      0x78af2fda,
      0x55605c60,
      0xe65525f3,
      0xaa55ab94,
      0x57489862,
      0x63e81440,
      0x55ca396a,
      0x2aab10b6,
      0xb4cc5c34,
      0x1141e8ce,
      0xa15486af,
      0x7c72e993,
      0xb3ee1411,
      0x636fbc2a,
      0x2ba9c55d,
      0x741831f6,
      0xce5c3e16,
      0x9b87931e,
      0xafd6ba33,
      0x6c24cf5c,
      0x7a325381,
      0x28958677,
      0x3b8f4898,
      0x6b4bb9af,
      0xc4bfe81b,
      0x66282193,
      0x61d809cc,
      0xfb21a991,
      0x487cac60,
      0x5dec8032,
      0xef845d5d,
      0xe98575b1,
      0xdc262302,
      0xeb651b88,
      0x23893e81,
      0xd396acc5,
      0x0f6d6ff3,
      0x83f44239,
      0x2e0b4482,
      0xa4842004,
      0x69c8f04a,
      0x9e1f9b5e,
      0x21c66842,
      0xf6e96c9a,
      0x670c9c61,
      0xabd388f0,
      0x6a51a0d2,
      0xd8542f68,
      0x960fa728,
      0xab5133a3,
      0x6eef0b6c,
      0x137a3be4,
      0xba3bf050,
      0x7efb2a98,
      0xa1f1651d,
      0x39af0176,
      0x66ca593e,
      0x82430e88,
      0x8cee8619,
      0x456f9fb4,
      0x7d84a5c3,
      0x3b8b5ebe,
      0xe06f75d8,
      0x85c12073,
      0x401a449f,
      0x56c16aa6,
      0x4ed3aa62,
      0x363f7706,
      0x1bfedf72,
      0x429b023d,
      0x37d0d724,
      0xd00a1248,
      0xdb0fead3,
      0x49f1c09b,
      0x075372c9,
      0x80991b7b,
      0x25d479d8,
      0xf6e8def7,
      0xe3fe501a,
      0xb6794c3b,
      0x976ce0bd,
      0x04c006ba,
      0xc1a94fb6,
      0x409f60c4,
      0x5e5c9ec2,
      0x196a2463,
      0x68fb6faf,
      0x3e6c53b5,
      0x1339b2eb,
      0x3b52ec6f,
      0x6dfc511f,
      0x9b30952c,
      0xcc814544,
      0xaf5ebd09,
      0xbee3d004,
      0xde334afd,
      0x660f2807,
      0x192e4bb3,
      0xc0cba857,
      0x45c8740f,
      0xd20b5f39,
      0xb9d3fbdb,
      0x5579c0bd,
      0x1a60320a,
      0xd6a100c6,
      0x402c7279,
      0x679f25fe,
      0xfb1fa3cc,
      0x8ea5e9f8,
      0xdb3222f8,
      0x3c7516df,
      0xfd616b15,
      0x2f501ec8,
      0xad0552ab,
      0x323db5fa,
      0xfd238760,
      0x53317b48,
      0x3e00df82,
      0x9e5c57bb,
      0xca6f8ca0,
      0x1a87562e,
      0xdf1769db,
      0xd542a8f6,
      0x287effc3,
      0xac6732c6,
      0x8c4f5573,
      0x695b27b0,
      0xbbca58c8,
      0xe1ffa35d,
      0xb8f011a0,
      0x10fa3d98,
      0xfd2183b8,
      0x4afcb56c,
      0x2dd1d35b,
      0x9a53e479,
      0xb6f84565,
      0xd28e49bc,
      0x4bfb9790,
      0xe1ddf2da,
      0xa4cb7e33,
      0x62fb1341,
      0xcee4c6e8,
      0xef20cada,
      0x36774c01,
      0xd07e9efe,
      0x2bf11fb4,
      0x95dbda4d,
      0xae909198,
      0xeaad8e71,
      0x6b93d5a0,
      0xd08ed1d0,
      0xafc725e0,
      0x8e3c5b2f,
      0x8e7594b7,
      0x8ff6e2fb,
      0xf2122b64,
      0x8888b812,
      0x900df01c,
      0x4fad5ea0,
      0x688fc31c,
      0xd1cff191,
      0xb3a8c1ad,
      0x2f2f2218,
      0xbe0e1777,
      0xea752dfe,
      0x8b021fa1,
      0xe5a0cc0f,
      0xb56f74e8,
      0x18acf3d6,
      0xce89e299,
      0xb4a84fe0,
      0xfd13e0b7,
      0x7cc43b81,
      0xd2ada8d9,
      0x165fa266,
      0x80957705,
      0x93cc7314,
      0x211a1477,
      0xe6ad2065,
      0x77b5fa86,
      0xc75442f5,
      0xfb9d35cf,
      0xebcdaf0c,
      0x7b3e89a0,
      0xd6411bd3,
      0xae1e7e49,
      0x00250e2d,
      0x2071b35e,
      0x226800bb,
      0x57b8e0af,
      0x2464369b,
      0xf009b91e,
      0x5563911d,
      0x59dfa6aa,
      0x78c14389,
      0xd95a537f,
      0x207d5ba2,
      0x02e5b9c5,
      0x83260376,
      0x6295cfa9,
      0x11c81968,
      0x4e734a41,
      0xb3472dca,
      0x7b14a94a,
      0x1b510052,
      0x9a532915,
      0xd60f573f,
      0xbc9bc6e4,
      0x2b60a476,
      0x81e67400,
      0x08ba6fb5,
      0x571be91f,
      0xf296ec6b,
      0x2a0dd915,
      0xb6636521,
      0xe7b9f9b6,
      0xff34052e,
      0xc5855664,
      0x53b02d5d,
      0xa99f8fa1,
      0x08ba4799,
      0x6e85076a
    ]),
    new Uint32Array([
      0x4b7a70e9,
      0xb5b32944,
      0xdb75092e,
      0xc4192623,
      0xad6ea6b0,
      0x49a7df7d,
      0x9cee60b8,
      0x8fedb266,
      0xecaa8c71,
      0x699a17ff,
      0x5664526c,
      0xc2b19ee1,
      0x193602a5,
      0x75094c29,
      0xa0591340,
      0xe4183a3e,
      0x3f54989a,
      0x5b429d65,
      0x6b8fe4d6,
      0x99f73fd6,
      0xa1d29c07,
      0xefe830f5,
      0x4d2d38e6,
      0xf0255dc1,
      0x4cdd2086,
      0x8470eb26,
      0x6382e9c6,
      0x021ecc5e,
      0x09686b3f,
      0x3ebaefc9,
      0x3c971814,
      0x6b6a70a1,
      0x687f3584,
      0x52a0e286,
      0xb79c5305,
      0xaa500737,
      0x3e07841c,
      0x7fdeae5c,
      0x8e7d44ec,
      0x5716f2b8,
      0xb03ada37,
      0xf0500c0d,
      0xf01c1f04,
      0x0200b3ff,
      0xae0cf51a,
      0x3cb574b2,
      0x25837a58,
      0xdc0921bd,
      0xd19113f9,
      0x7ca92ff6,
      0x94324773,
      0x22f54701,
      0x3ae5e581,
      0x37c2dadc,
      0xc8b57634,
      0x9af3dda7,
      0xa9446146,
      0x0fd0030e,
      0xecc8c73e,
      0xa4751e41,
      0xe238cd99,
      0x3bea0e2f,
      0x3280bba1,
      0x183eb331,
      0x4e548b38,
      0x4f6db908,
      0x6f420d03,
      0xf60a04bf,
      0x2cb81290,
      0x24977c79,
      0x5679b072,
      0xbcaf89af,
      0xde9a771f,
      0xd9930810,
      0xb38bae12,
      0xdccf3f2e,
      0x5512721f,
      0x2e6b7124,
      0x501adde6,
      0x9f84cd87,
      0x7a584718,
      0x7408da17,
      0xbc9f9abc,
      0xe94b7d8c,
      0xec7aec3a,
      0xdb851dfa,
      0x63094366,
      0xc464c3d2,
      0xef1c1847,
      0x3215d908,
      0xdd433b37,
      0x24c2ba16,
      0x12a14d43,
      0x2a65c451,
      0x50940002,
      0x133ae4dd,
      0x71dff89e,
      0x10314e55,
      0x81ac77d6,
      0x5f11199b,
      0x043556f1,
      0xd7a3c76b,
      0x3c11183b,
      0x5924a509,
      0xf28fe6ed,
      0x97f1fbfa,
      0x9ebabf2c,
      0x1e153c6e,
      0x86e34570,
      0xeae96fb1,
      0x860e5e0a,
      0x5a3e2ab3,
      0x771fe71c,
      0x4e3d06fa,
      0x2965dcb9,
      0x99e71d0f,
      0x803e89d6,
      0x5266c825,
      0x2e4cc978,
      0x9c10b36a,
      0xc6150eba,
      0x94e2ea78,
      0xa5fc3c53,
      0x1e0a2df4,
      0xf2f74ea7,
      0x361d2b3d,
      0x1939260f,
      0x19c27960,
      0x5223a708,
      0xf71312b6,
      0xebadfe6e,
      0xeac31f66,
      0xe3bc4595,
      0xa67bc883,
      0xb17f37d1,
      0x018cff28,
      0xc332ddef,
      0xbe6c5aa5,
      0x65582185,
      0x68ab9802,
      0xeecea50f,
      0xdb2f953b,
      0x2aef7dad,
      0x5b6e2f84,
      0x1521b628,
      0x29076170,
      0xecdd4775,
      0x619f1510,
      0x13cca830,
      0xeb61bd96,
      0x0334fe1e,
      0xaa0363cf,
      0xb5735c90,
      0x4c70a239,
      0xd59e9e0b,
      0xcbaade14,
      0xeecc86bc,
      0x60622ca7,
      0x9cab5cab,
      0xb2f3846e,
      0x648b1eaf,
      0x19bdf0ca,
      0xa02369b9,
      0x655abb50,
      0x40685a32,
      0x3c2ab4b3,
      0x319ee9d5,
      0xc021b8f7,
      0x9b540b19,
      0x875fa099,
      0x95f7997e,
      0x623d7da8,
      0xf837889a,
      0x97e32d77,
      0x11ed935f,
      0x16681281,
      0x0e358829,
      0xc7e61fd6,
      0x96dedfa1,
      0x7858ba99,
      0x57f584a5,
      0x1b227263,
      0x9b83c3ff,
      0x1ac24696,
      0xcdb30aeb,
      0x532e3054,
      0x8fd948e4,
      0x6dbc3128,
      0x58ebf2ef,
      0x34c6ffea,
      0xfe28ed61,
      0xee7c3c73,
      0x5d4a14d9,
      0xe864b7e3,
      0x42105d14,
      0x203e13e0,
      0x45eee2b6,
      0xa3aaabea,
      0xdb6c4f15,
      0xfacb4fd0,
      0xc742f442,
      0xef6abbb5,
      0x654f3b1d,
      0x41cd2105,
      0xd81e799e,
      0x86854dc7,
      0xe44b476a,
      0x3d816250,
      0xcf62a1f2,
      0x5b8d2646,
      0xfc8883a0,
      0xc1c7b6a3,
      0x7f1524c3,
      0x69cb7492,
      0x47848a0b,
      0x5692b285,
      0x095bbf00,
      0xad19489d,
      0x1462b174,
      0x23820e00,
      0x58428d2a,
      0x0c55f5ea,
      0x1dadf43e,
      0x233f7061,
      0x3372f092,
      0x8d937e41,
      0xd65fecf1,
      0x6c223bdb,
      0x7cde3759,
      0xcbee7460,
      0x4085f2a7,
      0xce77326e,
      0xa6078084,
      0x19f8509e,
      0xe8efd855,
      0x61d99735,
      0xa969a7aa,
      0xc50c06c2,
      0x5a04abfc,
      0x800bcadc,
      0x9e447a2e,
      0xc3453484,
      0xfdd56705,
      0x0e1e9ec9,
      0xdb73dbd3,
      0x105588cd,
      0x675fda79,
      0xe3674340,
      0xc5c43465,
      0x713e38d8,
      0x3d28f89e,
      0xf16dff20,
      0x153e21e7,
      0x8fb03d4a,
      0xe6e39f2b,
      0xdb83adf7
    ]),
    new Uint32Array([
      0xe93d5a68,
      0x948140f7,
      0xf64c261c,
      0x94692934,
      0x411520f7,
      0x7602d4f7,
      0xbcf46b2e,
      0xd4a20068,
      0xd4082471,
      0x3320f46a,
      0x43b7d4b7,
      0x500061af,
      0x1e39f62e,
      0x97244546,
      0x14214f74,
      0xbf8b8840,
      0x4d95fc1d,
      0x96b591af,
      0x70f4ddd3,
      0x66a02f45,
      0xbfbc09ec,
      0x03bd9785,
      0x7fac6dd0,
      0x31cb8504,
      0x96eb27b3,
      0x55fd3941,
      0xda2547e6,
      0xabca0a9a,
      0x28507825,
      0x530429f4,
      0x0a2c86da,
      0xe9b66dfb,
      0x68dc1462,
      0xd7486900,
      0x680ec0a4,
      0x27a18dee,
      0x4f3ffea2,
      0xe887ad8c,
      0xb58ce006,
      0x7af4d6b6,
      0xaace1e7c,
      0xd3375fec,
      0xce78a399,
      0x406b2a42,
      0x20fe9e35,
      0xd9f385b9,
      0xee39d7ab,
      0x3b124e8b,
      0x1dc9faf7,
      0x4b6d1856,
      0x26a36631,
      0xeae397b2,
      0x3a6efa74,
      0xdd5b4332,
      0x6841e7f7,
      0xca7820fb,
      0xfb0af54e,
      0xd8feb397,
      0x454056ac,
      0xba489527,
      0x55533a3a,
      0x20838d87,
      0xfe6ba9b7,
      0xd096954b,
      0x55a867bc,
      0xa1159a58,
      0xcca92963,
      0x99e1db33,
      0xa62a4a56,
      0x3f3125f9,
      0x5ef47e1c,
      0x9029317c,
      0xfdf8e802,
      0x04272f70,
      0x80bb155c,
      0x05282ce3,
      0x95c11548,
      0xe4c66d22,
      0x48c1133f,
      0xc70f86dc,
      0x07f9c9ee,
      0x41041f0f,
      0x404779a4,
      0x5d886e17,
      0x325f51eb,
      0xd59bc0d1,
      0xf2bcc18f,
      0x41113564,
      0x257b7834,
      0x602a9c60,
      0xdff8e8a3,
      0x1f636c1b,
      0x0e12b4c2,
      0x02e1329e,
      0xaf664fd1,
      0xcad18115,
      0x6b2395e0,
      0x333e92e1,
      0x3b240b62,
      0xeebeb922,
      0x85b2a20e,
      0xe6ba0d99,
      0xde720c8c,
      0x2da2f728,
      0xd0127845,
      0x95b794fd,
      0x647d0862,
      0xe7ccf5f0,
      0x5449a36f,
      0x877d48fa,
      0xc39dfd27,
      0xf33e8d1e,
      0x0a476341,
      0x992eff74,
      0x3a6f6eab,
      0xf4f8fd37,
      0xa812dc60,
      0xa1ebddf8,
      0x991be14c,
      0xdb6e6b0d,
      0xc67b5510,
      0x6d672c37,
      0x2765d43b,
      0xdcd0e804,
      0xf1290dc7,
      0xcc00ffa3,
      0xb5390f92,
      0x690fed0b,
      0x667b9ffb,
      0xcedb7d9c,
      0xa091cf0b,
      0xd9155ea3,
      0xbb132f88,
      0x515bad24,
      0x7b9479bf,
      0x763bd6eb,
      0x37392eb3,
      0xcc115979,
      0x8026e297,
      0xf42e312d,
      0x6842ada7,
      0xc66a2b3b,
      0x12754ccc,
      0x782ef11c,
      0x6a124237,
      0xb79251e7,
      0x06a1bbe6,
      0x4bfb6350,
      0x1a6b1018,
      0x11caedfa,
      0x3d25bdd8,
      0xe2e1c3c9,
      0x44421659,
      0x0a121386,
      0xd90cec6e,
      0xd5abea2a,
      0x64af674e,
      0xda86a85f,
      0xbebfe988,
      0x64e4c3fe,
      0x9dbc8057,
      0xf0f7c086,
      0x60787bf8,
      0x6003604d,
      0xd1fd8346,
      0xf6381fb0,
      0x7745ae04,
      0xd736fccc,
      0x83426b33,
      0xf01eab71,
      0xb0804187,
      0x3c005e5f,
      0x77a057be,
      0xbde8ae24,
      0x55464299,
      0xbf582e61,
      0x4e58f48f,
      0xf2ddfda2,
      0xf474ef38,
      0x8789bdc2,
      0x5366f9c3,
      0xc8b38e74,
      0xb475f255,
      0x46fcd9b9,
      0x7aeb2661,
      0x8b1ddf84,
      0x846a0e79,
      0x915f95e2,
      0x466e598e,
      0x20b45770,
      0x8cd55591,
      0xc902de4c,
      0xb90bace1,
      0xbb8205d0,
      0x11a86248,
      0x7574a99e,
      0xb77f19b6,
      0xe0a9dc09,
      0x662d09a1,
      0xc4324633,
      0xe85a1f02,
      0x09f0be8c,
      0x4a99a025,
      0x1d6efe10,
      0x1ab93d1d,
      0x0ba5a4df,
      0xa186f20f,
      0x2868f169,
      0xdcb7da83,
      0x573906fe,
      0xa1e2ce9b,
      0x4fcd7f52,
      0x50115e01,
      0xa70683fa,
      0xa002b5c4,
      0x0de6d027,
      0x9af88c27,
      0x773f8641,
      0xc3604c06,
      0x61a806b5,
      0xf0177a28,
      0xc0f586e0,
      0x006058aa,
      0x30dc7d62,
      0x11e69ed7,
      0x2338ea63,
      0x53c2dd94,
      0xc2c21634,
      0xbbcbee56,
      0x90bcb6de,
      0xebfc7da1,
      0xce591d76,
      0x6f05e409,
      0x4b7c0188,
      0x39720a3d,
      0x7c927c24,
      0x86e3725f,
      0x724d9db9,
      0x1ac15bb4,
      0xd39eb8fc,
      0xed545578,
      0x08fca5b5,
      0xd83d7cd3,
      0x4dad0fc4,
      0x1e50ef5e,
      0xb161e6f8,
      0xa28514d9,
      0x6c51133c,
      0x6fd5c7e7,
      0x56e14ec4,
      0x362abfce,
      0xddc6c837,
      0xd79a3234,
      0x92638212,
      0x670efa8e,
      0x406000e0
    ]),
    new Uint32Array([
      0x3a39ce37,
      0xd3faf5cf,
      0xabc27737,
      0x5ac52d1b,
      0x5cb0679e,
      0x4fa33742,
      0xd3822740,
      0x99bc9bbe,
      0xd5118e9d,
      0xbf0f7315,
      0xd62d1c7e,
      0xc700c47b,
      0xb78c1b6b,
      0x21a19045,
      0xb26eb1be,
      0x6a366eb4,
      0x5748ab2f,
      0xbc946e79,
      0xc6a376d2,
      0x6549c2c8,
      0x530ff8ee,
      0x468dde7d,
      0xd5730a1d,
      0x4cd04dc6,
      0x2939bbdb,
      0xa9ba4650,
      0xac9526e8,
      0xbe5ee304,
      0xa1fad5f0,
      0x6a2d519a,
      0x63ef8ce2,
      0x9a86ee22,
      0xc089c2b8,
      0x43242ef6,
      0xa51e03aa,
      0x9cf2d0a4,
      0x83c061ba,
      0x9be96a4d,
      0x8fe51550,
      0xba645bd6,
      0x2826a2f9,
      0xa73a3ae1,
      0x4ba99586,
      0xef5562e9,
      0xc72fefd3,
      0xf752f7da,
      0x3f046f69,
      0x77fa0a59,
      0x80e4a915,
      0x87b08601,
      0x9b09e6ad,
      0x3b3ee593,
      0xe990fd5a,
      0x9e34d797,
      0x2cf0b7d9,
      0x022b8b51,
      0x96d5ac3a,
      0x017da67d,
      0xd1cf3ed6,
      0x7c7d2d28,
      0x1f9f25cf,
      0xadf2b89b,
      0x5ad6b472,
      0x5a88f54c,
      0xe029ac71,
      0xe019a5e6,
      0x47b0acfd,
      0xed93fa9b,
      0xe8d3c48d,
      0x283b57cc,
      0xf8d56629,
      0x79132e28,
      0x785f0191,
      0xed756055,
      0xf7960e44,
      0xe3d35e8c,
      0x15056dd4,
      0x88f46dba,
      0x03a16125,
      0x0564f0bd,
      0xc3eb9e15,
      0x3c9057a2,
      0x97271aec,
      0xa93a072a,
      0x1b3f6d9b,
      0x1e6321f5,
      0xf59c66fb,
      0x26dcf319,
      0x7533d928,
      0xb155fdf5,
      0x03563482,
      0x8aba3cbb,
      0x28517711,
      0xc20ad9f8,
      0xabcc5167,
      0xccad925f,
      0x4de81751,
      0x3830dc8e,
      0x379d5862,
      0x9320f991,
      0xea7a90c2,
      0xfb3e7bce,
      0x5121ce64,
      0x774fbe32,
      0xa8b6e37e,
      0xc3293d46,
      0x48de5369,
      0x6413e680,
      0xa2ae0810,
      0xdd6db224,
      0x69852dfd,
      0x09072166,
      0xb39a460a,
      0x6445c0dd,
      0x586cdecf,
      0x1c20c8ae,
      0x5bbef7dd,
      0x1b588d40,
      0xccd2017f,
      0x6bb4e3bb,
      0xdda26a7e,
      0x3a59ff45,
      0x3e350a44,
      0xbcb4cdd5,
      0x72eacea8,
      0xfa6484bb,
      0x8d6612ae,
      0xbf3c6f47,
      0xd29be463,
      0x542f5d9e,
      0xaec2771b,
      0xf64e6370,
      0x740e0d8d,
      0xe75b1357,
      0xf8721671,
      0xaf537d5d,
      0x4040cb08,
      0x4eb4e2cc,
      0x34d2466a,
      0x0115af84,
      0xe1b00428,
      0x95983a1d,
      0x06b89fb4,
      0xce6ea048,
      0x6f3f3b82,
      0x3520ab82,
      0x011a1d4b,
      0x277227f8,
      0x611560b1,
      0xe7933fdc,
      0xbb3a792b,
      0x344525bd,
      0xa08839e1,
      0x51ce794b,
      0x2f32c9b7,
      0xa01fbac9,
      0xe01cc87e,
      0xbcc7d1f6,
      0xcf0111c3,
      0xa1e8aac7,
      0x1a908749,
      0xd44fbd9a,
      0xd0dadecb,
      0xd50ada38,
      0x0339c32a,
      0xc6913667,
      0x8df9317c,
      0xe0b12b4f,
      0xf79e59b7,
      0x43f5bb3a,
      0xf2d519ff,
      0x27d9459c,
      0xbf97222c,
      0x15e6fc2a,
      0x0f91fc71,
      0x9b941525,
      0xfae59361,
      0xceb69ceb,
      0xc2a86459,
      0x12baa8d1,
      0xb6c1075e,
      0xe3056a0c,
      0x10d25065,
      0xcb03a442,
      0xe0ec6e0e,
      0x1698db3b,
      0x4c98a0be,
      0x3278e964,
      0x9f1f9532,
      0xe0d392df,
      0xd3a0342b,
      0x8971f21e,
      0x1b0a7441,
      0x4ba3348c,
      0xc5be7120,
      0xc37632d8,
      0xdf359f8d,
      0x9b992f2e,
      0xe60b6f47,
      0x0fe3f11d,
      0xe54cda54,
      0x1edad891,
      0xce6279cf,
      0xcd3e7e6f,
      0x1618b166,
      0xfd2c1d05,
      0x848fd2c5,
      0xf6fb2299,
      0xf523f357,
      0xa6327623,
      0x93a83531,
      0x56cccd02,
      0xacf08162,
      0x5a75ebb5,
      0x6e163697,
      0x88d273cc,
      0xde966292,
      0x81b949d0,
      0x4c50901b,
      0x71c65614,
      0xe6c6c7bd,
      0x327a140a,
      0x45e1d006,
      0xc3f27b9a,
      0xc9aa53fd,
      0x62a80f00,
      0xbb25bfe2,
      0x35bdd2f6,
      0x71126905,
      0xb2040222,
      0xb6cbcf7c,
      0xcd769c2b,
      0x53113ec0,
      0x1640e3d3,
      0x38abbd60,
      0x2547adf0,
      0xba38209c,
      0xf746ce76,
      0x77afa1c5,
      0x20756060,
      0x85cbfe4e,
      0x8ae88dd8,
      0x7aaaf9b0,
      0x4cf9aa7e,
      0x1948c25c,
      0x02fb8a8c,
      0x01c36ae4,
      0xd6ebe1f9,
      0x90d4f869,
      0xa65cdea0,
      0x3f09252d,
      0xc208e69f,
      0xb74e6132,
      0xce77e25b,
      0x578fdfe3,
      0x3ac372e6
    ])
  ];
  this.P = new Uint32Array([
    0x243f6a88,
    0x85a308d3,
    0x13198a2e,
    0x03707344,
    0xa4093822,
    0x299f31d0,
    0x082efa98,
    0xec4e6c89,
    0x452821e6,
    0x38d01377,
    0xbe5466cf,
    0x34e90c6c,
    0xc0ac29b7,
    0xc97c50dd,
    0x3f84d5b5,
    0xb5470917,
    0x9216d5d9,
    0x8979fb1b
  ]);
};

function F(S, x8, i) {
  return ((S[0][x8[i + 3]] + S[1][x8[i + 2]]) ^ S[2][x8[i + 1]]) + S[3][x8[i]];
}
Blowfish.prototype.encipher = function(x, x8) {
  if (x8 === undefined) {
    x8 = new Uint8Array(x.buffer);
    if (x.byteOffset !== 0) x8 = x8.subarray(x.byteOffset);
  }
  x[0] ^= this.P[0];
  for (var i = 1; i < 16; i += 2) {
    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
    x[0] ^= F(this.S, x8, 4) ^ this.P[i + 1];
  }
  var t = x[0];
  x[0] = x[1] ^ this.P[17];
  x[1] = t;
};

Blowfish.prototype.decipher = function(x) {
  var x8 = new Uint8Array(x.buffer);
  if (x.byteOffset !== 0) x8 = x8.subarray(x.byteOffset);
  x[0] ^= this.P[17];
  for (var i = 16; i > 0; i -= 2) {
    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
    x[0] ^= F(this.S, x8, 4) ^ this.P[i - 1];
  }
  var t = x[0];
  x[0] = x[1] ^ this.P[0];
  x[1] = t;
};

function stream2word(data, databytes) {
  var i,
    temp = 0;
  for (i = 0; i < 4; i++, BLF_J++) {
    if (BLF_J >= databytes) BLF_J = 0;
    temp = (temp << 8) | data[BLF_J];
  }
  return temp;
}
Blowfish.prototype.expand0state = function(key, keybytes) {
  var d = new Uint32Array(2),
    i,
    k;
  var d8 = new Uint8Array(d.buffer);

  for (i = 0, BLF_J = 0; i < 18; i++) {
    this.P[i] ^= stream2word(key, keybytes);
  }
  BLF_J = 0;

  for (i = 0; i < 18; i += 2) {
    this.encipher(d, d8);
    this.P[i] = d[0];
    this.P[i + 1] = d[1];
  }

  for (i = 0; i < 4; i++) {
    for (k = 0; k < 256; k += 2) {
      this.encipher(d, d8);
      this.S[i][k] = d[0];
      this.S[i][k + 1] = d[1];
    }
  }
};

Blowfish.prototype.expandstate = function(data, databytes, key, keybytes) {
  var d = new Uint32Array(2),
    i,
    k;

  for (i = 0, BLF_J = 0; i < 18; i++) {
    this.P[i] ^= stream2word(key, keybytes);
  }

  for (i = 0, BLF_J = 0; i < 18; i += 2) {
    d[0] ^= stream2word(data, databytes);
    d[1] ^= stream2word(data, databytes);
    this.encipher(d);
    this.P[i] = d[0];
    this.P[i + 1] = d[1];
  }

  for (i = 0; i < 4; i++) {
    for (k = 0; k < 256; k += 2) {
      d[0] ^= stream2word(data, databytes);
      d[1] ^= stream2word(data, databytes);
      this.encipher(d);
      this.S[i][k] = d[0];
      this.S[i][k + 1] = d[1];
    }
  }
  BLF_J = 0;
};

Blowfish.prototype.enc = function(data, blocks) {
  for (var i = 0; i < blocks; i++) {
    this.encipher(data.subarray(i * 2));
  }
};

Blowfish.prototype.dec = function(data, blocks) {
  for (var i = 0; i < blocks; i++) {
    this.decipher(data.subarray(i * 2));
  }
};

var BCRYPT_BLOCKS = 8,
  BCRYPT_HASHSIZE = 32;

function bcrypt_hash(sha2pass, sha2salt, out) {
  var state = new Blowfish(),
    cdata = new Uint32Array(BCRYPT_BLOCKS),
    i,
    ciphertext = new Uint8Array([
      79,
      120,
      121,
      99,
      104,
      114,
      111,
      109,
      97,
      116,
      105,
      99,
      66,
      108,
      111,
      119,
      102,
      105,
      115,
      104,
      83,
      119,
      97,
      116,
      68,
      121,
      110,
      97,
      109,
      105,
      116,
      101
    ]); //"OxychromaticBlowfishSwatDynamite"

  state.expandstate(sha2salt, 64, sha2pass, 64);
  for (i = 0; i < 64; i++) {
    state.expand0state(sha2salt, 64);
    state.expand0state(sha2pass, 64);
  }

  for (i = 0; i < BCRYPT_BLOCKS; i++) cdata[i] = stream2word(ciphertext, ciphertext.byteLength);
  for (i = 0; i < 64; i++) state.enc(cdata, cdata.byteLength / 8);

  for (i = 0; i < BCRYPT_BLOCKS; i++) {
    out[4 * i + 3] = cdata[i] >>> 24;
    out[4 * i + 2] = cdata[i] >>> 16;
    out[4 * i + 1] = cdata[i] >>> 8;
    out[4 * i + 0] = cdata[i];
  }
}
function bcrypt_pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds) {
  var sha2pass = new Uint8Array(64),
    sha2salt = new Uint8Array(64),
    out = new Uint8Array(BCRYPT_HASHSIZE),
    tmpout = new Uint8Array(BCRYPT_HASHSIZE),
    countsalt = new Uint8Array(saltlen + 4),
    i,
    j,
    amt,
    stride,
    dest,
    count,
    origkeylen = keylen;

  if (rounds < 1) return -1;
  if (passlen === 0 || saltlen === 0 || keylen === 0 || keylen > out.byteLength * out.byteLength || saltlen > 1 << 20)
    return -1;

  stride = Math.floor((keylen + out.byteLength - 1) / out.byteLength);
  amt = Math.floor((keylen + stride - 1) / stride);

  for (i = 0; i < saltlen; i++) countsalt[i] = salt[i];

  crypto_hash_sha512(sha2pass, pass, passlen);

  for (count = 1; keylen > 0; count++) {
    countsalt[saltlen + 0] = count >>> 24;
    countsalt[saltlen + 1] = count >>> 16;
    countsalt[saltlen + 2] = count >>> 8;
    countsalt[saltlen + 3] = count;

    crypto_hash_sha512(sha2salt, countsalt, saltlen + 4);
    bcrypt_hash(sha2pass, sha2salt, tmpout);
    for (i = out.byteLength; i--; ) out[i] = tmpout[i];

    for (i = 1; i < rounds; i++) {
      crypto_hash_sha512(sha2salt, tmpout, tmpout.byteLength);
      bcrypt_hash(sha2pass, sha2salt, tmpout);
      for (j = 0; j < out.byteLength; j++) out[j] ^= tmpout[j];
    }

    amt = Math.min(amt, keylen);
    for (i = 0; i < amt; i++) {
      dest = i * stride + (count - 1);
      if (dest >= origkeylen) break;
      key[dest] = out[i];
    }
    keylen -= i;
  }

  return 0;
}
var bcryptPbkdf = {
  BLOCKS: BCRYPT_BLOCKS,
  HASHSIZE: BCRYPT_HASHSIZE,
  hash: bcrypt_hash,
  pbkdf: bcrypt_pbkdf
};

// Copyright 2015 Joyent, Inc.

var sshPrivate = {
  read: read$3,
  readSSHPrivate: readSSHPrivate,
  write: write$3
};

var Buffer$e = safer_1.Buffer;

var bcrypt;

function read$3(buf, options) {
  return pem.read(buf, options);
}

var MAGIC = 'openssh-key-v1';

function readSSHPrivate(type, buf, options) {
  buf = new sshBuffer({ buffer: buf });

  var magic = buf.readCString();
  assert_1.strictEqual(magic, MAGIC, 'bad magic string');

  var cipher = buf.readString();
  var kdf = buf.readString();
  var kdfOpts = buf.readBuffer();

  var nkeys = buf.readInt();
  if (nkeys !== 1) {
    throw new Error('OpenSSH-format key file contains ' + 'multiple keys: this is unsupported.');
  }

  var pubKey = buf.readBuffer();

  if (type === 'public') {
    assert_1.ok(buf.atEnd(), 'excess bytes left after key');
    return rfc4253.read(pubKey);
  }

  var privKeyBlob = buf.readBuffer();
  assert_1.ok(buf.atEnd(), 'excess bytes left after key');

  var kdfOptsBuf = new sshBuffer({ buffer: kdfOpts });
  switch (kdf) {
    case 'none':
      if (cipher !== 'none') {
        throw new Error('OpenSSH-format key uses KDF "none" ' + 'but specifies a cipher other than "none"');
      }
      break;
    case 'bcrypt':
      var salt = kdfOptsBuf.readBuffer();
      var rounds = kdfOptsBuf.readInt();
      var cinf = utils.opensshCipherInfo(cipher);
      if (bcrypt === undefined) {
        bcrypt = bcryptPbkdf;
      }

      if (typeof options.passphrase === 'string') {
        options.passphrase = Buffer$e.from(options.passphrase, 'utf-8');
      }
      if (!Buffer$e.isBuffer(options.passphrase)) {
        throw new errors.KeyEncryptedError(options.filename, 'OpenSSH');
      }

      var pass = new Uint8Array(options.passphrase);
      var salti = new Uint8Array(salt);
      /* Use the pbkdf to derive both the key and the IV. */
      var out = new Uint8Array(cinf.keySize + cinf.blockSize);
      var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);
      if (res !== 0) {
        throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');
      }
      out = Buffer$e.from(out);
      var ckey = out.slice(0, cinf.keySize);
      var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
      var cipherStream = crypto__default['default'].createDecipheriv(cinf.opensslName, ckey, iv);
      cipherStream.setAutoPadding(false);
      var chunk,
        chunks = [];
      cipherStream.once('error', function(e) {
        if (e.toString().indexOf('bad decrypt') !== -1) {
          throw new Error('Incorrect passphrase ' + 'supplied, could not decrypt key');
        }
        throw e;
      });
      cipherStream.write(privKeyBlob);
      cipherStream.end();
      while ((chunk = cipherStream.read()) !== null) chunks.push(chunk);
      privKeyBlob = Buffer$e.concat(chunks);
      break;
    default:
      throw new Error('OpenSSH-format key uses unknown KDF "' + kdf + '"');
  }

  buf = new sshBuffer({ buffer: privKeyBlob });

  var checkInt1 = buf.readInt();
  var checkInt2 = buf.readInt();
  if (checkInt1 !== checkInt2) {
    throw new Error('Incorrect passphrase supplied, could not ' + 'decrypt key');
  }

  var ret = {};
  var key = rfc4253.readInternal(ret, 'private', buf.remainder());

  buf.skip(ret.consumed);

  var comment = buf.readString();
  key.comment = comment;

  return key;
}

function write$3(key, options) {
  var pubKey;
  if (privateKey.isPrivateKey(key)) pubKey = key.toPublic();
  else pubKey = key;

  var cipher = 'none';
  var kdf = 'none';
  var kdfopts = Buffer$e.alloc(0);
  var cinf = { blockSize: 8 };
  var passphrase;
  if (options !== undefined) {
    passphrase = options.passphrase;
    if (typeof passphrase === 'string') passphrase = Buffer$e.from(passphrase, 'utf-8');
    if (passphrase !== undefined) {
      assert_1.buffer(passphrase, 'options.passphrase');
      assert_1.optionalString(options.cipher, 'options.cipher');
      cipher = options.cipher;
      if (cipher === undefined) cipher = 'aes128-ctr';
      cinf = utils.opensshCipherInfo(cipher);
      kdf = 'bcrypt';
    }
  }

  var privBuf;
  if (privateKey.isPrivateKey(key)) {
    privBuf = new sshBuffer({});
    var checkInt = crypto__default['default'].randomBytes(4).readUInt32BE(0);
    privBuf.writeInt(checkInt);
    privBuf.writeInt(checkInt);
    privBuf.write(key.toBuffer('rfc4253'));
    privBuf.writeString(key.comment || '');

    var n = 1;
    while (privBuf._offset % cinf.blockSize !== 0) privBuf.writeChar(n++);
    privBuf = privBuf.toBuffer();
  }

  switch (kdf) {
    case 'none':
      break;
    case 'bcrypt':
      var salt = crypto__default['default'].randomBytes(16);
      var rounds = 16;
      var kdfssh = new sshBuffer({});
      kdfssh.writeBuffer(salt);
      kdfssh.writeInt(rounds);
      kdfopts = kdfssh.toBuffer();

      if (bcrypt === undefined) {
        bcrypt = bcryptPbkdf;
      }
      var pass = new Uint8Array(passphrase);
      var salti = new Uint8Array(salt);
      /* Use the pbkdf to derive both the key and the IV. */
      var out = new Uint8Array(cinf.keySize + cinf.blockSize);
      var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);
      if (res !== 0) {
        throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');
      }
      out = Buffer$e.from(out);
      var ckey = out.slice(0, cinf.keySize);
      var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);

      var cipherStream = crypto__default['default'].createCipheriv(cinf.opensslName, ckey, iv);
      cipherStream.setAutoPadding(false);
      var chunk,
        chunks = [];
      cipherStream.once('error', function(e) {
        throw e;
      });
      cipherStream.write(privBuf);
      cipherStream.end();
      while ((chunk = cipherStream.read()) !== null) chunks.push(chunk);
      privBuf = Buffer$e.concat(chunks);
      break;
    default:
      throw new Error('Unsupported kdf ' + kdf);
  }

  var buf = new sshBuffer({});

  buf.writeCString(MAGIC);
  buf.writeString(cipher); /* cipher */
  buf.writeString(kdf); /* kdf */
  buf.writeBuffer(kdfopts); /* kdfoptions */

  buf.writeInt(1); /* nkeys */
  buf.writeBuffer(pubKey.toBuffer('rfc4253'));

  if (privBuf) buf.writeBuffer(privBuf);

  buf = buf.toBuffer();

  var header;
  if (privateKey.isPrivateKey(key)) header = 'OPENSSH PRIVATE KEY';
  else header = 'OPENSSH PUBLIC KEY';

  var tmp = buf.toString('base64');
  var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;
  buf = Buffer$e.alloc(len);
  var o = 0;
  o += buf.write('-----BEGIN ' + header + '-----\n', o);
  for (var i = 0; i < tmp.length; ) {
    var limit = i + 70;
    if (limit > tmp.length) limit = tmp.length;
    o += buf.write(tmp.slice(i, limit), o);
    buf[o++] = 10;
    i = limit;
  }
  o += buf.write('-----END ' + header + '-----\n', o);

  return buf.slice(0, o);
}

// Copyright 2018 Joyent, Inc.

var pem = {
  read: read$4,
  write: write$4
};

var Buffer$f = safer_1.Buffer;

var OID_PBES2 = '1.2.840.113549.1.5.13';
var OID_PBKDF2 = '1.2.840.113549.1.5.12';

var OID_TO_CIPHER = {
  '1.2.840.113549.3.7': '3des-cbc',
  '2.16.840.1.101.3.4.1.2': 'aes128-cbc',
  '2.16.840.1.101.3.4.1.42': 'aes256-cbc'
};
Object.keys(OID_TO_CIPHER).forEach(function(k) {});

var OID_TO_HASH = {
  '1.2.840.113549.2.7': 'sha1',
  '1.2.840.113549.2.9': 'sha256',
  '1.2.840.113549.2.11': 'sha512'
};
Object.keys(OID_TO_HASH).forEach(function(k) {});

/*
 * For reading we support both PKCS#1 and PKCS#8. If we find a private key,
 * we just take the public component of it and use that.
 */
function read$4(buf, options, forceType) {
  var input = buf;
  if (typeof buf !== 'string') {
    assert_1.buffer(buf, 'buf');
    buf = buf.toString('ascii');
  }

  var lines = buf.trim().split(/[\r\n]+/g);

  var m;
  var si = -1;
  while (!m && si < lines.length) {
    m = lines[++si].match(
      /*JSSTYLED*/
      /[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/
    );
  }
  assert_1.ok(m, 'invalid PEM header');

  var m2;
  var ei = lines.length;
  while (!m2 && ei > 0) {
    m2 = lines[--ei].match(
      /*JSSTYLED*/
      /[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/
    );
  }
  assert_1.ok(m2, 'invalid PEM footer');

  /* Begin and end banners must match key type */
  assert_1.equal(m[2], m2[2]);
  var type = m[2].toLowerCase();

  var alg;
  if (m[1]) {
    /* They also must match algorithms, if given */
    assert_1.equal(m[1], m2[1], 'PEM header and footer mismatch');
    alg = m[1].trim();
  }

  lines = lines.slice(si, ei + 1);

  var headers = {};
  while (true) {
    lines = lines.slice(1);
    m = lines[0].match(
      /*JSSTYLED*/
      /^([A-Za-z0-9-]+): (.+)$/
    );
    if (!m) break;
    headers[m[1].toLowerCase()] = m[2];
  }

  /* Chop off the first and last lines */
  lines = lines.slice(0, -1).join('');
  buf = Buffer$f.from(lines, 'base64');

  var cipher, key, iv;
  if (headers['proc-type']) {
    var parts = headers['proc-type'].split(',');
    if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
      if (typeof options.passphrase === 'string') {
        options.passphrase = Buffer$f.from(options.passphrase, 'utf-8');
      }
      if (!Buffer$f.isBuffer(options.passphrase)) {
        throw new errors.KeyEncryptedError(options.filename, 'PEM');
      } else {
        parts = headers['dek-info'].split(',');
        assert_1.ok(parts.length === 2);
        cipher = parts[0].toLowerCase();
        iv = Buffer$f.from(parts[1], 'hex');
        key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;
      }
    }
  }

  if (alg && alg.toLowerCase() === 'encrypted') {
    var eder = new lib.BerReader(buf);
    var pbesEnd;
    eder.readSequence();

    eder.readSequence();
    pbesEnd = eder.offset + eder.length;

    var method = eder.readOID();
    if (method !== OID_PBES2) {
      throw new Error('Unsupported PEM/PKCS8 encryption ' + 'scheme: ' + method);
    }

    eder.readSequence(); /* PBES2-params */

    eder.readSequence(); /* keyDerivationFunc */
    var kdfEnd = eder.offset + eder.length;
    var kdfOid = eder.readOID();
    if (kdfOid !== OID_PBKDF2) throw new Error('Unsupported PBES2 KDF: ' + kdfOid);
    eder.readSequence();
    var salt = eder.readString(lib.Ber.OctetString, true);
    var iterations = eder.readInt();
    var hashAlg = 'sha1';
    if (eder.offset < kdfEnd) {
      eder.readSequence();
      var hashAlgOid = eder.readOID();
      hashAlg = OID_TO_HASH[hashAlgOid];
      if (hashAlg === undefined) {
        throw new Error('Unsupported PBKDF2 hash: ' + hashAlgOid);
      }
    }
    eder._offset = kdfEnd;

    eder.readSequence(); /* encryptionScheme */
    var cipherOid = eder.readOID();
    cipher = OID_TO_CIPHER[cipherOid];
    if (cipher === undefined) {
      throw new Error('Unsupported PBES2 cipher: ' + cipherOid);
    }
    iv = eder.readString(lib.Ber.OctetString, true);

    eder._offset = pbesEnd;
    buf = eder.readString(lib.Ber.OctetString, true);

    if (typeof options.passphrase === 'string') {
      options.passphrase = Buffer$f.from(options.passphrase, 'utf-8');
    }
    if (!Buffer$f.isBuffer(options.passphrase)) {
      throw new errors.KeyEncryptedError(options.filename, 'PEM');
    }

    var cinfo = utils.opensshCipherInfo(cipher);

    cipher = cinfo.opensslName;
    key = utils.pbkdf2(hashAlg, salt, iterations, cinfo.keySize, options.passphrase);
    alg = undefined;
  }

  if (cipher && key && iv) {
    var cipherStream = crypto__default['default'].createDecipheriv(cipher, key, iv);
    var chunk,
      chunks = [];
    cipherStream.once('error', function(e) {
      if (e.toString().indexOf('bad decrypt') !== -1) {
        throw new Error('Incorrect passphrase ' + 'supplied, could not decrypt key');
      }
      throw e;
    });
    cipherStream.write(buf);
    cipherStream.end();
    while ((chunk = cipherStream.read()) !== null) chunks.push(chunk);
    buf = Buffer$f.concat(chunks);
  }

  /* The new OpenSSH internal format abuses PEM headers */
  if (alg && alg.toLowerCase() === 'openssh') return sshPrivate.readSSHPrivate(type, buf, options);
  if (alg && alg.toLowerCase() === 'ssh2') return rfc4253.readType(type, buf, options);

  var der = new lib.BerReader(buf);
  der.originalInput = input;

  /*
   * All of the PEM file types start with a sequence tag, so chop it
   * off here
   */
  der.readSequence();

  /* PKCS#1 type keys name an algorithm in the banner explicitly */
  if (alg) {
    if (forceType) assert_1.strictEqual(forceType, 'pkcs1');
    return pkcs1.readPkcs1(alg, type, der);
  } else {
    if (forceType) assert_1.strictEqual(forceType, 'pkcs8');
    return pkcs8.readPkcs8(alg, type, der);
  }
}

function write$4(key, options, type) {
  assert_1.object(key);

  var alg = {
    ecdsa: 'EC',
    rsa: 'RSA',
    dsa: 'DSA',
    ed25519: 'EdDSA'
  }[key.type];
  var header;

  var der = new lib.BerWriter();

  if (privateKey.isPrivateKey(key)) {
    if (type && type === 'pkcs8') {
      header = 'PRIVATE KEY';
      pkcs8.writePkcs8(der, key);
    } else {
      if (type) assert_1.strictEqual(type, 'pkcs1');
      header = alg + ' PRIVATE KEY';
      pkcs1.writePkcs1(der, key);
    }
  } else if (key$1.isKey(key)) {
    if (type && type === 'pkcs1') {
      header = alg + ' PUBLIC KEY';
      pkcs1.writePkcs1(der, key);
    } else {
      if (type) assert_1.strictEqual(type, 'pkcs8');
      header = 'PUBLIC KEY';
      pkcs8.writePkcs8(der, key);
    }
  } else {
    throw new Error('key is not a Key or PrivateKey');
  }

  var tmp = der.buffer.toString('base64');
  var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;
  var buf = Buffer$f.alloc(len);
  var o = 0;
  o += buf.write('-----BEGIN ' + header + '-----\n', o);
  for (var i = 0; i < tmp.length; ) {
    var limit = i + 64;
    if (limit > tmp.length) limit = tmp.length;
    o += buf.write(tmp.slice(i, limit), o);
    buf[o++] = 10;
    i = limit;
  }
  o += buf.write('-----END ' + header + '-----\n', o);

  return buf.slice(0, o);
}

// Copyright 2015 Joyent, Inc.

var ssh = {
  read: read$5,
  write: write$5
};

var Buffer$g = safer_1.Buffer;

/*JSSTYLED*/
var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([ \t]+([^ \t][^\n]*[\n]*)?)?$/;
/*JSSTYLED*/
var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t\n]+([a-zA-Z0-9+\/][a-zA-Z0-9+\/ \t\n=]*)([^a-zA-Z0-9+\/ \t\n=].*)?$/;

function read$5(buf, options) {
  if (typeof buf !== 'string') {
    assert_1.buffer(buf, 'buf');
    buf = buf.toString('ascii');
  }

  var trimmed = buf.trim().replace(/[\\\r]/g, '');
  var m = trimmed.match(SSHKEY_RE);
  if (!m) m = trimmed.match(SSHKEY_RE2);
  assert_1.ok(m, 'key must match regex');

  var type = rfc4253.algToKeyType(m[1]);
  var kbuf = Buffer$g.from(m[2], 'base64');

  /*
   * This is a bit tricky. If we managed to parse the key and locate the
   * key comment with the regex, then do a non-partial read and assert
   * that we have consumed all bytes. If we couldn't locate the key
   * comment, though, there may be whitespace shenanigans going on that
   * have conjoined the comment to the rest of the key. We do a partial
   * read in this case to try to make the best out of a sorry situation.
   */
  var key;
  var ret = {};
  if (m[4]) {
    try {
      key = rfc4253.read(kbuf);
    } catch (e) {
      m = trimmed.match(SSHKEY_RE2);
      assert_1.ok(m, 'key must match regex');
      kbuf = Buffer$g.from(m[2], 'base64');
      key = rfc4253.readInternal(ret, 'public', kbuf);
    }
  } else {
    key = rfc4253.readInternal(ret, 'public', kbuf);
  }

  assert_1.strictEqual(type, key.type);

  if (m[4] && m[4].length > 0) {
    key.comment = m[4];
  } else if (ret.consumed) {
    /*
     * Now the magic: trying to recover the key comment when it's
     * gotten conjoined to the key or otherwise shenanigan'd.
     *
     * Work out how much base64 we used, then drop all non-base64
     * chars from the beginning up to this point in the the string.
     * Then offset in this and try to make up for missing = chars.
     */
    var data = m[2] + (m[3] ? m[3] : '');
    var realOffset = Math.ceil(ret.consumed / 3) * 4;
    data = data.slice(0, realOffset - 2) /*JSSTYLED*/.replace(/[^a-zA-Z0-9+\/=]/g, '') + data.slice(realOffset - 2);

    var padding = ret.consumed % 3;
    if (padding > 0 && data.slice(realOffset - 1, realOffset) !== '=') realOffset--;
    while (data.slice(realOffset, realOffset + 1) === '=') realOffset++;

    /* Finally, grab what we think is the comment & clean it up. */
    var trailer = data.slice(realOffset);
    trailer = trailer.replace(/[\r\n]/g, ' ').replace(/^\s+/, '');
    if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;
  }

  return key;
}

function write$5(key, options) {
  assert_1.object(key);
  if (!key$1.isKey(key)) throw new Error('Must be a public key');

  var parts = [];
  var alg = rfc4253.keyTypeToAlg(key);
  parts.push(alg);

  var buf = rfc4253.write(key);
  parts.push(buf.toString('base64'));

  if (key.comment) parts.push(key.comment);

  return Buffer$g.from(parts.join(' '));
}

// Copyright 2017 Joyent, Inc.

var dnssec = {
  read: read$6,
  write: write$6
};

var Buffer$h = safer_1.Buffer;

var supportedAlgos = {
  'rsa-sha1': 5,
  'rsa-sha256': 8,
  'rsa-sha512': 10,
  'ecdsa-p256-sha256': 13,
  'ecdsa-p384-sha384': 14
  /*
   * ed25519 is hypothetically supported with id 15
   * but the common tools available don't appear to be
   * capable of generating/using ed25519 keys
   */
};

var supportedAlgosById = {};
Object.keys(supportedAlgos).forEach(function(k) {
  supportedAlgosById[supportedAlgos[k]] = k.toUpperCase();
});

function read$6(buf, options) {
  if (typeof buf !== 'string') {
    assert_1.buffer(buf, 'buf');
    buf = buf.toString('ascii');
  }
  var lines = buf.split('\n');
  if (lines[0].match(/^Private-key-format\: v1/)) {
    var algElems = lines[1].split(' ');
    var algoNum = parseInt(algElems[1], 10);
    var algoName = algElems[2];
    if (!supportedAlgosById[algoNum]) throw new Error('Unsupported algorithm: ' + algoName);
    return readDNSSECPrivateKey(algoNum, lines.slice(2));
  }

  // skip any comment-lines
  var line = 0;
  /* JSSTYLED */
  while (lines[line].match(/^\;/)) line++;
  // we should now have *one single* line left with our KEY on it.
  if ((lines[line].match(/\. IN KEY /) || lines[line].match(/\. IN DNSKEY /)) && lines[line + 1].length === 0) {
    return readRFC3110(lines[line]);
  }
  throw new Error('Cannot parse dnssec key');
}

function readRFC3110(keyString) {
  var elems = keyString.split(' ');
  //unused var flags = parseInt(elems[3], 10);
  //unused var protocol = parseInt(elems[4], 10);
  var algorithm = parseInt(elems[5], 10);
  if (!supportedAlgosById[algorithm]) throw new Error('Unsupported algorithm: ' + algorithm);
  var base64key = elems.slice(6, elems.length).join();
  var keyBuffer = Buffer$h.from(base64key, 'base64');
  if (supportedAlgosById[algorithm].match(/^RSA-/)) {
    // join the rest of the body into a single base64-blob
    var publicExponentLen = keyBuffer.readUInt8(0);
    if (publicExponentLen != 3 && publicExponentLen != 1)
      throw new Error('Cannot parse dnssec key: ' + 'unsupported exponent length');

    var publicExponent = keyBuffer.slice(1, publicExponentLen + 1);
    publicExponent = utils.mpNormalize(publicExponent);
    var modulus = keyBuffer.slice(1 + publicExponentLen);
    modulus = utils.mpNormalize(modulus);
    // now, make the key
    var rsaKey = {
      type: 'rsa',
      parts: []
    };
    rsaKey.parts.push({ name: 'e', data: publicExponent });
    rsaKey.parts.push({ name: 'n', data: modulus });
    return new key$1(rsaKey);
  }
  if (supportedAlgosById[algorithm] === 'ECDSA-P384-SHA384' || supportedAlgosById[algorithm] === 'ECDSA-P256-SHA256') {
    var curve = 'nistp384';
    var size = 384;
    if (supportedAlgosById[algorithm].match(/^ECDSA-P256-SHA256/)) {
      curve = 'nistp256';
      size = 256;
    }

    var ecdsaKey = {
      type: 'ecdsa',
      curve: curve,
      size: size,
      parts: [{ name: 'curve', data: Buffer$h.from(curve) }, { name: 'Q', data: utils.ecNormalize(keyBuffer) }]
    };
    return new key$1(ecdsaKey);
  }
  throw new Error('Unsupported algorithm: ' + supportedAlgosById[algorithm]);
}

function elementToBuf(e) {
  return Buffer$h.from(e.split(' ')[1], 'base64');
}

function readDNSSECRSAPrivateKey(elements) {
  var rsaParams = {};
  elements.forEach(function(element) {
    if (element.split(' ')[0] === 'Modulus:') rsaParams['n'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'PublicExponent:') rsaParams['e'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'PrivateExponent:') rsaParams['d'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'Prime1:') rsaParams['p'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'Prime2:') rsaParams['q'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'Exponent1:') rsaParams['dmodp'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'Exponent2:') rsaParams['dmodq'] = elementToBuf(element);
    else if (element.split(' ')[0] === 'Coefficient:') rsaParams['iqmp'] = elementToBuf(element);
  });
  // now, make the key
  var key = {
    type: 'rsa',
    parts: [
      { name: 'e', data: utils.mpNormalize(rsaParams['e']) },
      { name: 'n', data: utils.mpNormalize(rsaParams['n']) },
      { name: 'd', data: utils.mpNormalize(rsaParams['d']) },
      { name: 'p', data: utils.mpNormalize(rsaParams['p']) },
      { name: 'q', data: utils.mpNormalize(rsaParams['q']) },
      { name: 'dmodp', data: utils.mpNormalize(rsaParams['dmodp']) },
      { name: 'dmodq', data: utils.mpNormalize(rsaParams['dmodq']) },
      { name: 'iqmp', data: utils.mpNormalize(rsaParams['iqmp']) }
    ]
  };
  return new privateKey(key);
}

function readDNSSECPrivateKey(alg, elements) {
  if (supportedAlgosById[alg].match(/^RSA-/)) {
    return readDNSSECRSAPrivateKey(elements);
  }
  if (supportedAlgosById[alg] === 'ECDSA-P384-SHA384' || supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
    var d = Buffer$h.from(elements[0].split(' ')[1], 'base64');
    var curve = 'nistp384';
    var size = 384;
    if (supportedAlgosById[alg] === 'ECDSA-P256-SHA256') {
      curve = 'nistp256';
      size = 256;
    }
    // DNSSEC generates the public-key on the fly (go calculate it)
    var publicKey = utils.publicFromPrivateECDSA(curve, d);
    var Q = publicKey.part['Q'].data;
    var ecdsaKey = {
      type: 'ecdsa',
      curve: curve,
      size: size,
      parts: [{ name: 'curve', data: Buffer$h.from(curve) }, { name: 'd', data: d }, { name: 'Q', data: Q }]
    };
    return new privateKey(ecdsaKey);
  }
  throw new Error('Unsupported algorithm: ' + supportedAlgosById[alg]);
}

function dnssecTimestamp(date) {
  var year = date.getFullYear() + ''; //stringify
  var month = date.getMonth() + 1;
  var timestampStr = year + month + date.getUTCDate();
  timestampStr += '' + date.getUTCHours() + date.getUTCMinutes();
  timestampStr += date.getUTCSeconds();
  return timestampStr;
}

function rsaAlgFromOptions(opts) {
  if (!opts || !opts.hashAlgo || opts.hashAlgo === 'sha1') return '5 (RSASHA1)';
  else if (opts.hashAlgo === 'sha256') return '8 (RSASHA256)';
  else if (opts.hashAlgo === 'sha512') return '10 (RSASHA512)';
  else throw new Error('Unknown or unsupported hash: ' + opts.hashAlgo);
}

function writeRSA(key, options) {
  // if we're missing parts, add them.
  if (!key.part.dmodp || !key.part.dmodq) {
    utils.addRSAMissing(key);
  }

  var out = '';
  out += 'Private-key-format: v1.3\n';
  out += 'Algorithm: ' + rsaAlgFromOptions(options) + '\n';
  var n = utils.mpDenormalize(key.part['n'].data);
  out += 'Modulus: ' + n.toString('base64') + '\n';
  var e = utils.mpDenormalize(key.part['e'].data);
  out += 'PublicExponent: ' + e.toString('base64') + '\n';
  var d = utils.mpDenormalize(key.part['d'].data);
  out += 'PrivateExponent: ' + d.toString('base64') + '\n';
  var p = utils.mpDenormalize(key.part['p'].data);
  out += 'Prime1: ' + p.toString('base64') + '\n';
  var q = utils.mpDenormalize(key.part['q'].data);
  out += 'Prime2: ' + q.toString('base64') + '\n';
  var dmodp = utils.mpDenormalize(key.part['dmodp'].data);
  out += 'Exponent1: ' + dmodp.toString('base64') + '\n';
  var dmodq = utils.mpDenormalize(key.part['dmodq'].data);
  out += 'Exponent2: ' + dmodq.toString('base64') + '\n';
  var iqmp = utils.mpDenormalize(key.part['iqmp'].data);
  out += 'Coefficient: ' + iqmp.toString('base64') + '\n';
  // Assume that we're valid as-of now
  var timestamp = new Date();
  out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
  out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
  out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';
  return Buffer$h.from(out, 'ascii');
}

function writeECDSA(key, options) {
  var out = '';
  out += 'Private-key-format: v1.3\n';

  if (key.curve === 'nistp256') {
    out += 'Algorithm: 13 (ECDSAP256SHA256)\n';
  } else if (key.curve === 'nistp384') {
    out += 'Algorithm: 14 (ECDSAP384SHA384)\n';
  } else {
    throw new Error('Unsupported curve');
  }
  var base64Key = key.part['d'].data.toString('base64');
  out += 'PrivateKey: ' + base64Key + '\n';

  // Assume that we're valid as-of now
  var timestamp = new Date();
  out += 'Created: ' + dnssecTimestamp(timestamp) + '\n';
  out += 'Publish: ' + dnssecTimestamp(timestamp) + '\n';
  out += 'Activate: ' + dnssecTimestamp(timestamp) + '\n';

  return Buffer$h.from(out, 'ascii');
}

function write$6(key, options) {
  if (privateKey.isPrivateKey(key)) {
    if (key.type === 'rsa') {
      return writeRSA(key, options);
    } else if (key.type === 'ecdsa') {
      return writeECDSA(key);
    } else {
      throw new Error('Unsupported algorithm: ' + key.type);
    }
  } else if (key$1.isKey(key)) {
    /*
     * RFC3110 requires a keyname, and a keytype, which we
     * don't really have a mechanism for specifying such
     * additional metadata.
     */
    throw new Error('Format "dnssec" only supports ' + 'writing private keys');
  } else {
    throw new Error('key is not a Key or PrivateKey');
  }
}

// Copyright 2018 Joyent, Inc.

var putty = {
  read: read$7,
  write: write$7
};

var Buffer$i = safer_1.Buffer;

function read$7(buf, options) {
  var lines = buf.toString('ascii').split(/[\r\n]+/);
  var found = false;
  var parts;
  var si = 0;
  while (si < lines.length) {
    parts = splitHeader(lines[si++]);
    if (parts && parts[0].toLowerCase() === 'putty-user-key-file-2') {
      found = true;
      break;
    }
  }
  if (!found) {
    throw new Error('No PuTTY format first line found');
  }
  var alg = parts[1];

  parts = splitHeader(lines[si++]);
  assert_1.equal(parts[0].toLowerCase(), 'encryption');

  parts = splitHeader(lines[si++]);
  assert_1.equal(parts[0].toLowerCase(), 'comment');
  var comment = parts[1];

  parts = splitHeader(lines[si++]);
  assert_1.equal(parts[0].toLowerCase(), 'public-lines');
  var publicLines = parseInt(parts[1], 10);
  if (!isFinite(publicLines) || publicLines < 0 || publicLines > lines.length) {
    throw new Error('Invalid public-lines count');
  }

  var publicBuf = Buffer$i.from(lines.slice(si, si + publicLines).join(''), 'base64');
  var keyType = rfc4253.algToKeyType(alg);
  var key = rfc4253.read(publicBuf);
  if (key.type !== keyType) {
    throw new Error('Outer key algorithm mismatch');
  }
  key.comment = comment;
  return key;
}

function splitHeader(line) {
  var idx = line.indexOf(':');
  if (idx === -1) return null;
  var header = line.slice(0, idx);
  ++idx;
  while (line[idx] === ' ') ++idx;
  var rest = line.slice(idx);
  return [header, rest];
}

function write$7(key, options) {
  assert_1.object(key);
  if (!key$1.isKey(key)) throw new Error('Must be a public key');

  var alg = rfc4253.keyTypeToAlg(key);
  var buf = rfc4253.write(key);
  var comment = key.comment || '';

  var b64 = buf.toString('base64');
  var lines = wrap(b64);

  lines.unshift('Public-Lines: ' + lines.length);
  lines.unshift('Comment: ' + comment);
  lines.unshift('Encryption: none');
  lines.unshift('PuTTY-User-Key-File-2: ' + alg);

  return Buffer$i.from(lines.join('\n') + '\n');
}

function wrap(txt, len) {
  var lines = [];
  var pos = 0;
  while (pos < txt.length) {
    lines.push(txt.slice(pos, pos + 64));
    pos += 64;
  }
  return lines;
}

// Copyright 2018 Joyent, Inc.

var auto = {
  read: read$8,
  write: write$8
};

var Buffer$j = safer_1.Buffer;

var DNSSEC_PRIVKEY_HEADER_PREFIX = 'Private-key-format: v1';

function read$8(buf, options) {
  if (typeof buf === 'string') {
    if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);
    if (buf.match(/^\s*ssh-[a-z]/)) return ssh.read(buf, options);
    if (buf.match(/^\s*ecdsa-/)) return ssh.read(buf, options);
    if (buf.match(/^putty-user-key-file-2:/i)) return putty.read(buf, options);
    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);
    buf = Buffer$j.from(buf, 'binary');
  } else {
    assert_1.buffer(buf);
    if (findPEMHeader(buf)) return pem.read(buf, options);
    if (findSSHHeader(buf)) return ssh.read(buf, options);
    if (findPuTTYHeader(buf)) return putty.read(buf, options);
    if (findDNSSECHeader(buf)) return dnssec.read(buf, options);
  }
  if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);
  throw new Error('Failed to auto-detect format of key');
}

function findPuTTYHeader(buf) {
  var offset = 0;
  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;
  if (
    offset + 22 <= buf.length &&
    buf
      .slice(offset, offset + 22)
      .toString('ascii')
      .toLowerCase() === 'putty-user-key-file-2:'
  )
    return true;
  return false;
}

function findSSHHeader(buf) {
  var offset = 0;
  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) ++offset;
  if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-') return true;
  if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-') return true;
  return false;
}

function findPEMHeader(buf) {
  var offset = 0;
  while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10)) ++offset;
  if (buf[offset] !== 45) return false;
  while (offset < buf.length && buf[offset] === 45) ++offset;
  while (offset < buf.length && buf[offset] === 32) ++offset;
  if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN') return false;
  return true;
}

function findDNSSECHeader(buf) {
  // private case first
  if (buf.length <= DNSSEC_PRIVKEY_HEADER_PREFIX.length) return false;
  var headerCheck = buf.slice(0, DNSSEC_PRIVKEY_HEADER_PREFIX.length);
  if (headerCheck.toString('ascii') === DNSSEC_PRIVKEY_HEADER_PREFIX) return true;

  // public-key RFC3110 ?
  // 'domain.com. IN KEY ...' or 'domain.com. IN DNSKEY ...'
  // skip any comment-lines
  if (typeof buf !== 'string') {
    buf = buf.toString('ascii');
  }
  var lines = buf.split('\n');
  var line = 0;
  /* JSSTYLED */
  while (lines[line].match(/^\;/)) line++;
  if (lines[line].toString('ascii').match(/\. IN KEY /)) return true;
  if (lines[line].toString('ascii').match(/\. IN DNSKEY /)) return true;
  return false;
}

function write$8(key, options) {
  throw new Error('"auto" format cannot be used for writing');
}

// Copyright 2017 Joyent, Inc.

var privateKey = PrivateKey;

var Buffer$k = safer_1.Buffer;

var generateECDSA$1 = dhe.generateECDSA;
var generateED25519$1 = dhe.generateED25519;
var KeyParseError$1 = errors.KeyParseError;

var formats = {};
formats['auto'] = auto;
formats['pem'] = pem;
formats['pkcs1'] = pkcs1;
formats['pkcs8'] = pkcs8;
formats['rfc4253'] = rfc4253;
formats['ssh-private'] = sshPrivate;
formats['openssh'] = formats['ssh-private'];
formats['ssh'] = formats['ssh-private'];
formats['dnssec'] = dnssec;

function PrivateKey(opts) {
  assert_1.object(opts, 'options');
  key$1.call(this, opts);

  this._pubCache = undefined;
}
util__default['default'].inherits(PrivateKey, key$1);

PrivateKey.formats = formats;

PrivateKey.prototype.toBuffer = function(format, options) {
  if (format === undefined) format = 'pkcs1';
  assert_1.string(format, 'format');
  assert_1.object(formats[format], 'formats[format]');
  assert_1.optionalObject(options, 'options');

  return formats[format].write(this, options);
};

PrivateKey.prototype.hash = function(algo, type) {
  return this.toPublic().hash(algo, type);
};

PrivateKey.prototype.fingerprint = function(algo, type) {
  return this.toPublic().fingerprint(algo, type);
};

PrivateKey.prototype.toPublic = function() {
  if (this._pubCache) return this._pubCache;

  var algInfo = algs.info[this.type];
  var pubParts = [];
  for (var i = 0; i < algInfo.parts.length; ++i) {
    var p = algInfo.parts[i];
    pubParts.push(this.part[p]);
  }

  this._pubCache = new key$1({
    type: this.type,
    source: this,
    parts: pubParts
  });
  if (this.comment) this._pubCache.comment = this.comment;
  return this._pubCache;
};

PrivateKey.prototype.derive = function(newType) {
  assert_1.string(newType, 'type');
  var priv, pub, pair;

  if (this.type === 'ed25519' && newType === 'curve25519') {
    priv = this.part.k.data;
    if (priv[0] === 0x00) priv = priv.slice(1);

    pair = naclFast.box.keyPair.fromSecretKey(new Uint8Array(priv));
    pub = Buffer$k.from(pair.publicKey);

    return new PrivateKey({
      type: 'curve25519',
      parts: [{ name: 'A', data: utils.mpNormalize(pub) }, { name: 'k', data: utils.mpNormalize(priv) }]
    });
  } else if (this.type === 'curve25519' && newType === 'ed25519') {
    priv = this.part.k.data;
    if (priv[0] === 0x00) priv = priv.slice(1);

    pair = naclFast.sign.keyPair.fromSeed(new Uint8Array(priv));
    pub = Buffer$k.from(pair.publicKey);

    return new PrivateKey({
      type: 'ed25519',
      parts: [{ name: 'A', data: utils.mpNormalize(pub) }, { name: 'k', data: utils.mpNormalize(priv) }]
    });
  }
  throw new Error('Key derivation not supported from ' + this.type + ' to ' + newType);
};

PrivateKey.prototype.createVerify = function(hashAlgo) {
  return this.toPublic().createVerify(hashAlgo);
};

PrivateKey.prototype.createSign = function(hashAlgo) {
  if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();
  assert_1.string(hashAlgo, 'hash algorithm');

  /* ED25519 is not supported by OpenSSL, use a javascript impl. */
  if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);
  if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');

  var v, nm, err;
  try {
    nm = hashAlgo.toUpperCase();
    v = crypto__default['default'].createSign(nm);
  } catch (e) {
    err = e;
  }
  if (v === undefined || (err instanceof Error && err.message.match(/Unknown message digest/))) {
    nm = 'RSA-';
    nm += hashAlgo.toUpperCase();
    v = crypto__default['default'].createSign(nm);
  }
  assert_1.ok(v, 'failed to create verifier');
  var oldSign = v.sign.bind(v);
  var key = this.toBuffer('pkcs1');
  var type = this.type;
  var curve = this.curve;
  v.sign = function() {
    var sig = oldSign(key);
    if (typeof sig === 'string') sig = Buffer$k.from(sig, 'binary');
    sig = signature.parse(sig, type, 'asn1');
    sig.hashAlgorithm = hashAlgo;
    sig.curve = curve;
    return sig;
  };
  return v;
};

PrivateKey.parse = function(data, format, options) {
  if (typeof data !== 'string') assert_1.buffer(data, 'data');
  if (format === undefined) format = 'auto';
  assert_1.string(format, 'format');
  if (typeof options === 'string') options = { filename: options };
  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  assert_1.optionalString(options.filename, 'options.filename');
  if (options.filename === undefined) options.filename = '(unnamed)';

  assert_1.object(formats[format], 'formats[format]');

  try {
    var k = formats[format].read(data, options);
    assert_1.ok(k instanceof PrivateKey, 'key is not a private key');
    if (!k.comment) k.comment = options.filename;
    return k;
  } catch (e) {
    if (e.name === 'KeyEncryptedError') throw e;
    throw new KeyParseError$1(options.filename, format, e);
  }
};

PrivateKey.isPrivateKey = function(obj, ver) {
  return utils.isCompatible(obj, PrivateKey, ver);
};

PrivateKey.generate = function(type, options) {
  if (options === undefined) options = {};
  assert_1.object(options, 'options');

  switch (type) {
    case 'ecdsa':
      if (options.curve === undefined) options.curve = 'nistp256';
      assert_1.string(options.curve, 'options.curve');
      return generateECDSA$1(options.curve);
    case 'ed25519':
      return generateED25519$1();
    default:
      throw new Error('Key generation not supported with key ' + 'type "' + type + '"');
  }
};

/*
 * API versions for PrivateKey:
 * [1,0] -- initial ver
 * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
 * [1,2] -- added defaultHashAlgorithm
 * [1,3] -- added derive, ed, createDH
 * [1,4] -- first tagged version
 * [1,5] -- changed ed25519 part names and format
 * [1,6] -- type arguments for hash() and fingerprint()
 */
PrivateKey.prototype._sshpkApiVersion = [1, 6];

PrivateKey._oldVersionDetect = function(obj) {
  assert_1.func(obj.toPublic);
  assert_1.func(obj.createSign);
  if (obj.derive) return [1, 3];
  if (obj.defaultHashAlgorithm) return [1, 2];
  if (obj.formats['auto']) return [1, 1];
  return [1, 0];
};

// Copyright 2017 Joyent, Inc.

var identity = Identity;

var Buffer$l = safer_1.Buffer;

/*JSSTYLED*/
var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;

var oids = {};
oids.cn = '2.5.4.3';
oids.o = '2.5.4.10';
oids.ou = '2.5.4.11';
oids.l = '2.5.4.7';
oids.s = '2.5.4.8';
oids.c = '2.5.4.6';
oids.sn = '2.5.4.4';
oids.postalCode = '2.5.4.17';
oids.serialNumber = '2.5.4.5';
oids.street = '2.5.4.9';
oids.x500UniqueIdentifier = '2.5.4.45';
oids.role = '2.5.4.72';
oids.telephoneNumber = '2.5.4.20';
oids.description = '2.5.4.13';
oids.dc = '0.9.2342.19200300.100.1.25';
oids.uid = '0.9.2342.19200300.100.1.1';
oids.mail = '0.9.2342.19200300.100.1.3';
oids.title = '2.5.4.12';
oids.gn = '2.5.4.42';
oids.initials = '2.5.4.43';
oids.pseudonym = '2.5.4.65';
oids.emailAddress = '1.2.840.113549.1.9.1';

var unoids = {};
Object.keys(oids).forEach(function(k) {
  unoids[oids[k]] = k;
});

function Identity(opts) {
  var self = this;
  assert_1.object(opts, 'options');
  assert_1.arrayOfObject(opts.components, 'options.components');
  this.components = opts.components;
  this.componentLookup = {};
  this.components.forEach(function(c) {
    if (c.name && !c.oid) c.oid = oids[c.name];
    if (c.oid && !c.name) c.name = unoids[c.oid];
    if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];
    self.componentLookup[c.name].push(c);
  });
  if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {
    this.cn = this.componentLookup.cn[0].value;
  }
  assert_1.optionalString(opts.type, 'options.type');
  if (opts.type === undefined) {
    if (
      this.components.length === 1 &&
      this.componentLookup.cn &&
      this.componentLookup.cn.length === 1 &&
      this.componentLookup.cn[0].value.match(DNS_NAME_RE)
    ) {
      this.type = 'host';
      this.hostname = this.componentLookup.cn[0].value;
    } else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {
      this.type = 'host';
      this.hostname = this.componentLookup.dc
        .map(function(c) {
          return c.value;
        })
        .join('.');
    } else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {
      this.type = 'user';
      this.uid = this.componentLookup.uid[0].value;
    } else if (
      this.componentLookup.cn &&
      this.componentLookup.cn.length === 1 &&
      this.componentLookup.cn[0].value.match(DNS_NAME_RE)
    ) {
      this.type = 'host';
      this.hostname = this.componentLookup.cn[0].value;
    } else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {
      this.type = 'user';
      this.uid = this.componentLookup.uid[0].value;
    } else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {
      this.type = 'email';
      this.email = this.componentLookup.mail[0].value;
    } else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {
      this.type = 'user';
      this.uid = this.componentLookup.cn[0].value;
    } else {
      this.type = 'unknown';
    }
  } else {
    this.type = opts.type;
    if (this.type === 'host') this.hostname = opts.hostname;
    else if (this.type === 'user') this.uid = opts.uid;
    else if (this.type === 'email') this.email = opts.email;
    else throw new Error('Unknown type ' + this.type);
  }
}

Identity.prototype.toString = function() {
  return this.components
    .map(function(c) {
      var n = c.name.toUpperCase();
      /*JSSTYLED*/
      n = n.replace(/=/g, '\\=');
      var v = c.value;
      /*JSSTYLED*/
      v = v.replace(/,/g, '\\,');
      return n + '=' + v;
    })
    .join(', ');
};

Identity.prototype.get = function(name, asArray) {
  assert_1.string(name, 'name');
  var arr = this.componentLookup[name];
  if (arr === undefined || arr.length === 0) return undefined;
  if (!asArray && arr.length > 1) throw new Error('Multiple values for attribute ' + name);
  if (!asArray) return arr[0].value;
  return arr.map(function(c) {
    return c.value;
  });
};

Identity.prototype.toArray = function(idx) {
  return this.components.map(function(c) {
    return {
      name: c.name,
      value: c.value
    };
  });
};

/*
 * These are from X.680 -- PrintableString allowed chars are in section 37.4
 * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
 * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
 * (the basic ASCII character set).
 */
/* JSSTYLED */
var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
/* JSSTYLED */
var NOT_IA5 = /[^\x00-\x7f]/;

Identity.prototype.toAsn1 = function(der, tag) {
  der.startSequence(tag);
  this.components.forEach(function(c) {
    der.startSequence(lib.Ber.Constructor | lib.Ber.Set);
    der.startSequence();
    der.writeOID(c.oid);
    /*
     * If we fit in a PrintableString, use that. Otherwise use an
     * IA5String or UTF8String.
     *
     * If this identity was parsed from a DN, use the ASN.1 types
     * from the original representation (otherwise this might not
     * be a full match for the original in some validators).
     */
    if (c.asn1type === lib.Ber.Utf8String || c.value.match(NOT_IA5)) {
      var v = Buffer$l.from(c.value, 'utf8');
      der.writeBuffer(v, lib.Ber.Utf8String);
    } else if (c.asn1type === lib.Ber.IA5String || c.value.match(NOT_PRINTABLE)) {
      der.writeString(c.value, lib.Ber.IA5String);
    } else {
      var type = lib.Ber.PrintableString;
      if (c.asn1type !== undefined) type = c.asn1type;
      der.writeString(c.value, type);
    }
    der.endSequence();
    der.endSequence();
  });
  der.endSequence();
};

function globMatch(a, b) {
  if (a === '**' || b === '**') return true;
  var aParts = a.split('.');
  var bParts = b.split('.');
  if (aParts.length !== bParts.length) return false;
  for (var i = 0; i < aParts.length; ++i) {
    if (aParts[i] === '*' || bParts[i] === '*') continue;
    if (aParts[i] !== bParts[i]) return false;
  }
  return true;
}

Identity.prototype.equals = function(other) {
  if (!Identity.isIdentity(other, [1, 0])) return false;
  if (other.components.length !== this.components.length) return false;
  for (var i = 0; i < this.components.length; ++i) {
    if (this.components[i].oid !== other.components[i].oid) return false;
    if (!globMatch(this.components[i].value, other.components[i].value)) {
      return false;
    }
  }
  return true;
};

Identity.forHost = function(hostname) {
  assert_1.string(hostname, 'hostname');
  return new Identity({
    type: 'host',
    hostname: hostname,
    components: [{ name: 'cn', value: hostname }]
  });
};

Identity.forUser = function(uid) {
  assert_1.string(uid, 'uid');
  return new Identity({
    type: 'user',
    uid: uid,
    components: [{ name: 'uid', value: uid }]
  });
};

Identity.forEmail = function(email) {
  assert_1.string(email, 'email');
  return new Identity({
    type: 'email',
    email: email,
    components: [{ name: 'mail', value: email }]
  });
};

Identity.parseDN = function(dn) {
  assert_1.string(dn, 'dn');
  var parts = [''];
  var idx = 0;
  var rem = dn;
  while (rem.length > 0) {
    var m;
    /*JSSTYLED*/
    if ((m = /^,/.exec(rem)) !== null) {
      parts[++idx] = '';
      rem = rem.slice(m[0].length);
      /*JSSTYLED*/
    } else if ((m = /^\\,/.exec(rem)) !== null) {
      parts[idx] += ',';
      rem = rem.slice(m[0].length);
      /*JSSTYLED*/
    } else if ((m = /^\\./.exec(rem)) !== null) {
      parts[idx] += m[0];
      rem = rem.slice(m[0].length);
      /*JSSTYLED*/
    } else if ((m = /^[^\\,]+/.exec(rem)) !== null) {
      parts[idx] += m[0];
      rem = rem.slice(m[0].length);
    } else {
      throw new Error('Failed to parse DN');
    }
  }
  var cmps = parts.map(function(c) {
    c = c.trim();
    var eqPos = c.indexOf('=');
    while (eqPos > 0 && c.charAt(eqPos - 1) === '\\') eqPos = c.indexOf('=', eqPos + 1);
    if (eqPos === -1) {
      throw new Error('Failed to parse DN');
    }
    /*JSSTYLED*/
    var name = c
      .slice(0, eqPos)
      .toLowerCase()
      .replace(/\\=/g, '=');
    var value = c.slice(eqPos + 1);
    return { name: name, value: value };
  });
  return new Identity({ components: cmps });
};

Identity.fromArray = function(components) {
  assert_1.arrayOfObject(components, 'components');
  components.forEach(function(cmp) {
    assert_1.object(cmp, 'component');
    assert_1.string(cmp.name, 'component.name');
    if (!Buffer$l.isBuffer(cmp.value) && !(typeof cmp.value === 'string')) {
      throw new Error('Invalid component value');
    }
  });
  return new Identity({ components: components });
};

Identity.parseAsn1 = function(der, top) {
  var components = [];
  der.readSequence(top);
  var end = der.offset + der.length;
  while (der.offset < end) {
    der.readSequence(lib.Ber.Constructor | lib.Ber.Set);
    var after = der.offset + der.length;
    der.readSequence();
    var oid = der.readOID();
    var type = der.peek();
    var value;
    switch (type) {
      case lib.Ber.PrintableString:
      case lib.Ber.IA5String:
      case lib.Ber.OctetString:
      case lib.Ber.T61String:
        value = der.readString(type);
        break;
      case lib.Ber.Utf8String:
        value = der.readString(type, true);
        value = value.toString('utf8');
        break;
      case lib.Ber.CharacterString:
      case lib.Ber.BMPString:
        value = der.readString(type, true);
        value = value.toString('utf16le');
        break;
      default:
        throw new Error('Unknown asn1 type ' + type);
    }
    components.push({ oid: oid, asn1type: type, value: value });
    der._offset = after;
  }
  der._offset = end;
  return new Identity({
    components: components
  });
};

Identity.isIdentity = function(obj, ver) {
  return utils.isCompatible(obj, Identity, ver);
};

/*
 * API versions for Identity:
 * [1,0] -- initial ver
 */
Identity.prototype._sshpkApiVersion = [1, 0];

Identity._oldVersionDetect = function(obj) {
  return [1, 0];
};

// Copyright 2017 Joyent, Inc.

var opensshCert = {
  read: read$9,
  verify: verify,
  sign: sign$1,
  signAsync: signAsync,
  write: write$9,

  /* Internal private API */
  fromBuffer: fromBuffer,
  toBuffer: toBuffer
};

var Buffer$m = safer_1.Buffer;

function verify(cert, key) {
  /*
   * We always give an issuerKey, so if our verify() is being called then
   * there was no signature. Return false.
   */
  return false;
}

var TYPES = {
  user: 1,
  host: 2
};
Object.keys(TYPES).forEach(function(k) {
  TYPES[TYPES[k]] = k;
});

var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;

function read$9(buf, options) {
  if (Buffer$m.isBuffer(buf)) buf = buf.toString('ascii');
  var parts = buf.trim().split(/[ \t\n]+/g);
  if (parts.length < 2 || parts.length > 3) throw new Error('Not a valid SSH certificate line');

  var algo = parts[0];
  var data = parts[1];

  data = Buffer$m.from(data, 'base64');
  return fromBuffer(data, algo);
}

function fromBuffer(data, algo, partial) {
  var sshbuf = new sshBuffer({ buffer: data });
  var innerAlgo = sshbuf.readString();
  if (algo !== undefined && innerAlgo !== algo) throw new Error('SSH certificate algorithm mismatch');
  if (algo === undefined) algo = innerAlgo;

  var cert = {};
  cert.signatures = {};
  cert.signatures.openssh = {};

  cert.signatures.openssh.nonce = sshbuf.readBuffer();

  var key = {};
  var parts = (key.parts = []);
  key.type = getAlg(algo);

  var partCount = algs.info[key.type].parts.length;
  while (parts.length < partCount) parts.push(sshbuf.readPart());
  assert_1.ok(parts.length >= 1, 'key must have at least one part');

  var algInfo = algs.info[key.type];
  if (key.type === 'ecdsa') {
    var res = ECDSA_ALGO.exec(algo);
    assert_1.ok(res !== null);
    assert_1.strictEqual(res[1], parts[0].data.toString());
  }

  for (var i = 0; i < algInfo.parts.length; ++i) {
    parts[i].name = algInfo.parts[i];
    if (parts[i].name !== 'curve' && algInfo.normalize !== false) {
      var p = parts[i];
      p.data = utils.mpNormalize(p.data);
    }
  }

  cert.subjectKey = new key$1(key);

  cert.serial = sshbuf.readInt64();

  var type = TYPES[sshbuf.readInt()];
  assert_1.string(type, 'valid cert type');

  cert.signatures.openssh.keyId = sshbuf.readString();

  var principals = [];
  var pbuf = sshbuf.readBuffer();
  var psshbuf = new sshBuffer({ buffer: pbuf });
  while (!psshbuf.atEnd()) principals.push(psshbuf.readString());
  if (principals.length === 0) principals = ['*'];

  cert.subjects = principals.map(function(pr) {
    if (type === 'user') return identity.forUser(pr);
    else if (type === 'host') return identity.forHost(pr);
    throw new Error('Unknown identity type ' + type);
  });

  cert.validFrom = int64ToDate(sshbuf.readInt64());
  cert.validUntil = int64ToDate(sshbuf.readInt64());

  var exts = [];
  var extbuf = new sshBuffer({ buffer: sshbuf.readBuffer() });
  var ext;
  while (!extbuf.atEnd()) {
    ext = { critical: true };
    ext.name = extbuf.readString();
    ext.data = extbuf.readBuffer();
    exts.push(ext);
  }
  extbuf = new sshBuffer({ buffer: sshbuf.readBuffer() });
  while (!extbuf.atEnd()) {
    ext = { critical: false };
    ext.name = extbuf.readString();
    ext.data = extbuf.readBuffer();
    exts.push(ext);
  }
  cert.signatures.openssh.exts = exts;

  /* reserved */
  sshbuf.readBuffer();

  var signingKeyBuf = sshbuf.readBuffer();
  cert.issuerKey = rfc4253.read(signingKeyBuf);

  /*
   * OpenSSH certs don't give the identity of the issuer, just their
   * public key. So, we use an Identity that matches anything. The
   * isSignedBy() function will later tell you if the key matches.
   */
  cert.issuer = identity.forHost('**');

  var sigBuf = sshbuf.readBuffer();
  cert.signatures.openssh.signature = signature.parse(sigBuf, cert.issuerKey.type, 'ssh');

  if (partial !== undefined) {
    partial.remainder = sshbuf.remainder();
    partial.consumed = sshbuf._offset;
  }

  return new certificate(cert);
}

function int64ToDate(buf) {
  var i = buf.readUInt32BE(0) * 4294967296;
  i += buf.readUInt32BE(4);
  var d = new Date();
  d.setTime(i * 1000);
  d.sourceInt64 = buf;
  return d;
}

function dateToInt64(date) {
  if (date.sourceInt64 !== undefined) return date.sourceInt64;
  var i = Math.round(date.getTime() / 1000);
  var upper = Math.floor(i / 4294967296);
  var lower = Math.floor(i % 4294967296);
  var buf = Buffer$m.alloc(8);
  buf.writeUInt32BE(upper, 0);
  buf.writeUInt32BE(lower, 4);
  return buf;
}

function sign$1(cert, key) {
  if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};
  try {
    var blob = toBuffer(cert, true);
  } catch (e) {
    delete cert.signatures.openssh;
    return false;
  }
  var sig = cert.signatures.openssh;
  var hashAlgo = undefined;
  if (key.type === 'rsa' || key.type === 'dsa') hashAlgo = 'sha1';
  var signer = key.createSign(hashAlgo);
  signer.write(blob);
  sig.signature = signer.sign();
  return true;
}

function signAsync(cert, signer, done) {
  if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};
  try {
    var blob = toBuffer(cert, true);
  } catch (e) {
    delete cert.signatures.openssh;
    done(e);
    return;
  }
  var sig = cert.signatures.openssh;

  signer(blob, function(err, signature) {
    if (err) {
      done(err);
      return;
    }
    try {
      /*
       * This will throw if the signature isn't of a
       * type/algo that can be used for SSH.
       */
      signature.toBuffer('ssh');
    } catch (e) {
      done(e);
      return;
    }
    sig.signature = signature;
    done();
  });
}

function write$9(cert, options) {
  if (options === undefined) options = {};

  var blob = toBuffer(cert);
  var out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');
  if (options.comment) out = out + ' ' + options.comment;
  return out;
}

function toBuffer(cert, noSig) {
  assert_1.object(cert.signatures.openssh, 'signature for openssh format');
  var sig = cert.signatures.openssh;

  if (sig.nonce === undefined) sig.nonce = crypto__default['default'].randomBytes(16);
  var buf = new sshBuffer({});
  buf.writeString(getCertType(cert.subjectKey));
  buf.writeBuffer(sig.nonce);

  var key = cert.subjectKey;
  var algInfo = algs.info[key.type];
  algInfo.parts.forEach(function(part) {
    buf.writePart(key.part[part]);
  });

  buf.writeInt64(cert.serial);

  var type = cert.subjects[0].type;
  assert_1.notStrictEqual(type, 'unknown');
  cert.subjects.forEach(function(id) {
    assert_1.strictEqual(id.type, type);
  });
  type = TYPES[type];
  buf.writeInt(type);

  if (sig.keyId === undefined) {
    sig.keyId = cert.subjects[0].type + '_' + (cert.subjects[0].uid || cert.subjects[0].hostname);
  }
  buf.writeString(sig.keyId);

  var sub = new sshBuffer({});
  cert.subjects.forEach(function(id) {
    if (type === TYPES.host) sub.writeString(id.hostname);
    else if (type === TYPES.user) sub.writeString(id.uid);
  });
  buf.writeBuffer(sub.toBuffer());

  buf.writeInt64(dateToInt64(cert.validFrom));
  buf.writeInt64(dateToInt64(cert.validUntil));

  var exts = sig.exts;
  if (exts === undefined) exts = [];

  var extbuf = new sshBuffer({});
  exts.forEach(function(ext) {
    if (ext.critical !== true) return;
    extbuf.writeString(ext.name);
    extbuf.writeBuffer(ext.data);
  });
  buf.writeBuffer(extbuf.toBuffer());

  extbuf = new sshBuffer({});
  exts.forEach(function(ext) {
    if (ext.critical === true) return;
    extbuf.writeString(ext.name);
    extbuf.writeBuffer(ext.data);
  });
  buf.writeBuffer(extbuf.toBuffer());

  /* reserved */
  buf.writeBuffer(Buffer$m.alloc(0));

  sub = rfc4253.write(cert.issuerKey);
  buf.writeBuffer(sub);

  if (!noSig) buf.writeBuffer(sig.signature.toBuffer('ssh'));

  return buf.toBuffer();
}

function getAlg(certType) {
  if (certType === 'ssh-rsa-cert-v01@openssh.com') return 'rsa';
  if (certType === 'ssh-dss-cert-v01@openssh.com') return 'dsa';
  if (certType.match(ECDSA_ALGO)) return 'ecdsa';
  if (certType === 'ssh-ed25519-cert-v01@openssh.com') return 'ed25519';
  throw new Error('Unsupported cert type ' + certType);
}

function getCertType(key) {
  if (key.type === 'rsa') return 'ssh-rsa-cert-v01@openssh.com';
  if (key.type === 'dsa') return 'ssh-dss-cert-v01@openssh.com';
  if (key.type === 'ecdsa') return 'ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com';
  if (key.type === 'ed25519') return 'ssh-ed25519-cert-v01@openssh.com';
  throw new Error('Unsupported key type ' + key.type);
}

// Copyright 2017 Joyent, Inc.

var x509 = {
  read: read$a,
  verify: verify$1,
  sign: sign$2,
  signAsync: signAsync$1,
  write: write$a
};

var Buffer$n = safer_1.Buffer;

/*
 * This file is based on RFC5280 (X.509).
 */

/* Helper to read in a single mpint */
function readMPInt$2(der, nm) {
  assert_1.strictEqual(der.peek(), lib.Ber.Integer, nm + ' is not an Integer');
  return utils.mpNormalize(der.readString(lib.Ber.Integer, true));
}

function verify$1(cert, key) {
  var sig = cert.signatures.x509;
  assert_1.object(sig, 'x509 signature');

  var algParts = sig.algo.split('-');
  if (algParts[0] !== key.type) return false;

  var blob = sig.cache;
  if (blob === undefined) {
    var der = new lib.BerWriter();
    writeTBSCert(cert, der);
    blob = der.buffer;
  }

  var verifier = key.createVerify(algParts[1]);
  verifier.write(blob);
  return verifier.verify(sig.signature);
}

function Local(i) {
  return lib.Ber.Context | lib.Ber.Constructor | i;
}

function Context(i) {
  return lib.Ber.Context | i;
}

var SIGN_ALGS = {
  'rsa-md5': '1.2.840.113549.1.1.4',
  'rsa-sha1': '1.2.840.113549.1.1.5',
  'rsa-sha256': '1.2.840.113549.1.1.11',
  'rsa-sha384': '1.2.840.113549.1.1.12',
  'rsa-sha512': '1.2.840.113549.1.1.13',
  'dsa-sha1': '1.2.840.10040.4.3',
  'dsa-sha256': '2.16.840.1.101.3.4.3.2',
  'ecdsa-sha1': '1.2.840.10045.4.1',
  'ecdsa-sha256': '1.2.840.10045.4.3.2',
  'ecdsa-sha384': '1.2.840.10045.4.3.3',
  'ecdsa-sha512': '1.2.840.10045.4.3.4',
  'ed25519-sha512': '1.3.101.112'
};
Object.keys(SIGN_ALGS).forEach(function(k) {
  SIGN_ALGS[SIGN_ALGS[k]] = k;
});
SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';
SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';

var EXTS = {
  issuerKeyId: '2.5.29.35',
  altName: '2.5.29.17',
  basicConstraints: '2.5.29.19',
  keyUsage: '2.5.29.15',
  extKeyUsage: '2.5.29.37'
};

function read$a(buf, options) {
  if (typeof buf === 'string') {
    buf = Buffer$n.from(buf, 'binary');
  }
  assert_1.buffer(buf, 'buf');

  var der = new lib.BerReader(buf);

  der.readSequence();
  if (Math.abs(der.length - der.remain) > 1) {
    throw new Error('DER sequence does not contain whole byte ' + 'stream');
  }

  var tbsStart = der.offset;
  der.readSequence();
  var sigOffset = der.offset + der.length;
  var tbsEnd = sigOffset;

  if (der.peek() === Local(0)) {
    der.readSequence(Local(0));
    var version = der.readInt();
    assert_1.ok(version <= 3, 'only x.509 versions up to v3 supported');
  }

  var cert = {};
  cert.signatures = {};
  var sig = (cert.signatures.x509 = {});
  sig.extras = {};

  cert.serial = readMPInt$2(der, 'serial');

  der.readSequence();
  var after = der.offset + der.length;
  var certAlgOid = der.readOID();
  var certAlg = SIGN_ALGS[certAlgOid];
  if (certAlg === undefined) throw new Error('unknown signature algorithm ' + certAlgOid);

  der._offset = after;
  cert.issuer = identity.parseAsn1(der);

  der.readSequence();
  cert.validFrom = readDate(der);
  cert.validUntil = readDate(der);

  cert.subjects = [identity.parseAsn1(der)];

  der.readSequence();
  after = der.offset + der.length;
  cert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);
  der._offset = after;

  /* issuerUniqueID */
  if (der.peek() === Local(1)) {
    der.readSequence(Local(1));
    sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);
    der._offset += der.length;
  }

  /* subjectUniqueID */
  if (der.peek() === Local(2)) {
    der.readSequence(Local(2));
    sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);
    der._offset += der.length;
  }

  /* extensions */
  if (der.peek() === Local(3)) {
    der.readSequence(Local(3));
    var extEnd = der.offset + der.length;
    der.readSequence();

    while (der.offset < extEnd) readExtension(cert, buf, der);

    assert_1.strictEqual(der.offset, extEnd);
  }

  assert_1.strictEqual(der.offset, sigOffset);

  der.readSequence();
  after = der.offset + der.length;
  var sigAlgOid = der.readOID();
  var sigAlg = SIGN_ALGS[sigAlgOid];
  if (sigAlg === undefined) throw new Error('unknown signature algorithm ' + sigAlgOid);
  der._offset = after;

  var sigData = der.readString(lib.Ber.BitString, true);
  if (sigData[0] === 0) sigData = sigData.slice(1);
  var algParts = sigAlg.split('-');

  sig.signature = signature.parse(sigData, algParts[0], 'asn1');
  sig.signature.hashAlgorithm = algParts[1];
  sig.algo = sigAlg;
  sig.cache = buf.slice(tbsStart, tbsEnd);

  return new certificate(cert);
}

function readDate(der) {
  if (der.peek() === lib.Ber.UTCTime) {
    return utcTimeToDate(der.readString(lib.Ber.UTCTime));
  } else if (der.peek() === lib.Ber.GeneralizedTime) {
    return gTimeToDate(der.readString(lib.Ber.GeneralizedTime));
  } else {
    throw new Error('Unsupported date format');
  }
}

function writeDate(der, date) {
  if (date.getUTCFullYear() >= 2050 || date.getUTCFullYear() < 1950) {
    der.writeString(dateToGTime(date), lib.Ber.GeneralizedTime);
  } else {
    der.writeString(dateToUTCTime(date), lib.Ber.UTCTime);
  }
}

/* RFC5280, section 4.2.1.6 (GeneralName type) */
var ALTNAME = {
  OtherName: Local(0),
  RFC822Name: Context(1),
  DNSName: Context(2),
  X400Address: Local(3),
  DirectoryName: Local(4),
  EDIPartyName: Local(5),
  URI: Context(6),
  IPAddress: Context(7),
  OID: Context(8)
};

/* RFC5280, section 4.2.1.12 (KeyPurposeId) */
var EXTPURPOSE = {
  serverAuth: '1.3.6.1.5.5.7.3.1',
  clientAuth: '1.3.6.1.5.5.7.3.2',
  codeSigning: '1.3.6.1.5.5.7.3.3',

  /* See https://github.com/joyent/oid-docs/blob/master/root.md */
  joyentDocker: '1.3.6.1.4.1.38678.1.4.1',
  joyentCmon: '1.3.6.1.4.1.38678.1.4.2'
};
var EXTPURPOSE_REV = {};
Object.keys(EXTPURPOSE).forEach(function(k) {
  EXTPURPOSE_REV[EXTPURPOSE[k]] = k;
});

var KEYUSEBITS = ['signature', 'identity', 'keyEncryption', 'encryption', 'keyAgreement', 'ca', 'crl'];

function readExtension(cert, buf, der) {
  der.readSequence();
  var after = der.offset + der.length;
  var extId = der.readOID();
  var id;
  var sig = cert.signatures.x509;
  if (!sig.extras.exts) sig.extras.exts = [];

  var critical;
  if (der.peek() === lib.Ber.Boolean) critical = der.readBoolean();

  switch (extId) {
    case EXTS.basicConstraints:
      der.readSequence(lib.Ber.OctetString);
      der.readSequence();
      var bcEnd = der.offset + der.length;
      var ca = false;
      if (der.peek() === lib.Ber.Boolean) ca = der.readBoolean();
      if (cert.purposes === undefined) cert.purposes = [];
      if (ca === true) cert.purposes.push('ca');
      var bc = { oid: extId, critical: critical };
      if (der.offset < bcEnd && der.peek() === lib.Ber.Integer) bc.pathLen = der.readInt();
      sig.extras.exts.push(bc);
      break;
    case EXTS.extKeyUsage:
      der.readSequence(lib.Ber.OctetString);
      der.readSequence();
      if (cert.purposes === undefined) cert.purposes = [];
      var ekEnd = der.offset + der.length;
      while (der.offset < ekEnd) {
        var oid = der.readOID();
        cert.purposes.push(EXTPURPOSE_REV[oid] || oid);
      }
      /*
       * This is a bit of a hack: in the case where we have a cert
       * that's only allowed to do serverAuth or clientAuth (and not
       * the other), we want to make sure all our Subjects are of
       * the right type. But we already parsed our Subjects and
       * decided if they were hosts or users earlier (since it appears
       * first in the cert).
       *
       * So we go through and mutate them into the right kind here if
       * it doesn't match. This might not be hugely beneficial, as it
       * seems that single-purpose certs are not often seen in the
       * wild.
       */
      if (cert.purposes.indexOf('serverAuth') !== -1 && cert.purposes.indexOf('clientAuth') === -1) {
        cert.subjects.forEach(function(ide) {
          if (ide.type !== 'host') {
            ide.type = 'host';
            ide.hostname = ide.uid || ide.email || ide.components[0].value;
          }
        });
      } else if (cert.purposes.indexOf('clientAuth') !== -1 && cert.purposes.indexOf('serverAuth') === -1) {
        cert.subjects.forEach(function(ide) {
          if (ide.type !== 'user') {
            ide.type = 'user';
            ide.uid = ide.hostname || ide.email || ide.components[0].value;
          }
        });
      }
      sig.extras.exts.push({ oid: extId, critical: critical });
      break;
    case EXTS.keyUsage:
      der.readSequence(lib.Ber.OctetString);
      var bits = der.readString(lib.Ber.BitString, true);
      var setBits = readBitField(bits, KEYUSEBITS);
      setBits.forEach(function(bit) {
        if (cert.purposes === undefined) cert.purposes = [];
        if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);
      });
      sig.extras.exts.push({ oid: extId, critical: critical, bits: bits });
      break;
    case EXTS.altName:
      der.readSequence(lib.Ber.OctetString);
      der.readSequence();
      var aeEnd = der.offset + der.length;
      while (der.offset < aeEnd) {
        switch (der.peek()) {
          case ALTNAME.OtherName:
          case ALTNAME.EDIPartyName:
            der.readSequence();
            der._offset += der.length;
            break;
          case ALTNAME.OID:
            der.readOID(ALTNAME.OID);
            break;
          case ALTNAME.RFC822Name:
            /* RFC822 specifies email addresses */
            var email = der.readString(ALTNAME.RFC822Name);
            id = identity.forEmail(email);
            if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
            break;
          case ALTNAME.DirectoryName:
            der.readSequence(ALTNAME.DirectoryName);
            id = identity.parseAsn1(der);
            if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
            break;
          case ALTNAME.DNSName:
            var host = der.readString(ALTNAME.DNSName);
            id = identity.forHost(host);
            if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
            break;
          default:
            der.readString(der.peek());
            break;
        }
      }
      sig.extras.exts.push({ oid: extId, critical: critical });
      break;
    default:
      sig.extras.exts.push({
        oid: extId,
        critical: critical,
        data: der.readString(lib.Ber.OctetString, true)
      });
      break;
  }

  der._offset = after;
}

var UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
function utcTimeToDate(t) {
  var m = t.match(UTCTIME_RE);
  assert_1.ok(m, 'timestamps must be in UTC');
  var d = new Date();

  var thisYear = d.getUTCFullYear();
  var century = Math.floor(thisYear / 100) * 100;

  var year = parseInt(m[1], 10);
  if (thisYear % 100 < 50 && year >= 60) year += century - 1;
  else year += century;
  d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));
  d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
  if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));
  return d;
}

var GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
function gTimeToDate(t) {
  var m = t.match(GTIME_RE);
  assert_1.ok(m);
  var d = new Date();

  d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));
  d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
  if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));
  return d;
}

function zeroPad(n, m) {
  if (m === undefined) m = 2;
  var s = '' + n;
  while (s.length < m) s = '0' + s;
  return s;
}

function dateToUTCTime(d) {
  var s = '';
  s += zeroPad(d.getUTCFullYear() % 100);
  s += zeroPad(d.getUTCMonth() + 1);
  s += zeroPad(d.getUTCDate());
  s += zeroPad(d.getUTCHours());
  s += zeroPad(d.getUTCMinutes());
  s += zeroPad(d.getUTCSeconds());
  s += 'Z';
  return s;
}

function dateToGTime(d) {
  var s = '';
  s += zeroPad(d.getUTCFullYear(), 4);
  s += zeroPad(d.getUTCMonth() + 1);
  s += zeroPad(d.getUTCDate());
  s += zeroPad(d.getUTCHours());
  s += zeroPad(d.getUTCMinutes());
  s += zeroPad(d.getUTCSeconds());
  s += 'Z';
  return s;
}

function sign$2(cert, key) {
  if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};
  var sig = cert.signatures.x509;

  sig.algo = key.type + '-' + key.defaultHashAlgorithm();
  if (SIGN_ALGS[sig.algo] === undefined) return false;

  var der = new lib.BerWriter();
  writeTBSCert(cert, der);
  var blob = der.buffer;
  sig.cache = blob;

  var signer = key.createSign();
  signer.write(blob);
  cert.signatures.x509.signature = signer.sign();

  return true;
}

function signAsync$1(cert, signer, done) {
  if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};
  var sig = cert.signatures.x509;

  var der = new lib.BerWriter();
  writeTBSCert(cert, der);
  var blob = der.buffer;
  sig.cache = blob;

  signer(blob, function(err, signature) {
    if (err) {
      done(err);
      return;
    }
    sig.algo = signature.type + '-' + signature.hashAlgorithm;
    if (SIGN_ALGS[sig.algo] === undefined) {
      done(new Error('Invalid signing algorithm "' + sig.algo + '"'));
      return;
    }
    sig.signature = signature;
    done();
  });
}

function write$a(cert, options) {
  var sig = cert.signatures.x509;
  assert_1.object(sig, 'x509 signature');

  var der = new lib.BerWriter();
  der.startSequence();
  if (sig.cache) {
    der._ensure(sig.cache.length);
    sig.cache.copy(der._buf, der._offset);
    der._offset += sig.cache.length;
  } else {
    writeTBSCert(cert, der);
  }

  der.startSequence();
  der.writeOID(SIGN_ALGS[sig.algo]);
  if (sig.algo.match(/^rsa-/)) der.writeNull();
  der.endSequence();

  var sigData = sig.signature.toBuffer('asn1');
  var data = Buffer$n.alloc(sigData.length + 1);
  data[0] = 0;
  sigData.copy(data, 1);
  der.writeBuffer(data, lib.Ber.BitString);
  der.endSequence();

  return der.buffer;
}

function writeTBSCert(cert, der) {
  var sig = cert.signatures.x509;
  assert_1.object(sig, 'x509 signature');

  der.startSequence();

  der.startSequence(Local(0));
  der.writeInt(2);
  der.endSequence();

  der.writeBuffer(utils.mpNormalize(cert.serial), lib.Ber.Integer);

  der.startSequence();
  der.writeOID(SIGN_ALGS[sig.algo]);
  if (sig.algo.match(/^rsa-/)) der.writeNull();
  der.endSequence();

  cert.issuer.toAsn1(der);

  der.startSequence();
  writeDate(der, cert.validFrom);
  writeDate(der, cert.validUntil);
  der.endSequence();

  var subject = cert.subjects[0];
  var altNames = cert.subjects.slice(1);
  subject.toAsn1(der);

  pkcs8.writePkcs8(der, cert.subjectKey);

  if (sig.extras && sig.extras.issuerUniqueID) {
    der.writeBuffer(sig.extras.issuerUniqueID, Local(1));
  }

  if (sig.extras && sig.extras.subjectUniqueID) {
    der.writeBuffer(sig.extras.subjectUniqueID, Local(2));
  }

  if (
    altNames.length > 0 ||
    subject.type === 'host' ||
    (cert.purposes !== undefined && cert.purposes.length > 0) ||
    (sig.extras && sig.extras.exts)
  ) {
    der.startSequence(Local(3));
    der.startSequence();

    var exts = [];
    if (cert.purposes !== undefined && cert.purposes.length > 0) {
      exts.push({
        oid: EXTS.basicConstraints,
        critical: true
      });
      exts.push({
        oid: EXTS.keyUsage,
        critical: true
      });
      exts.push({
        oid: EXTS.extKeyUsage,
        critical: true
      });
    }
    exts.push({ oid: EXTS.altName });
    if (sig.extras && sig.extras.exts) exts = sig.extras.exts;

    for (var i = 0; i < exts.length; ++i) {
      der.startSequence();
      der.writeOID(exts[i].oid);

      if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);

      if (exts[i].oid === EXTS.altName) {
        der.startSequence(lib.Ber.OctetString);
        der.startSequence();
        if (subject.type === 'host') {
          der.writeString(subject.hostname, Context(2));
        }
        for (var j = 0; j < altNames.length; ++j) {
          if (altNames[j].type === 'host') {
            der.writeString(altNames[j].hostname, ALTNAME.DNSName);
          } else if (altNames[j].type === 'email') {
            der.writeString(altNames[j].email, ALTNAME.RFC822Name);
          } else {
            /*
             * Encode anything else as a
             * DN style name for now.
             */
            der.startSequence(ALTNAME.DirectoryName);
            altNames[j].toAsn1(der);
            der.endSequence();
          }
        }
        der.endSequence();
        der.endSequence();
      } else if (exts[i].oid === EXTS.basicConstraints) {
        der.startSequence(lib.Ber.OctetString);
        der.startSequence();
        var ca = cert.purposes.indexOf('ca') !== -1;
        var pathLen = exts[i].pathLen;
        der.writeBoolean(ca);
        if (pathLen !== undefined) der.writeInt(pathLen);
        der.endSequence();
        der.endSequence();
      } else if (exts[i].oid === EXTS.extKeyUsage) {
        der.startSequence(lib.Ber.OctetString);
        der.startSequence();
        cert.purposes.forEach(function(purpose) {
          if (purpose === 'ca') return;
          if (KEYUSEBITS.indexOf(purpose) !== -1) return;
          var oid = purpose;
          if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];
          der.writeOID(oid);
        });
        der.endSequence();
        der.endSequence();
      } else if (exts[i].oid === EXTS.keyUsage) {
        der.startSequence(lib.Ber.OctetString);
        /*
         * If we parsed this certificate from a byte
         * stream (i.e. we didn't generate it in sshpk)
         * then we'll have a ".bits" property on the
         * ext with the original raw byte contents.
         *
         * If we have this, use it here instead of
         * regenerating it. This guarantees we output
         * the same data we parsed, so signatures still
         * validate.
         */
        if (exts[i].bits !== undefined) {
          der.writeBuffer(exts[i].bits, lib.Ber.BitString);
        } else {
          var bits = writeBitField(cert.purposes, KEYUSEBITS);
          der.writeBuffer(bits, lib.Ber.BitString);
        }
        der.endSequence();
      } else {
        der.writeBuffer(exts[i].data, lib.Ber.OctetString);
      }

      der.endSequence();
    }

    der.endSequence();
    der.endSequence();
  }

  der.endSequence();
}

/*
 * Reads an ASN.1 BER bitfield out of the Buffer produced by doing
 * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw
 * contents of the BitString tag, which is a count of unused bits followed by
 * the bits as a right-padded byte string.
 *
 * `bits` is the Buffer, `bitIndex` should contain an array of string names
 * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.
 *
 * Returns an array of Strings, the names of the bits that were set to 1.
 */
function readBitField(bits, bitIndex) {
  var bitLen = 8 * (bits.length - 1) - bits[0];
  var setBits = {};
  for (var i = 0; i < bitLen; ++i) {
    var byteN = 1 + Math.floor(i / 8);
    var bit = 7 - (i % 8);
    var mask = 1 << bit;
    var bitVal = (bits[byteN] & mask) !== 0;
    var name = bitIndex[i];
    if (bitVal && typeof name === 'string') {
      setBits[name] = true;
    }
  }
  return Object.keys(setBits);
}

/*
 * `setBits` is an array of strings, containing the names for each bit that
 * sould be set to 1. `bitIndex` is same as in `readBitField()`.
 *
 * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.
 */
function writeBitField(setBits, bitIndex) {
  var bitLen = bitIndex.length;
  var blen = Math.ceil(bitLen / 8);
  var unused = blen * 8 - bitLen;
  var bits = Buffer$n.alloc(1 + blen); // zero-filled
  bits[0] = unused;
  for (var i = 0; i < bitLen; ++i) {
    var byteN = 1 + Math.floor(i / 8);
    var bit = 7 - (i % 8);
    var mask = 1 << bit;
    var name = bitIndex[i];
    if (name === undefined) continue;
    var bitVal = setBits.indexOf(name) !== -1;
    if (bitVal) {
      bits[byteN] |= mask;
    }
  }
  return bits;
}

// Copyright 2016 Joyent, Inc.

var x509Pem = {
  read: read$b,
  verify: x509.verify,
  sign: x509.sign,
  write: write$b
};

var Buffer$o = safer_1.Buffer;

function read$b(buf, options) {
  if (typeof buf !== 'string') {
    assert_1.buffer(buf, 'buf');
    buf = buf.toString('ascii');
  }

  var lines = buf.trim().split(/[\r\n]+/g);

  var m;
  var si = -1;
  while (!m && si < lines.length) {
    m = lines[++si].match(
      /*JSSTYLED*/
      /[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/
    );
  }
  assert_1.ok(m, 'invalid PEM header');

  var m2;
  var ei = lines.length;
  while (!m2 && ei > 0) {
    m2 = lines[--ei].match(
      /*JSSTYLED*/
      /[-]+[ ]*END CERTIFICATE[ ]*[-]+/
    );
  }
  assert_1.ok(m2, 'invalid PEM footer');

  lines = lines.slice(si, ei + 1);

  var headers = {};
  while (true) {
    lines = lines.slice(1);
    m = lines[0].match(
      /*JSSTYLED*/
      /^([A-Za-z0-9-]+): (.+)$/
    );
    if (!m) break;
    headers[m[1].toLowerCase()] = m[2];
  }

  /* Chop off the first and last lines */
  lines = lines.slice(0, -1).join('');
  buf = Buffer$o.from(lines, 'base64');

  return x509.read(buf, options);
}

function write$b(cert, options) {
  var dbuf = x509.write(cert, options);

  var header = 'CERTIFICATE';
  var tmp = dbuf.toString('base64');
  var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;
  var buf = Buffer$o.alloc(len);
  var o = 0;
  o += buf.write('-----BEGIN ' + header + '-----\n', o);
  for (var i = 0; i < tmp.length; ) {
    var limit = i + 64;
    if (limit > tmp.length) limit = tmp.length;
    o += buf.write(tmp.slice(i, limit), o);
    buf[o++] = 10;
    i = limit;
  }
  o += buf.write('-----END ' + header + '-----\n', o);

  return buf.slice(0, o);
}

// Copyright 2016 Joyent, Inc.

var certificate = Certificate;

var Buffer$p = safer_1.Buffer;

var formats$1 = {};
formats$1['openssh'] = opensshCert;
formats$1['x509'] = x509;
formats$1['pem'] = x509Pem;

var CertificateParseError$1 = errors.CertificateParseError;
var InvalidAlgorithmError$2 = errors.InvalidAlgorithmError;

function Certificate(opts) {
  assert_1.object(opts, 'options');
  assert_1.arrayOfObject(opts.subjects, 'options.subjects');
  utils.assertCompatible(opts.subjects[0], identity, [1, 0], 'options.subjects');
  utils.assertCompatible(opts.subjectKey, key$1, [1, 0], 'options.subjectKey');
  utils.assertCompatible(opts.issuer, identity, [1, 0], 'options.issuer');
  if (opts.issuerKey !== undefined) {
    utils.assertCompatible(opts.issuerKey, key$1, [1, 0], 'options.issuerKey');
  }
  assert_1.object(opts.signatures, 'options.signatures');
  assert_1.buffer(opts.serial, 'options.serial');
  assert_1.date(opts.validFrom, 'options.validFrom');
  assert_1.date(opts.validUntil, 'optons.validUntil');

  assert_1.optionalArrayOfString(opts.purposes, 'options.purposes');

  this._hashCache = {};

  this.subjects = opts.subjects;
  this.issuer = opts.issuer;
  this.subjectKey = opts.subjectKey;
  this.issuerKey = opts.issuerKey;
  this.signatures = opts.signatures;
  this.serial = opts.serial;
  this.validFrom = opts.validFrom;
  this.validUntil = opts.validUntil;
  this.purposes = opts.purposes;
}

Certificate.formats = formats$1;

Certificate.prototype.toBuffer = function(format, options) {
  if (format === undefined) format = 'x509';
  assert_1.string(format, 'format');
  assert_1.object(formats$1[format], 'formats[format]');
  assert_1.optionalObject(options, 'options');

  return formats$1[format].write(this, options);
};

Certificate.prototype.toString = function(format, options) {
  if (format === undefined) format = 'pem';
  return this.toBuffer(format, options).toString();
};

Certificate.prototype.fingerprint = function(algo) {
  if (algo === undefined) algo = 'sha256';
  assert_1.string(algo, 'algorithm');
  var opts = {
    type: 'certificate',
    hash: this.hash(algo),
    algorithm: algo
  };
  return new fingerprint(opts);
};

Certificate.prototype.hash = function(algo) {
  assert_1.string(algo, 'algorithm');
  algo = algo.toLowerCase();
  if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError$2(algo);

  if (this._hashCache[algo]) return this._hashCache[algo];

  var hash = crypto__default['default']
    .createHash(algo)
    .update(this.toBuffer('x509'))
    .digest();
  this._hashCache[algo] = hash;
  return hash;
};

Certificate.prototype.isExpired = function(when) {
  if (when === undefined) when = new Date();
  return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());
};

Certificate.prototype.isSignedBy = function(issuerCert) {
  utils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');

  if (!this.issuer.equals(issuerCert.subjects[0])) return false;
  if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf('ca') === -1) {
    return false;
  }

  return this.isSignedByKey(issuerCert.subjectKey);
};

Certificate.prototype.getExtension = function(keyOrOid) {
  assert_1.string(keyOrOid, 'keyOrOid');
  var ext = this.getExtensions().filter(function(maybeExt) {
    if (maybeExt.format === 'x509') return maybeExt.oid === keyOrOid;
    if (maybeExt.format === 'openssh') return maybeExt.name === keyOrOid;
    return false;
  })[0];
  return ext;
};

Certificate.prototype.getExtensions = function() {
  var exts = [];
  var x509 = this.signatures.x509;
  if (x509 && x509.extras && x509.extras.exts) {
    x509.extras.exts.forEach(function(ext) {
      ext.format = 'x509';
      exts.push(ext);
    });
  }
  var openssh = this.signatures.openssh;
  if (openssh && openssh.exts) {
    openssh.exts.forEach(function(ext) {
      ext.format = 'openssh';
      exts.push(ext);
    });
  }
  return exts;
};

Certificate.prototype.isSignedByKey = function(issuerKey) {
  utils.assertCompatible(issuerKey, key$1, [1, 2], 'issuerKey');

  if (this.issuerKey !== undefined) {
    return this.issuerKey.fingerprint('sha512').matches(issuerKey);
  }

  var fmt = Object.keys(this.signatures)[0];
  var valid = formats$1[fmt].verify(this, issuerKey);
  if (valid) this.issuerKey = issuerKey;
  return valid;
};

Certificate.prototype.signWith = function(key) {
  utils.assertCompatible(key, privateKey, [1, 2], 'key');
  var fmts = Object.keys(formats$1);
  var didOne = false;
  for (var i = 0; i < fmts.length; ++i) {
    if (fmts[i] !== 'pem') {
      var ret = formats$1[fmts[i]].sign(this, key);
      if (ret === true) didOne = true;
    }
  }
  if (!didOne) {
    throw new Error('Failed to sign the certificate for any ' + 'available certificate formats');
  }
};

Certificate.createSelfSigned = function(subjectOrSubjects, key, options) {
  var subjects;
  if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;
  else subjects = [subjectOrSubjects];

  assert_1.arrayOfObject(subjects);
  subjects.forEach(function(subject) {
    utils.assertCompatible(subject, identity, [1, 0], 'subject');
  });

  utils.assertCompatible(key, privateKey, [1, 2], 'private key');

  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  assert_1.optionalObject(options.validFrom, 'options.validFrom');
  assert_1.optionalObject(options.validUntil, 'options.validUntil');
  var validFrom = options.validFrom;
  var validUntil = options.validUntil;
  if (validFrom === undefined) validFrom = new Date();
  if (validUntil === undefined) {
    assert_1.optionalNumber(options.lifetime, 'options.lifetime');
    var lifetime = options.lifetime;
    if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;
    validUntil = new Date();
    validUntil.setTime(validUntil.getTime() + lifetime * 1000);
  }
  assert_1.optionalBuffer(options.serial, 'options.serial');
  var serial = options.serial;
  if (serial === undefined) serial = Buffer$p.from('0000000000000001', 'hex');

  var purposes = options.purposes;
  if (purposes === undefined) purposes = [];

  if (purposes.indexOf('signature') === -1) purposes.push('signature');

  /* Self-signed certs are always CAs. */
  if (purposes.indexOf('ca') === -1) purposes.push('ca');
  if (purposes.indexOf('crl') === -1) purposes.push('crl');

  /*
   * If we weren't explicitly given any other purposes, do the sensible
   * thing and add some basic ones depending on the subject type.
   */
  if (purposes.length <= 3) {
    var hostSubjects = subjects.filter(function(subject) {
      return subject.type === 'host';
    });
    var userSubjects = subjects.filter(function(subject) {
      return subject.type === 'user';
    });
    if (hostSubjects.length > 0) {
      if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');
    }
    if (userSubjects.length > 0) {
      if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');
    }
    if (userSubjects.length > 0 || hostSubjects.length > 0) {
      if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');
      if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');
    }
  }

  var cert = new Certificate({
    subjects: subjects,
    issuer: subjects[0],
    subjectKey: key.toPublic(),
    issuerKey: key.toPublic(),
    signatures: {},
    serial: serial,
    validFrom: validFrom,
    validUntil: validUntil,
    purposes: purposes
  });
  cert.signWith(key);

  return cert;
};

Certificate.create = function(subjectOrSubjects, key, issuer, issuerKey, options) {
  var subjects;
  if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;
  else subjects = [subjectOrSubjects];

  assert_1.arrayOfObject(subjects);
  subjects.forEach(function(subject) {
    utils.assertCompatible(subject, identity, [1, 0], 'subject');
  });

  utils.assertCompatible(key, key$1, [1, 0], 'key');
  if (privateKey.isPrivateKey(key)) key = key.toPublic();
  utils.assertCompatible(issuer, identity, [1, 0], 'issuer');
  utils.assertCompatible(issuerKey, privateKey, [1, 2], 'issuer key');

  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  assert_1.optionalObject(options.validFrom, 'options.validFrom');
  assert_1.optionalObject(options.validUntil, 'options.validUntil');
  var validFrom = options.validFrom;
  var validUntil = options.validUntil;
  if (validFrom === undefined) validFrom = new Date();
  if (validUntil === undefined) {
    assert_1.optionalNumber(options.lifetime, 'options.lifetime');
    var lifetime = options.lifetime;
    if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;
    validUntil = new Date();
    validUntil.setTime(validUntil.getTime() + lifetime * 1000);
  }
  assert_1.optionalBuffer(options.serial, 'options.serial');
  var serial = options.serial;
  if (serial === undefined) serial = Buffer$p.from('0000000000000001', 'hex');

  var purposes = options.purposes;
  if (purposes === undefined) purposes = [];

  if (purposes.indexOf('signature') === -1) purposes.push('signature');

  if (options.ca === true) {
    if (purposes.indexOf('ca') === -1) purposes.push('ca');
    if (purposes.indexOf('crl') === -1) purposes.push('crl');
  }

  var hostSubjects = subjects.filter(function(subject) {
    return subject.type === 'host';
  });
  var userSubjects = subjects.filter(function(subject) {
    return subject.type === 'user';
  });
  if (hostSubjects.length > 0) {
    if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');
  }
  if (userSubjects.length > 0) {
    if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');
  }
  if (userSubjects.length > 0 || hostSubjects.length > 0) {
    if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');
    if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');
  }

  var cert = new Certificate({
    subjects: subjects,
    issuer: issuer,
    subjectKey: key,
    issuerKey: issuerKey.toPublic(),
    signatures: {},
    serial: serial,
    validFrom: validFrom,
    validUntil: validUntil,
    purposes: purposes
  });
  cert.signWith(issuerKey);

  return cert;
};

Certificate.parse = function(data, format, options) {
  if (typeof data !== 'string') assert_1.buffer(data, 'data');
  if (format === undefined) format = 'auto';
  assert_1.string(format, 'format');
  if (typeof options === 'string') options = { filename: options };
  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  assert_1.optionalString(options.filename, 'options.filename');
  if (options.filename === undefined) options.filename = '(unnamed)';

  assert_1.object(formats$1[format], 'formats[format]');

  try {
    var k = formats$1[format].read(data, options);
    return k;
  } catch (e) {
    throw new CertificateParseError$1(options.filename, format, e);
  }
};

Certificate.isCertificate = function(obj, ver) {
  return utils.isCompatible(obj, Certificate, ver);
};

/*
 * API versions for Certificate:
 * [1,0] -- initial ver
 * [1,1] -- openssh format now unpacks extensions
 */
Certificate.prototype._sshpkApiVersion = [1, 1];

Certificate._oldVersionDetect = function(obj) {
  return [1, 0];
};

// Copyright 2018 Joyent, Inc.

var fingerprint = Fingerprint;

var Buffer$q = safer_1.Buffer;

var FingerprintFormatError$1 = errors.FingerprintFormatError;
var InvalidAlgorithmError$3 = errors.InvalidAlgorithmError;

function Fingerprint(opts) {
  assert_1.object(opts, 'options');
  assert_1.string(opts.type, 'options.type');
  assert_1.buffer(opts.hash, 'options.hash');
  assert_1.string(opts.algorithm, 'options.algorithm');

  this.algorithm = opts.algorithm.toLowerCase();
  if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError$3(this.algorithm);

  this.hash = opts.hash;
  this.type = opts.type;
  this.hashType = opts.hashType;
}

Fingerprint.prototype.toString = function(format) {
  if (format === undefined) {
    if (this.algorithm === 'md5' || this.hashType === 'spki') format = 'hex';
    else format = 'base64';
  }
  assert_1.string(format);

  switch (format) {
    case 'hex':
      if (this.hashType === 'spki') return this.hash.toString('hex');
      return addColons(this.hash.toString('hex'));
    case 'base64':
      if (this.hashType === 'spki') return this.hash.toString('base64');
      return sshBase64Format(this.algorithm, this.hash.toString('base64'));
    default:
      throw new FingerprintFormatError$1(undefined, format);
  }
};

Fingerprint.prototype.matches = function(other) {
  assert_1.object(other, 'key or certificate');
  if (this.type === 'key' && this.hashType !== 'ssh') {
    utils.assertCompatible(other, key$1, [1, 7], 'key with spki');
    if (privateKey.isPrivateKey(other)) {
      utils.assertCompatible(other, privateKey, [1, 6], 'privatekey with spki support');
    }
  } else if (this.type === 'key') {
    utils.assertCompatible(other, key$1, [1, 0], 'key');
  } else {
    utils.assertCompatible(other, certificate, [1, 0], 'certificate');
  }

  var theirHash = other.hash(this.algorithm, this.hashType);
  var theirHash2 = crypto__default['default']
    .createHash(this.algorithm)
    .update(theirHash)
    .digest('base64');

  if (this.hash2 === undefined)
    this.hash2 = crypto__default['default']
      .createHash(this.algorithm)
      .update(this.hash)
      .digest('base64');

  return this.hash2 === theirHash2;
};

/*JSSTYLED*/
var base64RE = /^[A-Za-z0-9+\/=]+$/;
/*JSSTYLED*/
var hexRE = /^[a-fA-F0-9]+$/;

Fingerprint.parse = function(fp, options) {
  assert_1.string(fp, 'fingerprint');

  var alg, hash, enAlgs;
  if (Array.isArray(options)) {
    enAlgs = options;
    options = {};
  }
  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  if (options.enAlgs !== undefined) enAlgs = options.enAlgs;
  if (options.algorithms !== undefined) enAlgs = options.algorithms;
  assert_1.optionalArrayOfString(enAlgs, 'algorithms');

  var hashType = 'ssh';
  if (options.hashType !== undefined) hashType = options.hashType;
  assert_1.string(hashType, 'options.hashType');

  var parts = fp.split(':');
  if (parts.length == 2) {
    alg = parts[0].toLowerCase();
    if (!base64RE.test(parts[1])) throw new FingerprintFormatError$1(fp);
    try {
      hash = Buffer$q.from(parts[1], 'base64');
    } catch (e) {
      throw new FingerprintFormatError$1(fp);
    }
  } else if (parts.length > 2) {
    alg = 'md5';
    if (parts[0].toLowerCase() === 'md5') parts = parts.slice(1);
    parts = parts.map(function(p) {
      while (p.length < 2) p = '0' + p;
      if (p.length > 2) throw new FingerprintFormatError$1(fp);
      return p;
    });
    parts = parts.join('');
    if (!hexRE.test(parts) || parts.length % 2 !== 0) throw new FingerprintFormatError$1(fp);
    try {
      hash = Buffer$q.from(parts, 'hex');
    } catch (e) {
      throw new FingerprintFormatError$1(fp);
    }
  } else {
    if (hexRE.test(fp)) {
      hash = Buffer$q.from(fp, 'hex');
    } else if (base64RE.test(fp)) {
      hash = Buffer$q.from(fp, 'base64');
    } else {
      throw new FingerprintFormatError$1(fp);
    }

    switch (hash.length) {
      case 32:
        alg = 'sha256';
        break;
      case 16:
        alg = 'md5';
        break;
      case 20:
        alg = 'sha1';
        break;
      case 64:
        alg = 'sha512';
        break;
      default:
        throw new FingerprintFormatError$1(fp);
    }

    /* Plain hex/base64: guess it's probably SPKI unless told. */
    if (options.hashType === undefined) hashType = 'spki';
  }

  if (alg === undefined) throw new FingerprintFormatError$1(fp);

  if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError$3(alg);

  if (enAlgs !== undefined) {
    enAlgs = enAlgs.map(function(a) {
      return a.toLowerCase();
    });
    if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError$3(alg);
  }

  return new Fingerprint({
    algorithm: alg,
    hash: hash,
    type: options.type || 'key',
    hashType: hashType
  });
};

function addColons(s) {
  /*JSSTYLED*/
  return s.replace(/(.{2})(?=.)/g, '$1:');
}

function base64Strip(s) {
  /*JSSTYLED*/
  return s.replace(/=*$/, '');
}

function sshBase64Format(alg, h) {
  return alg.toUpperCase() + ':' + base64Strip(h);
}

Fingerprint.isFingerprint = function(obj, ver) {
  return utils.isCompatible(obj, Fingerprint, ver);
};

/*
 * API versions for Fingerprint:
 * [1,0] -- initial ver
 * [1,1] -- first tagged ver
 * [1,2] -- hashType and spki support
 */
Fingerprint.prototype._sshpkApiVersion = [1, 2];

Fingerprint._oldVersionDetect = function(obj) {
  assert_1.func(obj.toString);
  assert_1.func(obj.matches);
  return [1, 0];
};

// Copyright 2018 Joyent, Inc.

var key$1 = Key;

var DiffieHellman$1 = dhe.DiffieHellman;

var edCompat$1;

try {
  edCompat$1 = edCompat;
} catch (e) {
  /* Just continue through, and bail out if we try to use it. */
}

var InvalidAlgorithmError$4 = errors.InvalidAlgorithmError;
var KeyParseError$2 = errors.KeyParseError;

var formats$2 = {};
formats$2['auto'] = auto;
formats$2['pem'] = pem;
formats$2['pkcs1'] = pkcs1;
formats$2['pkcs8'] = pkcs8;
formats$2['rfc4253'] = rfc4253;
formats$2['ssh'] = ssh;
formats$2['ssh-private'] = sshPrivate;
formats$2['openssh'] = formats$2['ssh-private'];
formats$2['dnssec'] = dnssec;
formats$2['putty'] = putty;
formats$2['ppk'] = formats$2['putty'];

function Key(opts) {
  assert_1.object(opts, 'options');
  assert_1.arrayOfObject(opts.parts, 'options.parts');
  assert_1.string(opts.type, 'options.type');
  assert_1.optionalString(opts.comment, 'options.comment');

  var algInfo = algs.info[opts.type];
  if (typeof algInfo !== 'object') throw new InvalidAlgorithmError$4(opts.type);

  var partLookup = {};
  for (var i = 0; i < opts.parts.length; ++i) {
    var part = opts.parts[i];
    partLookup[part.name] = part;
  }

  this.type = opts.type;
  this.parts = opts.parts;
  this.part = partLookup;
  this.comment = undefined;
  this.source = opts.source;

  /* for speeding up hashing/fingerprint operations */
  this._rfc4253Cache = opts._rfc4253Cache;
  this._hashCache = {};

  var sz;
  this.curve = undefined;
  if (this.type === 'ecdsa') {
    var curve = this.part.curve.data.toString();
    this.curve = curve;
    sz = algs.curves[curve].size;
  } else if (this.type === 'ed25519' || this.type === 'curve25519') {
    sz = 256;
    this.curve = 'curve25519';
  } else {
    var szPart = this.part[algInfo.sizePart];
    sz = szPart.data.length;
    sz = sz * 8 - utils.countZeros(szPart.data);
  }
  this.size = sz;
}

Key.formats = formats$2;

Key.prototype.toBuffer = function(format, options) {
  if (format === undefined) format = 'ssh';
  assert_1.string(format, 'format');
  assert_1.object(formats$2[format], 'formats[format]');
  assert_1.optionalObject(options, 'options');

  if (format === 'rfc4253') {
    if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats$2['rfc4253'].write(this);
    return this._rfc4253Cache;
  }

  return formats$2[format].write(this, options);
};

Key.prototype.toString = function(format, options) {
  return this.toBuffer(format, options).toString();
};

Key.prototype.hash = function(algo, type) {
  assert_1.string(algo, 'algorithm');
  assert_1.optionalString(type, 'type');
  if (type === undefined) type = 'ssh';
  algo = algo.toLowerCase();
  if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError$4(algo);

  var cacheKey = algo + '||' + type;
  if (this._hashCache[cacheKey]) return this._hashCache[cacheKey];

  var buf;
  if (type === 'ssh') {
    buf = this.toBuffer('rfc4253');
  } else if (type === 'spki') {
    buf = formats$2.pkcs8.pkcs8ToBuffer(this);
  } else {
    throw new Error('Hash type ' + type + ' not supported');
  }
  var hash = crypto__default['default']
    .createHash(algo)
    .update(buf)
    .digest();
  this._hashCache[cacheKey] = hash;
  return hash;
};

Key.prototype.fingerprint = function(algo, type) {
  if (algo === undefined) algo = 'sha256';
  if (type === undefined) type = 'ssh';
  assert_1.string(algo, 'algorithm');
  assert_1.string(type, 'type');
  var opts = {
    type: 'key',
    hash: this.hash(algo, type),
    algorithm: algo,
    hashType: type
  };
  return new fingerprint(opts);
};

Key.prototype.defaultHashAlgorithm = function() {
  var hashAlgo = 'sha1';
  if (this.type === 'rsa') hashAlgo = 'sha256';
  if (this.type === 'dsa' && this.size > 1024) hashAlgo = 'sha256';
  if (this.type === 'ed25519') hashAlgo = 'sha512';
  if (this.type === 'ecdsa') {
    if (this.size <= 256) hashAlgo = 'sha256';
    else if (this.size <= 384) hashAlgo = 'sha384';
    else hashAlgo = 'sha512';
  }
  return hashAlgo;
};

Key.prototype.createVerify = function(hashAlgo) {
  if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();
  assert_1.string(hashAlgo, 'hash algorithm');

  /* ED25519 is not supported by OpenSSL, use a javascript impl. */
  if (this.type === 'ed25519' && edCompat$1 !== undefined) return new edCompat$1.Verifier(this, hashAlgo);
  if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');

  var v, nm, err;
  try {
    nm = hashAlgo.toUpperCase();
    v = crypto__default['default'].createVerify(nm);
  } catch (e) {
    err = e;
  }
  if (v === undefined || (err instanceof Error && err.message.match(/Unknown message digest/))) {
    nm = 'RSA-';
    nm += hashAlgo.toUpperCase();
    v = crypto__default['default'].createVerify(nm);
  }
  assert_1.ok(v, 'failed to create verifier');
  var oldVerify = v.verify.bind(v);
  var key = this.toBuffer('pkcs8');
  var curve = this.curve;
  var self = this;
  v.verify = function(signature$1, fmt) {
    if (signature.isSignature(signature$1, [2, 0])) {
      if (signature$1.type !== self.type) return false;
      if (signature$1.hashAlgorithm && signature$1.hashAlgorithm !== hashAlgo) return false;
      if (signature$1.curve && self.type === 'ecdsa' && signature$1.curve !== curve) return false;
      return oldVerify(key, signature$1.toBuffer('asn1'));
    } else if (typeof signature$1 === 'string' || Buffer.isBuffer(signature$1)) {
      return oldVerify(key, signature$1, fmt);

      /*
       * Avoid doing this on valid arguments, walking the prototype
       * chain can be quite slow.
       */
    } else if (signature.isSignature(signature$1, [1, 0])) {
      throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');
    } else {
      throw new TypeError('signature must be a string, ' + 'Buffer, or Signature object');
    }
  };
  return v;
};

Key.prototype.createDiffieHellman = function() {
  if (this.type === 'rsa') throw new Error('RSA keys do not support Diffie-Hellman');

  return new DiffieHellman$1(this);
};
Key.prototype.createDH = Key.prototype.createDiffieHellman;

Key.parse = function(data, format, options) {
  if (typeof data !== 'string') assert_1.buffer(data, 'data');
  if (format === undefined) format = 'auto';
  assert_1.string(format, 'format');
  if (typeof options === 'string') options = { filename: options };
  assert_1.optionalObject(options, 'options');
  if (options === undefined) options = {};
  assert_1.optionalString(options.filename, 'options.filename');
  if (options.filename === undefined) options.filename = '(unnamed)';

  assert_1.object(formats$2[format], 'formats[format]');

  try {
    var k = formats$2[format].read(data, options);
    if (k instanceof privateKey) k = k.toPublic();
    if (!k.comment) k.comment = options.filename;
    return k;
  } catch (e) {
    if (e.name === 'KeyEncryptedError') throw e;
    throw new KeyParseError$2(options.filename, format, e);
  }
};

Key.isKey = function(obj, ver) {
  return utils.isCompatible(obj, Key, ver);
};

/*
 * API versions for Key:
 * [1,0] -- initial ver, may take Signature for createVerify or may not
 * [1,1] -- added pkcs1, pkcs8 formats
 * [1,2] -- added auto, ssh-private, openssh formats
 * [1,3] -- added defaultHashAlgorithm
 * [1,4] -- added ed support, createDH
 * [1,5] -- first explicitly tagged version
 * [1,6] -- changed ed25519 part names
 * [1,7] -- spki hash types
 */
Key.prototype._sshpkApiVersion = [1, 7];

Key._oldVersionDetect = function(obj) {
  assert_1.func(obj.toBuffer);
  assert_1.func(obj.fingerprint);
  if (obj.createDH) return [1, 4];
  if (obj.defaultHashAlgorithm) return [1, 3];
  if (obj.formats['auto']) return [1, 2];
  if (obj.formats['pkcs1']) return [1, 1];
  return [1, 0];
};

// Copyright 2015 Joyent, Inc.

var lib$1 = {
  /* top-level classes */
  Key: key$1,
  parseKey: key$1.parse,
  Fingerprint: fingerprint,
  parseFingerprint: fingerprint.parse,
  Signature: signature,
  parseSignature: signature.parse,
  PrivateKey: privateKey,
  parsePrivateKey: privateKey.parse,
  generatePrivateKey: privateKey.generate,
  Certificate: certificate,
  parseCertificate: certificate.parse,
  createSelfSignedCertificate: certificate.createSelfSigned,
  createCertificate: certificate.create,
  Identity: identity,
  identityFromDN: identity.parseDN,
  identityForHost: identity.forHost,
  identityForUser: identity.forUser,
  identityForEmail: identity.forEmail,
  identityFromArray: identity.fromArray,

  /* errors */
  FingerprintFormatError: errors.FingerprintFormatError,
  InvalidAlgorithmError: errors.InvalidAlgorithmError,
  KeyParseError: errors.KeyParseError,
  SignatureParseError: errors.SignatureParseError,
  KeyEncryptedError: errors.KeyEncryptedError,
  CertificateParseError: errors.CertificateParseError
};

// Copyright 2012 Joyent, Inc.  All rights reserved.

var HASH_ALGOS = {
  sha1: true,
  sha256: true,
  sha512: true
};

var PK_ALGOS = {
  rsa: true,
  dsa: true,
  ecdsa: true
};

function HttpSignatureError(message, caller) {
  if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);

  this.message = message;
  this.name = caller.name;
}
util__default['default'].inherits(HttpSignatureError, Error);

function InvalidAlgorithmError$5(message) {
  HttpSignatureError.call(this, message, InvalidAlgorithmError$5);
}
util__default['default'].inherits(InvalidAlgorithmError$5, HttpSignatureError);

function validateAlgorithm(algorithm) {
  var alg = algorithm.toLowerCase().split('-');

  if (alg.length !== 2) {
    throw new InvalidAlgorithmError$5(alg[0].toUpperCase() + ' is not a ' + 'valid algorithm');
  }

  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {
    throw new InvalidAlgorithmError$5(alg[0].toUpperCase() + ' type keys ' + 'are not supported');
  }

  if (!HASH_ALGOS[alg[1]]) {
    throw new InvalidAlgorithmError$5(alg[1].toUpperCase() + ' is not a ' + 'supported hash algorithm');
  }

  return alg;
}

///--- API

var utils$1 = {
  HASH_ALGOS: HASH_ALGOS,
  PK_ALGOS: PK_ALGOS,

  HttpSignatureError: HttpSignatureError,
  InvalidAlgorithmError: InvalidAlgorithmError$5,

  validateAlgorithm: validateAlgorithm,

  /**
   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.
   *
   * The intent of this module is to interoperate with OpenSSL only,
   * specifically the node crypto module's `verify` method.
   *
   * @param {String} key an OpenSSH public key.
   * @return {String} PEM encoded form of the RSA public key.
   * @throws {TypeError} on bad input.
   * @throws {Error} on invalid ssh key formatted data.
   */
  sshKeyToPEM: function sshKeyToPEM(key) {
    assert_1.string(key, 'ssh_key');

    var k = lib$1.parseKey(key, 'ssh');
    return k.toString('pem');
  },

  /**
   * Generates an OpenSSH fingerprint from an ssh public key.
   *
   * @param {String} key an OpenSSH public key.
   * @return {String} key fingerprint.
   * @throws {TypeError} on bad input.
   * @throws {Error} if what you passed doesn't look like an ssh public key.
   */
  fingerprint: function fingerprint(key) {
    assert_1.string(key, 'ssh_key');

    var k = lib$1.parseKey(key, 'ssh');
    return k.fingerprint('md5').toString('hex');
  },

  /**
   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)
   *
   * The reverse of the above function.
   */
  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
    assert_1.equal('string', typeof pem, 'typeof pem');

    var k = lib$1.parseKey(pem, 'pem');
    k.comment = comment;
    return k.toString('ssh');
  }
};

var HttpSignatureError$1 = utils$1.HttpSignatureError;
var InvalidAlgorithmError$6 = utils$1.InvalidAlgorithmError;
var validateAlgorithm$1 = utils$1.validateAlgorithm;

var State = {
  New: 0,
  Params: 1
};

var ParamsState = {
  Name: 0,
  Quote: 1,
  Value: 2,
  Comma: 3
};

///--- Specific Errors

function ExpiredRequestError(message) {
  HttpSignatureError$1.call(this, message, ExpiredRequestError);
}
util__default['default'].inherits(ExpiredRequestError, HttpSignatureError$1);

function InvalidHeaderError(message) {
  HttpSignatureError$1.call(this, message, InvalidHeaderError);
}
util__default['default'].inherits(InvalidHeaderError, HttpSignatureError$1);

function InvalidParamsError(message) {
  HttpSignatureError$1.call(this, message, InvalidParamsError);
}
util__default['default'].inherits(InvalidParamsError, HttpSignatureError$1);

function MissingHeaderError(message) {
  HttpSignatureError$1.call(this, message, MissingHeaderError);
}
util__default['default'].inherits(MissingHeaderError, HttpSignatureError$1);

function StrictParsingError(message) {
  HttpSignatureError$1.call(this, message, StrictParsingError);
}
util__default['default'].inherits(StrictParsingError, HttpSignatureError$1);

///--- Exported API

var parser = {
  /**
   * Parses the 'Authorization' header out of an http.ServerRequest object.
   *
   * Note that this API will fully validate the Authorization header, and throw
   * on any error.  It will not however check the signature, or the keyId format
   * as those are specific to your environment.  You can use the options object
   * to pass in extra constraints.
   *
   * As a response object you can expect this:
   *
   *     {
   *       "scheme": "Signature",
   *       "params": {
   *         "keyId": "foo",
   *         "algorithm": "rsa-sha256",
   *         "headers": [
   *           "date" or "x-date",
   *           "digest"
   *         ],
   *         "signature": "base64"
   *       },
   *       "signingString": "ready to be passed to crypto.verify()"
   *     }
   *
   * @param {Object} request an http.ServerRequest.
   * @param {Object} options an optional options object with:
   *                   - clockSkew: allowed clock skew in seconds (default 300).
   *                   - headers: required header names (def: date or x-date)
   *                   - algorithms: algorithms to support (default: all).
   *                   - strict: should enforce latest spec parsing
   *                             (default: false).
   * @return {Object} parsed out object (see above).
   * @throws {TypeError} on invalid input.
   * @throws {InvalidHeaderError} on an invalid Authorization header error.
   * @throws {InvalidParamsError} if the params in the scheme are invalid.
   * @throws {MissingHeaderError} if the params indicate a header not present,
   *                              either in the request headers from the params,
   *                              or not in the params from a required header
   *                              in options.
   * @throws {StrictParsingError} if old attributes are used in strict parsing
   *                              mode.
   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
   */
  parseRequest: function parseRequest(request, options) {
    assert_1.object(request, 'request');
    assert_1.object(request.headers, 'request.headers');
    if (options === undefined) {
      options = {};
    }
    if (options.headers === undefined) {
      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
    }
    assert_1.object(options, 'options');
    assert_1.arrayOfString(options.headers, 'options.headers');
    assert_1.optionalFinite(options.clockSkew, 'options.clockSkew');

    var authzHeaderName = options.authorizationHeaderName || 'authorization';

    if (!request.headers[authzHeaderName]) {
      throw new MissingHeaderError('no ' + authzHeaderName + ' header ' + 'present in the request');
    }

    options.clockSkew = options.clockSkew || 300;

    var i = 0;
    var state = State.New;
    var substate = ParamsState.Name;
    var tmpName = '';
    var tmpValue = '';

    var parsed = {
      scheme: '',
      params: {},
      signingString: ''
    };

    var authz = request.headers[authzHeaderName];
    for (i = 0; i < authz.length; i++) {
      var c = authz.charAt(i);

      switch (Number(state)) {
        case State.New:
          if (c !== ' ') parsed.scheme += c;
          else state = State.Params;
          break;

        case State.Params:
          switch (Number(substate)) {
            case ParamsState.Name:
              var code = c.charCodeAt(0);
              // restricted name of A-Z / a-z
              if (
                (code >= 0x41 && code <= 0x5a) || // A-Z
                (code >= 0x61 && code <= 0x7a)
              ) {
                // a-z
                tmpName += c;
              } else if (c === '=') {
                if (tmpName.length === 0) throw new InvalidHeaderError('bad param format');
                substate = ParamsState.Quote;
              } else {
                throw new InvalidHeaderError('bad param format');
              }
              break;

            case ParamsState.Quote:
              if (c === '"') {
                tmpValue = '';
                substate = ParamsState.Value;
              } else {
                throw new InvalidHeaderError('bad param format');
              }
              break;

            case ParamsState.Value:
              if (c === '"') {
                parsed.params[tmpName] = tmpValue;
                substate = ParamsState.Comma;
              } else {
                tmpValue += c;
              }
              break;

            case ParamsState.Comma:
              if (c === ',') {
                tmpName = '';
                substate = ParamsState.Name;
              } else {
                throw new InvalidHeaderError('bad param format');
              }
              break;

            default:
              throw new Error('Invalid substate');
          }
          break;

        default:
          throw new Error('Invalid substate');
      }
    }

    if (!parsed.params.headers || parsed.params.headers === '') {
      if (request.headers['x-date']) {
        parsed.params.headers = ['x-date'];
      } else {
        parsed.params.headers = ['date'];
      }
    } else {
      parsed.params.headers = parsed.params.headers.split(' ');
    }

    // Minimally validate the parsed object
    if (!parsed.scheme || parsed.scheme !== 'Signature') throw new InvalidHeaderError('scheme was not "Signature"');

    if (!parsed.params.keyId) throw new InvalidHeaderError('keyId was not specified');

    if (!parsed.params.algorithm) throw new InvalidHeaderError('algorithm was not specified');

    if (!parsed.params.signature) throw new InvalidHeaderError('signature was not specified');

    // Check the algorithm against the official list
    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
    try {
      validateAlgorithm$1(parsed.params.algorithm);
    } catch (e) {
      if (e instanceof InvalidAlgorithmError$6)
        throw new InvalidParamsError(parsed.params.algorithm + ' is not ' + 'supported');
      else throw e;
    }

    // Build the signingString
    for (i = 0; i < parsed.params.headers.length; i++) {
      var h = parsed.params.headers[i].toLowerCase();
      parsed.params.headers[i] = h;

      if (h === 'request-line') {
        if (!options.strict) {
          /*
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          parsed.signingString += request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');
        }
      } else if (h === '(request-target)') {
        parsed.signingString += '(request-target): ' + request.method.toLowerCase() + ' ' + request.url;
      } else {
        var value = request.headers[h];
        if (value === undefined) throw new MissingHeaderError(h + ' was not in the request');
        parsed.signingString += h + ': ' + value;
      }

      if (i + 1 < parsed.params.headers.length) parsed.signingString += '\n';
    }

    // Check against the constraints
    var date;
    if (request.headers.date || request.headers['x-date']) {
      if (request.headers['x-date']) {
        date = new Date(request.headers['x-date']);
      } else {
        date = new Date(request.headers.date);
      }
      var now = new Date();
      var skew = Math.abs(now.getTime() - date.getTime());

      if (skew > options.clockSkew * 1000) {
        throw new ExpiredRequestError('clock skew of ' + skew / 1000 + 's was greater than ' + options.clockSkew + 's');
      }
    }

    options.headers.forEach(function(hdr) {
      // Remember that we already checked any headers in the params
      // were in the request, so if this passes we're good.
      if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0)
        throw new MissingHeaderError(hdr + ' was not a signed header');
    });

    if (options.algorithms) {
      if (options.algorithms.indexOf(parsed.params.algorithm) === -1)
        throw new InvalidParamsError(parsed.params.algorithm + ' is not a supported algorithm');
    }

    parsed.algorithm = parsed.params.algorithm.toUpperCase();
    parsed.keyId = parsed.params.keyId;
    return parsed;
  }
};

/*
 * extsprintf.js: extended POSIX-style sprintf
 */

/*
 * Public interface
 */
var sprintf = jsSprintf;
var printf = jsPrintf;
var fprintf = jsFprintf;

/*
 * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
 * exception when given a format string we don't understand, rather than
 * ignoring it, so that we won't break existing programs if/when we go implement
 * the rest of this.
 *
 * This implementation currently supports specifying
 *	- field alignment ('-' flag),
 * 	- zero-pad ('0' flag)
 *	- always show numeric sign ('+' flag),
 *	- field width
 *	- conversions for strings, decimal integers, and floats (numbers).
 *	- argument size specifiers.  These are all accepted but ignored, since
 *	  Javascript has no notion of the physical size of an argument.
 *
 * Everything else is currently unsupported, most notably precision, unsigned
 * numbers, non-decimal numbers, and characters.
 */
function jsSprintf(fmt) {
  var regex = [
    '([^%]*)' /* normal text */,
    '%' /* start of format */,
    "(['\\-+ #0]*?)" /* flags (optional) */,
    '([1-9]\\d*)?' /* width (optional) */,
    '(\\.([1-9]\\d*))?' /* precision (optional) */,
    '[lhjztL]*?' /* length mods (ignored) */,
    '([diouxXfFeEgGaAcCsSp%jr])' /* conversion */
  ].join('');

  var re = new RegExp(regex);
  var args = Array.prototype.slice.call(arguments, 1);
  var flags, width, precision, conversion;
  var left, pad, sign, arg, match;
  var ret = '';
  var argn = 1;

  assert__default['default'].equal('string', typeof fmt);

  while ((match = re.exec(fmt)) !== null) {
    ret += match[1];
    fmt = fmt.substring(match[0].length);

    flags = match[2] || '';
    width = match[3] || 0;
    precision = match[4] || '';
    conversion = match[6];
    left = false;
    sign = false;
    pad = ' ';

    if (conversion == '%') {
      ret += '%';
      continue;
    }

    if (args.length === 0) throw new Error('too few args to sprintf');

    arg = args.shift();
    argn++;

    if (flags.match(/[\' #]/)) throw new Error('unsupported flags: ' + flags);

    if (precision.length > 0) throw new Error('non-zero precision not supported');

    if (flags.match(/-/)) left = true;

    if (flags.match(/0/)) pad = '0';

    if (flags.match(/\+/)) sign = true;

    switch (conversion) {
      case 's':
        if (arg === undefined || arg === null)
          throw new Error('argument ' + argn + ': attempted to print undefined or null ' + 'as a string');
        ret += doPad(pad, width, left, arg.toString());
        break;

      case 'd':
        arg = Math.floor(arg);
      /*jsl:fallthru*/
      case 'f':
        sign = sign && arg > 0 ? '+' : '';
        ret += sign + doPad(pad, width, left, arg.toString());
        break;

      case 'x':
        ret += doPad(pad, width, left, arg.toString(16));
        break;

      case 'j' /* non-standard */:
        if (width === 0) width = 10;
        ret += util__default['default'].inspect(arg, false, width);
        break;

      case 'r' /* non-standard */:
        ret += dumpException(arg);
        break;

      default:
        throw new Error('unsupported conversion: ' + conversion);
    }
  }

  ret += fmt;
  return ret;
}

function jsPrintf() {
  var args = Array.prototype.slice.call(arguments);
  args.unshift(process.stdout);
  jsFprintf.apply(null, args);
}

function jsFprintf(stream) {
  var args = Array.prototype.slice.call(arguments, 1);
  return stream.write(jsSprintf.apply(this, args));
}

function doPad(chr, width, left, str) {
  var ret = str;

  while (ret.length < width) {
    if (left) ret += chr;
    else ret = chr + ret;
  }

  return ret;
}

/*
 * This function dumps long stack traces for exceptions having a cause() method.
 * See node-verror for an example.
 */
function dumpException(ex) {
  var ret;

  if (!(ex instanceof Error)) throw new Error(jsSprintf('invalid type for %%r: %j', ex));

  /* Note that V8 prepends "ex.stack" with ex.toString(). */
  ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;

  if (ex.cause && typeof ex.cause === 'function') {
    var cex = ex.cause();
    if (cex) {
      ret += '\nCaused by: ' + dumpException(cex);
    }
  }

  return ret;
}

var extsprintf = {
  sprintf: sprintf,
  printf: printf,
  fprintf: fprintf
};

/*
 * extsprintf.js: extended POSIX-style sprintf
 */

/*
 * Public interface
 */
var sprintf$1 = jsSprintf$1;
var printf$1 = jsPrintf$1;
var fprintf$1 = jsFprintf$1;

/*
 * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
 * exception when given a format string we don't understand, rather than
 * ignoring it, so that we won't break existing programs if/when we go implement
 * the rest of this.
 *
 * This implementation currently supports specifying
 *	- field alignment ('-' flag),
 * 	- zero-pad ('0' flag)
 *	- always show numeric sign ('+' flag),
 *	- field width
 *	- conversions for strings, decimal integers, and floats (numbers).
 *	- argument size specifiers.  These are all accepted but ignored, since
 *	  Javascript has no notion of the physical size of an argument.
 *
 * Everything else is currently unsupported, most notably precision, unsigned
 * numbers, non-decimal numbers, and characters.
 */
function jsSprintf$1(ofmt) {
  var regex = [
    '([^%]*)' /* normal text */,
    '%' /* start of format */,
    "(['\\-+ #0]*?)" /* flags (optional) */,
    '([1-9]\\d*)?' /* width (optional) */,
    '(\\.([1-9]\\d*))?' /* precision (optional) */,
    '[lhjztL]*?' /* length mods (ignored) */,
    '([diouxXfFeEgGaAcCsSp%jr])' /* conversion */
  ].join('');

  var re = new RegExp(regex);

  /* variadic arguments used to fill in conversion specifiers */
  var args = Array.prototype.slice.call(arguments, 1);
  /* remaining format string */
  var fmt = ofmt;

  /* components of the current conversion specifier */
  var flags, width, precision, conversion;
  var left, pad, sign, arg, match;

  /* return value */
  var ret = '';

  /* current variadic argument (1-based) */
  var argn = 1;
  /* 0-based position in the format string that we've read */
  var posn = 0;
  /* 1-based position in the format string of the current conversion */
  var convposn;
  /* current conversion specifier */
  var curconv;

  assert__default['default'].equal('string', typeof fmt, 'first argument must be a format string');

  while ((match = re.exec(fmt)) !== null) {
    ret += match[1];
    fmt = fmt.substring(match[0].length);

    /*
     * Update flags related to the current conversion specifier's
     * position so that we can report clear error messages.
     */
    curconv = match[0].substring(match[1].length);
    convposn = posn + match[1].length + 1;
    posn += match[0].length;

    flags = match[2] || '';
    width = match[3] || 0;
    precision = match[4] || '';
    conversion = match[6];
    left = false;
    sign = false;
    pad = ' ';

    if (conversion == '%') {
      ret += '%';
      continue;
    }

    if (args.length === 0) {
      throw jsError(ofmt, convposn, curconv, 'has no matching argument ' + '(too few arguments passed)');
    }

    arg = args.shift();
    argn++;

    if (flags.match(/[\' #]/)) {
      throw jsError(ofmt, convposn, curconv, 'uses unsupported flags');
    }

    if (precision.length > 0) {
      throw jsError(ofmt, convposn, curconv, 'uses non-zero precision (not supported)');
    }

    if (flags.match(/-/)) left = true;

    if (flags.match(/0/)) pad = '0';

    if (flags.match(/\+/)) sign = true;

    switch (conversion) {
      case 's':
        if (arg === undefined || arg === null) {
          throw jsError(
            ofmt,
            convposn,
            curconv,
            'attempted to print undefined or null ' + 'as a string (argument ' + argn + ' to ' + 'sprintf)'
          );
        }
        ret += doPad$1(pad, width, left, arg.toString());
        break;

      case 'd':
        arg = Math.floor(arg);
      /*jsl:fallthru*/
      case 'f':
        sign = sign && arg > 0 ? '+' : '';
        ret += sign + doPad$1(pad, width, left, arg.toString());
        break;

      case 'x':
        ret += doPad$1(pad, width, left, arg.toString(16));
        break;

      case 'j' /* non-standard */:
        if (width === 0) width = 10;
        ret += util__default['default'].inspect(arg, false, width);
        break;

      case 'r' /* non-standard */:
        ret += dumpException$1(arg);
        break;

      default:
        throw jsError(ofmt, convposn, curconv, 'is not supported');
    }
  }

  ret += fmt;
  return ret;
}

function jsError(fmtstr, convposn, curconv, reason) {
  assert__default['default'].equal(typeof fmtstr, 'string');
  assert__default['default'].equal(typeof curconv, 'string');
  assert__default['default'].equal(typeof convposn, 'number');
  assert__default['default'].equal(typeof reason, 'string');
  return new Error(
    'format string "' + fmtstr + '": conversion specifier "' + curconv + '" at character ' + convposn + ' ' + reason
  );
}

function jsPrintf$1() {
  var args = Array.prototype.slice.call(arguments);
  args.unshift(process.stdout);
  jsFprintf$1.apply(null, args);
}

function jsFprintf$1(stream) {
  var args = Array.prototype.slice.call(arguments, 1);
  return stream.write(jsSprintf$1.apply(this, args));
}

function doPad$1(chr, width, left, str) {
  var ret = str;

  while (ret.length < width) {
    if (left) ret += chr;
    else ret = chr + ret;
  }

  return ret;
}

/*
 * This function dumps long stack traces for exceptions having a cause() method.
 * See node-verror for an example.
 */
function dumpException$1(ex) {
  var ret;

  if (!(ex instanceof Error)) throw new Error(jsSprintf$1('invalid type for %%r: %j', ex));

  /* Note that V8 prepends "ex.stack" with ex.toString(). */
  ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;

  if (ex.cause && typeof ex.cause === 'function') {
    var cex = ex.cause();
    if (cex) {
      ret += '\nCaused by: ' + dumpException$1(cex);
    }
  }

  return ret;
}

var extsprintf$1 = {
  sprintf: sprintf$1,
  printf: printf$1,
  fprintf: fprintf$1
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray$1(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
var isArray_1 = isArray$1;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
var isBoolean_1 = isBoolean;

function isNull(arg) {
  return arg === null;
}
var isNull_1 = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
var isNullOrUndefined_1 = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
var isNumber_1 = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
var isString_1 = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
var isSymbol_1 = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
var isUndefined_1 = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
var isRegExp_1 = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
var isObject_1 = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
var isDate_1 = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
var isError_1 = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
var isFunction_1 = isFunction;

function isPrimitive(arg) {
  return (
    arg === null ||
    typeof arg === 'boolean' ||
    typeof arg === 'number' ||
    typeof arg === 'string' ||
    typeof arg === 'symbol' || // ES6 symbol
    typeof arg === 'undefined'
  );
}
var isPrimitive_1 = isPrimitive;

var isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

var util = {
  isArray: isArray_1,
  isBoolean: isBoolean_1,
  isNull: isNull_1,
  isNullOrUndefined: isNullOrUndefined_1,
  isNumber: isNumber_1,
  isString: isString_1,
  isSymbol: isSymbol_1,
  isUndefined: isUndefined_1,
  isRegExp: isRegExp_1,
  isObject: isObject_1,
  isDate: isDate_1,
  isError: isError_1,
  isFunction: isFunction_1,
  isPrimitive: isPrimitive_1,
  isBuffer: isBuffer
};

/*
 * verror.js: richer JavaScript errors
 */

var mod_isError = util.isError;
var sprintf$2 = extsprintf$1.sprintf;

/*
 * Public interface
 */

/* So you can 'var VError = require('verror')' */
var verror = VError;
/* For compatibility */
VError.VError = VError;
/* Other exported classes */
VError.SError = SError;
VError.WError = WError;
VError.MultiError = MultiError;

/*
 * Common function used to parse constructor arguments for VError, WError, and
 * SError.  Named arguments to this function:
 *
 *     strict		force strict interpretation of sprintf arguments, even
 *     			if the options in "argv" don't say so
 *
 *     argv		error's constructor arguments, which are to be
 *     			interpreted as described in README.md.  For quick
 *     			reference, "argv" has one of the following forms:
 *
 *          [ sprintf_args... ]           (argv[0] is a string)
 *          [ cause, sprintf_args... ]    (argv[0] is an Error)
 *          [ options, sprintf_args... ]  (argv[0] is an object)
 *
 * This function normalizes these forms, producing an object with the following
 * properties:
 *
 *    options           equivalent to "options" in third form.  This will never
 *    			be a direct reference to what the caller passed in
 *    			(i.e., it may be a shallow copy), so it can be freely
 *    			modified.
 *
 *    shortmessage      result of sprintf(sprintf_args), taking options.strict
 *    			into account as described in README.md.
 */
function parseConstructorArguments(args) {
  var argv, options, sprintf_args, shortmessage, k;

  assert_1.object(args, 'args');
  assert_1.bool(args.strict, 'args.strict');
  assert_1.array(args.argv, 'args.argv');
  argv = args.argv;

  /*
   * First, figure out which form of invocation we've been given.
   */
  if (argv.length === 0) {
    options = {};
    sprintf_args = [];
  } else if (mod_isError(argv[0])) {
    options = { cause: argv[0] };
    sprintf_args = argv.slice(1);
  } else if (typeof argv[0] === 'object') {
    options = {};
    for (k in argv[0]) {
      options[k] = argv[0][k];
    }
    sprintf_args = argv.slice(1);
  } else {
    assert_1.string(
      argv[0],
      'first argument to VError, SError, or WError ' + 'constructor must be a string, object, or Error'
    );
    options = {};
    sprintf_args = argv;
  }

  /*
   * Now construct the error's message.
   *
   * extsprintf (which we invoke here with our caller's arguments in order
   * to construct this Error's message) is strict in its interpretation of
   * values to be processed by the "%s" specifier.  The value passed to
   * extsprintf must actually be a string or something convertible to a
   * String using .toString().  Passing other values (notably "null" and
   * "undefined") is considered a programmer error.  The assumption is
   * that if you actually want to print the string "null" or "undefined",
   * then that's easy to do that when you're calling extsprintf; on the
   * other hand, if you did NOT want that (i.e., there's actually a bug
   * where the program assumes some variable is non-null and tries to
   * print it, which might happen when constructing a packet or file in
   * some specific format), then it's better to stop immediately than
   * produce bogus output.
   *
   * However, sometimes the bug is only in the code calling VError, and a
   * programmer might prefer to have the error message contain "null" or
   * "undefined" rather than have the bug in the error path crash the
   * program (making the first bug harder to identify).  For that reason,
   * by default VError converts "null" or "undefined" arguments to their
   * string representations and passes those to extsprintf.  Programmers
   * desiring the strict behavior can use the SError class or pass the
   * "strict" option to the VError constructor.
   */
  assert_1.object(options);
  if (!options.strict && !args.strict) {
    sprintf_args = sprintf_args.map(function(a) {
      return a === null ? 'null' : a === undefined ? 'undefined' : a;
    });
  }

  if (sprintf_args.length === 0) {
    shortmessage = '';
  } else {
    shortmessage = sprintf$2.apply(null, sprintf_args);
  }

  return {
    options: options,
    shortmessage: shortmessage
  };
}

/*
 * See README.md for reference documentation.
 */
function VError() {
  var args, obj, parsed, cause, ctor, message, k;

  args = Array.prototype.slice.call(arguments, 0);

  /*
   * This is a regrettable pattern, but JavaScript's built-in Error class
   * is defined to work this way, so we allow the constructor to be called
   * without "new".
   */
  if (!(this instanceof VError)) {
    obj = Object.create(VError.prototype);
    VError.apply(obj, arguments);
    return obj;
  }

  /*
   * For convenience and backwards compatibility, we support several
   * different calling forms.  Normalize them here.
   */
  parsed = parseConstructorArguments({
    argv: args,
    strict: false
  });

  /*
   * If we've been given a name, apply it now.
   */
  if (parsed.options.name) {
    assert_1.string(parsed.options.name, 'error\'s "name" must be a string');
    this.name = parsed.options.name;
  }

  /*
   * For debugging, we keep track of the original short message (attached
   * this Error particularly) separately from the complete message (which
   * includes the messages of our cause chain).
   */
  this.jse_shortmsg = parsed.shortmessage;
  message = parsed.shortmessage;

  /*
   * If we've been given a cause, record a reference to it and update our
   * message appropriately.
   */
  cause = parsed.options.cause;
  if (cause) {
    assert_1.ok(mod_isError(cause), 'cause is not an Error');
    this.jse_cause = cause;

    if (!parsed.options.skipCauseMessage) {
      message += ': ' + cause.message;
    }
  }

  /*
   * If we've been given an object with properties, shallow-copy that
   * here.  We don't want to use a deep copy in case there are non-plain
   * objects here, but we don't want to use the original object in case
   * the caller modifies it later.
   */
  this.jse_info = {};
  if (parsed.options.info) {
    for (k in parsed.options.info) {
      this.jse_info[k] = parsed.options.info[k];
    }
  }

  this.message = message;
  Error.call(this, message);

  if (Error.captureStackTrace) {
    ctor = parsed.options.constructorOpt || this.constructor;
    Error.captureStackTrace(this, ctor);
  }

  return this;
}

util__default['default'].inherits(VError, Error);
VError.prototype.name = 'VError';

VError.prototype.toString = function ve_toString() {
  var str = (this.hasOwnProperty('name') && this.name) || this.constructor.name || this.constructor.prototype.name;
  if (this.message) str += ': ' + this.message;

  return str;
};

/*
 * This method is provided for compatibility.  New callers should use
 * VError.cause() instead.  That method also uses the saner `null` return value
 * when there is no cause.
 */
VError.prototype.cause = function ve_cause() {
  var cause = VError.cause(this);
  return cause === null ? undefined : cause;
};

/*
 * Static methods
 *
 * These class-level methods are provided so that callers can use them on
 * instances of Errors that are not VErrors.  New interfaces should be provided
 * only using static methods to eliminate the class of programming mistake where
 * people fail to check whether the Error object has the corresponding methods.
 */

VError.cause = function(err) {
  assert_1.ok(mod_isError(err), 'err must be an Error');
  return mod_isError(err.jse_cause) ? err.jse_cause : null;
};

VError.info = function(err) {
  var rv, cause, k;

  assert_1.ok(mod_isError(err), 'err must be an Error');
  cause = VError.cause(err);
  if (cause !== null) {
    rv = VError.info(cause);
  } else {
    rv = {};
  }

  if (typeof err.jse_info == 'object' && err.jse_info !== null) {
    for (k in err.jse_info) {
      rv[k] = err.jse_info[k];
    }
  }

  return rv;
};

VError.findCauseByName = function(err, name) {
  var cause;

  assert_1.ok(mod_isError(err), 'err must be an Error');
  assert_1.string(name, 'name');
  assert_1.ok(name.length > 0, 'name cannot be empty');

  for (cause = err; cause !== null; cause = VError.cause(cause)) {
    assert_1.ok(mod_isError(cause));
    if (cause.name == name) {
      return cause;
    }
  }

  return null;
};

VError.hasCauseWithName = function(err, name) {
  return VError.findCauseByName(err, name) !== null;
};

VError.fullStack = function(err) {
  assert_1.ok(mod_isError(err), 'err must be an Error');

  var cause = VError.cause(err);

  if (cause) {
    return err.stack + '\ncaused by: ' + VError.fullStack(cause);
  }

  return err.stack;
};

VError.errorFromList = function(errors) {
  assert_1.arrayOfObject(errors, 'errors');

  if (errors.length === 0) {
    return null;
  }

  errors.forEach(function(e) {
    assert_1.ok(mod_isError(e));
  });

  if (errors.length == 1) {
    return errors[0];
  }

  return new MultiError(errors);
};

VError.errorForEach = function(err, func) {
  assert_1.ok(mod_isError(err), 'err must be an Error');
  assert_1.func(func, 'func');

  if (err instanceof MultiError) {
    err.errors().forEach(function iterError(e) {
      func(e);
    });
  } else {
    func(err);
  }
};

/*
 * SError is like VError, but stricter about types.  You cannot pass "null" or
 * "undefined" as string arguments to the formatter.
 */
function SError() {
  var args, obj, parsed, options;

  args = Array.prototype.slice.call(arguments, 0);
  if (!(this instanceof SError)) {
    obj = Object.create(SError.prototype);
    SError.apply(obj, arguments);
    return obj;
  }

  parsed = parseConstructorArguments({
    argv: args,
    strict: true
  });

  options = parsed.options;
  VError.call(this, options, '%s', parsed.shortmessage);

  return this;
}

/*
 * We don't bother setting SError.prototype.name because once constructed,
 * SErrors are just like VErrors.
 */
util__default['default'].inherits(SError, VError);

/*
 * Represents a collection of errors for the purpose of consumers that generally
 * only deal with one error.  Callers can extract the individual errors
 * contained in this object, but may also just treat it as a normal single
 * error, in which case a summary message will be printed.
 */
function MultiError(errors) {
  assert_1.array(errors, 'list of errors');
  assert_1.ok(errors.length > 0, 'must be at least one error');
  this.ase_errors = errors;

  VError.call(
    this,
    {
      cause: errors[0]
    },
    'first of %d error%s',
    errors.length,
    errors.length == 1 ? '' : 's'
  );
}

util__default['default'].inherits(MultiError, VError);
MultiError.prototype.name = 'MultiError';

MultiError.prototype.errors = function me_errors() {
  return this.ase_errors.slice(0);
};

/*
 * See README.md for reference details.
 */
function WError() {
  var args, obj, parsed, options;

  args = Array.prototype.slice.call(arguments, 0);
  if (!(this instanceof WError)) {
    obj = Object.create(WError.prototype);
    WError.apply(obj, args);
    return obj;
  }

  parsed = parseConstructorArguments({
    argv: args,
    strict: false
  });

  options = parsed.options;
  options['skipCauseMessage'] = true;
  VError.call(this, options, '%s', parsed.shortmessage);

  return this;
}

util__default['default'].inherits(WError, VError);
WError.prototype.name = 'WError';

WError.prototype.toString = function we_toString() {
  var str = (this.hasOwnProperty('name') && this.name) || this.constructor.name || this.constructor.prototype.name;
  if (this.message) str += ': ' + this.message;
  if (this.jse_cause && this.jse_cause.message) str += '; caused by ' + this.jse_cause.toString();

  return str;
};

/*
 * For purely historical reasons, WError's cause() function allows you to set
 * the cause.
 */
WError.prototype.cause = function we_cause(c) {
  if (mod_isError(c)) this.jse_cause = c;

  return this.jse_cause;
};

/**
 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
 *	(http://www.json.com/json-schema-proposal/)
 *
 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
 * Licensed under the MIT (MIT-LICENSE.txt) license.
To use the validator call the validate function with an instance object and an optional schema object.
If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
that schema will be used to validate and the schema parameter is not necessary (if both exist,
both validations will occur).
The validate method will return an array of validation errors. If there are no errors, then an
empty list will be returned. A validation error will have two properties:
"property" which indicates which property had the error
"message" which indicates what the error was
 */

var validate = _commonjsHelpers.createCommonjsModule(function(module) {
  (function(root, factory) {
    if (module.exports) {
      // Node. Does not work with strict CommonJS, but
      // only CommonJS-like environments that support module.exports,
      // like Node.
      module.exports = factory();
    } else {
      // Browser globals
      root.jsonSchema = factory();
    }
  })(_commonjsHelpers.commonjsGlobal, function() {
    // setup primitive classes to be JSON Schema types
    var exports = validate;
    exports.Integer = { type: 'integer' };
    var primitiveConstructors = {
      String: String,
      Boolean: Boolean,
      Number: Number,
      Object: Object,
      Array: Array,
      Date: Date
    };
    exports.validate = validate;
    function validate(/*Any*/ instance, /*Object*/ schema) {
      // Summary:
      //  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
      // 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
      // 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
      // 		both validations will occur).
      // 		The validate method will return an object with two properties:
      // 			valid: A boolean indicating if the instance is valid by the schema
      // 			errors: An array of validation errors. If there are no errors, then an
      // 					empty list will be returned. A validation error will have two properties:
      // 						property: which indicates which property had the error
      // 						message: which indicates what the error was
      //
      return validate(instance, schema, { changing: false }); //, coerce: false, existingOnly: false});
    }
    exports.checkPropertyChange = function(/*Any*/ value, /*Object*/ schema, /*String*/ property) {
      // Summary:
      // 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
      // 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
      // 		not check for self-validation, it is assumed that the passed in value is already internally valid.
      // 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
      // 		information.
      //
      return validate(value, schema, { changing: property || 'property' });
    };
    var validate = (exports._validate = function(/*Any*/ instance, /*Object*/ schema, /*Object*/ options) {
      if (!options) options = {};
      var _changing = options.changing;

      function getType(schema) {
        return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
      }
      var errors = [];
      // validate a value against a property definition
      function checkProp(value, schema, path, i) {
        var l;
        path += path ? (typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i) : i;
        function addError(message) {
          errors.push({ property: path, message: message });
        }

        if (
          (typeof schema != 'object' || schema instanceof Array) &&
          (path || typeof schema != 'function') &&
          !(schema && getType(schema))
        ) {
          if (typeof schema == 'function') {
            if (!(value instanceof schema)) {
              addError('is not an instance of the class/constructor ' + schema.name);
            }
          } else if (schema) {
            addError('Invalid schema/property definition ' + schema);
          }
          return null;
        }
        if (_changing && schema.readonly) {
          addError('is a readonly field, it can not be changed');
        }
        if (schema['extends']) {
          // if it extends another schema, it must pass that schema as well
          checkProp(value, schema['extends'], path, i);
        }
        // validate a value against a type definition
        function checkType(type, value) {
          if (type) {
            if (
              typeof type == 'string' &&
              type != 'any' &&
              (type == 'null' ? value !== null : typeof value != type) &&
              !(value instanceof Array && type == 'array') &&
              !(value instanceof Date && type == 'date') &&
              !(type == 'integer' && value % 1 === 0)
            ) {
              return [{ property: path, message: typeof value + ' value found, but a ' + type + ' is required' }];
            }
            if (type instanceof Array) {
              var unionErrors = [];
              for (var j = 0; j < type.length; j++) {
                // a union type
                if (!(unionErrors = checkType(type[j], value)).length) {
                  break;
                }
              }
              if (unionErrors.length) {
                return unionErrors;
              }
            } else if (typeof type == 'object') {
              var priorErrors = errors;
              errors = [];
              checkProp(value, type, path);
              var theseErrors = errors;
              errors = priorErrors;
              return theseErrors;
            }
          }
          return [];
        }
        if (value === undefined) {
          if (schema.required) {
            addError('is missing and it is required');
          }
        } else {
          errors = errors.concat(checkType(getType(schema), value));
          if (schema.disallow && !checkType(schema.disallow, value).length) {
            addError(' disallowed value was matched');
          }
          if (value !== null) {
            if (value instanceof Array) {
              if (schema.items) {
                var itemsIsArray = schema.items instanceof Array;
                var propDef = schema.items;
                for (i = 0, l = value.length; i < l; i += 1) {
                  if (itemsIsArray) propDef = schema.items[i];
                  if (options.coerce) value[i] = options.coerce(value[i], propDef);
                  errors.concat(checkProp(value[i], propDef, path, i));
                }
              }
              if (schema.minItems && value.length < schema.minItems) {
                addError('There must be a minimum of ' + schema.minItems + ' in the array');
              }
              if (schema.maxItems && value.length > schema.maxItems) {
                addError('There must be a maximum of ' + schema.maxItems + ' in the array');
              }
            } else if (schema.properties || schema.additionalProperties) {
              errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
            }
            if (schema.pattern && typeof value == 'string' && !value.match(schema.pattern)) {
              addError('does not match the regex pattern ' + schema.pattern);
            }
            if (schema.maxLength && typeof value == 'string' && value.length > schema.maxLength) {
              addError('may only be ' + schema.maxLength + ' characters long');
            }
            if (schema.minLength && typeof value == 'string' && value.length < schema.minLength) {
              addError('must be at least ' + schema.minLength + ' characters long');
            }
            if (
              typeof schema.minimum !== undefined &&
              typeof value == typeof schema.minimum &&
              schema.minimum > value
            ) {
              addError('must have a minimum value of ' + schema.minimum);
            }
            if (
              typeof schema.maximum !== undefined &&
              typeof value == typeof schema.maximum &&
              schema.maximum < value
            ) {
              addError('must have a maximum value of ' + schema.maximum);
            }
            if (schema['enum']) {
              var enumer = schema['enum'];
              l = enumer.length;
              var found;
              for (var j = 0; j < l; j++) {
                if (enumer[j] === value) {
                  found = 1;
                  break;
                }
              }
              if (!found) {
                addError('does not have a value in the enumeration ' + enumer.join(', '));
              }
            }
            if (
              typeof schema.maxDecimal == 'number' &&
              value.toString().match(new RegExp('\\.[0-9]{' + (schema.maxDecimal + 1) + ',}'))
            ) {
              addError('may only have ' + schema.maxDecimal + ' digits of decimal places');
            }
          }
        }
        return null;
      }
      // validate an object against a schema
      function checkObj(instance, objTypeDef, path, additionalProp) {
        if (typeof objTypeDef == 'object') {
          if (typeof instance != 'object' || instance instanceof Array) {
            errors.push({ property: path, message: 'an object is required' });
          }

          for (var i in objTypeDef) {
            if (objTypeDef.hasOwnProperty(i)) {
              var value = instance[i];
              // skip _not_ specified properties
              if (value === undefined && options.existingOnly) continue;
              var propDef = objTypeDef[i];
              // set default
              if (value === undefined && propDef['default']) {
                value = instance[i] = propDef['default'];
              }
              if (options.coerce && i in instance) {
                value = instance[i] = options.coerce(value, propDef);
              }
              checkProp(value, propDef, path, i);
            }
          }
        }
        for (i in instance) {
          if (
            instance.hasOwnProperty(i) &&
            !(i.charAt(0) == '_' && i.charAt(1) == '_') &&
            objTypeDef &&
            !objTypeDef[i] &&
            additionalProp === false
          ) {
            if (options.filter) {
              delete instance[i];
              continue;
            } else {
              errors.push({
                property: path,
                message:
                  typeof value +
                  'The property ' +
                  i +
                  ' is not defined in the schema and the schema does not allow additional properties'
              });
            }
          }
          var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
          if (requires && !(requires in instance)) {
            errors.push({
              property: path,
              message: 'the presence of the property ' + i + ' requires that ' + requires + ' also be present'
            });
          }
          value = instance[i];
          if (additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))) {
            if (options.coerce) {
              value = instance[i] = options.coerce(value, additionalProp);
            }
            checkProp(value, additionalProp, path, i);
          }
          if (!_changing && value && value.$schema) {
            errors = errors.concat(checkProp(value, value.$schema, path, i));
          }
        }
        return errors;
      }
      if (schema) {
        checkProp(instance, schema, '', _changing || '');
      }
      if (!_changing && instance && instance.$schema) {
        checkProp(instance, instance.$schema, '', '');
      }
      return { valid: !errors.length, errors: errors };
    });
    exports.mustBeValid = function(result) {
      //	summary:
      //		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
      // result: the result returned from checkPropertyChange or validate
      if (!result.valid) {
        throw new TypeError(
          result.errors
            .map(function(error) {
              return 'for property ' + error.property + ': ' + error.message;
            })
            .join(', \n')
        );
      }
    };

    return exports;
  });
});

/*
 * lib/jsprim.js: utilities for primitive JavaScript types
 */

/*
 * Public interface
 */
var deepCopy_1 = deepCopy;
var deepEqual_1 = deepEqual;
var isEmpty_1 = isEmpty;
var hasKey_1 = hasKey;
var forEachKey_1 = forEachKey;
var pluck_1 = pluck;
var flattenObject_1 = flattenObject;
var flattenIter_1 = flattenIter;
var validateJsonObject = validateJsonObjectJS;
var validateJsonObjectJS_1 = validateJsonObjectJS;
var randElt_1 = randElt;
var extraProperties_1 = extraProperties;
var mergeObjects_1 = mergeObjects;

var startsWith_1 = startsWith;
var endsWith_1 = endsWith;

var parseInteger_1 = parseInteger;

var iso8601_1 = iso8601;
var rfc1123_1 = rfc1123;
var parseDateTime_1 = parseDateTime;

var hrtimediff = hrtimeDiff;
var hrtimeDiff_1 = hrtimeDiff;
var hrtimeAccum_1 = hrtimeAccum;
var hrtimeAdd_1 = hrtimeAdd;
var hrtimeNanosec_1 = hrtimeNanosec;
var hrtimeMicrosec_1 = hrtimeMicrosec;
var hrtimeMillisec_1 = hrtimeMillisec;

/*
 * Deep copy an acyclic *basic* Javascript object.  This only handles basic
 * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects
 * containing these.  This does *not* handle instances of other classes.
 */
function deepCopy(obj) {
  var ret, key;
  var marker = '__deepCopy';

  if (obj && obj[marker]) throw new Error('attempted deep copy of cyclic object');

  if (obj && obj.constructor == Object) {
    ret = {};
    obj[marker] = true;

    for (key in obj) {
      if (key == marker) continue;

      ret[key] = deepCopy(obj[key]);
    }

    delete obj[marker];
    return ret;
  }

  if (obj && obj.constructor == Array) {
    ret = [];
    obj[marker] = true;

    for (key = 0; key < obj.length; key++) ret.push(deepCopy(obj[key]));

    delete obj[marker];
    return ret;
  }

  /*
   * It must be a primitive type -- just return it.
   */
  return obj;
}

function deepEqual(obj1, obj2) {
  if (typeof obj1 != typeof obj2) return false;

  if (obj1 === null || obj2 === null || typeof obj1 != 'object') return obj1 === obj2;

  if (obj1.constructor != obj2.constructor) return false;

  var k;
  for (k in obj1) {
    if (!obj2.hasOwnProperty(k)) return false;

    if (!deepEqual(obj1[k], obj2[k])) return false;
  }

  for (k in obj2) {
    if (!obj1.hasOwnProperty(k)) return false;
  }

  return true;
}

function isEmpty(obj) {
  var key;
  for (key in obj) return false;
  return true;
}

function hasKey(obj, key) {
  assert_1.equal(typeof key, 'string');
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function forEachKey(obj, callback) {
  for (var key in obj) {
    if (hasKey(obj, key)) {
      callback(key, obj[key]);
    }
  }
}

function pluck(obj, key) {
  assert_1.equal(typeof key, 'string');
  return pluckv(obj, key);
}

function pluckv(obj, key) {
  if (obj === null || typeof obj !== 'object') return undefined;

  if (obj.hasOwnProperty(key)) return obj[key];

  var i = key.indexOf('.');
  if (i == -1) return undefined;

  var key1 = key.substr(0, i);
  if (!obj.hasOwnProperty(key1)) return undefined;

  return pluckv(obj[key1], key.substr(i + 1));
}

/*
 * Invoke callback(row) for each entry in the array that would be returned by
 * flattenObject(data, depth).  This is just like flattenObject(data,
 * depth).forEach(callback), except that the intermediate array is never
 * created.
 */
function flattenIter(data, depth, callback) {
  doFlattenIter(data, depth, [], callback);
}

function doFlattenIter(data, depth, accum, callback) {
  var each;
  var key;

  if (depth === 0) {
    each = accum.slice(0);
    each.push(data);
    callback(each);
    return;
  }

  assert_1.ok(data !== null);
  assert_1.equal(typeof data, 'object');
  assert_1.equal(typeof depth, 'number');
  assert_1.ok(depth >= 0);

  for (key in data) {
    each = accum.slice(0);
    each.push(key);
    doFlattenIter(data[key], depth - 1, each, callback);
  }
}

function flattenObject(data, depth) {
  if (depth === 0) return [data];

  assert_1.ok(data !== null);
  assert_1.equal(typeof data, 'object');
  assert_1.equal(typeof depth, 'number');
  assert_1.ok(depth >= 0);

  var rv = [];
  var key;

  for (key in data) {
    flattenObject(data[key], depth - 1).forEach(function(p) {
      rv.push([key].concat(p));
    });
  }

  return rv;
}

function startsWith(str, prefix) {
  return str.substr(0, prefix.length) == prefix;
}

function endsWith(str, suffix) {
  return str.substr(str.length - suffix.length, suffix.length) == suffix;
}

function iso8601(d) {
  if (typeof d == 'number') d = new Date(d);
  assert_1.ok(d.constructor === Date);
  return extsprintf.sprintf(
    '%4d-%02d-%02dT%02d:%02d:%02d.%03dZ',
    d.getUTCFullYear(),
    d.getUTCMonth() + 1,
    d.getUTCDate(),
    d.getUTCHours(),
    d.getUTCMinutes(),
    d.getUTCSeconds(),
    d.getUTCMilliseconds()
  );
}

var RFC1123_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var RFC1123_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

function rfc1123(date) {
  return extsprintf.sprintf(
    '%s, %02d %s %04d %02d:%02d:%02d GMT',
    RFC1123_DAYS[date.getUTCDay()],
    date.getUTCDate(),
    RFC1123_MONTHS[date.getUTCMonth()],
    date.getUTCFullYear(),
    date.getUTCHours(),
    date.getUTCMinutes(),
    date.getUTCSeconds()
  );
}

/*
 * Parses a date expressed as a string, as either a number of milliseconds since
 * the epoch or any string format that Date accepts, giving preference to the
 * former where these two sets overlap (e.g., small numbers).
 */
function parseDateTime(str) {
  /*
   * This is irritatingly implicit, but significantly more concise than
   * alternatives.  The "+str" will convert a string containing only a
   * number directly to a Number, or NaN for other strings.  Thus, if the
   * conversion succeeds, we use it (this is the milliseconds-since-epoch
   * case).  Otherwise, we pass the string directly to the Date
   * constructor to parse.
   */
  var numeric = +str;
  if (!isNaN(numeric)) {
    return new Date(numeric);
  } else {
    return new Date(str);
  }
}

/*
 * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
 * the ES6 definitions here, while allowing for them to someday be higher.
 */
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;

/*
 * Default options for parseInteger().
 */
var PI_DEFAULTS = {
  base: 10,
  allowSign: true,
  allowPrefix: false,
  allowTrailing: false,
  allowImprecise: false,
  trimWhitespace: false,
  leadingZeroIsOctal: false
};

var CP_0 = 0x30;
var CP_9 = 0x39;

var CP_A = 0x41;
var CP_B = 0x42;
var CP_O = 0x4f;
var CP_T = 0x54;
var CP_X = 0x58;
var CP_Z = 0x5a;

var CP_a = 0x61;
var CP_b = 0x62;
var CP_o = 0x6f;
var CP_t = 0x74;
var CP_x = 0x78;
var CP_z = 0x7a;

var PI_CONV_DEC = 0x30;
var PI_CONV_UC = 0x37;
var PI_CONV_LC = 0x57;

/*
 * A stricter version of parseInt() that provides options for changing what
 * is an acceptable string (for example, disallowing trailing characters).
 */
function parseInteger(str, uopts) {
  assert_1.string(str, 'str');
  assert_1.optionalObject(uopts, 'options');

  var baseOverride = false;
  var options = PI_DEFAULTS;

  if (uopts) {
    baseOverride = hasKey(uopts, 'base');
    options = mergeObjects(options, uopts);
    assert_1.number(options.base, 'options.base');
    assert_1.ok(options.base >= 2, 'options.base >= 2');
    assert_1.ok(options.base <= 36, 'options.base <= 36');
    assert_1.bool(options.allowSign, 'options.allowSign');
    assert_1.bool(options.allowPrefix, 'options.allowPrefix');
    assert_1.bool(options.allowTrailing, 'options.allowTrailing');
    assert_1.bool(options.allowImprecise, 'options.allowImprecise');
    assert_1.bool(options.trimWhitespace, 'options.trimWhitespace');
    assert_1.bool(options.leadingZeroIsOctal, 'options.leadingZeroIsOctal');

    if (options.leadingZeroIsOctal) {
      assert_1.ok(!baseOverride, '"base" and "leadingZeroIsOctal" are ' + 'mutually exclusive');
    }
  }

  var c;
  var pbase = -1;
  var base = options.base;
  var start;
  var mult = 1;
  var value = 0;
  var idx = 0;
  var len = str.length;

  /* Trim any whitespace on the left side. */
  if (options.trimWhitespace) {
    while (idx < len && isSpace(str.charCodeAt(idx))) {
      ++idx;
    }
  }

  /* Check the number for a leading sign. */
  if (options.allowSign) {
    if (str[idx] === '-') {
      idx += 1;
      mult = -1;
    } else if (str[idx] === '+') {
      idx += 1;
    }
  }

  /* Parse the base-indicating prefix if there is one. */
  if (str[idx] === '0') {
    if (options.allowPrefix) {
      pbase = prefixToBase(str.charCodeAt(idx + 1));
      if (pbase !== -1 && (!baseOverride || pbase === base)) {
        base = pbase;
        idx += 2;
      }
    }

    if (pbase === -1 && options.leadingZeroIsOctal) {
      base = 8;
    }
  }

  /* Parse the actual digits. */
  for (start = idx; idx < len; ++idx) {
    c = translateDigit(str.charCodeAt(idx));
    if (c !== -1 && c < base) {
      value *= base;
      value += c;
    } else {
      break;
    }
  }

  /* If we didn't parse any digits, we have an invalid number. */
  if (start === idx) {
    return new Error('invalid number: ' + JSON.stringify(str));
  }

  /* Trim any whitespace on the right side. */
  if (options.trimWhitespace) {
    while (idx < len && isSpace(str.charCodeAt(idx))) {
      ++idx;
    }
  }

  /* Check for trailing characters. */
  if (idx < len && !options.allowTrailing) {
    return new Error('trailing characters after number: ' + JSON.stringify(str.slice(idx)));
  }

  /* If our value is 0, we return now, to avoid returning -0. */
  if (value === 0) {
    return 0;
  }

  /* Calculate our final value. */
  var result = value * mult;

  /*
   * If the string represents a value that cannot be precisely represented
   * by JavaScript, then we want to check that:
   *
   * - We never increased the value past MAX_SAFE_INTEGER
   * - We don't make the result negative and below MIN_SAFE_INTEGER
   *
   * Because we only ever increment the value during parsing, there's no
   * chance of moving past MAX_SAFE_INTEGER and then dropping below it
   * again, losing precision in the process. This means that we only need
   * to do our checks here, at the end.
   */
  if (!options.allowImprecise && (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {
    return new Error('number is outside of the supported range: ' + JSON.stringify(str.slice(start, idx)));
  }

  return result;
}

/*
 * Interpret a character code as a base-36 digit.
 */
function translateDigit(d) {
  if (d >= CP_0 && d <= CP_9) {
    /* '0' to '9' -> 0 to 9 */
    return d - PI_CONV_DEC;
  } else if (d >= CP_A && d <= CP_Z) {
    /* 'A' - 'Z' -> 10 to 35 */
    return d - PI_CONV_UC;
  } else if (d >= CP_a && d <= CP_z) {
    /* 'a' - 'z' -> 10 to 35 */
    return d - PI_CONV_LC;
  } else {
    /* Invalid character code */
    return -1;
  }
}

/*
 * Test if a value matches the ECMAScript definition of trimmable whitespace.
 */
function isSpace(c) {
  return (
    c === 0x20 ||
    (c >= 0x0009 && c <= 0x000d) ||
    c === 0x00a0 ||
    c === 0x1680 ||
    c === 0x180e ||
    (c >= 0x2000 && c <= 0x200a) ||
    c === 0x2028 ||
    c === 0x2029 ||
    c === 0x202f ||
    c === 0x205f ||
    c === 0x3000 ||
    c === 0xfeff
  );
}

/*
 * Determine which base a character indicates (e.g., 'x' indicates hex).
 */
function prefixToBase(c) {
  if (c === CP_b || c === CP_B) {
    /* 0b/0B (binary) */
    return 2;
  } else if (c === CP_o || c === CP_O) {
    /* 0o/0O (octal) */
    return 8;
  } else if (c === CP_t || c === CP_T) {
    /* 0t/0T (decimal) */
    return 10;
  } else if (c === CP_x || c === CP_X) {
    /* 0x/0X (hexadecimal) */
    return 16;
  } else {
    /* Not a meaningful character */
    return -1;
  }
}

function validateJsonObjectJS(schema, input) {
  var report = validate.validate(input, schema);

  if (report.errors.length === 0) return null;

  /* Currently, we only do anything useful with the first error. */
  var error = report.errors[0];

  /* The failed property is given by a URI with an irrelevant prefix. */
  var propname = error['property'];
  var reason = error['message'].toLowerCase();
  var i, j;

  /*
   * There's at least one case where the property error message is
   * confusing at best.  We work around this here.
   */
  if (
    (i = reason.indexOf('the property ')) != -1 &&
    (j = reason.indexOf(' is not defined in the schema and the ' + 'schema does not allow additional properties')) != -1
  ) {
    i += 'the property '.length;
    if (propname === '') propname = reason.substr(i, j - i);
    else propname = propname + '.' + reason.substr(i, j - i);

    reason = 'unsupported property';
  }

  var rv = new verror.VError('property "%s": %s', propname, reason);
  rv.jsv_details = error;
  return rv;
}

function randElt(arr) {
  assert_1.ok(Array.isArray(arr) && arr.length > 0, 'randElt argument must be a non-empty array');

  return arr[Math.floor(Math.random() * arr.length)];
}

function assertHrtime(a) {
  assert_1.ok(a[0] >= 0 && a[1] >= 0, 'negative numbers not allowed in hrtimes');
  assert_1.ok(a[1] < 1e9, 'nanoseconds column overflow');
}

/*
 * Compute the time elapsed between hrtime readings A and B, where A is later
 * than B.  hrtime readings come from Node's process.hrtime().  There is no
 * defined way to represent negative deltas, so it's illegal to diff B from A
 * where the time denoted by B is later than the time denoted by A.  If this
 * becomes valuable, we can define a representation and extend the
 * implementation to support it.
 */
function hrtimeDiff(a, b) {
  assertHrtime(a);
  assertHrtime(b);
  assert_1.ok(a[0] > b[0] || (a[0] == b[0] && a[1] >= b[1]), 'negative differences not allowed');

  var rv = [a[0] - b[0], 0];

  if (a[1] >= b[1]) {
    rv[1] = a[1] - b[1];
  } else {
    rv[0]--;
    rv[1] = 1e9 - (b[1] - a[1]);
  }

  return rv;
}

/*
 * Convert a hrtime reading from the array format returned by Node's
 * process.hrtime() into a scalar number of nanoseconds.
 */
function hrtimeNanosec(a) {
  assertHrtime(a);

  return Math.floor(a[0] * 1e9 + a[1]);
}

/*
 * Convert a hrtime reading from the array format returned by Node's
 * process.hrtime() into a scalar number of microseconds.
 */
function hrtimeMicrosec(a) {
  assertHrtime(a);

  return Math.floor(a[0] * 1e6 + a[1] / 1e3);
}

/*
 * Convert a hrtime reading from the array format returned by Node's
 * process.hrtime() into a scalar number of milliseconds.
 */
function hrtimeMillisec(a) {
  assertHrtime(a);

  return Math.floor(a[0] * 1e3 + a[1] / 1e6);
}

/*
 * Add two hrtime readings A and B, overwriting A with the result of the
 * addition.  This function is useful for accumulating several hrtime intervals
 * into a counter.  Returns A.
 */
function hrtimeAccum(a, b) {
  assertHrtime(a);
  assertHrtime(b);

  /*
   * Accumulate the nanosecond component.
   */
  a[1] += b[1];
  if (a[1] >= 1e9) {
    /*
     * The nanosecond component overflowed, so carry to the seconds
     * field.
     */
    a[0]++;
    a[1] -= 1e9;
  }

  /*
   * Accumulate the seconds component.
   */
  a[0] += b[0];

  return a;
}

/*
 * Add two hrtime readings A and B, returning the result as a new hrtime array.
 * Does not modify either input argument.
 */
function hrtimeAdd(a, b) {
  assertHrtime(a);

  var rv = [a[0], a[1]];

  return hrtimeAccum(rv, b);
}

/*
 * Check an object for unexpected properties.  Accepts the object to check, and
 * an array of allowed property names (strings).  Returns an array of key names
 * that were found on the object, but did not appear in the list of allowed
 * properties.  If no properties were found, the returned array will be of
 * zero length.
 */
function extraProperties(obj, allowed) {
  assert_1.ok(typeof obj === 'object' && obj !== null, 'obj argument must be a non-null object');
  assert_1.ok(Array.isArray(allowed), 'allowed argument must be an array of strings');
  for (var i = 0; i < allowed.length; i++) {
    assert_1.ok(typeof allowed[i] === 'string', 'allowed argument must be an array of strings');
  }

  return Object.keys(obj).filter(function(key) {
    return allowed.indexOf(key) === -1;
  });
}

/*
 * Given three sets of properties "provided" (may be undefined), "overrides"
 * (required), and "defaults" (may be undefined), construct an object containing
 * the union of these sets with "overrides" overriding "provided", and
 * "provided" overriding "defaults".  None of the input objects are modified.
 */
function mergeObjects(provided, overrides, defaults) {
  var rv, k;

  rv = {};
  if (defaults) {
    for (k in defaults) rv[k] = defaults[k];
  }

  if (provided) {
    for (k in provided) rv[k] = provided[k];
  }

  if (overrides) {
    for (k in overrides) rv[k] = overrides[k];
  }

  return rv;
}

var jsprim = {
  deepCopy: deepCopy_1,
  deepEqual: deepEqual_1,
  isEmpty: isEmpty_1,
  hasKey: hasKey_1,
  forEachKey: forEachKey_1,
  pluck: pluck_1,
  flattenObject: flattenObject_1,
  flattenIter: flattenIter_1,
  validateJsonObject: validateJsonObject,
  validateJsonObjectJS: validateJsonObjectJS_1,
  randElt: randElt_1,
  extraProperties: extraProperties_1,
  mergeObjects: mergeObjects_1,
  startsWith: startsWith_1,
  endsWith: endsWith_1,
  parseInteger: parseInteger_1,
  iso8601: iso8601_1,
  rfc1123: rfc1123_1,
  parseDateTime: parseDateTime_1,
  hrtimediff: hrtimediff,
  hrtimeDiff: hrtimeDiff_1,
  hrtimeAccum: hrtimeAccum_1,
  hrtimeAdd: hrtimeAdd_1,
  hrtimeNanosec: hrtimeNanosec_1,
  hrtimeMicrosec: hrtimeMicrosec_1,
  hrtimeMillisec: hrtimeMillisec_1
};

// Copyright 2012 Joyent, Inc.  All rights reserved.

var sprintf$3 = util__default['default'].format;

var HASH_ALGOS$1 = utils$1.HASH_ALGOS;
var PK_ALGOS$1 = utils$1.PK_ALGOS;
var InvalidAlgorithmError$7 = utils$1.InvalidAlgorithmError;
var HttpSignatureError$2 = utils$1.HttpSignatureError;
var validateAlgorithm$2 = utils$1.validateAlgorithm;

///--- Globals

var AUTHZ_FMT = 'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';

///--- Specific Errors

function MissingHeaderError$1(message) {
  HttpSignatureError$2.call(this, message, MissingHeaderError$1);
}
util__default['default'].inherits(MissingHeaderError$1, HttpSignatureError$2);

function StrictParsingError$1(message) {
  HttpSignatureError$2.call(this, message, StrictParsingError$1);
}
util__default['default'].inherits(StrictParsingError$1, HttpSignatureError$2);

/* See createSigner() */
function RequestSigner(options) {
  assert_1.object(options, 'options');

  var alg = [];
  if (options.algorithm !== undefined) {
    assert_1.string(options.algorithm, 'options.algorithm');
    alg = validateAlgorithm$2(options.algorithm);
  }
  this.rs_alg = alg;

  /*
   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones
   * with an rs_signer.
   *
   * rs_signFunc-based RequestSigners have to build up their entire signing
   * string within the rs_lines array and give it to rs_signFunc as a single
   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to
   * their signing state by using rs_signer.update(), thus only needing to
   * buffer the hash function state and one line at a time.
   */
  if (options.sign !== undefined) {
    assert_1.func(options.sign, 'options.sign');
    this.rs_signFunc = options.sign;
  } else if (alg[0] === 'hmac' && options.key !== undefined) {
    assert_1.string(options.keyId, 'options.keyId');
    this.rs_keyId = options.keyId;

    if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key))
      throw new TypeError('options.key for HMAC must be a string or Buffer');

    /*
     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their
     * data in chunks rather than requiring it all to be given in one go
     * at the end, so they are more similar to signers than signFuncs.
     */
    this.rs_signer = crypto__default['default'].createHmac(alg[1].toUpperCase(), options.key);
    this.rs_signer.sign = function() {
      var digest = this.digest('base64');
      return {
        hashAlgorithm: alg[1],
        toString: function() {
          return digest;
        }
      };
    };
  } else if (options.key !== undefined) {
    var key = options.key;
    if (typeof key === 'string' || Buffer.isBuffer(key)) key = lib$1.parsePrivateKey(key);

    assert_1.ok(lib$1.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');
    this.rs_key = key;

    assert_1.string(options.keyId, 'options.keyId');
    this.rs_keyId = options.keyId;

    if (!PK_ALGOS$1[key.type]) {
      throw new InvalidAlgorithmError$7(key.type.toUpperCase() + ' type ' + 'keys are not supported');
    }

    if (alg[0] !== undefined && key.type !== alg[0]) {
      throw new InvalidAlgorithmError$7(
        'options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead'
      );
    }

    this.rs_signer = key.createSign(alg[1]);
  } else {
    throw new TypeError('options.sign (func) or options.key is required');
  }

  this.rs_headers = [];
  this.rs_lines = [];
}

/**
 * Adds a header to be signed, with its value, into this signer.
 *
 * @param {String} header
 * @param {String} value
 * @return {String} value written
 */
RequestSigner.prototype.writeHeader = function(header, value) {
  assert_1.string(header, 'header');
  header = header.toLowerCase();
  assert_1.string(value, 'value');

  this.rs_headers.push(header);

  if (this.rs_signFunc) {
    this.rs_lines.push(header + ': ' + value);
  } else {
    var line = header + ': ' + value;
    if (this.rs_headers.length > 0) line = '\n' + line;
    this.rs_signer.update(line);
  }

  return value;
};

/**
 * Adds a default Date header, returning its value.
 *
 * @return {String}
 */
RequestSigner.prototype.writeDateHeader = function() {
  return this.writeHeader('date', jsprim.rfc1123(new Date()));
};

/**
 * Adds the request target line to be signed.
 *
 * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')
 * @param {String} path
 */
RequestSigner.prototype.writeTarget = function(method, path) {
  assert_1.string(method, 'method');
  assert_1.string(path, 'path');
  method = method.toLowerCase();
  this.writeHeader('(request-target)', method + ' ' + path);
};

/**
 * Calculate the value for the Authorization header on this request
 * asynchronously.
 *
 * @param {Func} callback (err, authz)
 */
RequestSigner.prototype.sign = function(cb) {
  assert_1.func(cb, 'callback');

  if (this.rs_headers.length < 1) throw new Error('At least one header must be signed');

  var alg, authz;
  if (this.rs_signFunc) {
    var data = this.rs_lines.join('\n');
    var self = this;
    this.rs_signFunc(data, function(err, sig) {
      if (err) {
        cb(err);
        return;
      }
      try {
        assert_1.object(sig, 'signature');
        assert_1.string(sig.keyId, 'signature.keyId');
        assert_1.string(sig.algorithm, 'signature.algorithm');
        assert_1.string(sig.signature, 'signature.signature');
        alg = validateAlgorithm$2(sig.algorithm);

        authz = sprintf$3(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(' '), sig.signature);
      } catch (e) {
        cb(e);
        return;
      }
      cb(null, authz);
    });
  } else {
    try {
      var sigObj = this.rs_signer.sign();
    } catch (e) {
      cb(e);
      return;
    }
    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;
    var signature = sigObj.toString();
    authz = sprintf$3(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(' '), signature);
    cb(null, authz);
  }
};

///--- Exported API

var signer = {
  /**
   * Identifies whether a given object is a request signer or not.
   *
   * @param {Object} object, the object to identify
   * @returns {Boolean}
   */
  isSigner: function(obj) {
    if (typeof obj === 'object' && obj instanceof RequestSigner) return true;
    return false;
  },

  /**
   * Creates a request signer, used to asynchronously build a signature
   * for a request (does not have to be an http.ClientRequest).
   *
   * @param {Object} options, either:
   *                   - {String} keyId
   *                   - {String|Buffer} key
   *                   - {String} algorithm (optional, required for HMAC)
   *                 or:
   *                   - {Func} sign (data, cb)
   * @return {RequestSigner}
   */
  createSigner: function createSigner(options) {
    return new RequestSigner(options);
  },

  /**
   * Adds an 'Authorization' header to an http.ClientRequest object.
   *
   * Note that this API will add a Date header if it's not already set. Any
   * other headers in the options.headers array MUST be present, or this
   * will throw.
   *
   * You shouldn't need to check the return type; it's just there if you want
   * to be pedantic.
   *
   * The optional flag indicates whether parsing should use strict enforcement
   * of the version draft-cavage-http-signatures-04 of the spec or beyond.
   * The default is to be loose and support
   * older versions for compatibility.
   *
   * @param {Object} request an instance of http.ClientRequest.
   * @param {Object} options signing parameters object:
   *                   - {String} keyId required.
   *                   - {String} key required (either a PEM or HMAC key).
   *                   - {Array} headers optional; defaults to ['date'].
   *                   - {String} algorithm optional (unless key is HMAC);
   *                              default is the same as the sshpk default
   *                              signing algorithm for the type of key given
   *                   - {String} httpVersion optional; defaults to '1.1'.
   *                   - {Boolean} strict optional; defaults to 'false'.
   * @return {Boolean} true if Authorization (and optionally Date) were added.
   * @throws {TypeError} on bad parameter types (input).
   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with
   *                                 the given key.
   * @throws {sshpk.KeyParseError} if key was bad.
   * @throws {MissingHeaderError} if a header to be signed was specified but
   *                              was not present.
   */
  signRequest: function signRequest(request, options) {
    assert_1.object(request, 'request');
    assert_1.object(options, 'options');
    assert_1.optionalString(options.algorithm, 'options.algorithm');
    assert_1.string(options.keyId, 'options.keyId');
    assert_1.optionalArrayOfString(options.headers, 'options.headers');
    assert_1.optionalString(options.httpVersion, 'options.httpVersion');

    if (!request.getHeader('Date')) request.setHeader('Date', jsprim.rfc1123(new Date()));
    if (!options.headers) options.headers = ['date'];
    if (!options.httpVersion) options.httpVersion = '1.1';

    var alg = [];
    if (options.algorithm) {
      options.algorithm = options.algorithm.toLowerCase();
      alg = validateAlgorithm$2(options.algorithm);
    }

    var i;
    var stringToSign = '';
    for (i = 0; i < options.headers.length; i++) {
      if (typeof options.headers[i] !== 'string') throw new TypeError('options.headers must be an array of Strings');

      var h = options.headers[i].toLowerCase();

      if (h === 'request-line') {
        if (!options.strict) {
          /**
           * We allow headers from the older spec drafts if strict parsing isn't
           * specified in options.
           */
          stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;
        } else {
          /* Strict parsing doesn't allow older draft headers. */
          throw new StrictParsingError$1('request-line is not a valid header ' + 'with strict parsing enabled.');
        }
      } else if (h === '(request-target)') {
        stringToSign += '(request-target): ' + request.method.toLowerCase() + ' ' + request.path;
      } else {
        var value = request.getHeader(h);
        if (value === undefined || value === '') {
          throw new MissingHeaderError$1(h + ' was not in the request');
        }
        stringToSign += h + ': ' + value;
      }

      if (i + 1 < options.headers.length) stringToSign += '\n';
    }

    /* This is just for unit tests. */
    if (request.hasOwnProperty('_stringToSign')) {
      request._stringToSign = stringToSign;
    }

    var signature;
    if (alg[0] === 'hmac') {
      if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key))
        throw new TypeError('options.key must be a string or Buffer');

      var hmac = crypto__default['default'].createHmac(alg[1].toUpperCase(), options.key);
      hmac.update(stringToSign);
      signature = hmac.digest('base64');
    } else {
      var key = options.key;
      if (typeof key === 'string' || Buffer.isBuffer(key)) key = lib$1.parsePrivateKey(options.key);

      assert_1.ok(lib$1.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');

      if (!PK_ALGOS$1[key.type]) {
        throw new InvalidAlgorithmError$7(key.type.toUpperCase() + ' type ' + 'keys are not supported');
      }

      if (alg[0] !== undefined && key.type !== alg[0]) {
        throw new InvalidAlgorithmError$7(
          'options.key must be a ' +
            alg[0].toUpperCase() +
            ' key, was given a ' +
            key.type.toUpperCase() +
            ' key instead'
        );
      }

      var signer = key.createSign(alg[1]);
      signer.update(stringToSign);
      var sigObj = signer.sign();
      if (!HASH_ALGOS$1[sigObj.hashAlgorithm]) {
        throw new InvalidAlgorithmError$7(sigObj.hashAlgorithm.toUpperCase() + ' is not a supported hash algorithm');
      }
      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;
      signature = sigObj.toString();
      assert_1.notStrictEqual(signature, '', 'empty signature produced');
    }

    var authzHeaderName = options.authorizationHeaderName || 'Authorization';

    request.setHeader(
      authzHeaderName,
      sprintf$3(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(' '), signature)
    );

    return true;
  }
};

var validateAlgorithm$3 = utils$1.validateAlgorithm;

///--- Exported API

var verify$2 = {
  /**
   * Verify RSA/DSA signature against public key.  You are expected to pass in
   * an object that was returned from `parse()`.
   *
   * @param {Object} parsedSignature the object you got from `parse`.
   * @param {String} pubkey RSA/DSA private key PEM.
   * @return {Boolean} true if valid, false otherwise.
   * @throws {TypeError} if you pass in bad arguments.
   * @throws {InvalidAlgorithmError}
   */
  verifySignature: function verifySignature(parsedSignature, pubkey) {
    assert_1.object(parsedSignature, 'parsedSignature');
    if (typeof pubkey === 'string' || Buffer.isBuffer(pubkey)) pubkey = lib$1.parseKey(pubkey);
    assert_1.ok(lib$1.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');

    var alg = validateAlgorithm$3(parsedSignature.algorithm);
    if (alg[0] === 'hmac' || alg[0] !== pubkey.type) return false;

    var v = pubkey.createVerify(alg[1]);
    v.update(parsedSignature.signingString);
    return v.verify(parsedSignature.params.signature, 'base64');
  },

  /**
   * Verify HMAC against shared secret.  You are expected to pass in an object
   * that was returned from `parse()`.
   *
   * @param {Object} parsedSignature the object you got from `parse`.
   * @param {String} secret HMAC shared secret.
   * @return {Boolean} true if valid, false otherwise.
   * @throws {TypeError} if you pass in bad arguments.
   * @throws {InvalidAlgorithmError}
   */
  verifyHMAC: function verifyHMAC(parsedSignature, secret) {
    assert_1.object(parsedSignature, 'parsedHMAC');
    assert_1.string(secret, 'secret');

    var alg = validateAlgorithm$3(parsedSignature.algorithm);
    if (alg[0] !== 'hmac') return false;

    var hashAlg = alg[1].toUpperCase();

    var hmac = crypto__default['default'].createHmac(hashAlg, secret);
    hmac.update(parsedSignature.signingString);

    /*
     * Now double-hash to avoid leaking timing information - there's
     * no easy constant-time compare in JS, so we use this approach
     * instead. See for more info:
     * https://www.isecpartners.com/blog/2011/february/double-hmac-
     * verification.aspx
     */
    var h1 = crypto__default['default'].createHmac(hashAlg, secret);
    h1.update(hmac.digest());
    h1 = h1.digest();
    var h2 = crypto__default['default'].createHmac(hashAlg, secret);
    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));
    h2 = h2.digest();

    /* Node 0.8 returns strings from .digest(). */
    if (typeof h1 === 'string') return h1 === h2;
    /* And node 0.10 lacks the .equals() method on Buffers. */
    if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString('binary') === h2.toString('binary');

    return h1.equals(h2);
  }
};

// Copyright 2015 Joyent, Inc.

///--- API

var lib$2 = {
  parse: parser.parseRequest,
  parseRequest: parser.parseRequest,

  sign: signer.signRequest,
  signRequest: signer.signRequest,
  createSigner: signer.createSigner,
  isSigner: signer.isSigner,

  sshKeyToPEM: utils$1.sshKeyToPEM,
  sshKeyFingerprint: utils$1.fingerprint,
  pemToRsaSSHKey: utils$1.pemToRsaSSHKey,

  verify: verify$2.verifySignature,
  verifySignature: verify$2.verifySignature,
  verifyHMAC: verify$2.verifyHMAC
};

var require$$0 = {
  'application/1d-interleaved-parityfec': {
    source: 'iana'
  },
  'application/3gpdash-qoe-report+xml': {
    source: 'iana',
    compressible: true
  },
  'application/3gpp-ims+xml': {
    source: 'iana',
    compressible: true
  },
  'application/a2l': {
    source: 'iana'
  },
  'application/activemessage': {
    source: 'iana'
  },
  'application/activity+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-costmap+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-costmapfilter+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-directory+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-endpointcost+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-endpointcostparams+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-endpointprop+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-endpointpropparams+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-error+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-networkmap+json': {
    source: 'iana',
    compressible: true
  },
  'application/alto-networkmapfilter+json': {
    source: 'iana',
    compressible: true
  },
  'application/aml': {
    source: 'iana'
  },
  'application/andrew-inset': {
    source: 'iana',
    extensions: ['ez']
  },
  'application/applefile': {
    source: 'iana'
  },
  'application/applixware': {
    source: 'apache',
    extensions: ['aw']
  },
  'application/atf': {
    source: 'iana'
  },
  'application/atfx': {
    source: 'iana'
  },
  'application/atom+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['atom']
  },
  'application/atomcat+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['atomcat']
  },
  'application/atomdeleted+xml': {
    source: 'iana',
    compressible: true
  },
  'application/atomicmail': {
    source: 'iana'
  },
  'application/atomsvc+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['atomsvc']
  },
  'application/atsc-dwd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/atsc-held+xml': {
    source: 'iana',
    compressible: true
  },
  'application/atsc-rsat+xml': {
    source: 'iana',
    compressible: true
  },
  'application/atxml': {
    source: 'iana'
  },
  'application/auth-policy+xml': {
    source: 'iana',
    compressible: true
  },
  'application/bacnet-xdd+zip': {
    source: 'iana',
    compressible: false
  },
  'application/batch-smtp': {
    source: 'iana'
  },
  'application/bdoc': {
    compressible: false,
    extensions: ['bdoc']
  },
  'application/beep+xml': {
    source: 'iana',
    compressible: true
  },
  'application/calendar+json': {
    source: 'iana',
    compressible: true
  },
  'application/calendar+xml': {
    source: 'iana',
    compressible: true
  },
  'application/call-completion': {
    source: 'iana'
  },
  'application/cals-1840': {
    source: 'iana'
  },
  'application/cbor': {
    source: 'iana'
  },
  'application/cccex': {
    source: 'iana'
  },
  'application/ccmp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/ccxml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['ccxml']
  },
  'application/cdfx+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cdmi-capability': {
    source: 'iana',
    extensions: ['cdmia']
  },
  'application/cdmi-container': {
    source: 'iana',
    extensions: ['cdmic']
  },
  'application/cdmi-domain': {
    source: 'iana',
    extensions: ['cdmid']
  },
  'application/cdmi-object': {
    source: 'iana',
    extensions: ['cdmio']
  },
  'application/cdmi-queue': {
    source: 'iana',
    extensions: ['cdmiq']
  },
  'application/cdni': {
    source: 'iana'
  },
  'application/cea': {
    source: 'iana'
  },
  'application/cea-2018+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cellml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cfw': {
    source: 'iana'
  },
  'application/clue_info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cms': {
    source: 'iana'
  },
  'application/cnrp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/coap-group+json': {
    source: 'iana',
    compressible: true
  },
  'application/coap-payload': {
    source: 'iana'
  },
  'application/commonground': {
    source: 'iana'
  },
  'application/conference-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cose': {
    source: 'iana'
  },
  'application/cose-key': {
    source: 'iana'
  },
  'application/cose-key-set': {
    source: 'iana'
  },
  'application/cpl+xml': {
    source: 'iana',
    compressible: true
  },
  'application/csrattrs': {
    source: 'iana'
  },
  'application/csta+xml': {
    source: 'iana',
    compressible: true
  },
  'application/cstadata+xml': {
    source: 'iana',
    compressible: true
  },
  'application/csvm+json': {
    source: 'iana',
    compressible: true
  },
  'application/cu-seeme': {
    source: 'apache',
    extensions: ['cu']
  },
  'application/cwt': {
    source: 'iana'
  },
  'application/cybercash': {
    source: 'iana'
  },
  'application/dart': {
    compressible: true
  },
  'application/dash+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mpd']
  },
  'application/dashdelta': {
    source: 'iana'
  },
  'application/davmount+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['davmount']
  },
  'application/dca-rft': {
    source: 'iana'
  },
  'application/dcd': {
    source: 'iana'
  },
  'application/dec-dx': {
    source: 'iana'
  },
  'application/dialog-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/dicom': {
    source: 'iana'
  },
  'application/dicom+json': {
    source: 'iana',
    compressible: true
  },
  'application/dicom+xml': {
    source: 'iana',
    compressible: true
  },
  'application/dii': {
    source: 'iana'
  },
  'application/dit': {
    source: 'iana'
  },
  'application/dns': {
    source: 'iana'
  },
  'application/dns+json': {
    source: 'iana',
    compressible: true
  },
  'application/dns-message': {
    source: 'iana'
  },
  'application/docbook+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['dbk']
  },
  'application/dskpp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/dssc+der': {
    source: 'iana',
    extensions: ['dssc']
  },
  'application/dssc+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xdssc']
  },
  'application/dvcs': {
    source: 'iana'
  },
  'application/ecmascript': {
    source: 'iana',
    compressible: true,
    extensions: ['ecma', 'es']
  },
  'application/edi-consent': {
    source: 'iana'
  },
  'application/edi-x12': {
    source: 'iana',
    compressible: false
  },
  'application/edifact': {
    source: 'iana',
    compressible: false
  },
  'application/efi': {
    source: 'iana'
  },
  'application/emergencycalldata.comment+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.control+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.deviceinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.ecall.msd': {
    source: 'iana'
  },
  'application/emergencycalldata.providerinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.serviceinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.subscriberinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emergencycalldata.veds+xml': {
    source: 'iana',
    compressible: true
  },
  'application/emma+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['emma']
  },
  'application/emotionml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/encaprtp': {
    source: 'iana'
  },
  'application/epp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/epub+zip': {
    source: 'iana',
    compressible: false,
    extensions: ['epub']
  },
  'application/eshop': {
    source: 'iana'
  },
  'application/exi': {
    source: 'iana',
    extensions: ['exi']
  },
  'application/expect-ct-report+json': {
    source: 'iana',
    compressible: true
  },
  'application/fastinfoset': {
    source: 'iana'
  },
  'application/fastsoap': {
    source: 'iana'
  },
  'application/fdt+xml': {
    source: 'iana',
    compressible: true
  },
  'application/fhir+json': {
    source: 'iana',
    compressible: true
  },
  'application/fhir+xml': {
    source: 'iana',
    compressible: true
  },
  'application/fido.trusted-apps+json': {
    compressible: true
  },
  'application/fits': {
    source: 'iana'
  },
  'application/flexfec': {
    source: 'iana'
  },
  'application/font-sfnt': {
    source: 'iana'
  },
  'application/font-tdpfr': {
    source: 'iana',
    extensions: ['pfr']
  },
  'application/font-woff': {
    source: 'iana',
    compressible: false
  },
  'application/framework-attributes+xml': {
    source: 'iana',
    compressible: true
  },
  'application/geo+json': {
    source: 'iana',
    compressible: true,
    extensions: ['geojson']
  },
  'application/geo+json-seq': {
    source: 'iana'
  },
  'application/geopackage+sqlite3': {
    source: 'iana'
  },
  'application/geoxacml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/gltf-buffer': {
    source: 'iana'
  },
  'application/gml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['gml']
  },
  'application/gpx+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['gpx']
  },
  'application/gxf': {
    source: 'apache',
    extensions: ['gxf']
  },
  'application/gzip': {
    source: 'iana',
    compressible: false,
    extensions: ['gz']
  },
  'application/h224': {
    source: 'iana'
  },
  'application/held+xml': {
    source: 'iana',
    compressible: true
  },
  'application/hjson': {
    extensions: ['hjson']
  },
  'application/http': {
    source: 'iana'
  },
  'application/hyperstudio': {
    source: 'iana',
    extensions: ['stk']
  },
  'application/ibe-key-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/ibe-pkg-reply+xml': {
    source: 'iana',
    compressible: true
  },
  'application/ibe-pp-data': {
    source: 'iana'
  },
  'application/iges': {
    source: 'iana'
  },
  'application/im-iscomposing+xml': {
    source: 'iana',
    compressible: true
  },
  'application/index': {
    source: 'iana'
  },
  'application/index.cmd': {
    source: 'iana'
  },
  'application/index.obj': {
    source: 'iana'
  },
  'application/index.response': {
    source: 'iana'
  },
  'application/index.vnd': {
    source: 'iana'
  },
  'application/inkml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['ink', 'inkml']
  },
  'application/iotp': {
    source: 'iana'
  },
  'application/ipfix': {
    source: 'iana',
    extensions: ['ipfix']
  },
  'application/ipp': {
    source: 'iana'
  },
  'application/isup': {
    source: 'iana'
  },
  'application/its+xml': {
    source: 'iana',
    compressible: true
  },
  'application/java-archive': {
    source: 'apache',
    compressible: false,
    extensions: ['jar', 'war', 'ear']
  },
  'application/java-serialized-object': {
    source: 'apache',
    compressible: false,
    extensions: ['ser']
  },
  'application/java-vm': {
    source: 'apache',
    compressible: false,
    extensions: ['class']
  },
  'application/javascript': {
    source: 'iana',
    charset: 'UTF-8',
    compressible: true,
    extensions: ['js', 'mjs']
  },
  'application/jf2feed+json': {
    source: 'iana',
    compressible: true
  },
  'application/jose': {
    source: 'iana'
  },
  'application/jose+json': {
    source: 'iana',
    compressible: true
  },
  'application/jrd+json': {
    source: 'iana',
    compressible: true
  },
  'application/json': {
    source: 'iana',
    charset: 'UTF-8',
    compressible: true,
    extensions: ['json', 'map']
  },
  'application/json-patch+json': {
    source: 'iana',
    compressible: true
  },
  'application/json-seq': {
    source: 'iana'
  },
  'application/json5': {
    extensions: ['json5']
  },
  'application/jsonml+json': {
    source: 'apache',
    compressible: true,
    extensions: ['jsonml']
  },
  'application/jwk+json': {
    source: 'iana',
    compressible: true
  },
  'application/jwk-set+json': {
    source: 'iana',
    compressible: true
  },
  'application/jwt': {
    source: 'iana'
  },
  'application/kpml-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/kpml-response+xml': {
    source: 'iana',
    compressible: true
  },
  'application/ld+json': {
    source: 'iana',
    compressible: true,
    extensions: ['jsonld']
  },
  'application/lgr+xml': {
    source: 'iana',
    compressible: true
  },
  'application/link-format': {
    source: 'iana'
  },
  'application/load-control+xml': {
    source: 'iana',
    compressible: true
  },
  'application/lost+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['lostxml']
  },
  'application/lostsync+xml': {
    source: 'iana',
    compressible: true
  },
  'application/lxf': {
    source: 'iana'
  },
  'application/mac-binhex40': {
    source: 'iana',
    extensions: ['hqx']
  },
  'application/mac-compactpro': {
    source: 'apache',
    extensions: ['cpt']
  },
  'application/macwriteii': {
    source: 'iana'
  },
  'application/mads+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mads']
  },
  'application/manifest+json': {
    charset: 'UTF-8',
    compressible: true,
    extensions: ['webmanifest']
  },
  'application/marc': {
    source: 'iana',
    extensions: ['mrc']
  },
  'application/marcxml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mrcx']
  },
  'application/mathematica': {
    source: 'iana',
    extensions: ['ma', 'nb', 'mb']
  },
  'application/mathml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mathml']
  },
  'application/mathml-content+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mathml-presentation+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-associated-procedure-description+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-deregister+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-envelope+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-msk+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-msk-response+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-protection-description+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-reception-report+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-register+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-register-response+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-schedule+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbms-user-service-description+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mbox': {
    source: 'iana',
    extensions: ['mbox']
  },
  'application/media-policy-dataset+xml': {
    source: 'iana',
    compressible: true
  },
  'application/media_control+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mediaservercontrol+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mscml']
  },
  'application/merge-patch+json': {
    source: 'iana',
    compressible: true
  },
  'application/metalink+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['metalink']
  },
  'application/metalink4+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['meta4']
  },
  'application/mets+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mets']
  },
  'application/mf4': {
    source: 'iana'
  },
  'application/mikey': {
    source: 'iana'
  },
  'application/mipc': {
    source: 'iana'
  },
  'application/mmt-aei+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mmt-usd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mods+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mods']
  },
  'application/moss-keys': {
    source: 'iana'
  },
  'application/moss-signature': {
    source: 'iana'
  },
  'application/mosskey-data': {
    source: 'iana'
  },
  'application/mosskey-request': {
    source: 'iana'
  },
  'application/mp21': {
    source: 'iana',
    extensions: ['m21', 'mp21']
  },
  'application/mp4': {
    source: 'iana',
    extensions: ['mp4s', 'm4p']
  },
  'application/mpeg4-generic': {
    source: 'iana'
  },
  'application/mpeg4-iod': {
    source: 'iana'
  },
  'application/mpeg4-iod-xmt': {
    source: 'iana'
  },
  'application/mrb-consumer+xml': {
    source: 'iana',
    compressible: true
  },
  'application/mrb-publish+xml': {
    source: 'iana',
    compressible: true
  },
  'application/msc-ivr+xml': {
    source: 'iana',
    compressible: true
  },
  'application/msc-mixer+xml': {
    source: 'iana',
    compressible: true
  },
  'application/msword': {
    source: 'iana',
    compressible: false,
    extensions: ['doc', 'dot']
  },
  'application/mud+json': {
    source: 'iana',
    compressible: true
  },
  'application/mxf': {
    source: 'iana',
    extensions: ['mxf']
  },
  'application/n-quads': {
    source: 'iana',
    extensions: ['nq']
  },
  'application/n-triples': {
    source: 'iana',
    extensions: ['nt']
  },
  'application/nasdata': {
    source: 'iana'
  },
  'application/news-checkgroups': {
    source: 'iana'
  },
  'application/news-groupinfo': {
    source: 'iana'
  },
  'application/news-transmission': {
    source: 'iana'
  },
  'application/nlsml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/node': {
    source: 'iana'
  },
  'application/nss': {
    source: 'iana'
  },
  'application/ocsp-request': {
    source: 'iana'
  },
  'application/ocsp-response': {
    source: 'iana'
  },
  'application/octet-stream': {
    source: 'iana',
    compressible: false,
    extensions: [
      'bin',
      'dms',
      'lrf',
      'mar',
      'so',
      'dist',
      'distz',
      'pkg',
      'bpk',
      'dump',
      'elc',
      'deploy',
      'exe',
      'dll',
      'deb',
      'dmg',
      'iso',
      'img',
      'msi',
      'msp',
      'msm',
      'buffer'
    ]
  },
  'application/oda': {
    source: 'iana',
    extensions: ['oda']
  },
  'application/odm+xml': {
    source: 'iana',
    compressible: true
  },
  'application/odx': {
    source: 'iana'
  },
  'application/oebps-package+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['opf']
  },
  'application/ogg': {
    source: 'iana',
    compressible: false,
    extensions: ['ogx']
  },
  'application/omdoc+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['omdoc']
  },
  'application/onenote': {
    source: 'apache',
    extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg']
  },
  'application/oscore': {
    source: 'iana'
  },
  'application/oxps': {
    source: 'iana',
    extensions: ['oxps']
  },
  'application/p2p-overlay+xml': {
    source: 'iana',
    compressible: true
  },
  'application/parityfec': {
    source: 'iana'
  },
  'application/passport': {
    source: 'iana'
  },
  'application/patch-ops-error+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xer']
  },
  'application/pdf': {
    source: 'iana',
    compressible: false,
    extensions: ['pdf']
  },
  'application/pdx': {
    source: 'iana'
  },
  'application/pem-certificate-chain': {
    source: 'iana'
  },
  'application/pgp-encrypted': {
    source: 'iana',
    compressible: false,
    extensions: ['pgp']
  },
  'application/pgp-keys': {
    source: 'iana'
  },
  'application/pgp-signature': {
    source: 'iana',
    extensions: ['asc', 'sig']
  },
  'application/pics-rules': {
    source: 'apache',
    extensions: ['prf']
  },
  'application/pidf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/pidf-diff+xml': {
    source: 'iana',
    compressible: true
  },
  'application/pkcs10': {
    source: 'iana',
    extensions: ['p10']
  },
  'application/pkcs12': {
    source: 'iana'
  },
  'application/pkcs7-mime': {
    source: 'iana',
    extensions: ['p7m', 'p7c']
  },
  'application/pkcs7-signature': {
    source: 'iana',
    extensions: ['p7s']
  },
  'application/pkcs8': {
    source: 'iana',
    extensions: ['p8']
  },
  'application/pkcs8-encrypted': {
    source: 'iana'
  },
  'application/pkix-attr-cert': {
    source: 'iana',
    extensions: ['ac']
  },
  'application/pkix-cert': {
    source: 'iana',
    extensions: ['cer']
  },
  'application/pkix-crl': {
    source: 'iana',
    extensions: ['crl']
  },
  'application/pkix-pkipath': {
    source: 'iana',
    extensions: ['pkipath']
  },
  'application/pkixcmp': {
    source: 'iana',
    extensions: ['pki']
  },
  'application/pls+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['pls']
  },
  'application/poc-settings+xml': {
    source: 'iana',
    compressible: true
  },
  'application/postscript': {
    source: 'iana',
    compressible: true,
    extensions: ['ai', 'eps', 'ps']
  },
  'application/ppsp-tracker+json': {
    source: 'iana',
    compressible: true
  },
  'application/problem+json': {
    source: 'iana',
    compressible: true
  },
  'application/problem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/provenance+xml': {
    source: 'iana',
    compressible: true
  },
  'application/prs.alvestrand.titrax-sheet': {
    source: 'iana'
  },
  'application/prs.cww': {
    source: 'iana',
    extensions: ['cww']
  },
  'application/prs.hpub+zip': {
    source: 'iana',
    compressible: false
  },
  'application/prs.nprend': {
    source: 'iana'
  },
  'application/prs.plucker': {
    source: 'iana'
  },
  'application/prs.rdf-xml-crypt': {
    source: 'iana'
  },
  'application/prs.xsf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/pskc+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['pskcxml']
  },
  'application/qsig': {
    source: 'iana'
  },
  'application/raml+yaml': {
    compressible: true,
    extensions: ['raml']
  },
  'application/raptorfec': {
    source: 'iana'
  },
  'application/rdap+json': {
    source: 'iana',
    compressible: true
  },
  'application/rdf+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['rdf', 'owl']
  },
  'application/reginfo+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['rif']
  },
  'application/relax-ng-compact-syntax': {
    source: 'iana',
    extensions: ['rnc']
  },
  'application/remote-printing': {
    source: 'iana'
  },
  'application/reputon+json': {
    source: 'iana',
    compressible: true
  },
  'application/resource-lists+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['rl']
  },
  'application/resource-lists-diff+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['rld']
  },
  'application/rfc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/riscos': {
    source: 'iana'
  },
  'application/rlmi+xml': {
    source: 'iana',
    compressible: true
  },
  'application/rls-services+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['rs']
  },
  'application/route-apd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/route-s-tsid+xml': {
    source: 'iana',
    compressible: true
  },
  'application/route-usd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/rpki-ghostbusters': {
    source: 'iana',
    extensions: ['gbr']
  },
  'application/rpki-manifest': {
    source: 'iana',
    extensions: ['mft']
  },
  'application/rpki-publication': {
    source: 'iana'
  },
  'application/rpki-roa': {
    source: 'iana',
    extensions: ['roa']
  },
  'application/rpki-updown': {
    source: 'iana'
  },
  'application/rsd+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['rsd']
  },
  'application/rss+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['rss']
  },
  'application/rtf': {
    source: 'iana',
    compressible: true,
    extensions: ['rtf']
  },
  'application/rtploopback': {
    source: 'iana'
  },
  'application/rtx': {
    source: 'iana'
  },
  'application/samlassertion+xml': {
    source: 'iana',
    compressible: true
  },
  'application/samlmetadata+xml': {
    source: 'iana',
    compressible: true
  },
  'application/sbml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['sbml']
  },
  'application/scaip+xml': {
    source: 'iana',
    compressible: true
  },
  'application/scim+json': {
    source: 'iana',
    compressible: true
  },
  'application/scvp-cv-request': {
    source: 'iana',
    extensions: ['scq']
  },
  'application/scvp-cv-response': {
    source: 'iana',
    extensions: ['scs']
  },
  'application/scvp-vp-request': {
    source: 'iana',
    extensions: ['spq']
  },
  'application/scvp-vp-response': {
    source: 'iana',
    extensions: ['spp']
  },
  'application/sdp': {
    source: 'iana',
    extensions: ['sdp']
  },
  'application/secevent+jwt': {
    source: 'iana'
  },
  'application/senml+cbor': {
    source: 'iana'
  },
  'application/senml+json': {
    source: 'iana',
    compressible: true
  },
  'application/senml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/senml-exi': {
    source: 'iana'
  },
  'application/sensml+cbor': {
    source: 'iana'
  },
  'application/sensml+json': {
    source: 'iana',
    compressible: true
  },
  'application/sensml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/sensml-exi': {
    source: 'iana'
  },
  'application/sep+xml': {
    source: 'iana',
    compressible: true
  },
  'application/sep-exi': {
    source: 'iana'
  },
  'application/session-info': {
    source: 'iana'
  },
  'application/set-payment': {
    source: 'iana'
  },
  'application/set-payment-initiation': {
    source: 'iana',
    extensions: ['setpay']
  },
  'application/set-registration': {
    source: 'iana'
  },
  'application/set-registration-initiation': {
    source: 'iana',
    extensions: ['setreg']
  },
  'application/sgml': {
    source: 'iana'
  },
  'application/sgml-open-catalog': {
    source: 'iana'
  },
  'application/shf+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['shf']
  },
  'application/sieve': {
    source: 'iana',
    extensions: ['siv', 'sieve']
  },
  'application/simple-filter+xml': {
    source: 'iana',
    compressible: true
  },
  'application/simple-message-summary': {
    source: 'iana'
  },
  'application/simplesymbolcontainer': {
    source: 'iana'
  },
  'application/sipc': {
    source: 'iana'
  },
  'application/slate': {
    source: 'iana'
  },
  'application/smil': {
    source: 'iana'
  },
  'application/smil+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['smi', 'smil']
  },
  'application/smpte336m': {
    source: 'iana'
  },
  'application/soap+fastinfoset': {
    source: 'iana'
  },
  'application/soap+xml': {
    source: 'iana',
    compressible: true
  },
  'application/sparql-query': {
    source: 'iana',
    extensions: ['rq']
  },
  'application/sparql-results+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['srx']
  },
  'application/spirits-event+xml': {
    source: 'iana',
    compressible: true
  },
  'application/sql': {
    source: 'iana'
  },
  'application/srgs': {
    source: 'iana',
    extensions: ['gram']
  },
  'application/srgs+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['grxml']
  },
  'application/sru+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['sru']
  },
  'application/ssdl+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['ssdl']
  },
  'application/ssml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['ssml']
  },
  'application/stix+json': {
    source: 'iana',
    compressible: true
  },
  'application/swid+xml': {
    source: 'iana',
    compressible: true
  },
  'application/tamp-apex-update': {
    source: 'iana'
  },
  'application/tamp-apex-update-confirm': {
    source: 'iana'
  },
  'application/tamp-community-update': {
    source: 'iana'
  },
  'application/tamp-community-update-confirm': {
    source: 'iana'
  },
  'application/tamp-error': {
    source: 'iana'
  },
  'application/tamp-sequence-adjust': {
    source: 'iana'
  },
  'application/tamp-sequence-adjust-confirm': {
    source: 'iana'
  },
  'application/tamp-status-query': {
    source: 'iana'
  },
  'application/tamp-status-response': {
    source: 'iana'
  },
  'application/tamp-update': {
    source: 'iana'
  },
  'application/tamp-update-confirm': {
    source: 'iana'
  },
  'application/tar': {
    compressible: true
  },
  'application/taxii+json': {
    source: 'iana',
    compressible: true
  },
  'application/tei+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['tei', 'teicorpus']
  },
  'application/tetra_isi': {
    source: 'iana'
  },
  'application/thraud+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['tfi']
  },
  'application/timestamp-query': {
    source: 'iana'
  },
  'application/timestamp-reply': {
    source: 'iana'
  },
  'application/timestamped-data': {
    source: 'iana',
    extensions: ['tsd']
  },
  'application/tlsrpt+gzip': {
    source: 'iana'
  },
  'application/tlsrpt+json': {
    source: 'iana',
    compressible: true
  },
  'application/tnauthlist': {
    source: 'iana'
  },
  'application/toml': {
    compressible: true,
    extensions: ['toml']
  },
  'application/trickle-ice-sdpfrag': {
    source: 'iana'
  },
  'application/trig': {
    source: 'iana'
  },
  'application/ttml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/tve-trigger': {
    source: 'iana'
  },
  'application/tzif': {
    source: 'iana'
  },
  'application/tzif-leap': {
    source: 'iana'
  },
  'application/ulpfec': {
    source: 'iana'
  },
  'application/urc-grpsheet+xml': {
    source: 'iana',
    compressible: true
  },
  'application/urc-ressheet+xml': {
    source: 'iana',
    compressible: true
  },
  'application/urc-targetdesc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/urc-uisocketdesc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vcard+json': {
    source: 'iana',
    compressible: true
  },
  'application/vcard+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vemmi': {
    source: 'iana'
  },
  'application/vividence.scriptfile': {
    source: 'apache'
  },
  'application/vnd.1000minds.decision-model+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp-prose+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp-prose-pc3ch+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp-v2x-local-service-information': {
    source: 'iana'
  },
  'application/vnd.3gpp.access-transfer-events+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.bsf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.gmop+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mc-signalling-ear': {
    source: 'iana'
  },
  'application/vnd.3gpp.mcdata-affiliation-command+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcdata-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcdata-payload': {
    source: 'iana'
  },
  'application/vnd.3gpp.mcdata-service-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcdata-signalling': {
    source: 'iana'
  },
  'application/vnd.3gpp.mcdata-ue-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcdata-user-profile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-affiliation-command+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-floor-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-location-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-mbms-usage-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-service-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-signed+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-ue-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-ue-init-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcptt-user-profile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-affiliation-command+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-affiliation-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-location-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-mbms-usage-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-service-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-transmission-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-ue-config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mcvideo-user-profile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.mid-call+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.pic-bw-large': {
    source: 'iana',
    extensions: ['plb']
  },
  'application/vnd.3gpp.pic-bw-small': {
    source: 'iana',
    extensions: ['psb']
  },
  'application/vnd.3gpp.pic-bw-var': {
    source: 'iana',
    extensions: ['pvb']
  },
  'application/vnd.3gpp.sms': {
    source: 'iana'
  },
  'application/vnd.3gpp.sms+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.srvcc-ext+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.srvcc-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.state-and-event-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp.ussd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp2.bcmcsinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.3gpp2.sms': {
    source: 'iana'
  },
  'application/vnd.3gpp2.tcap': {
    source: 'iana',
    extensions: ['tcap']
  },
  'application/vnd.3lightssoftware.imagescal': {
    source: 'iana'
  },
  'application/vnd.3m.post-it-notes': {
    source: 'iana',
    extensions: ['pwn']
  },
  'application/vnd.accpac.simply.aso': {
    source: 'iana',
    extensions: ['aso']
  },
  'application/vnd.accpac.simply.imp': {
    source: 'iana',
    extensions: ['imp']
  },
  'application/vnd.acucobol': {
    source: 'iana',
    extensions: ['acu']
  },
  'application/vnd.acucorp': {
    source: 'iana',
    extensions: ['atc', 'acutc']
  },
  'application/vnd.adobe.air-application-installer-package+zip': {
    source: 'apache',
    compressible: false,
    extensions: ['air']
  },
  'application/vnd.adobe.flash.movie': {
    source: 'iana'
  },
  'application/vnd.adobe.formscentral.fcdt': {
    source: 'iana',
    extensions: ['fcdt']
  },
  'application/vnd.adobe.fxp': {
    source: 'iana',
    extensions: ['fxp', 'fxpl']
  },
  'application/vnd.adobe.partial-upload': {
    source: 'iana'
  },
  'application/vnd.adobe.xdp+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xdp']
  },
  'application/vnd.adobe.xfdf': {
    source: 'iana',
    extensions: ['xfdf']
  },
  'application/vnd.aether.imp': {
    source: 'iana'
  },
  'application/vnd.afpc.afplinedata': {
    source: 'iana'
  },
  'application/vnd.afpc.modca': {
    source: 'iana'
  },
  'application/vnd.ah-barcode': {
    source: 'iana'
  },
  'application/vnd.ahead.space': {
    source: 'iana',
    extensions: ['ahead']
  },
  'application/vnd.airzip.filesecure.azf': {
    source: 'iana',
    extensions: ['azf']
  },
  'application/vnd.airzip.filesecure.azs': {
    source: 'iana',
    extensions: ['azs']
  },
  'application/vnd.amadeus+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.amazon.ebook': {
    source: 'apache',
    extensions: ['azw']
  },
  'application/vnd.amazon.mobi8-ebook': {
    source: 'iana'
  },
  'application/vnd.americandynamics.acc': {
    source: 'iana',
    extensions: ['acc']
  },
  'application/vnd.amiga.ami': {
    source: 'iana',
    extensions: ['ami']
  },
  'application/vnd.amundsen.maze+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.android.ota': {
    source: 'iana'
  },
  'application/vnd.android.package-archive': {
    source: 'apache',
    compressible: false,
    extensions: ['apk']
  },
  'application/vnd.anki': {
    source: 'iana'
  },
  'application/vnd.anser-web-certificate-issue-initiation': {
    source: 'iana',
    extensions: ['cii']
  },
  'application/vnd.anser-web-funds-transfer-initiation': {
    source: 'apache',
    extensions: ['fti']
  },
  'application/vnd.antix.game-component': {
    source: 'iana',
    extensions: ['atx']
  },
  'application/vnd.apache.thrift.binary': {
    source: 'iana'
  },
  'application/vnd.apache.thrift.compact': {
    source: 'iana'
  },
  'application/vnd.apache.thrift.json': {
    source: 'iana'
  },
  'application/vnd.api+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.apothekende.reservation+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.apple.installer+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mpkg']
  },
  'application/vnd.apple.keynote': {
    source: 'iana',
    extensions: ['keynote']
  },
  'application/vnd.apple.mpegurl': {
    source: 'iana',
    extensions: ['m3u8']
  },
  'application/vnd.apple.numbers': {
    source: 'iana',
    extensions: ['numbers']
  },
  'application/vnd.apple.pages': {
    source: 'iana',
    extensions: ['pages']
  },
  'application/vnd.apple.pkpass': {
    compressible: false,
    extensions: ['pkpass']
  },
  'application/vnd.arastra.swi': {
    source: 'iana'
  },
  'application/vnd.aristanetworks.swi': {
    source: 'iana',
    extensions: ['swi']
  },
  'application/vnd.artisan+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.artsquare': {
    source: 'iana'
  },
  'application/vnd.astraea-software.iota': {
    source: 'iana',
    extensions: ['iota']
  },
  'application/vnd.audiograph': {
    source: 'iana',
    extensions: ['aep']
  },
  'application/vnd.autopackage': {
    source: 'iana'
  },
  'application/vnd.avalon+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.avistar+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.balsamiq.bmml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.balsamiq.bmpr': {
    source: 'iana'
  },
  'application/vnd.banana-accounting': {
    source: 'iana'
  },
  'application/vnd.bbf.usp.error': {
    source: 'iana'
  },
  'application/vnd.bbf.usp.msg': {
    source: 'iana'
  },
  'application/vnd.bbf.usp.msg+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.bekitzur-stech+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.bint.med-content': {
    source: 'iana'
  },
  'application/vnd.biopax.rdf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.blink-idb-value-wrapper': {
    source: 'iana'
  },
  'application/vnd.blueice.multipass': {
    source: 'iana',
    extensions: ['mpm']
  },
  'application/vnd.bluetooth.ep.oob': {
    source: 'iana'
  },
  'application/vnd.bluetooth.le.oob': {
    source: 'iana'
  },
  'application/vnd.bmi': {
    source: 'iana',
    extensions: ['bmi']
  },
  'application/vnd.bpf': {
    source: 'iana'
  },
  'application/vnd.bpf3': {
    source: 'iana'
  },
  'application/vnd.businessobjects': {
    source: 'iana',
    extensions: ['rep']
  },
  'application/vnd.byu.uapi+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.cab-jscript': {
    source: 'iana'
  },
  'application/vnd.canon-cpdl': {
    source: 'iana'
  },
  'application/vnd.canon-lips': {
    source: 'iana'
  },
  'application/vnd.capasystems-pg+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.cendio.thinlinc.clientconf': {
    source: 'iana'
  },
  'application/vnd.century-systems.tcp_stream': {
    source: 'iana'
  },
  'application/vnd.chemdraw+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['cdxml']
  },
  'application/vnd.chess-pgn': {
    source: 'iana'
  },
  'application/vnd.chipnuts.karaoke-mmd': {
    source: 'iana',
    extensions: ['mmd']
  },
  'application/vnd.ciedi': {
    source: 'iana'
  },
  'application/vnd.cinderella': {
    source: 'iana',
    extensions: ['cdy']
  },
  'application/vnd.cirpack.isdn-ext': {
    source: 'iana'
  },
  'application/vnd.citationstyles.style+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['csl']
  },
  'application/vnd.claymore': {
    source: 'iana',
    extensions: ['cla']
  },
  'application/vnd.cloanto.rp9': {
    source: 'iana',
    extensions: ['rp9']
  },
  'application/vnd.clonk.c4group': {
    source: 'iana',
    extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u']
  },
  'application/vnd.cluetrust.cartomobile-config': {
    source: 'iana',
    extensions: ['c11amc']
  },
  'application/vnd.cluetrust.cartomobile-config-pkg': {
    source: 'iana',
    extensions: ['c11amz']
  },
  'application/vnd.coffeescript': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.document': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.document-template': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.presentation': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.presentation-template': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.spreadsheet': {
    source: 'iana'
  },
  'application/vnd.collabio.xodocuments.spreadsheet-template': {
    source: 'iana'
  },
  'application/vnd.collection+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.collection.doc+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.collection.next+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.comicbook+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.comicbook-rar': {
    source: 'iana'
  },
  'application/vnd.commerce-battelle': {
    source: 'iana'
  },
  'application/vnd.commonspace': {
    source: 'iana',
    extensions: ['csp']
  },
  'application/vnd.contact.cmsg': {
    source: 'iana',
    extensions: ['cdbcmsg']
  },
  'application/vnd.coreos.ignition+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.cosmocaller': {
    source: 'iana',
    extensions: ['cmc']
  },
  'application/vnd.crick.clicker': {
    source: 'iana',
    extensions: ['clkx']
  },
  'application/vnd.crick.clicker.keyboard': {
    source: 'iana',
    extensions: ['clkk']
  },
  'application/vnd.crick.clicker.palette': {
    source: 'iana',
    extensions: ['clkp']
  },
  'application/vnd.crick.clicker.template': {
    source: 'iana',
    extensions: ['clkt']
  },
  'application/vnd.crick.clicker.wordbank': {
    source: 'iana',
    extensions: ['clkw']
  },
  'application/vnd.criticaltools.wbs+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['wbs']
  },
  'application/vnd.cryptii.pipe+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.crypto-shade-file': {
    source: 'iana'
  },
  'application/vnd.ctc-posml': {
    source: 'iana',
    extensions: ['pml']
  },
  'application/vnd.ctct.ws+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.cups-pdf': {
    source: 'iana'
  },
  'application/vnd.cups-postscript': {
    source: 'iana'
  },
  'application/vnd.cups-ppd': {
    source: 'iana',
    extensions: ['ppd']
  },
  'application/vnd.cups-raster': {
    source: 'iana'
  },
  'application/vnd.cups-raw': {
    source: 'iana'
  },
  'application/vnd.curl': {
    source: 'iana'
  },
  'application/vnd.curl.car': {
    source: 'apache',
    extensions: ['car']
  },
  'application/vnd.curl.pcurl': {
    source: 'apache',
    extensions: ['pcurl']
  },
  'application/vnd.cyan.dean.root+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.cybank': {
    source: 'iana'
  },
  'application/vnd.d2l.coursepackage1p0+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.dart': {
    source: 'iana',
    compressible: true,
    extensions: ['dart']
  },
  'application/vnd.data-vision.rdz': {
    source: 'iana',
    extensions: ['rdz']
  },
  'application/vnd.datapackage+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dataresource+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.debian.binary-package': {
    source: 'iana'
  },
  'application/vnd.dece.data': {
    source: 'iana',
    extensions: ['uvf', 'uvvf', 'uvd', 'uvvd']
  },
  'application/vnd.dece.ttml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['uvt', 'uvvt']
  },
  'application/vnd.dece.unspecified': {
    source: 'iana',
    extensions: ['uvx', 'uvvx']
  },
  'application/vnd.dece.zip': {
    source: 'iana',
    extensions: ['uvz', 'uvvz']
  },
  'application/vnd.denovo.fcselayout-link': {
    source: 'iana',
    extensions: ['fe_launch']
  },
  'application/vnd.desmume.movie': {
    source: 'iana'
  },
  'application/vnd.dir-bi.plate-dl-nosuffix': {
    source: 'iana'
  },
  'application/vnd.dm.delegation+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dna': {
    source: 'iana',
    extensions: ['dna']
  },
  'application/vnd.document+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dolby.mlp': {
    source: 'apache',
    extensions: ['mlp']
  },
  'application/vnd.dolby.mobile.1': {
    source: 'iana'
  },
  'application/vnd.dolby.mobile.2': {
    source: 'iana'
  },
  'application/vnd.doremir.scorecloud-binary-document': {
    source: 'iana'
  },
  'application/vnd.dpgraph': {
    source: 'iana',
    extensions: ['dpg']
  },
  'application/vnd.dreamfactory': {
    source: 'iana',
    extensions: ['dfac']
  },
  'application/vnd.drive+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ds-keypoint': {
    source: 'apache',
    extensions: ['kpxx']
  },
  'application/vnd.dtg.local': {
    source: 'iana'
  },
  'application/vnd.dtg.local.flash': {
    source: 'iana'
  },
  'application/vnd.dtg.local.html': {
    source: 'iana'
  },
  'application/vnd.dvb.ait': {
    source: 'iana',
    extensions: ['ait']
  },
  'application/vnd.dvb.dvbj': {
    source: 'iana'
  },
  'application/vnd.dvb.esgcontainer': {
    source: 'iana'
  },
  'application/vnd.dvb.ipdcdftnotifaccess': {
    source: 'iana'
  },
  'application/vnd.dvb.ipdcesgaccess': {
    source: 'iana'
  },
  'application/vnd.dvb.ipdcesgaccess2': {
    source: 'iana'
  },
  'application/vnd.dvb.ipdcesgpdd': {
    source: 'iana'
  },
  'application/vnd.dvb.ipdcroaming': {
    source: 'iana'
  },
  'application/vnd.dvb.iptv.alfec-base': {
    source: 'iana'
  },
  'application/vnd.dvb.iptv.alfec-enhancement': {
    source: 'iana'
  },
  'application/vnd.dvb.notif-aggregate-root+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-container+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-generic+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-ia-msglist+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-ia-registration-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-ia-registration-response+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.notif-init+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.dvb.pfr': {
    source: 'iana'
  },
  'application/vnd.dvb.service': {
    source: 'iana',
    extensions: ['svc']
  },
  'application/vnd.dxr': {
    source: 'iana'
  },
  'application/vnd.dynageo': {
    source: 'iana',
    extensions: ['geo']
  },
  'application/vnd.dzr': {
    source: 'iana'
  },
  'application/vnd.easykaraoke.cdgdownload': {
    source: 'iana'
  },
  'application/vnd.ecdis-update': {
    source: 'iana'
  },
  'application/vnd.ecip.rlp': {
    source: 'iana'
  },
  'application/vnd.ecowin.chart': {
    source: 'iana',
    extensions: ['mag']
  },
  'application/vnd.ecowin.filerequest': {
    source: 'iana'
  },
  'application/vnd.ecowin.fileupdate': {
    source: 'iana'
  },
  'application/vnd.ecowin.series': {
    source: 'iana'
  },
  'application/vnd.ecowin.seriesrequest': {
    source: 'iana'
  },
  'application/vnd.ecowin.seriesupdate': {
    source: 'iana'
  },
  'application/vnd.efi.img': {
    source: 'iana'
  },
  'application/vnd.efi.iso': {
    source: 'iana'
  },
  'application/vnd.emclient.accessrequest+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.enliven': {
    source: 'iana',
    extensions: ['nml']
  },
  'application/vnd.enphase.envoy': {
    source: 'iana'
  },
  'application/vnd.eprints.data+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.epson.esf': {
    source: 'iana',
    extensions: ['esf']
  },
  'application/vnd.epson.msf': {
    source: 'iana',
    extensions: ['msf']
  },
  'application/vnd.epson.quickanime': {
    source: 'iana',
    extensions: ['qam']
  },
  'application/vnd.epson.salt': {
    source: 'iana',
    extensions: ['slt']
  },
  'application/vnd.epson.ssf': {
    source: 'iana',
    extensions: ['ssf']
  },
  'application/vnd.ericsson.quickcall': {
    source: 'iana'
  },
  'application/vnd.espass-espass+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.eszigno3+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['es3', 'et3']
  },
  'application/vnd.etsi.aoc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.asic-e+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.etsi.asic-s+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.etsi.cug+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvcommand+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvdiscovery+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvprofile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvsad-bc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvsad-cod+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvsad-npvr+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvservice+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvsync+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.iptvueprofile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.mcid+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.mheg5': {
    source: 'iana'
  },
  'application/vnd.etsi.overload-control-policy-dataset+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.pstn+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.sci+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.simservs+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.timestamp-token': {
    source: 'iana'
  },
  'application/vnd.etsi.tsl+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.etsi.tsl.der': {
    source: 'iana'
  },
  'application/vnd.eudora.data': {
    source: 'iana'
  },
  'application/vnd.evolv.ecig.profile': {
    source: 'iana'
  },
  'application/vnd.evolv.ecig.settings': {
    source: 'iana'
  },
  'application/vnd.evolv.ecig.theme': {
    source: 'iana'
  },
  'application/vnd.exstream-empower+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.exstream-package': {
    source: 'iana'
  },
  'application/vnd.ezpix-album': {
    source: 'iana',
    extensions: ['ez2']
  },
  'application/vnd.ezpix-package': {
    source: 'iana',
    extensions: ['ez3']
  },
  'application/vnd.f-secure.mobile': {
    source: 'iana'
  },
  'application/vnd.fastcopy-disk-image': {
    source: 'iana'
  },
  'application/vnd.fdf': {
    source: 'iana',
    extensions: ['fdf']
  },
  'application/vnd.fdsn.mseed': {
    source: 'iana',
    extensions: ['mseed']
  },
  'application/vnd.fdsn.seed': {
    source: 'iana',
    extensions: ['seed', 'dataless']
  },
  'application/vnd.ffsns': {
    source: 'iana'
  },
  'application/vnd.ficlab.flb+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.filmit.zfc': {
    source: 'iana'
  },
  'application/vnd.fints': {
    source: 'iana'
  },
  'application/vnd.firemonkeys.cloudcell': {
    source: 'iana'
  },
  'application/vnd.flographit': {
    source: 'iana',
    extensions: ['gph']
  },
  'application/vnd.fluxtime.clip': {
    source: 'iana',
    extensions: ['ftc']
  },
  'application/vnd.font-fontforge-sfd': {
    source: 'iana'
  },
  'application/vnd.framemaker': {
    source: 'iana',
    extensions: ['fm', 'frame', 'maker', 'book']
  },
  'application/vnd.frogans.fnc': {
    source: 'iana',
    extensions: ['fnc']
  },
  'application/vnd.frogans.ltf': {
    source: 'iana',
    extensions: ['ltf']
  },
  'application/vnd.fsc.weblaunch': {
    source: 'iana',
    extensions: ['fsc']
  },
  'application/vnd.fujitsu.oasys': {
    source: 'iana',
    extensions: ['oas']
  },
  'application/vnd.fujitsu.oasys2': {
    source: 'iana',
    extensions: ['oa2']
  },
  'application/vnd.fujitsu.oasys3': {
    source: 'iana',
    extensions: ['oa3']
  },
  'application/vnd.fujitsu.oasysgp': {
    source: 'iana',
    extensions: ['fg5']
  },
  'application/vnd.fujitsu.oasysprs': {
    source: 'iana',
    extensions: ['bh2']
  },
  'application/vnd.fujixerox.art-ex': {
    source: 'iana'
  },
  'application/vnd.fujixerox.art4': {
    source: 'iana'
  },
  'application/vnd.fujixerox.ddd': {
    source: 'iana',
    extensions: ['ddd']
  },
  'application/vnd.fujixerox.docuworks': {
    source: 'iana',
    extensions: ['xdw']
  },
  'application/vnd.fujixerox.docuworks.binder': {
    source: 'iana',
    extensions: ['xbd']
  },
  'application/vnd.fujixerox.docuworks.container': {
    source: 'iana'
  },
  'application/vnd.fujixerox.hbpl': {
    source: 'iana'
  },
  'application/vnd.fut-misnet': {
    source: 'iana'
  },
  'application/vnd.futoin+cbor': {
    source: 'iana'
  },
  'application/vnd.futoin+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.fuzzysheet': {
    source: 'iana',
    extensions: ['fzs']
  },
  'application/vnd.genomatix.tuxedo': {
    source: 'iana',
    extensions: ['txd']
  },
  'application/vnd.geo+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.geocube+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.geogebra.file': {
    source: 'iana',
    extensions: ['ggb']
  },
  'application/vnd.geogebra.tool': {
    source: 'iana',
    extensions: ['ggt']
  },
  'application/vnd.geometry-explorer': {
    source: 'iana',
    extensions: ['gex', 'gre']
  },
  'application/vnd.geonext': {
    source: 'iana',
    extensions: ['gxt']
  },
  'application/vnd.geoplan': {
    source: 'iana',
    extensions: ['g2w']
  },
  'application/vnd.geospace': {
    source: 'iana',
    extensions: ['g3w']
  },
  'application/vnd.gerber': {
    source: 'iana'
  },
  'application/vnd.globalplatform.card-content-mgt': {
    source: 'iana'
  },
  'application/vnd.globalplatform.card-content-mgt-response': {
    source: 'iana'
  },
  'application/vnd.gmx': {
    source: 'iana',
    extensions: ['gmx']
  },
  'application/vnd.google-apps.document': {
    compressible: false,
    extensions: ['gdoc']
  },
  'application/vnd.google-apps.presentation': {
    compressible: false,
    extensions: ['gslides']
  },
  'application/vnd.google-apps.spreadsheet': {
    compressible: false,
    extensions: ['gsheet']
  },
  'application/vnd.google-earth.kml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['kml']
  },
  'application/vnd.google-earth.kmz': {
    source: 'iana',
    compressible: false,
    extensions: ['kmz']
  },
  'application/vnd.gov.sk.e-form+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.gov.sk.e-form+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.gov.sk.xmldatacontainer+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.grafeq': {
    source: 'iana',
    extensions: ['gqf', 'gqs']
  },
  'application/vnd.gridmp': {
    source: 'iana'
  },
  'application/vnd.groove-account': {
    source: 'iana',
    extensions: ['gac']
  },
  'application/vnd.groove-help': {
    source: 'iana',
    extensions: ['ghf']
  },
  'application/vnd.groove-identity-message': {
    source: 'iana',
    extensions: ['gim']
  },
  'application/vnd.groove-injector': {
    source: 'iana',
    extensions: ['grv']
  },
  'application/vnd.groove-tool-message': {
    source: 'iana',
    extensions: ['gtm']
  },
  'application/vnd.groove-tool-template': {
    source: 'iana',
    extensions: ['tpl']
  },
  'application/vnd.groove-vcard': {
    source: 'iana',
    extensions: ['vcg']
  },
  'application/vnd.hal+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hal+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['hal']
  },
  'application/vnd.handheld-entertainment+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['zmm']
  },
  'application/vnd.hbci': {
    source: 'iana',
    extensions: ['hbci']
  },
  'application/vnd.hc+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hcl-bireports': {
    source: 'iana'
  },
  'application/vnd.hdt': {
    source: 'iana'
  },
  'application/vnd.heroku+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hhe.lesson-player': {
    source: 'iana',
    extensions: ['les']
  },
  'application/vnd.hp-hpgl': {
    source: 'iana',
    extensions: ['hpgl']
  },
  'application/vnd.hp-hpid': {
    source: 'iana',
    extensions: ['hpid']
  },
  'application/vnd.hp-hps': {
    source: 'iana',
    extensions: ['hps']
  },
  'application/vnd.hp-jlyt': {
    source: 'iana',
    extensions: ['jlt']
  },
  'application/vnd.hp-pcl': {
    source: 'iana',
    extensions: ['pcl']
  },
  'application/vnd.hp-pclxl': {
    source: 'iana',
    extensions: ['pclxl']
  },
  'application/vnd.httphone': {
    source: 'iana'
  },
  'application/vnd.hydrostatix.sof-data': {
    source: 'iana',
    extensions: ['sfd-hdstx']
  },
  'application/vnd.hyper+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hyper-item+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hyperdrive+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.hzn-3d-crossword': {
    source: 'iana'
  },
  'application/vnd.ibm.afplinedata': {
    source: 'iana'
  },
  'application/vnd.ibm.electronic-media': {
    source: 'iana'
  },
  'application/vnd.ibm.minipay': {
    source: 'iana',
    extensions: ['mpy']
  },
  'application/vnd.ibm.modcap': {
    source: 'iana',
    extensions: ['afp', 'listafp', 'list3820']
  },
  'application/vnd.ibm.rights-management': {
    source: 'iana',
    extensions: ['irm']
  },
  'application/vnd.ibm.secure-container': {
    source: 'iana',
    extensions: ['sc']
  },
  'application/vnd.iccprofile': {
    source: 'iana',
    extensions: ['icc', 'icm']
  },
  'application/vnd.ieee.1905': {
    source: 'iana'
  },
  'application/vnd.igloader': {
    source: 'iana',
    extensions: ['igl']
  },
  'application/vnd.imagemeter.folder+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.imagemeter.image+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.immervision-ivp': {
    source: 'iana',
    extensions: ['ivp']
  },
  'application/vnd.immervision-ivu': {
    source: 'iana',
    extensions: ['ivu']
  },
  'application/vnd.ims.imsccv1p1': {
    source: 'iana'
  },
  'application/vnd.ims.imsccv1p2': {
    source: 'iana'
  },
  'application/vnd.ims.imsccv1p3': {
    source: 'iana'
  },
  'application/vnd.ims.lis.v2.result+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ims.lti.v2.toolproxy+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ims.lti.v2.toolproxy.id+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ims.lti.v2.toolsettings+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ims.lti.v2.toolsettings.simple+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.informedcontrol.rms+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.informix-visionary': {
    source: 'iana'
  },
  'application/vnd.infotech.project': {
    source: 'iana'
  },
  'application/vnd.infotech.project+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.innopath.wamp.notification': {
    source: 'iana'
  },
  'application/vnd.insors.igm': {
    source: 'iana',
    extensions: ['igm']
  },
  'application/vnd.intercon.formnet': {
    source: 'iana',
    extensions: ['xpw', 'xpx']
  },
  'application/vnd.intergeo': {
    source: 'iana',
    extensions: ['i2g']
  },
  'application/vnd.intertrust.digibox': {
    source: 'iana'
  },
  'application/vnd.intertrust.nncp': {
    source: 'iana'
  },
  'application/vnd.intu.qbo': {
    source: 'iana',
    extensions: ['qbo']
  },
  'application/vnd.intu.qfx': {
    source: 'iana',
    extensions: ['qfx']
  },
  'application/vnd.iptc.g2.catalogitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.conceptitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.knowledgeitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.newsitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.newsmessage+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.packageitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.iptc.g2.planningitem+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ipunplugged.rcprofile': {
    source: 'iana',
    extensions: ['rcprofile']
  },
  'application/vnd.irepository.package+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['irp']
  },
  'application/vnd.is-xpr': {
    source: 'iana',
    extensions: ['xpr']
  },
  'application/vnd.isac.fcs': {
    source: 'iana',
    extensions: ['fcs']
  },
  'application/vnd.iso11783-10+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.jam': {
    source: 'iana',
    extensions: ['jam']
  },
  'application/vnd.japannet-directory-service': {
    source: 'iana'
  },
  'application/vnd.japannet-jpnstore-wakeup': {
    source: 'iana'
  },
  'application/vnd.japannet-payment-wakeup': {
    source: 'iana'
  },
  'application/vnd.japannet-registration': {
    source: 'iana'
  },
  'application/vnd.japannet-registration-wakeup': {
    source: 'iana'
  },
  'application/vnd.japannet-setstore-wakeup': {
    source: 'iana'
  },
  'application/vnd.japannet-verification': {
    source: 'iana'
  },
  'application/vnd.japannet-verification-wakeup': {
    source: 'iana'
  },
  'application/vnd.jcp.javame.midlet-rms': {
    source: 'iana',
    extensions: ['rms']
  },
  'application/vnd.jisp': {
    source: 'iana',
    extensions: ['jisp']
  },
  'application/vnd.joost.joda-archive': {
    source: 'iana',
    extensions: ['joda']
  },
  'application/vnd.jsk.isdn-ngn': {
    source: 'iana'
  },
  'application/vnd.kahootz': {
    source: 'iana',
    extensions: ['ktz', 'ktr']
  },
  'application/vnd.kde.karbon': {
    source: 'iana',
    extensions: ['karbon']
  },
  'application/vnd.kde.kchart': {
    source: 'iana',
    extensions: ['chrt']
  },
  'application/vnd.kde.kformula': {
    source: 'iana',
    extensions: ['kfo']
  },
  'application/vnd.kde.kivio': {
    source: 'iana',
    extensions: ['flw']
  },
  'application/vnd.kde.kontour': {
    source: 'iana',
    extensions: ['kon']
  },
  'application/vnd.kde.kpresenter': {
    source: 'iana',
    extensions: ['kpr', 'kpt']
  },
  'application/vnd.kde.kspread': {
    source: 'iana',
    extensions: ['ksp']
  },
  'application/vnd.kde.kword': {
    source: 'iana',
    extensions: ['kwd', 'kwt']
  },
  'application/vnd.kenameaapp': {
    source: 'iana',
    extensions: ['htke']
  },
  'application/vnd.kidspiration': {
    source: 'iana',
    extensions: ['kia']
  },
  'application/vnd.kinar': {
    source: 'iana',
    extensions: ['kne', 'knp']
  },
  'application/vnd.koan': {
    source: 'iana',
    extensions: ['skp', 'skd', 'skt', 'skm']
  },
  'application/vnd.kodak-descriptor': {
    source: 'iana',
    extensions: ['sse']
  },
  'application/vnd.las': {
    source: 'iana'
  },
  'application/vnd.las.las+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.las.las+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['lasxml']
  },
  'application/vnd.laszip': {
    source: 'iana'
  },
  'application/vnd.leap+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.liberty-request+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.llamagraphics.life-balance.desktop': {
    source: 'iana',
    extensions: ['lbd']
  },
  'application/vnd.llamagraphics.life-balance.exchange+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['lbe']
  },
  'application/vnd.logipipe.circuit+zip': {
    source: 'iana',
    compressible: false
  },
  'application/vnd.loom': {
    source: 'iana'
  },
  'application/vnd.lotus-1-2-3': {
    source: 'iana',
    extensions: ['123']
  },
  'application/vnd.lotus-approach': {
    source: 'iana',
    extensions: ['apr']
  },
  'application/vnd.lotus-freelance': {
    source: 'iana',
    extensions: ['pre']
  },
  'application/vnd.lotus-notes': {
    source: 'iana',
    extensions: ['nsf']
  },
  'application/vnd.lotus-organizer': {
    source: 'iana',
    extensions: ['org']
  },
  'application/vnd.lotus-screencam': {
    source: 'iana',
    extensions: ['scm']
  },
  'application/vnd.lotus-wordpro': {
    source: 'iana',
    extensions: ['lwp']
  },
  'application/vnd.macports.portpkg': {
    source: 'iana',
    extensions: ['portpkg']
  },
  'application/vnd.mapbox-vector-tile': {
    source: 'iana'
  },
  'application/vnd.marlin.drm.actiontoken+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.marlin.drm.conftoken+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.marlin.drm.license+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.marlin.drm.mdcf': {
    source: 'iana'
  },
  'application/vnd.mason+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.maxmind.maxmind-db': {
    source: 'iana'
  },
  'application/vnd.mcd': {
    source: 'iana',
    extensions: ['mcd']
  },
  'application/vnd.medcalcdata': {
    source: 'iana',
    extensions: ['mc1']
  },
  'application/vnd.mediastation.cdkey': {
    source: 'iana',
    extensions: ['cdkey']
  },
  'application/vnd.meridian-slingshot': {
    source: 'iana'
  },
  'application/vnd.mfer': {
    source: 'iana',
    extensions: ['mwf']
  },
  'application/vnd.mfmp': {
    source: 'iana',
    extensions: ['mfm']
  },
  'application/vnd.micro+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.micrografx.flo': {
    source: 'iana',
    extensions: ['flo']
  },
  'application/vnd.micrografx.igx': {
    source: 'iana',
    extensions: ['igx']
  },
  'application/vnd.microsoft.portable-executable': {
    source: 'iana'
  },
  'application/vnd.microsoft.windows.thumbnail-cache': {
    source: 'iana'
  },
  'application/vnd.miele+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.mif': {
    source: 'iana',
    extensions: ['mif']
  },
  'application/vnd.minisoft-hp3000-save': {
    source: 'iana'
  },
  'application/vnd.mitsubishi.misty-guard.trustweb': {
    source: 'iana'
  },
  'application/vnd.mobius.daf': {
    source: 'iana',
    extensions: ['daf']
  },
  'application/vnd.mobius.dis': {
    source: 'iana',
    extensions: ['dis']
  },
  'application/vnd.mobius.mbk': {
    source: 'iana',
    extensions: ['mbk']
  },
  'application/vnd.mobius.mqy': {
    source: 'iana',
    extensions: ['mqy']
  },
  'application/vnd.mobius.msl': {
    source: 'iana',
    extensions: ['msl']
  },
  'application/vnd.mobius.plc': {
    source: 'iana',
    extensions: ['plc']
  },
  'application/vnd.mobius.txf': {
    source: 'iana',
    extensions: ['txf']
  },
  'application/vnd.mophun.application': {
    source: 'iana',
    extensions: ['mpn']
  },
  'application/vnd.mophun.certificate': {
    source: 'iana',
    extensions: ['mpc']
  },
  'application/vnd.motorola.flexsuite': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.adsi': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.fis': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.gotap': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.kmr': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.ttc': {
    source: 'iana'
  },
  'application/vnd.motorola.flexsuite.wem': {
    source: 'iana'
  },
  'application/vnd.motorola.iprm': {
    source: 'iana'
  },
  'application/vnd.mozilla.xul+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xul']
  },
  'application/vnd.ms-3mfdocument': {
    source: 'iana'
  },
  'application/vnd.ms-artgalry': {
    source: 'iana',
    extensions: ['cil']
  },
  'application/vnd.ms-asf': {
    source: 'iana'
  },
  'application/vnd.ms-cab-compressed': {
    source: 'iana',
    extensions: ['cab']
  },
  'application/vnd.ms-color.iccprofile': {
    source: 'apache'
  },
  'application/vnd.ms-excel': {
    source: 'iana',
    compressible: false,
    extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw']
  },
  'application/vnd.ms-excel.addin.macroenabled.12': {
    source: 'iana',
    extensions: ['xlam']
  },
  'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
    source: 'iana',
    extensions: ['xlsb']
  },
  'application/vnd.ms-excel.sheet.macroenabled.12': {
    source: 'iana',
    extensions: ['xlsm']
  },
  'application/vnd.ms-excel.template.macroenabled.12': {
    source: 'iana',
    extensions: ['xltm']
  },
  'application/vnd.ms-fontobject': {
    source: 'iana',
    compressible: true,
    extensions: ['eot']
  },
  'application/vnd.ms-htmlhelp': {
    source: 'iana',
    extensions: ['chm']
  },
  'application/vnd.ms-ims': {
    source: 'iana',
    extensions: ['ims']
  },
  'application/vnd.ms-lrm': {
    source: 'iana',
    extensions: ['lrm']
  },
  'application/vnd.ms-office.activex+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ms-officetheme': {
    source: 'iana',
    extensions: ['thmx']
  },
  'application/vnd.ms-opentype': {
    source: 'apache',
    compressible: true
  },
  'application/vnd.ms-outlook': {
    compressible: false,
    extensions: ['msg']
  },
  'application/vnd.ms-package.obfuscated-opentype': {
    source: 'apache'
  },
  'application/vnd.ms-pki.seccat': {
    source: 'apache',
    extensions: ['cat']
  },
  'application/vnd.ms-pki.stl': {
    source: 'apache',
    extensions: ['stl']
  },
  'application/vnd.ms-playready.initiator+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ms-powerpoint': {
    source: 'iana',
    compressible: false,
    extensions: ['ppt', 'pps', 'pot']
  },
  'application/vnd.ms-powerpoint.addin.macroenabled.12': {
    source: 'iana',
    extensions: ['ppam']
  },
  'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
    source: 'iana',
    extensions: ['pptm']
  },
  'application/vnd.ms-powerpoint.slide.macroenabled.12': {
    source: 'iana',
    extensions: ['sldm']
  },
  'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
    source: 'iana',
    extensions: ['ppsm']
  },
  'application/vnd.ms-powerpoint.template.macroenabled.12': {
    source: 'iana',
    extensions: ['potm']
  },
  'application/vnd.ms-printdevicecapabilities+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ms-printing.printticket+xml': {
    source: 'apache',
    compressible: true
  },
  'application/vnd.ms-printschematicket+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.ms-project': {
    source: 'iana',
    extensions: ['mpp', 'mpt']
  },
  'application/vnd.ms-tnef': {
    source: 'iana'
  },
  'application/vnd.ms-windows.devicepairing': {
    source: 'iana'
  },
  'application/vnd.ms-windows.nwprinting.oob': {
    source: 'iana'
  },
  'application/vnd.ms-windows.printerpairing': {
    source: 'iana'
  },
  'application/vnd.ms-windows.wsd.oob': {
    source: 'iana'
  },
  'application/vnd.ms-wmdrm.lic-chlg-req': {
    source: 'iana'
  },
  'application/vnd.ms-wmdrm.lic-resp': {
    source: 'iana'
  },
  'application/vnd.ms-wmdrm.meter-chlg-req': {
    source: 'iana'
  },
  'application/vnd.ms-wmdrm.meter-resp': {
    source: 'iana'
  },
  'application/vnd.ms-word.document.macroenabled.12': {
    source: 'iana',
    extensions: ['docm']
  },
  'application/vnd.ms-word.template.macroenabled.12': {
    source: 'iana',
    extensions: ['dotm']
  },
  'application/vnd.ms-works': {
    source: 'iana',
    extensions: ['wps', 'wks', 'wcm', 'wdb']
  },
  'application/vnd.ms-wpl': {
    source: 'iana',
    extensions: ['wpl']
  },
  'application/vnd.ms-xpsdocument': {
    source: 'iana',
    compressible: false,
    extensions: ['xps']
  },
  'application/vnd.msa-disk-image': {
    source: 'iana'
  },
  'application/vnd.mseq': {
    source: 'iana',
    extensions: ['mseq']
  },
  'application/vnd.msign': {
    source: 'iana'
  },
  'application/vnd.multiad.creator': {
    source: 'iana'
  },
  'application/vnd.multiad.creator.cif': {
    source: 'iana'
  },
  'application/vnd.music-niff': {
    source: 'iana'
  },
  'application/vnd.musician': {
    source: 'iana',
    extensions: ['mus']
  },
  'application/vnd.muvee.style': {
    source: 'iana',
    extensions: ['msty']
  },
  'application/vnd.mynfc': {
    source: 'iana',
    extensions: ['taglet']
  },
  'application/vnd.ncd.control': {
    source: 'iana'
  },
  'application/vnd.ncd.reference': {
    source: 'iana'
  },
  'application/vnd.nearst.inv+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nervana': {
    source: 'iana'
  },
  'application/vnd.netfpx': {
    source: 'iana'
  },
  'application/vnd.neurolanguage.nlu': {
    source: 'iana',
    extensions: ['nlu']
  },
  'application/vnd.nimn': {
    source: 'iana'
  },
  'application/vnd.nintendo.nitro.rom': {
    source: 'iana'
  },
  'application/vnd.nintendo.snes.rom': {
    source: 'iana'
  },
  'application/vnd.nitf': {
    source: 'iana',
    extensions: ['ntf', 'nitf']
  },
  'application/vnd.noblenet-directory': {
    source: 'iana',
    extensions: ['nnd']
  },
  'application/vnd.noblenet-sealer': {
    source: 'iana',
    extensions: ['nns']
  },
  'application/vnd.noblenet-web': {
    source: 'iana',
    extensions: ['nnw']
  },
  'application/vnd.nokia.catalogs': {
    source: 'iana'
  },
  'application/vnd.nokia.conml+wbxml': {
    source: 'iana'
  },
  'application/vnd.nokia.conml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.iptv.config+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.isds-radio-presets': {
    source: 'iana'
  },
  'application/vnd.nokia.landmark+wbxml': {
    source: 'iana'
  },
  'application/vnd.nokia.landmark+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.landmarkcollection+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.n-gage.ac+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.n-gage.data': {
    source: 'iana',
    extensions: ['ngdat']
  },
  'application/vnd.nokia.n-gage.symbian.install': {
    source: 'iana',
    extensions: ['n-gage']
  },
  'application/vnd.nokia.ncd': {
    source: 'iana'
  },
  'application/vnd.nokia.pcd+wbxml': {
    source: 'iana'
  },
  'application/vnd.nokia.pcd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.nokia.radio-preset': {
    source: 'iana',
    extensions: ['rpst']
  },
  'application/vnd.nokia.radio-presets': {
    source: 'iana',
    extensions: ['rpss']
  },
  'application/vnd.novadigm.edm': {
    source: 'iana',
    extensions: ['edm']
  },
  'application/vnd.novadigm.edx': {
    source: 'iana',
    extensions: ['edx']
  },
  'application/vnd.novadigm.ext': {
    source: 'iana',
    extensions: ['ext']
  },
  'application/vnd.ntt-local.content-share': {
    source: 'iana'
  },
  'application/vnd.ntt-local.file-transfer': {
    source: 'iana'
  },
  'application/vnd.ntt-local.ogw_remote-access': {
    source: 'iana'
  },
  'application/vnd.ntt-local.sip-ta_remote': {
    source: 'iana'
  },
  'application/vnd.ntt-local.sip-ta_tcp_stream': {
    source: 'iana'
  },
  'application/vnd.oasis.opendocument.chart': {
    source: 'iana',
    extensions: ['odc']
  },
  'application/vnd.oasis.opendocument.chart-template': {
    source: 'iana',
    extensions: ['otc']
  },
  'application/vnd.oasis.opendocument.database': {
    source: 'iana',
    extensions: ['odb']
  },
  'application/vnd.oasis.opendocument.formula': {
    source: 'iana',
    extensions: ['odf']
  },
  'application/vnd.oasis.opendocument.formula-template': {
    source: 'iana',
    extensions: ['odft']
  },
  'application/vnd.oasis.opendocument.graphics': {
    source: 'iana',
    compressible: false,
    extensions: ['odg']
  },
  'application/vnd.oasis.opendocument.graphics-template': {
    source: 'iana',
    extensions: ['otg']
  },
  'application/vnd.oasis.opendocument.image': {
    source: 'iana',
    extensions: ['odi']
  },
  'application/vnd.oasis.opendocument.image-template': {
    source: 'iana',
    extensions: ['oti']
  },
  'application/vnd.oasis.opendocument.presentation': {
    source: 'iana',
    compressible: false,
    extensions: ['odp']
  },
  'application/vnd.oasis.opendocument.presentation-template': {
    source: 'iana',
    extensions: ['otp']
  },
  'application/vnd.oasis.opendocument.spreadsheet': {
    source: 'iana',
    compressible: false,
    extensions: ['ods']
  },
  'application/vnd.oasis.opendocument.spreadsheet-template': {
    source: 'iana',
    extensions: ['ots']
  },
  'application/vnd.oasis.opendocument.text': {
    source: 'iana',
    compressible: false,
    extensions: ['odt']
  },
  'application/vnd.oasis.opendocument.text-master': {
    source: 'iana',
    extensions: ['odm']
  },
  'application/vnd.oasis.opendocument.text-template': {
    source: 'iana',
    extensions: ['ott']
  },
  'application/vnd.oasis.opendocument.text-web': {
    source: 'iana',
    extensions: ['oth']
  },
  'application/vnd.obn': {
    source: 'iana'
  },
  'application/vnd.ocf+cbor': {
    source: 'iana'
  },
  'application/vnd.oftn.l10n+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.contentaccessdownload+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.contentaccessstreaming+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.cspg-hexbinary': {
    source: 'iana'
  },
  'application/vnd.oipf.dae.svg+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.dae.xhtml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.mippvcontrolmessage+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.pae.gem': {
    source: 'iana'
  },
  'application/vnd.oipf.spdiscovery+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.spdlist+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.ueprofile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oipf.userprofile+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.olpc-sugar': {
    source: 'iana',
    extensions: ['xo']
  },
  'application/vnd.oma-scws-config': {
    source: 'iana'
  },
  'application/vnd.oma-scws-http-request': {
    source: 'iana'
  },
  'application/vnd.oma-scws-http-response': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.drm-trigger+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.imd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.ltkm': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.notification+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.provisioningtrigger': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.sgboot': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.sgdd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.sgdu': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.simple-symbol-container': {
    source: 'iana'
  },
  'application/vnd.oma.bcast.smartcard-trigger+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.sprov+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.bcast.stkm': {
    source: 'iana'
  },
  'application/vnd.oma.cab-address-book+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.cab-feature-handler+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.cab-pcc+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.cab-subs-invite+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.cab-user-prefs+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.dcd': {
    source: 'iana'
  },
  'application/vnd.oma.dcdc': {
    source: 'iana'
  },
  'application/vnd.oma.dd2+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['dd2']
  },
  'application/vnd.oma.drm.risd+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.group-usage-list+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.lwm2m+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.lwm2m+tlv': {
    source: 'iana'
  },
  'application/vnd.oma.pal+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.poc.detailed-progress-report+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.poc.final-report+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.poc.groups+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.poc.invocation-descriptor+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.poc.optimized-progress-report+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.push': {
    source: 'iana'
  },
  'application/vnd.oma.scidm.messages+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oma.xcap-directory+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.omads-email+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.omads-file+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.omads-folder+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.omaloc-supl-init': {
    source: 'iana'
  },
  'application/vnd.onepager': {
    source: 'iana'
  },
  'application/vnd.onepagertamp': {
    source: 'iana'
  },
  'application/vnd.onepagertamx': {
    source: 'iana'
  },
  'application/vnd.onepagertat': {
    source: 'iana'
  },
  'application/vnd.onepagertatp': {
    source: 'iana'
  },
  'application/vnd.onepagertatx': {
    source: 'iana'
  },
  'application/vnd.openblox.game+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openblox.game-binary': {
    source: 'iana'
  },
  'application/vnd.openeye.oeb': {
    source: 'iana'
  },
  'application/vnd.openofficeorg.extension': {
    source: 'apache',
    extensions: ['oxt']
  },
  'application/vnd.openstreetmap.data+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.custom-properties+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.customxmlproperties+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawing+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.extended-properties+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.comments+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
    source: 'iana',
    compressible: false,
    extensions: ['pptx']
  },
  'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slide': {
    source: 'iana',
    extensions: ['sldx']
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slide+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slideshow': {
    source: 'iana',
    extensions: ['ppsx']
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.tags+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.template': {
    source: 'iana',
    extensions: ['potx']
  },
  'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
    source: 'iana',
    compressible: false,
    extensions: ['xlsx']
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
    source: 'iana',
    extensions: ['xltx']
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.theme+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.vmldrawing': {
    source: 'iana'
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
    source: 'iana',
    compressible: false,
    extensions: ['docx']
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.template': {
    source: 'iana',
    extensions: ['dotx']
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-package.core-properties+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.openxmlformats-package.relationships+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oracle.resource+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.orange.indata': {
    source: 'iana'
  },
  'application/vnd.osa.netdeploy': {
    source: 'iana'
  },
  'application/vnd.osgeo.mapguide.package': {
    source: 'iana',
    extensions: ['mgp']
  },
  'application/vnd.osgi.bundle': {
    source: 'iana'
  },
  'application/vnd.osgi.dp': {
    source: 'iana',
    extensions: ['dp']
  },
  'application/vnd.osgi.subsystem': {
    source: 'iana',
    extensions: ['esa']
  },
  'application/vnd.otps.ct-kip+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.oxli.countgraph': {
    source: 'iana'
  },
  'application/vnd.pagerduty+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.palm': {
    source: 'iana',
    extensions: ['pdb', 'pqa', 'oprc']
  },
  'application/vnd.panoply': {
    source: 'iana'
  },
  'application/vnd.paos.xml': {
    source: 'iana'
  },
  'application/vnd.patentdive': {
    source: 'iana'
  },
  'application/vnd.patientecommsdoc': {
    source: 'iana'
  },
  'application/vnd.pawaafile': {
    source: 'iana',
    extensions: ['paw']
  },
  'application/vnd.pcos': {
    source: 'iana'
  },
  'application/vnd.pg.format': {
    source: 'iana',
    extensions: ['str']
  },
  'application/vnd.pg.osasli': {
    source: 'iana',
    extensions: ['ei6']
  },
  'application/vnd.piaccess.application-licence': {
    source: 'iana'
  },
  'application/vnd.picsel': {
    source: 'iana',
    extensions: ['efif']
  },
  'application/vnd.pmi.widget': {
    source: 'iana',
    extensions: ['wg']
  },
  'application/vnd.poc.group-advertisement+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.pocketlearn': {
    source: 'iana',
    extensions: ['plf']
  },
  'application/vnd.powerbuilder6': {
    source: 'iana',
    extensions: ['pbd']
  },
  'application/vnd.powerbuilder6-s': {
    source: 'iana'
  },
  'application/vnd.powerbuilder7': {
    source: 'iana'
  },
  'application/vnd.powerbuilder7-s': {
    source: 'iana'
  },
  'application/vnd.powerbuilder75': {
    source: 'iana'
  },
  'application/vnd.powerbuilder75-s': {
    source: 'iana'
  },
  'application/vnd.preminet': {
    source: 'iana'
  },
  'application/vnd.previewsystems.box': {
    source: 'iana',
    extensions: ['box']
  },
  'application/vnd.proteus.magazine': {
    source: 'iana',
    extensions: ['mgz']
  },
  'application/vnd.psfs': {
    source: 'iana'
  },
  'application/vnd.publishare-delta-tree': {
    source: 'iana',
    extensions: ['qps']
  },
  'application/vnd.pvi.ptid1': {
    source: 'iana',
    extensions: ['ptid']
  },
  'application/vnd.pwg-multiplexed': {
    source: 'iana'
  },
  'application/vnd.pwg-xhtml-print+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.qualcomm.brew-app-res': {
    source: 'iana'
  },
  'application/vnd.quarantainenet': {
    source: 'iana'
  },
  'application/vnd.quark.quarkxpress': {
    source: 'iana',
    extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb']
  },
  'application/vnd.quobject-quoxdocument': {
    source: 'iana'
  },
  'application/vnd.radisys.moml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-audit+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-audit-conf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-audit-conn+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-audit-dialog+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-audit-stream+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-conf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-base+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-fax-detect+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-group+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-speech+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.radisys.msml-dialog-transform+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.rainstor.data': {
    source: 'iana'
  },
  'application/vnd.rapid': {
    source: 'iana'
  },
  'application/vnd.rar': {
    source: 'iana'
  },
  'application/vnd.realvnc.bed': {
    source: 'iana',
    extensions: ['bed']
  },
  'application/vnd.recordare.musicxml': {
    source: 'iana',
    extensions: ['mxl']
  },
  'application/vnd.recordare.musicxml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['musicxml']
  },
  'application/vnd.renlearn.rlprint': {
    source: 'iana'
  },
  'application/vnd.restful+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.rig.cryptonote': {
    source: 'iana',
    extensions: ['cryptonote']
  },
  'application/vnd.rim.cod': {
    source: 'apache',
    extensions: ['cod']
  },
  'application/vnd.rn-realmedia': {
    source: 'apache',
    extensions: ['rm']
  },
  'application/vnd.rn-realmedia-vbr': {
    source: 'apache',
    extensions: ['rmvb']
  },
  'application/vnd.route66.link66+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['link66']
  },
  'application/vnd.rs-274x': {
    source: 'iana'
  },
  'application/vnd.ruckus.download': {
    source: 'iana'
  },
  'application/vnd.s3sms': {
    source: 'iana'
  },
  'application/vnd.sailingtracker.track': {
    source: 'iana',
    extensions: ['st']
  },
  'application/vnd.sbm.cid': {
    source: 'iana'
  },
  'application/vnd.sbm.mid2': {
    source: 'iana'
  },
  'application/vnd.scribus': {
    source: 'iana'
  },
  'application/vnd.sealed.3df': {
    source: 'iana'
  },
  'application/vnd.sealed.csf': {
    source: 'iana'
  },
  'application/vnd.sealed.doc': {
    source: 'iana'
  },
  'application/vnd.sealed.eml': {
    source: 'iana'
  },
  'application/vnd.sealed.mht': {
    source: 'iana'
  },
  'application/vnd.sealed.net': {
    source: 'iana'
  },
  'application/vnd.sealed.ppt': {
    source: 'iana'
  },
  'application/vnd.sealed.tiff': {
    source: 'iana'
  },
  'application/vnd.sealed.xls': {
    source: 'iana'
  },
  'application/vnd.sealedmedia.softseal.html': {
    source: 'iana'
  },
  'application/vnd.sealedmedia.softseal.pdf': {
    source: 'iana'
  },
  'application/vnd.seemail': {
    source: 'iana',
    extensions: ['see']
  },
  'application/vnd.sema': {
    source: 'iana',
    extensions: ['sema']
  },
  'application/vnd.semd': {
    source: 'iana',
    extensions: ['semd']
  },
  'application/vnd.semf': {
    source: 'iana',
    extensions: ['semf']
  },
  'application/vnd.shade-save-file': {
    source: 'iana'
  },
  'application/vnd.shana.informed.formdata': {
    source: 'iana',
    extensions: ['ifm']
  },
  'application/vnd.shana.informed.formtemplate': {
    source: 'iana',
    extensions: ['itp']
  },
  'application/vnd.shana.informed.interchange': {
    source: 'iana',
    extensions: ['iif']
  },
  'application/vnd.shana.informed.package': {
    source: 'iana',
    extensions: ['ipk']
  },
  'application/vnd.shootproof+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.shopkick+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.sigrok.session': {
    source: 'iana'
  },
  'application/vnd.simtech-mindmapper': {
    source: 'iana',
    extensions: ['twd', 'twds']
  },
  'application/vnd.siren+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.smaf': {
    source: 'iana',
    extensions: ['mmf']
  },
  'application/vnd.smart.notebook': {
    source: 'iana'
  },
  'application/vnd.smart.teacher': {
    source: 'iana',
    extensions: ['teacher']
  },
  'application/vnd.software602.filler.form+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.software602.filler.form-xml-zip': {
    source: 'iana'
  },
  'application/vnd.solent.sdkm+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['sdkm', 'sdkd']
  },
  'application/vnd.spotfire.dxp': {
    source: 'iana',
    extensions: ['dxp']
  },
  'application/vnd.spotfire.sfs': {
    source: 'iana',
    extensions: ['sfs']
  },
  'application/vnd.sqlite3': {
    source: 'iana'
  },
  'application/vnd.sss-cod': {
    source: 'iana'
  },
  'application/vnd.sss-dtf': {
    source: 'iana'
  },
  'application/vnd.sss-ntf': {
    source: 'iana'
  },
  'application/vnd.stardivision.calc': {
    source: 'apache',
    extensions: ['sdc']
  },
  'application/vnd.stardivision.draw': {
    source: 'apache',
    extensions: ['sda']
  },
  'application/vnd.stardivision.impress': {
    source: 'apache',
    extensions: ['sdd']
  },
  'application/vnd.stardivision.math': {
    source: 'apache',
    extensions: ['smf']
  },
  'application/vnd.stardivision.writer': {
    source: 'apache',
    extensions: ['sdw', 'vor']
  },
  'application/vnd.stardivision.writer-global': {
    source: 'apache',
    extensions: ['sgl']
  },
  'application/vnd.stepmania.package': {
    source: 'iana',
    extensions: ['smzip']
  },
  'application/vnd.stepmania.stepchart': {
    source: 'iana',
    extensions: ['sm']
  },
  'application/vnd.street-stream': {
    source: 'iana'
  },
  'application/vnd.sun.wadl+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['wadl']
  },
  'application/vnd.sun.xml.calc': {
    source: 'apache',
    extensions: ['sxc']
  },
  'application/vnd.sun.xml.calc.template': {
    source: 'apache',
    extensions: ['stc']
  },
  'application/vnd.sun.xml.draw': {
    source: 'apache',
    extensions: ['sxd']
  },
  'application/vnd.sun.xml.draw.template': {
    source: 'apache',
    extensions: ['std']
  },
  'application/vnd.sun.xml.impress': {
    source: 'apache',
    extensions: ['sxi']
  },
  'application/vnd.sun.xml.impress.template': {
    source: 'apache',
    extensions: ['sti']
  },
  'application/vnd.sun.xml.math': {
    source: 'apache',
    extensions: ['sxm']
  },
  'application/vnd.sun.xml.writer': {
    source: 'apache',
    extensions: ['sxw']
  },
  'application/vnd.sun.xml.writer.global': {
    source: 'apache',
    extensions: ['sxg']
  },
  'application/vnd.sun.xml.writer.template': {
    source: 'apache',
    extensions: ['stw']
  },
  'application/vnd.sus-calendar': {
    source: 'iana',
    extensions: ['sus', 'susp']
  },
  'application/vnd.svd': {
    source: 'iana',
    extensions: ['svd']
  },
  'application/vnd.swiftview-ics': {
    source: 'iana'
  },
  'application/vnd.symbian.install': {
    source: 'apache',
    extensions: ['sis', 'sisx']
  },
  'application/vnd.syncml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xsm']
  },
  'application/vnd.syncml.dm+wbxml': {
    source: 'iana',
    extensions: ['bdm']
  },
  'application/vnd.syncml.dm+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xdm']
  },
  'application/vnd.syncml.dm.notification': {
    source: 'iana'
  },
  'application/vnd.syncml.dmddf+wbxml': {
    source: 'iana'
  },
  'application/vnd.syncml.dmddf+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.syncml.dmtnds+wbxml': {
    source: 'iana'
  },
  'application/vnd.syncml.dmtnds+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.syncml.ds.notification': {
    source: 'iana'
  },
  'application/vnd.tableschema+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.tao.intent-module-archive': {
    source: 'iana',
    extensions: ['tao']
  },
  'application/vnd.tcpdump.pcap': {
    source: 'iana',
    extensions: ['pcap', 'cap', 'dmp']
  },
  'application/vnd.think-cell.ppttc+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.tmd.mediaflex.api+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.tml': {
    source: 'iana'
  },
  'application/vnd.tmobile-livetv': {
    source: 'iana',
    extensions: ['tmo']
  },
  'application/vnd.tri.onesource': {
    source: 'iana'
  },
  'application/vnd.trid.tpt': {
    source: 'iana',
    extensions: ['tpt']
  },
  'application/vnd.triscape.mxs': {
    source: 'iana',
    extensions: ['mxs']
  },
  'application/vnd.trueapp': {
    source: 'iana',
    extensions: ['tra']
  },
  'application/vnd.truedoc': {
    source: 'iana'
  },
  'application/vnd.ubisoft.webplayer': {
    source: 'iana'
  },
  'application/vnd.ufdl': {
    source: 'iana',
    extensions: ['ufd', 'ufdl']
  },
  'application/vnd.uiq.theme': {
    source: 'iana',
    extensions: ['utz']
  },
  'application/vnd.umajin': {
    source: 'iana',
    extensions: ['umj']
  },
  'application/vnd.unity': {
    source: 'iana',
    extensions: ['unityweb']
  },
  'application/vnd.uoml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['uoml']
  },
  'application/vnd.uplanet.alert': {
    source: 'iana'
  },
  'application/vnd.uplanet.alert-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.bearer-choice': {
    source: 'iana'
  },
  'application/vnd.uplanet.bearer-choice-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.cacheop': {
    source: 'iana'
  },
  'application/vnd.uplanet.cacheop-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.channel': {
    source: 'iana'
  },
  'application/vnd.uplanet.channel-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.list': {
    source: 'iana'
  },
  'application/vnd.uplanet.list-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.listcmd': {
    source: 'iana'
  },
  'application/vnd.uplanet.listcmd-wbxml': {
    source: 'iana'
  },
  'application/vnd.uplanet.signal': {
    source: 'iana'
  },
  'application/vnd.uri-map': {
    source: 'iana'
  },
  'application/vnd.valve.source.material': {
    source: 'iana'
  },
  'application/vnd.vcx': {
    source: 'iana',
    extensions: ['vcx']
  },
  'application/vnd.vd-study': {
    source: 'iana'
  },
  'application/vnd.vectorworks': {
    source: 'iana'
  },
  'application/vnd.vel+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.verimatrix.vcas': {
    source: 'iana'
  },
  'application/vnd.veryant.thin': {
    source: 'iana'
  },
  'application/vnd.ves.encrypted': {
    source: 'iana'
  },
  'application/vnd.vidsoft.vidconference': {
    source: 'iana'
  },
  'application/vnd.visio': {
    source: 'iana',
    extensions: ['vsd', 'vst', 'vss', 'vsw']
  },
  'application/vnd.visionary': {
    source: 'iana',
    extensions: ['vis']
  },
  'application/vnd.vividence.scriptfile': {
    source: 'iana'
  },
  'application/vnd.vsf': {
    source: 'iana',
    extensions: ['vsf']
  },
  'application/vnd.wap.sic': {
    source: 'iana'
  },
  'application/vnd.wap.slc': {
    source: 'iana'
  },
  'application/vnd.wap.wbxml': {
    source: 'iana',
    extensions: ['wbxml']
  },
  'application/vnd.wap.wmlc': {
    source: 'iana',
    extensions: ['wmlc']
  },
  'application/vnd.wap.wmlscriptc': {
    source: 'iana',
    extensions: ['wmlsc']
  },
  'application/vnd.webturbo': {
    source: 'iana',
    extensions: ['wtb']
  },
  'application/vnd.wfa.p2p': {
    source: 'iana'
  },
  'application/vnd.wfa.wsc': {
    source: 'iana'
  },
  'application/vnd.windows.devicepairing': {
    source: 'iana'
  },
  'application/vnd.wmc': {
    source: 'iana'
  },
  'application/vnd.wmf.bootstrap': {
    source: 'iana'
  },
  'application/vnd.wolfram.mathematica': {
    source: 'iana'
  },
  'application/vnd.wolfram.mathematica.package': {
    source: 'iana'
  },
  'application/vnd.wolfram.player': {
    source: 'iana',
    extensions: ['nbp']
  },
  'application/vnd.wordperfect': {
    source: 'iana',
    extensions: ['wpd']
  },
  'application/vnd.wqd': {
    source: 'iana',
    extensions: ['wqd']
  },
  'application/vnd.wrq-hp3000-labelled': {
    source: 'iana'
  },
  'application/vnd.wt.stf': {
    source: 'iana',
    extensions: ['stf']
  },
  'application/vnd.wv.csp+wbxml': {
    source: 'iana'
  },
  'application/vnd.wv.csp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.wv.ssp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.xacml+json': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.xara': {
    source: 'iana',
    extensions: ['xar']
  },
  'application/vnd.xfdl': {
    source: 'iana',
    extensions: ['xfdl']
  },
  'application/vnd.xfdl.webform': {
    source: 'iana'
  },
  'application/vnd.xmi+xml': {
    source: 'iana',
    compressible: true
  },
  'application/vnd.xmpie.cpkg': {
    source: 'iana'
  },
  'application/vnd.xmpie.dpkg': {
    source: 'iana'
  },
  'application/vnd.xmpie.plan': {
    source: 'iana'
  },
  'application/vnd.xmpie.ppkg': {
    source: 'iana'
  },
  'application/vnd.xmpie.xlim': {
    source: 'iana'
  },
  'application/vnd.yamaha.hv-dic': {
    source: 'iana',
    extensions: ['hvd']
  },
  'application/vnd.yamaha.hv-script': {
    source: 'iana',
    extensions: ['hvs']
  },
  'application/vnd.yamaha.hv-voice': {
    source: 'iana',
    extensions: ['hvp']
  },
  'application/vnd.yamaha.openscoreformat': {
    source: 'iana',
    extensions: ['osf']
  },
  'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['osfpvg']
  },
  'application/vnd.yamaha.remote-setup': {
    source: 'iana'
  },
  'application/vnd.yamaha.smaf-audio': {
    source: 'iana',
    extensions: ['saf']
  },
  'application/vnd.yamaha.smaf-phrase': {
    source: 'iana',
    extensions: ['spf']
  },
  'application/vnd.yamaha.through-ngn': {
    source: 'iana'
  },
  'application/vnd.yamaha.tunnel-udpencap': {
    source: 'iana'
  },
  'application/vnd.yaoweme': {
    source: 'iana'
  },
  'application/vnd.yellowriver-custom-menu': {
    source: 'iana',
    extensions: ['cmp']
  },
  'application/vnd.youtube.yt': {
    source: 'iana'
  },
  'application/vnd.zul': {
    source: 'iana',
    extensions: ['zir', 'zirz']
  },
  'application/vnd.zzazz.deck+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['zaz']
  },
  'application/voicexml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['vxml']
  },
  'application/voucher-cms+json': {
    source: 'iana',
    compressible: true
  },
  'application/vq-rtcpxr': {
    source: 'iana'
  },
  'application/wasm': {
    compressible: true,
    extensions: ['wasm']
  },
  'application/watcherinfo+xml': {
    source: 'iana',
    compressible: true
  },
  'application/webpush-options+json': {
    source: 'iana',
    compressible: true
  },
  'application/whoispp-query': {
    source: 'iana'
  },
  'application/whoispp-response': {
    source: 'iana'
  },
  'application/widget': {
    source: 'iana',
    extensions: ['wgt']
  },
  'application/winhlp': {
    source: 'apache',
    extensions: ['hlp']
  },
  'application/wita': {
    source: 'iana'
  },
  'application/wordperfect5.1': {
    source: 'iana'
  },
  'application/wsdl+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['wsdl']
  },
  'application/wspolicy+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['wspolicy']
  },
  'application/x-7z-compressed': {
    source: 'apache',
    compressible: false,
    extensions: ['7z']
  },
  'application/x-abiword': {
    source: 'apache',
    extensions: ['abw']
  },
  'application/x-ace-compressed': {
    source: 'apache',
    extensions: ['ace']
  },
  'application/x-amf': {
    source: 'apache'
  },
  'application/x-apple-diskimage': {
    source: 'apache',
    extensions: ['dmg']
  },
  'application/x-arj': {
    compressible: false,
    extensions: ['arj']
  },
  'application/x-authorware-bin': {
    source: 'apache',
    extensions: ['aab', 'x32', 'u32', 'vox']
  },
  'application/x-authorware-map': {
    source: 'apache',
    extensions: ['aam']
  },
  'application/x-authorware-seg': {
    source: 'apache',
    extensions: ['aas']
  },
  'application/x-bcpio': {
    source: 'apache',
    extensions: ['bcpio']
  },
  'application/x-bdoc': {
    compressible: false,
    extensions: ['bdoc']
  },
  'application/x-bittorrent': {
    source: 'apache',
    extensions: ['torrent']
  },
  'application/x-blorb': {
    source: 'apache',
    extensions: ['blb', 'blorb']
  },
  'application/x-bzip': {
    source: 'apache',
    compressible: false,
    extensions: ['bz']
  },
  'application/x-bzip2': {
    source: 'apache',
    compressible: false,
    extensions: ['bz2', 'boz']
  },
  'application/x-cbr': {
    source: 'apache',
    extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7']
  },
  'application/x-cdlink': {
    source: 'apache',
    extensions: ['vcd']
  },
  'application/x-cfs-compressed': {
    source: 'apache',
    extensions: ['cfs']
  },
  'application/x-chat': {
    source: 'apache',
    extensions: ['chat']
  },
  'application/x-chess-pgn': {
    source: 'apache',
    extensions: ['pgn']
  },
  'application/x-chrome-extension': {
    extensions: ['crx']
  },
  'application/x-cocoa': {
    source: 'nginx',
    extensions: ['cco']
  },
  'application/x-compress': {
    source: 'apache'
  },
  'application/x-conference': {
    source: 'apache',
    extensions: ['nsc']
  },
  'application/x-cpio': {
    source: 'apache',
    extensions: ['cpio']
  },
  'application/x-csh': {
    source: 'apache',
    extensions: ['csh']
  },
  'application/x-deb': {
    compressible: false
  },
  'application/x-debian-package': {
    source: 'apache',
    extensions: ['deb', 'udeb']
  },
  'application/x-dgc-compressed': {
    source: 'apache',
    extensions: ['dgc']
  },
  'application/x-director': {
    source: 'apache',
    extensions: ['dir', 'dcr', 'dxr', 'cst', 'cct', 'cxt', 'w3d', 'fgd', 'swa']
  },
  'application/x-doom': {
    source: 'apache',
    extensions: ['wad']
  },
  'application/x-dtbncx+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['ncx']
  },
  'application/x-dtbook+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['dtb']
  },
  'application/x-dtbresource+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['res']
  },
  'application/x-dvi': {
    source: 'apache',
    compressible: false,
    extensions: ['dvi']
  },
  'application/x-envoy': {
    source: 'apache',
    extensions: ['evy']
  },
  'application/x-eva': {
    source: 'apache',
    extensions: ['eva']
  },
  'application/x-font-bdf': {
    source: 'apache',
    extensions: ['bdf']
  },
  'application/x-font-dos': {
    source: 'apache'
  },
  'application/x-font-framemaker': {
    source: 'apache'
  },
  'application/x-font-ghostscript': {
    source: 'apache',
    extensions: ['gsf']
  },
  'application/x-font-libgrx': {
    source: 'apache'
  },
  'application/x-font-linux-psf': {
    source: 'apache',
    extensions: ['psf']
  },
  'application/x-font-pcf': {
    source: 'apache',
    extensions: ['pcf']
  },
  'application/x-font-snf': {
    source: 'apache',
    extensions: ['snf']
  },
  'application/x-font-speedo': {
    source: 'apache'
  },
  'application/x-font-sunos-news': {
    source: 'apache'
  },
  'application/x-font-type1': {
    source: 'apache',
    extensions: ['pfa', 'pfb', 'pfm', 'afm']
  },
  'application/x-font-vfont': {
    source: 'apache'
  },
  'application/x-freearc': {
    source: 'apache',
    extensions: ['arc']
  },
  'application/x-futuresplash': {
    source: 'apache',
    extensions: ['spl']
  },
  'application/x-gca-compressed': {
    source: 'apache',
    extensions: ['gca']
  },
  'application/x-glulx': {
    source: 'apache',
    extensions: ['ulx']
  },
  'application/x-gnumeric': {
    source: 'apache',
    extensions: ['gnumeric']
  },
  'application/x-gramps-xml': {
    source: 'apache',
    extensions: ['gramps']
  },
  'application/x-gtar': {
    source: 'apache',
    extensions: ['gtar']
  },
  'application/x-gzip': {
    source: 'apache'
  },
  'application/x-hdf': {
    source: 'apache',
    extensions: ['hdf']
  },
  'application/x-httpd-php': {
    compressible: true,
    extensions: ['php']
  },
  'application/x-install-instructions': {
    source: 'apache',
    extensions: ['install']
  },
  'application/x-iso9660-image': {
    source: 'apache',
    extensions: ['iso']
  },
  'application/x-java-archive-diff': {
    source: 'nginx',
    extensions: ['jardiff']
  },
  'application/x-java-jnlp-file': {
    source: 'apache',
    compressible: false,
    extensions: ['jnlp']
  },
  'application/x-javascript': {
    compressible: true
  },
  'application/x-latex': {
    source: 'apache',
    compressible: false,
    extensions: ['latex']
  },
  'application/x-lua-bytecode': {
    extensions: ['luac']
  },
  'application/x-lzh-compressed': {
    source: 'apache',
    extensions: ['lzh', 'lha']
  },
  'application/x-makeself': {
    source: 'nginx',
    extensions: ['run']
  },
  'application/x-mie': {
    source: 'apache',
    extensions: ['mie']
  },
  'application/x-mobipocket-ebook': {
    source: 'apache',
    extensions: ['prc', 'mobi']
  },
  'application/x-mpegurl': {
    compressible: false
  },
  'application/x-ms-application': {
    source: 'apache',
    extensions: ['application']
  },
  'application/x-ms-shortcut': {
    source: 'apache',
    extensions: ['lnk']
  },
  'application/x-ms-wmd': {
    source: 'apache',
    extensions: ['wmd']
  },
  'application/x-ms-wmz': {
    source: 'apache',
    extensions: ['wmz']
  },
  'application/x-ms-xbap': {
    source: 'apache',
    extensions: ['xbap']
  },
  'application/x-msaccess': {
    source: 'apache',
    extensions: ['mdb']
  },
  'application/x-msbinder': {
    source: 'apache',
    extensions: ['obd']
  },
  'application/x-mscardfile': {
    source: 'apache',
    extensions: ['crd']
  },
  'application/x-msclip': {
    source: 'apache',
    extensions: ['clp']
  },
  'application/x-msdos-program': {
    extensions: ['exe']
  },
  'application/x-msdownload': {
    source: 'apache',
    extensions: ['exe', 'dll', 'com', 'bat', 'msi']
  },
  'application/x-msmediaview': {
    source: 'apache',
    extensions: ['mvb', 'm13', 'm14']
  },
  'application/x-msmetafile': {
    source: 'apache',
    extensions: ['wmf', 'wmz', 'emf', 'emz']
  },
  'application/x-msmoney': {
    source: 'apache',
    extensions: ['mny']
  },
  'application/x-mspublisher': {
    source: 'apache',
    extensions: ['pub']
  },
  'application/x-msschedule': {
    source: 'apache',
    extensions: ['scd']
  },
  'application/x-msterminal': {
    source: 'apache',
    extensions: ['trm']
  },
  'application/x-mswrite': {
    source: 'apache',
    extensions: ['wri']
  },
  'application/x-netcdf': {
    source: 'apache',
    extensions: ['nc', 'cdf']
  },
  'application/x-ns-proxy-autoconfig': {
    compressible: true,
    extensions: ['pac']
  },
  'application/x-nzb': {
    source: 'apache',
    extensions: ['nzb']
  },
  'application/x-perl': {
    source: 'nginx',
    extensions: ['pl', 'pm']
  },
  'application/x-pilot': {
    source: 'nginx',
    extensions: ['prc', 'pdb']
  },
  'application/x-pkcs12': {
    source: 'apache',
    compressible: false,
    extensions: ['p12', 'pfx']
  },
  'application/x-pkcs7-certificates': {
    source: 'apache',
    extensions: ['p7b', 'spc']
  },
  'application/x-pkcs7-certreqresp': {
    source: 'apache',
    extensions: ['p7r']
  },
  'application/x-rar-compressed': {
    source: 'apache',
    compressible: false,
    extensions: ['rar']
  },
  'application/x-redhat-package-manager': {
    source: 'nginx',
    extensions: ['rpm']
  },
  'application/x-research-info-systems': {
    source: 'apache',
    extensions: ['ris']
  },
  'application/x-sea': {
    source: 'nginx',
    extensions: ['sea']
  },
  'application/x-sh': {
    source: 'apache',
    compressible: true,
    extensions: ['sh']
  },
  'application/x-shar': {
    source: 'apache',
    extensions: ['shar']
  },
  'application/x-shockwave-flash': {
    source: 'apache',
    compressible: false,
    extensions: ['swf']
  },
  'application/x-silverlight-app': {
    source: 'apache',
    extensions: ['xap']
  },
  'application/x-sql': {
    source: 'apache',
    extensions: ['sql']
  },
  'application/x-stuffit': {
    source: 'apache',
    compressible: false,
    extensions: ['sit']
  },
  'application/x-stuffitx': {
    source: 'apache',
    extensions: ['sitx']
  },
  'application/x-subrip': {
    source: 'apache',
    extensions: ['srt']
  },
  'application/x-sv4cpio': {
    source: 'apache',
    extensions: ['sv4cpio']
  },
  'application/x-sv4crc': {
    source: 'apache',
    extensions: ['sv4crc']
  },
  'application/x-t3vm-image': {
    source: 'apache',
    extensions: ['t3']
  },
  'application/x-tads': {
    source: 'apache',
    extensions: ['gam']
  },
  'application/x-tar': {
    source: 'apache',
    compressible: true,
    extensions: ['tar']
  },
  'application/x-tcl': {
    source: 'apache',
    extensions: ['tcl', 'tk']
  },
  'application/x-tex': {
    source: 'apache',
    extensions: ['tex']
  },
  'application/x-tex-tfm': {
    source: 'apache',
    extensions: ['tfm']
  },
  'application/x-texinfo': {
    source: 'apache',
    extensions: ['texinfo', 'texi']
  },
  'application/x-tgif': {
    source: 'apache',
    extensions: ['obj']
  },
  'application/x-ustar': {
    source: 'apache',
    extensions: ['ustar']
  },
  'application/x-virtualbox-hdd': {
    compressible: true,
    extensions: ['hdd']
  },
  'application/x-virtualbox-ova': {
    compressible: true,
    extensions: ['ova']
  },
  'application/x-virtualbox-ovf': {
    compressible: true,
    extensions: ['ovf']
  },
  'application/x-virtualbox-vbox': {
    compressible: true,
    extensions: ['vbox']
  },
  'application/x-virtualbox-vbox-extpack': {
    compressible: false,
    extensions: ['vbox-extpack']
  },
  'application/x-virtualbox-vdi': {
    compressible: true,
    extensions: ['vdi']
  },
  'application/x-virtualbox-vhd': {
    compressible: true,
    extensions: ['vhd']
  },
  'application/x-virtualbox-vmdk': {
    compressible: true,
    extensions: ['vmdk']
  },
  'application/x-wais-source': {
    source: 'apache',
    extensions: ['src']
  },
  'application/x-web-app-manifest+json': {
    compressible: true,
    extensions: ['webapp']
  },
  'application/x-www-form-urlencoded': {
    source: 'iana',
    compressible: true
  },
  'application/x-x509-ca-cert': {
    source: 'apache',
    extensions: ['der', 'crt', 'pem']
  },
  'application/x-xfig': {
    source: 'apache',
    extensions: ['fig']
  },
  'application/x-xliff+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['xlf']
  },
  'application/x-xpinstall': {
    source: 'apache',
    compressible: false,
    extensions: ['xpi']
  },
  'application/x-xz': {
    source: 'apache',
    extensions: ['xz']
  },
  'application/x-zmachine': {
    source: 'apache',
    extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8']
  },
  'application/x400-bp': {
    source: 'iana'
  },
  'application/xacml+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xaml+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['xaml']
  },
  'application/xcap-att+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcap-caps+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcap-diff+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xdf']
  },
  'application/xcap-el+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcap-error+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcap-ns+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcon-conference-info+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xcon-conference-info-diff+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xenc+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xenc']
  },
  'application/xhtml+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xhtml', 'xht']
  },
  'application/xhtml-voice+xml': {
    source: 'apache',
    compressible: true
  },
  'application/xliff+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xml', 'xsl', 'xsd', 'rng']
  },
  'application/xml-dtd': {
    source: 'iana',
    compressible: true,
    extensions: ['dtd']
  },
  'application/xml-external-parsed-entity': {
    source: 'iana'
  },
  'application/xml-patch+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xmpp+xml': {
    source: 'iana',
    compressible: true
  },
  'application/xop+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xop']
  },
  'application/xproc+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['xpl']
  },
  'application/xslt+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xslt']
  },
  'application/xspf+xml': {
    source: 'apache',
    compressible: true,
    extensions: ['xspf']
  },
  'application/xv+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['mxml', 'xhvml', 'xvml', 'xvm']
  },
  'application/yang': {
    source: 'iana',
    extensions: ['yang']
  },
  'application/yang-data+json': {
    source: 'iana',
    compressible: true
  },
  'application/yang-data+xml': {
    source: 'iana',
    compressible: true
  },
  'application/yang-patch+json': {
    source: 'iana',
    compressible: true
  },
  'application/yang-patch+xml': {
    source: 'iana',
    compressible: true
  },
  'application/yin+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['yin']
  },
  'application/zip': {
    source: 'iana',
    compressible: false,
    extensions: ['zip']
  },
  'application/zlib': {
    source: 'iana'
  },
  'application/zstd': {
    source: 'iana'
  },
  'audio/1d-interleaved-parityfec': {
    source: 'iana'
  },
  'audio/32kadpcm': {
    source: 'iana'
  },
  'audio/3gpp': {
    source: 'iana',
    compressible: false,
    extensions: ['3gpp']
  },
  'audio/3gpp2': {
    source: 'iana'
  },
  'audio/aac': {
    source: 'iana'
  },
  'audio/ac3': {
    source: 'iana'
  },
  'audio/adpcm': {
    source: 'apache',
    extensions: ['adp']
  },
  'audio/amr': {
    source: 'iana'
  },
  'audio/amr-wb': {
    source: 'iana'
  },
  'audio/amr-wb+': {
    source: 'iana'
  },
  'audio/aptx': {
    source: 'iana'
  },
  'audio/asc': {
    source: 'iana'
  },
  'audio/atrac-advanced-lossless': {
    source: 'iana'
  },
  'audio/atrac-x': {
    source: 'iana'
  },
  'audio/atrac3': {
    source: 'iana'
  },
  'audio/basic': {
    source: 'iana',
    compressible: false,
    extensions: ['au', 'snd']
  },
  'audio/bv16': {
    source: 'iana'
  },
  'audio/bv32': {
    source: 'iana'
  },
  'audio/clearmode': {
    source: 'iana'
  },
  'audio/cn': {
    source: 'iana'
  },
  'audio/dat12': {
    source: 'iana'
  },
  'audio/dls': {
    source: 'iana'
  },
  'audio/dsr-es201108': {
    source: 'iana'
  },
  'audio/dsr-es202050': {
    source: 'iana'
  },
  'audio/dsr-es202211': {
    source: 'iana'
  },
  'audio/dsr-es202212': {
    source: 'iana'
  },
  'audio/dv': {
    source: 'iana'
  },
  'audio/dvi4': {
    source: 'iana'
  },
  'audio/eac3': {
    source: 'iana'
  },
  'audio/encaprtp': {
    source: 'iana'
  },
  'audio/evrc': {
    source: 'iana'
  },
  'audio/evrc-qcp': {
    source: 'iana'
  },
  'audio/evrc0': {
    source: 'iana'
  },
  'audio/evrc1': {
    source: 'iana'
  },
  'audio/evrcb': {
    source: 'iana'
  },
  'audio/evrcb0': {
    source: 'iana'
  },
  'audio/evrcb1': {
    source: 'iana'
  },
  'audio/evrcnw': {
    source: 'iana'
  },
  'audio/evrcnw0': {
    source: 'iana'
  },
  'audio/evrcnw1': {
    source: 'iana'
  },
  'audio/evrcwb': {
    source: 'iana'
  },
  'audio/evrcwb0': {
    source: 'iana'
  },
  'audio/evrcwb1': {
    source: 'iana'
  },
  'audio/evs': {
    source: 'iana'
  },
  'audio/flexfec': {
    source: 'iana'
  },
  'audio/fwdred': {
    source: 'iana'
  },
  'audio/g711-0': {
    source: 'iana'
  },
  'audio/g719': {
    source: 'iana'
  },
  'audio/g722': {
    source: 'iana'
  },
  'audio/g7221': {
    source: 'iana'
  },
  'audio/g723': {
    source: 'iana'
  },
  'audio/g726-16': {
    source: 'iana'
  },
  'audio/g726-24': {
    source: 'iana'
  },
  'audio/g726-32': {
    source: 'iana'
  },
  'audio/g726-40': {
    source: 'iana'
  },
  'audio/g728': {
    source: 'iana'
  },
  'audio/g729': {
    source: 'iana'
  },
  'audio/g7291': {
    source: 'iana'
  },
  'audio/g729d': {
    source: 'iana'
  },
  'audio/g729e': {
    source: 'iana'
  },
  'audio/gsm': {
    source: 'iana'
  },
  'audio/gsm-efr': {
    source: 'iana'
  },
  'audio/gsm-hr-08': {
    source: 'iana'
  },
  'audio/ilbc': {
    source: 'iana'
  },
  'audio/ip-mr_v2.5': {
    source: 'iana'
  },
  'audio/isac': {
    source: 'apache'
  },
  'audio/l16': {
    source: 'iana'
  },
  'audio/l20': {
    source: 'iana'
  },
  'audio/l24': {
    source: 'iana',
    compressible: false
  },
  'audio/l8': {
    source: 'iana'
  },
  'audio/lpc': {
    source: 'iana'
  },
  'audio/melp': {
    source: 'iana'
  },
  'audio/melp1200': {
    source: 'iana'
  },
  'audio/melp2400': {
    source: 'iana'
  },
  'audio/melp600': {
    source: 'iana'
  },
  'audio/midi': {
    source: 'apache',
    extensions: ['mid', 'midi', 'kar', 'rmi']
  },
  'audio/mobile-xmf': {
    source: 'iana'
  },
  'audio/mp3': {
    compressible: false,
    extensions: ['mp3']
  },
  'audio/mp4': {
    source: 'iana',
    compressible: false,
    extensions: ['m4a', 'mp4a']
  },
  'audio/mp4a-latm': {
    source: 'iana'
  },
  'audio/mpa': {
    source: 'iana'
  },
  'audio/mpa-robust': {
    source: 'iana'
  },
  'audio/mpeg': {
    source: 'iana',
    compressible: false,
    extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a']
  },
  'audio/mpeg4-generic': {
    source: 'iana'
  },
  'audio/musepack': {
    source: 'apache'
  },
  'audio/ogg': {
    source: 'iana',
    compressible: false,
    extensions: ['oga', 'ogg', 'spx']
  },
  'audio/opus': {
    source: 'iana'
  },
  'audio/parityfec': {
    source: 'iana'
  },
  'audio/pcma': {
    source: 'iana'
  },
  'audio/pcma-wb': {
    source: 'iana'
  },
  'audio/pcmu': {
    source: 'iana'
  },
  'audio/pcmu-wb': {
    source: 'iana'
  },
  'audio/prs.sid': {
    source: 'iana'
  },
  'audio/qcelp': {
    source: 'iana'
  },
  'audio/raptorfec': {
    source: 'iana'
  },
  'audio/red': {
    source: 'iana'
  },
  'audio/rtp-enc-aescm128': {
    source: 'iana'
  },
  'audio/rtp-midi': {
    source: 'iana'
  },
  'audio/rtploopback': {
    source: 'iana'
  },
  'audio/rtx': {
    source: 'iana'
  },
  'audio/s3m': {
    source: 'apache',
    extensions: ['s3m']
  },
  'audio/silk': {
    source: 'apache',
    extensions: ['sil']
  },
  'audio/smv': {
    source: 'iana'
  },
  'audio/smv-qcp': {
    source: 'iana'
  },
  'audio/smv0': {
    source: 'iana'
  },
  'audio/sp-midi': {
    source: 'iana'
  },
  'audio/speex': {
    source: 'iana'
  },
  'audio/t140c': {
    source: 'iana'
  },
  'audio/t38': {
    source: 'iana'
  },
  'audio/telephone-event': {
    source: 'iana'
  },
  'audio/tetra_acelp': {
    source: 'iana'
  },
  'audio/tone': {
    source: 'iana'
  },
  'audio/uemclip': {
    source: 'iana'
  },
  'audio/ulpfec': {
    source: 'iana'
  },
  'audio/usac': {
    source: 'iana'
  },
  'audio/vdvi': {
    source: 'iana'
  },
  'audio/vmr-wb': {
    source: 'iana'
  },
  'audio/vnd.3gpp.iufp': {
    source: 'iana'
  },
  'audio/vnd.4sb': {
    source: 'iana'
  },
  'audio/vnd.audiokoz': {
    source: 'iana'
  },
  'audio/vnd.celp': {
    source: 'iana'
  },
  'audio/vnd.cisco.nse': {
    source: 'iana'
  },
  'audio/vnd.cmles.radio-events': {
    source: 'iana'
  },
  'audio/vnd.cns.anp1': {
    source: 'iana'
  },
  'audio/vnd.cns.inf1': {
    source: 'iana'
  },
  'audio/vnd.dece.audio': {
    source: 'iana',
    extensions: ['uva', 'uvva']
  },
  'audio/vnd.digital-winds': {
    source: 'iana',
    extensions: ['eol']
  },
  'audio/vnd.dlna.adts': {
    source: 'iana'
  },
  'audio/vnd.dolby.heaac.1': {
    source: 'iana'
  },
  'audio/vnd.dolby.heaac.2': {
    source: 'iana'
  },
  'audio/vnd.dolby.mlp': {
    source: 'iana'
  },
  'audio/vnd.dolby.mps': {
    source: 'iana'
  },
  'audio/vnd.dolby.pl2': {
    source: 'iana'
  },
  'audio/vnd.dolby.pl2x': {
    source: 'iana'
  },
  'audio/vnd.dolby.pl2z': {
    source: 'iana'
  },
  'audio/vnd.dolby.pulse.1': {
    source: 'iana'
  },
  'audio/vnd.dra': {
    source: 'iana',
    extensions: ['dra']
  },
  'audio/vnd.dts': {
    source: 'iana',
    extensions: ['dts']
  },
  'audio/vnd.dts.hd': {
    source: 'iana',
    extensions: ['dtshd']
  },
  'audio/vnd.dts.uhd': {
    source: 'iana'
  },
  'audio/vnd.dvb.file': {
    source: 'iana'
  },
  'audio/vnd.everad.plj': {
    source: 'iana'
  },
  'audio/vnd.hns.audio': {
    source: 'iana'
  },
  'audio/vnd.lucent.voice': {
    source: 'iana',
    extensions: ['lvp']
  },
  'audio/vnd.ms-playready.media.pya': {
    source: 'iana',
    extensions: ['pya']
  },
  'audio/vnd.nokia.mobile-xmf': {
    source: 'iana'
  },
  'audio/vnd.nortel.vbk': {
    source: 'iana'
  },
  'audio/vnd.nuera.ecelp4800': {
    source: 'iana',
    extensions: ['ecelp4800']
  },
  'audio/vnd.nuera.ecelp7470': {
    source: 'iana',
    extensions: ['ecelp7470']
  },
  'audio/vnd.nuera.ecelp9600': {
    source: 'iana',
    extensions: ['ecelp9600']
  },
  'audio/vnd.octel.sbc': {
    source: 'iana'
  },
  'audio/vnd.presonus.multitrack': {
    source: 'iana'
  },
  'audio/vnd.qcelp': {
    source: 'iana'
  },
  'audio/vnd.rhetorex.32kadpcm': {
    source: 'iana'
  },
  'audio/vnd.rip': {
    source: 'iana',
    extensions: ['rip']
  },
  'audio/vnd.rn-realaudio': {
    compressible: false
  },
  'audio/vnd.sealedmedia.softseal.mpeg': {
    source: 'iana'
  },
  'audio/vnd.vmx.cvsd': {
    source: 'iana'
  },
  'audio/vnd.wave': {
    compressible: false
  },
  'audio/vorbis': {
    source: 'iana',
    compressible: false
  },
  'audio/vorbis-config': {
    source: 'iana'
  },
  'audio/wav': {
    compressible: false,
    extensions: ['wav']
  },
  'audio/wave': {
    compressible: false,
    extensions: ['wav']
  },
  'audio/webm': {
    source: 'apache',
    compressible: false,
    extensions: ['weba']
  },
  'audio/x-aac': {
    source: 'apache',
    compressible: false,
    extensions: ['aac']
  },
  'audio/x-aiff': {
    source: 'apache',
    extensions: ['aif', 'aiff', 'aifc']
  },
  'audio/x-caf': {
    source: 'apache',
    compressible: false,
    extensions: ['caf']
  },
  'audio/x-flac': {
    source: 'apache',
    extensions: ['flac']
  },
  'audio/x-m4a': {
    source: 'nginx',
    extensions: ['m4a']
  },
  'audio/x-matroska': {
    source: 'apache',
    extensions: ['mka']
  },
  'audio/x-mpegurl': {
    source: 'apache',
    extensions: ['m3u']
  },
  'audio/x-ms-wax': {
    source: 'apache',
    extensions: ['wax']
  },
  'audio/x-ms-wma': {
    source: 'apache',
    extensions: ['wma']
  },
  'audio/x-pn-realaudio': {
    source: 'apache',
    extensions: ['ram', 'ra']
  },
  'audio/x-pn-realaudio-plugin': {
    source: 'apache',
    extensions: ['rmp']
  },
  'audio/x-realaudio': {
    source: 'nginx',
    extensions: ['ra']
  },
  'audio/x-tta': {
    source: 'apache'
  },
  'audio/x-wav': {
    source: 'apache',
    extensions: ['wav']
  },
  'audio/xm': {
    source: 'apache',
    extensions: ['xm']
  },
  'chemical/x-cdx': {
    source: 'apache',
    extensions: ['cdx']
  },
  'chemical/x-cif': {
    source: 'apache',
    extensions: ['cif']
  },
  'chemical/x-cmdf': {
    source: 'apache',
    extensions: ['cmdf']
  },
  'chemical/x-cml': {
    source: 'apache',
    extensions: ['cml']
  },
  'chemical/x-csml': {
    source: 'apache',
    extensions: ['csml']
  },
  'chemical/x-pdb': {
    source: 'apache'
  },
  'chemical/x-xyz': {
    source: 'apache',
    extensions: ['xyz']
  },
  'font/collection': {
    source: 'iana',
    extensions: ['ttc']
  },
  'font/otf': {
    source: 'iana',
    compressible: true,
    extensions: ['otf']
  },
  'font/sfnt': {
    source: 'iana'
  },
  'font/ttf': {
    source: 'iana',
    compressible: true,
    extensions: ['ttf']
  },
  'font/woff': {
    source: 'iana',
    extensions: ['woff']
  },
  'font/woff2': {
    source: 'iana',
    extensions: ['woff2']
  },
  'image/aces': {
    source: 'iana',
    extensions: ['exr']
  },
  'image/apng': {
    compressible: false,
    extensions: ['apng']
  },
  'image/avci': {
    source: 'iana'
  },
  'image/avcs': {
    source: 'iana'
  },
  'image/bmp': {
    source: 'iana',
    compressible: true,
    extensions: ['bmp']
  },
  'image/cgm': {
    source: 'iana',
    extensions: ['cgm']
  },
  'image/dicom-rle': {
    source: 'iana',
    extensions: ['drle']
  },
  'image/emf': {
    source: 'iana',
    extensions: ['emf']
  },
  'image/fits': {
    source: 'iana',
    extensions: ['fits']
  },
  'image/g3fax': {
    source: 'iana',
    extensions: ['g3']
  },
  'image/gif': {
    source: 'iana',
    compressible: false,
    extensions: ['gif']
  },
  'image/heic': {
    source: 'iana',
    extensions: ['heic']
  },
  'image/heic-sequence': {
    source: 'iana',
    extensions: ['heics']
  },
  'image/heif': {
    source: 'iana',
    extensions: ['heif']
  },
  'image/heif-sequence': {
    source: 'iana',
    extensions: ['heifs']
  },
  'image/hej2k': {
    source: 'iana',
    extensions: ['hej2']
  },
  'image/hsj2': {
    source: 'iana',
    extensions: ['hsj2']
  },
  'image/ief': {
    source: 'iana',
    extensions: ['ief']
  },
  'image/jls': {
    source: 'iana',
    extensions: ['jls']
  },
  'image/jp2': {
    source: 'iana',
    compressible: false,
    extensions: ['jp2', 'jpg2']
  },
  'image/jpeg': {
    source: 'iana',
    compressible: false,
    extensions: ['jpeg', 'jpg', 'jpe']
  },
  'image/jph': {
    source: 'iana',
    extensions: ['jph']
  },
  'image/jphc': {
    source: 'iana',
    extensions: ['jhc']
  },
  'image/jpm': {
    source: 'iana',
    compressible: false,
    extensions: ['jpm']
  },
  'image/jpx': {
    source: 'iana',
    compressible: false,
    extensions: ['jpx', 'jpf']
  },
  'image/jxr': {
    source: 'iana',
    extensions: ['jxr']
  },
  'image/jxra': {
    source: 'iana',
    extensions: ['jxra']
  },
  'image/jxrs': {
    source: 'iana',
    extensions: ['jxrs']
  },
  'image/jxs': {
    source: 'iana',
    extensions: ['jxs']
  },
  'image/jxsc': {
    source: 'iana',
    extensions: ['jxsc']
  },
  'image/jxsi': {
    source: 'iana',
    extensions: ['jxsi']
  },
  'image/jxss': {
    source: 'iana',
    extensions: ['jxss']
  },
  'image/ktx': {
    source: 'iana',
    extensions: ['ktx']
  },
  'image/naplps': {
    source: 'iana'
  },
  'image/pjpeg': {
    compressible: false
  },
  'image/png': {
    source: 'iana',
    compressible: false,
    extensions: ['png']
  },
  'image/prs.btif': {
    source: 'iana',
    extensions: ['btif']
  },
  'image/prs.pti': {
    source: 'iana',
    extensions: ['pti']
  },
  'image/pwg-raster': {
    source: 'iana'
  },
  'image/sgi': {
    source: 'apache',
    extensions: ['sgi']
  },
  'image/svg+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['svg', 'svgz']
  },
  'image/t38': {
    source: 'iana',
    extensions: ['t38']
  },
  'image/tiff': {
    source: 'iana',
    compressible: false,
    extensions: ['tif', 'tiff']
  },
  'image/tiff-fx': {
    source: 'iana',
    extensions: ['tfx']
  },
  'image/vnd.adobe.photoshop': {
    source: 'iana',
    compressible: true,
    extensions: ['psd']
  },
  'image/vnd.airzip.accelerator.azv': {
    source: 'iana',
    extensions: ['azv']
  },
  'image/vnd.cns.inf2': {
    source: 'iana'
  },
  'image/vnd.dece.graphic': {
    source: 'iana',
    extensions: ['uvi', 'uvvi', 'uvg', 'uvvg']
  },
  'image/vnd.djvu': {
    source: 'iana',
    extensions: ['djvu', 'djv']
  },
  'image/vnd.dvb.subtitle': {
    source: 'iana',
    extensions: ['sub']
  },
  'image/vnd.dwg': {
    source: 'iana',
    extensions: ['dwg']
  },
  'image/vnd.dxf': {
    source: 'iana',
    extensions: ['dxf']
  },
  'image/vnd.fastbidsheet': {
    source: 'iana',
    extensions: ['fbs']
  },
  'image/vnd.fpx': {
    source: 'iana',
    extensions: ['fpx']
  },
  'image/vnd.fst': {
    source: 'iana',
    extensions: ['fst']
  },
  'image/vnd.fujixerox.edmics-mmr': {
    source: 'iana',
    extensions: ['mmr']
  },
  'image/vnd.fujixerox.edmics-rlc': {
    source: 'iana',
    extensions: ['rlc']
  },
  'image/vnd.globalgraphics.pgb': {
    source: 'iana'
  },
  'image/vnd.microsoft.icon': {
    source: 'iana',
    extensions: ['ico']
  },
  'image/vnd.mix': {
    source: 'iana'
  },
  'image/vnd.mozilla.apng': {
    source: 'iana'
  },
  'image/vnd.ms-dds': {
    extensions: ['dds']
  },
  'image/vnd.ms-modi': {
    source: 'iana',
    extensions: ['mdi']
  },
  'image/vnd.ms-photo': {
    source: 'apache',
    extensions: ['wdp']
  },
  'image/vnd.net-fpx': {
    source: 'iana',
    extensions: ['npx']
  },
  'image/vnd.radiance': {
    source: 'iana'
  },
  'image/vnd.sealed.png': {
    source: 'iana'
  },
  'image/vnd.sealedmedia.softseal.gif': {
    source: 'iana'
  },
  'image/vnd.sealedmedia.softseal.jpg': {
    source: 'iana'
  },
  'image/vnd.svf': {
    source: 'iana'
  },
  'image/vnd.tencent.tap': {
    source: 'iana',
    extensions: ['tap']
  },
  'image/vnd.valve.source.texture': {
    source: 'iana',
    extensions: ['vtf']
  },
  'image/vnd.wap.wbmp': {
    source: 'iana',
    extensions: ['wbmp']
  },
  'image/vnd.xiff': {
    source: 'iana',
    extensions: ['xif']
  },
  'image/vnd.zbrush.pcx': {
    source: 'iana',
    extensions: ['pcx']
  },
  'image/webp': {
    source: 'apache',
    extensions: ['webp']
  },
  'image/wmf': {
    source: 'iana',
    extensions: ['wmf']
  },
  'image/x-3ds': {
    source: 'apache',
    extensions: ['3ds']
  },
  'image/x-cmu-raster': {
    source: 'apache',
    extensions: ['ras']
  },
  'image/x-cmx': {
    source: 'apache',
    extensions: ['cmx']
  },
  'image/x-freehand': {
    source: 'apache',
    extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7']
  },
  'image/x-icon': {
    source: 'apache',
    compressible: true,
    extensions: ['ico']
  },
  'image/x-jng': {
    source: 'nginx',
    extensions: ['jng']
  },
  'image/x-mrsid-image': {
    source: 'apache',
    extensions: ['sid']
  },
  'image/x-ms-bmp': {
    source: 'nginx',
    compressible: true,
    extensions: ['bmp']
  },
  'image/x-pcx': {
    source: 'apache',
    extensions: ['pcx']
  },
  'image/x-pict': {
    source: 'apache',
    extensions: ['pic', 'pct']
  },
  'image/x-portable-anymap': {
    source: 'apache',
    extensions: ['pnm']
  },
  'image/x-portable-bitmap': {
    source: 'apache',
    extensions: ['pbm']
  },
  'image/x-portable-graymap': {
    source: 'apache',
    extensions: ['pgm']
  },
  'image/x-portable-pixmap': {
    source: 'apache',
    extensions: ['ppm']
  },
  'image/x-rgb': {
    source: 'apache',
    extensions: ['rgb']
  },
  'image/x-tga': {
    source: 'apache',
    extensions: ['tga']
  },
  'image/x-xbitmap': {
    source: 'apache',
    extensions: ['xbm']
  },
  'image/x-xcf': {
    compressible: false
  },
  'image/x-xpixmap': {
    source: 'apache',
    extensions: ['xpm']
  },
  'image/x-xwindowdump': {
    source: 'apache',
    extensions: ['xwd']
  },
  'message/cpim': {
    source: 'iana'
  },
  'message/delivery-status': {
    source: 'iana'
  },
  'message/disposition-notification': {
    source: 'iana',
    extensions: ['disposition-notification']
  },
  'message/external-body': {
    source: 'iana'
  },
  'message/feedback-report': {
    source: 'iana'
  },
  'message/global': {
    source: 'iana',
    extensions: ['u8msg']
  },
  'message/global-delivery-status': {
    source: 'iana',
    extensions: ['u8dsn']
  },
  'message/global-disposition-notification': {
    source: 'iana',
    extensions: ['u8mdn']
  },
  'message/global-headers': {
    source: 'iana',
    extensions: ['u8hdr']
  },
  'message/http': {
    source: 'iana',
    compressible: false
  },
  'message/imdn+xml': {
    source: 'iana',
    compressible: true
  },
  'message/news': {
    source: 'iana'
  },
  'message/partial': {
    source: 'iana',
    compressible: false
  },
  'message/rfc822': {
    source: 'iana',
    compressible: true,
    extensions: ['eml', 'mime']
  },
  'message/s-http': {
    source: 'iana'
  },
  'message/sip': {
    source: 'iana'
  },
  'message/sipfrag': {
    source: 'iana'
  },
  'message/tracking-status': {
    source: 'iana'
  },
  'message/vnd.si.simp': {
    source: 'iana'
  },
  'message/vnd.wfa.wsc': {
    source: 'iana',
    extensions: ['wsc']
  },
  'model/3mf': {
    source: 'iana',
    extensions: ['3mf']
  },
  'model/gltf+json': {
    source: 'iana',
    compressible: true,
    extensions: ['gltf']
  },
  'model/gltf-binary': {
    source: 'iana',
    compressible: true,
    extensions: ['glb']
  },
  'model/iges': {
    source: 'iana',
    compressible: false,
    extensions: ['igs', 'iges']
  },
  'model/mesh': {
    source: 'iana',
    compressible: false,
    extensions: ['msh', 'mesh', 'silo']
  },
  'model/stl': {
    source: 'iana',
    extensions: ['stl']
  },
  'model/vnd.collada+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['dae']
  },
  'model/vnd.dwf': {
    source: 'iana',
    extensions: ['dwf']
  },
  'model/vnd.flatland.3dml': {
    source: 'iana'
  },
  'model/vnd.gdl': {
    source: 'iana',
    extensions: ['gdl']
  },
  'model/vnd.gs-gdl': {
    source: 'apache'
  },
  'model/vnd.gs.gdl': {
    source: 'iana'
  },
  'model/vnd.gtw': {
    source: 'iana',
    extensions: ['gtw']
  },
  'model/vnd.moml+xml': {
    source: 'iana',
    compressible: true
  },
  'model/vnd.mts': {
    source: 'iana',
    extensions: ['mts']
  },
  'model/vnd.opengex': {
    source: 'iana',
    extensions: ['ogex']
  },
  'model/vnd.parasolid.transmit.binary': {
    source: 'iana',
    extensions: ['x_b']
  },
  'model/vnd.parasolid.transmit.text': {
    source: 'iana',
    extensions: ['x_t']
  },
  'model/vnd.rosette.annotated-data-model': {
    source: 'iana'
  },
  'model/vnd.usdz+zip': {
    source: 'iana',
    compressible: false,
    extensions: ['usdz']
  },
  'model/vnd.valve.source.compiled-map': {
    source: 'iana',
    extensions: ['bsp']
  },
  'model/vnd.vtu': {
    source: 'iana',
    extensions: ['vtu']
  },
  'model/vrml': {
    source: 'iana',
    compressible: false,
    extensions: ['wrl', 'vrml']
  },
  'model/x3d+binary': {
    source: 'apache',
    compressible: false,
    extensions: ['x3db', 'x3dbz']
  },
  'model/x3d+fastinfoset': {
    source: 'iana',
    extensions: ['x3db']
  },
  'model/x3d+vrml': {
    source: 'apache',
    compressible: false,
    extensions: ['x3dv', 'x3dvz']
  },
  'model/x3d+xml': {
    source: 'iana',
    compressible: true,
    extensions: ['x3d', 'x3dz']
  },
  'model/x3d-vrml': {
    source: 'iana',
    extensions: ['x3dv']
  },
  'multipart/alternative': {
    source: 'iana',
    compressible: false
  },
  'multipart/appledouble': {
    source: 'iana'
  },
  'multipart/byteranges': {
    source: 'iana'
  },
  'multipart/digest': {
    source: 'iana'
  },
  'multipart/encrypted': {
    source: 'iana',
    compressible: false
  },
  'multipart/form-data': {
    source: 'iana',
    compressible: false
  },
  'multipart/header-set': {
    source: 'iana'
  },
  'multipart/mixed': {
    source: 'iana'
  },
  'multipart/multilingual': {
    source: 'iana'
  },
  'multipart/parallel': {
    source: 'iana'
  },
  'multipart/related': {
    source: 'iana',
    compressible: false
  },
  'multipart/report': {
    source: 'iana'
  },
  'multipart/signed': {
    source: 'iana',
    compressible: false
  },
  'multipart/vnd.bint.med-plus': {
    source: 'iana'
  },
  'multipart/voice-message': {
    source: 'iana'
  },
  'multipart/x-mixed-replace': {
    source: 'iana'
  },
  'text/1d-interleaved-parityfec': {
    source: 'iana'
  },
  'text/cache-manifest': {
    source: 'iana',
    compressible: true,
    extensions: ['appcache', 'manifest']
  },
  'text/calendar': {
    source: 'iana',
    extensions: ['ics', 'ifb']
  },
  'text/calender': {
    compressible: true
  },
  'text/cmd': {
    compressible: true
  },
  'text/coffeescript': {
    extensions: ['coffee', 'litcoffee']
  },
  'text/css': {
    source: 'iana',
    charset: 'UTF-8',
    compressible: true,
    extensions: ['css']
  },
  'text/csv': {
    source: 'iana',
    compressible: true,
    extensions: ['csv']
  },
  'text/csv-schema': {
    source: 'iana'
  },
  'text/directory': {
    source: 'iana'
  },
  'text/dns': {
    source: 'iana'
  },
  'text/ecmascript': {
    source: 'iana'
  },
  'text/encaprtp': {
    source: 'iana'
  },
  'text/enriched': {
    source: 'iana'
  },
  'text/flexfec': {
    source: 'iana'
  },
  'text/fwdred': {
    source: 'iana'
  },
  'text/grammar-ref-list': {
    source: 'iana'
  },
  'text/html': {
    source: 'iana',
    compressible: true,
    extensions: ['html', 'htm', 'shtml']
  },
  'text/jade': {
    extensions: ['jade']
  },
  'text/javascript': {
    source: 'iana',
    compressible: true
  },
  'text/jcr-cnd': {
    source: 'iana'
  },
  'text/jsx': {
    compressible: true,
    extensions: ['jsx']
  },
  'text/less': {
    compressible: true,
    extensions: ['less']
  },
  'text/markdown': {
    source: 'iana',
    compressible: true,
    extensions: ['markdown', 'md']
  },
  'text/mathml': {
    source: 'nginx',
    extensions: ['mml']
  },
  'text/mdx': {
    compressible: true,
    extensions: ['mdx']
  },
  'text/mizar': {
    source: 'iana'
  },
  'text/n3': {
    source: 'iana',
    compressible: true,
    extensions: ['n3']
  },
  'text/parameters': {
    source: 'iana'
  },
  'text/parityfec': {
    source: 'iana'
  },
  'text/plain': {
    source: 'iana',
    compressible: true,
    extensions: ['txt', 'text', 'conf', 'def', 'list', 'log', 'in', 'ini']
  },
  'text/provenance-notation': {
    source: 'iana'
  },
  'text/prs.fallenstein.rst': {
    source: 'iana'
  },
  'text/prs.lines.tag': {
    source: 'iana',
    extensions: ['dsc']
  },
  'text/prs.prop.logic': {
    source: 'iana'
  },
  'text/raptorfec': {
    source: 'iana'
  },
  'text/red': {
    source: 'iana'
  },
  'text/rfc822-headers': {
    source: 'iana'
  },
  'text/richtext': {
    source: 'iana',
    compressible: true,
    extensions: ['rtx']
  },
  'text/rtf': {
    source: 'iana',
    compressible: true,
    extensions: ['rtf']
  },
  'text/rtp-enc-aescm128': {
    source: 'iana'
  },
  'text/rtploopback': {
    source: 'iana'
  },
  'text/rtx': {
    source: 'iana'
  },
  'text/sgml': {
    source: 'iana',
    extensions: ['sgml', 'sgm']
  },
  'text/shex': {
    extensions: ['shex']
  },
  'text/slim': {
    extensions: ['slim', 'slm']
  },
  'text/strings': {
    source: 'iana'
  },
  'text/stylus': {
    extensions: ['stylus', 'styl']
  },
  'text/t140': {
    source: 'iana'
  },
  'text/tab-separated-values': {
    source: 'iana',
    compressible: true,
    extensions: ['tsv']
  },
  'text/troff': {
    source: 'iana',
    extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms']
  },
  'text/turtle': {
    source: 'iana',
    charset: 'UTF-8',
    extensions: ['ttl']
  },
  'text/ulpfec': {
    source: 'iana'
  },
  'text/uri-list': {
    source: 'iana',
    compressible: true,
    extensions: ['uri', 'uris', 'urls']
  },
  'text/vcard': {
    source: 'iana',
    compressible: true,
    extensions: ['vcard']
  },
  'text/vnd.a': {
    source: 'iana'
  },
  'text/vnd.abc': {
    source: 'iana'
  },
  'text/vnd.ascii-art': {
    source: 'iana'
  },
  'text/vnd.curl': {
    source: 'iana',
    extensions: ['curl']
  },
  'text/vnd.curl.dcurl': {
    source: 'apache',
    extensions: ['dcurl']
  },
  'text/vnd.curl.mcurl': {
    source: 'apache',
    extensions: ['mcurl']
  },
  'text/vnd.curl.scurl': {
    source: 'apache',
    extensions: ['scurl']
  },
  'text/vnd.debian.copyright': {
    source: 'iana'
  },
  'text/vnd.dmclientscript': {
    source: 'iana'
  },
  'text/vnd.dvb.subtitle': {
    source: 'iana',
    extensions: ['sub']
  },
  'text/vnd.esmertec.theme-descriptor': {
    source: 'iana'
  },
  'text/vnd.ficlab.flt': {
    source: 'iana'
  },
  'text/vnd.fly': {
    source: 'iana',
    extensions: ['fly']
  },
  'text/vnd.fmi.flexstor': {
    source: 'iana',
    extensions: ['flx']
  },
  'text/vnd.gml': {
    source: 'iana'
  },
  'text/vnd.graphviz': {
    source: 'iana',
    extensions: ['gv']
  },
  'text/vnd.hgl': {
    source: 'iana'
  },
  'text/vnd.in3d.3dml': {
    source: 'iana',
    extensions: ['3dml']
  },
  'text/vnd.in3d.spot': {
    source: 'iana',
    extensions: ['spot']
  },
  'text/vnd.iptc.newsml': {
    source: 'iana'
  },
  'text/vnd.iptc.nitf': {
    source: 'iana'
  },
  'text/vnd.latex-z': {
    source: 'iana'
  },
  'text/vnd.motorola.reflex': {
    source: 'iana'
  },
  'text/vnd.ms-mediapackage': {
    source: 'iana'
  },
  'text/vnd.net2phone.commcenter.command': {
    source: 'iana'
  },
  'text/vnd.radisys.msml-basic-layout': {
    source: 'iana'
  },
  'text/vnd.senx.warpscript': {
    source: 'iana'
  },
  'text/vnd.si.uricatalogue': {
    source: 'iana'
  },
  'text/vnd.sosi': {
    source: 'iana'
  },
  'text/vnd.sun.j2me.app-descriptor': {
    source: 'iana',
    extensions: ['jad']
  },
  'text/vnd.trolltech.linguist': {
    source: 'iana'
  },
  'text/vnd.wap.si': {
    source: 'iana'
  },
  'text/vnd.wap.sl': {
    source: 'iana'
  },
  'text/vnd.wap.wml': {
    source: 'iana',
    extensions: ['wml']
  },
  'text/vnd.wap.wmlscript': {
    source: 'iana',
    extensions: ['wmls']
  },
  'text/vtt': {
    charset: 'UTF-8',
    compressible: true,
    extensions: ['vtt']
  },
  'text/x-asm': {
    source: 'apache',
    extensions: ['s', 'asm']
  },
  'text/x-c': {
    source: 'apache',
    extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic']
  },
  'text/x-component': {
    source: 'nginx',
    extensions: ['htc']
  },
  'text/x-fortran': {
    source: 'apache',
    extensions: ['f', 'for', 'f77', 'f90']
  },
  'text/x-gwt-rpc': {
    compressible: true
  },
  'text/x-handlebars-template': {
    extensions: ['hbs']
  },
  'text/x-java-source': {
    source: 'apache',
    extensions: ['java']
  },
  'text/x-jquery-tmpl': {
    compressible: true
  },
  'text/x-lua': {
    extensions: ['lua']
  },
  'text/x-markdown': {
    compressible: true,
    extensions: ['mkd']
  },
  'text/x-nfo': {
    source: 'apache',
    extensions: ['nfo']
  },
  'text/x-opml': {
    source: 'apache',
    extensions: ['opml']
  },
  'text/x-org': {
    compressible: true,
    extensions: ['org']
  },
  'text/x-pascal': {
    source: 'apache',
    extensions: ['p', 'pas']
  },
  'text/x-processing': {
    compressible: true,
    extensions: ['pde']
  },
  'text/x-sass': {
    extensions: ['sass']
  },
  'text/x-scss': {
    extensions: ['scss']
  },
  'text/x-setext': {
    source: 'apache',
    extensions: ['etx']
  },
  'text/x-sfv': {
    source: 'apache',
    extensions: ['sfv']
  },
  'text/x-suse-ymp': {
    compressible: true,
    extensions: ['ymp']
  },
  'text/x-uuencode': {
    source: 'apache',
    extensions: ['uu']
  },
  'text/x-vcalendar': {
    source: 'apache',
    extensions: ['vcs']
  },
  'text/x-vcard': {
    source: 'apache',
    extensions: ['vcf']
  },
  'text/xml': {
    source: 'iana',
    compressible: true,
    extensions: ['xml']
  },
  'text/xml-external-parsed-entity': {
    source: 'iana'
  },
  'text/yaml': {
    extensions: ['yaml', 'yml']
  },
  'video/1d-interleaved-parityfec': {
    source: 'iana'
  },
  'video/3gpp': {
    source: 'iana',
    extensions: ['3gp', '3gpp']
  },
  'video/3gpp-tt': {
    source: 'iana'
  },
  'video/3gpp2': {
    source: 'iana',
    extensions: ['3g2']
  },
  'video/bmpeg': {
    source: 'iana'
  },
  'video/bt656': {
    source: 'iana'
  },
  'video/celb': {
    source: 'iana'
  },
  'video/dv': {
    source: 'iana'
  },
  'video/encaprtp': {
    source: 'iana'
  },
  'video/flexfec': {
    source: 'iana'
  },
  'video/h261': {
    source: 'iana',
    extensions: ['h261']
  },
  'video/h263': {
    source: 'iana',
    extensions: ['h263']
  },
  'video/h263-1998': {
    source: 'iana'
  },
  'video/h263-2000': {
    source: 'iana'
  },
  'video/h264': {
    source: 'iana',
    extensions: ['h264']
  },
  'video/h264-rcdo': {
    source: 'iana'
  },
  'video/h264-svc': {
    source: 'iana'
  },
  'video/h265': {
    source: 'iana'
  },
  'video/iso.segment': {
    source: 'iana'
  },
  'video/jpeg': {
    source: 'iana',
    extensions: ['jpgv']
  },
  'video/jpeg2000': {
    source: 'iana'
  },
  'video/jpm': {
    source: 'apache',
    extensions: ['jpm', 'jpgm']
  },
  'video/mj2': {
    source: 'iana',
    extensions: ['mj2', 'mjp2']
  },
  'video/mp1s': {
    source: 'iana'
  },
  'video/mp2p': {
    source: 'iana'
  },
  'video/mp2t': {
    source: 'iana',
    extensions: ['ts']
  },
  'video/mp4': {
    source: 'iana',
    compressible: false,
    extensions: ['mp4', 'mp4v', 'mpg4']
  },
  'video/mp4v-es': {
    source: 'iana'
  },
  'video/mpeg': {
    source: 'iana',
    compressible: false,
    extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v']
  },
  'video/mpeg4-generic': {
    source: 'iana'
  },
  'video/mpv': {
    source: 'iana'
  },
  'video/nv': {
    source: 'iana'
  },
  'video/ogg': {
    source: 'iana',
    compressible: false,
    extensions: ['ogv']
  },
  'video/parityfec': {
    source: 'iana'
  },
  'video/pointer': {
    source: 'iana'
  },
  'video/quicktime': {
    source: 'iana',
    compressible: false,
    extensions: ['qt', 'mov']
  },
  'video/raptorfec': {
    source: 'iana'
  },
  'video/raw': {
    source: 'iana'
  },
  'video/rtp-enc-aescm128': {
    source: 'iana'
  },
  'video/rtploopback': {
    source: 'iana'
  },
  'video/rtx': {
    source: 'iana'
  },
  'video/smpte291': {
    source: 'iana'
  },
  'video/smpte292m': {
    source: 'iana'
  },
  'video/ulpfec': {
    source: 'iana'
  },
  'video/vc1': {
    source: 'iana'
  },
  'video/vc2': {
    source: 'iana'
  },
  'video/vnd.cctv': {
    source: 'iana'
  },
  'video/vnd.dece.hd': {
    source: 'iana',
    extensions: ['uvh', 'uvvh']
  },
  'video/vnd.dece.mobile': {
    source: 'iana',
    extensions: ['uvm', 'uvvm']
  },
  'video/vnd.dece.mp4': {
    source: 'iana'
  },
  'video/vnd.dece.pd': {
    source: 'iana',
    extensions: ['uvp', 'uvvp']
  },
  'video/vnd.dece.sd': {
    source: 'iana',
    extensions: ['uvs', 'uvvs']
  },
  'video/vnd.dece.video': {
    source: 'iana',
    extensions: ['uvv', 'uvvv']
  },
  'video/vnd.directv.mpeg': {
    source: 'iana'
  },
  'video/vnd.directv.mpeg-tts': {
    source: 'iana'
  },
  'video/vnd.dlna.mpeg-tts': {
    source: 'iana'
  },
  'video/vnd.dvb.file': {
    source: 'iana',
    extensions: ['dvb']
  },
  'video/vnd.fvt': {
    source: 'iana',
    extensions: ['fvt']
  },
  'video/vnd.hns.video': {
    source: 'iana'
  },
  'video/vnd.iptvforum.1dparityfec-1010': {
    source: 'iana'
  },
  'video/vnd.iptvforum.1dparityfec-2005': {
    source: 'iana'
  },
  'video/vnd.iptvforum.2dparityfec-1010': {
    source: 'iana'
  },
  'video/vnd.iptvforum.2dparityfec-2005': {
    source: 'iana'
  },
  'video/vnd.iptvforum.ttsavc': {
    source: 'iana'
  },
  'video/vnd.iptvforum.ttsmpeg2': {
    source: 'iana'
  },
  'video/vnd.motorola.video': {
    source: 'iana'
  },
  'video/vnd.motorola.videop': {
    source: 'iana'
  },
  'video/vnd.mpegurl': {
    source: 'iana',
    extensions: ['mxu', 'm4u']
  },
  'video/vnd.ms-playready.media.pyv': {
    source: 'iana',
    extensions: ['pyv']
  },
  'video/vnd.nokia.interleaved-multimedia': {
    source: 'iana'
  },
  'video/vnd.nokia.mp4vr': {
    source: 'iana'
  },
  'video/vnd.nokia.videovoip': {
    source: 'iana'
  },
  'video/vnd.objectvideo': {
    source: 'iana'
  },
  'video/vnd.radgamettools.bink': {
    source: 'iana'
  },
  'video/vnd.radgamettools.smacker': {
    source: 'iana'
  },
  'video/vnd.sealed.mpeg1': {
    source: 'iana'
  },
  'video/vnd.sealed.mpeg4': {
    source: 'iana'
  },
  'video/vnd.sealed.swf': {
    source: 'iana'
  },
  'video/vnd.sealedmedia.softseal.mov': {
    source: 'iana'
  },
  'video/vnd.uvvu.mp4': {
    source: 'iana',
    extensions: ['uvu', 'uvvu']
  },
  'video/vnd.vivo': {
    source: 'iana',
    extensions: ['viv']
  },
  'video/vnd.youtube.yt': {
    source: 'iana'
  },
  'video/vp8': {
    source: 'iana'
  },
  'video/webm': {
    source: 'apache',
    compressible: false,
    extensions: ['webm']
  },
  'video/x-f4v': {
    source: 'apache',
    extensions: ['f4v']
  },
  'video/x-fli': {
    source: 'apache',
    extensions: ['fli']
  },
  'video/x-flv': {
    source: 'apache',
    compressible: false,
    extensions: ['flv']
  },
  'video/x-m4v': {
    source: 'apache',
    extensions: ['m4v']
  },
  'video/x-matroska': {
    source: 'apache',
    compressible: false,
    extensions: ['mkv', 'mk3d', 'mks']
  },
  'video/x-mng': {
    source: 'apache',
    extensions: ['mng']
  },
  'video/x-ms-asf': {
    source: 'apache',
    extensions: ['asf', 'asx']
  },
  'video/x-ms-vob': {
    source: 'apache',
    extensions: ['vob']
  },
  'video/x-ms-wm': {
    source: 'apache',
    extensions: ['wm']
  },
  'video/x-ms-wmv': {
    source: 'apache',
    compressible: false,
    extensions: ['wmv']
  },
  'video/x-ms-wmx': {
    source: 'apache',
    extensions: ['wmx']
  },
  'video/x-ms-wvx': {
    source: 'apache',
    extensions: ['wvx']
  },
  'video/x-msvideo': {
    source: 'apache',
    extensions: ['avi']
  },
  'video/x-sgi-movie': {
    source: 'apache',
    extensions: ['movie']
  },
  'video/x-smv': {
    source: 'apache',
    extensions: ['smv']
  },
  'x-conference/x-cooltalk': {
    source: 'apache',
    extensions: ['ice']
  },
  'x-shader/x-fragment': {
    compressible: true
  },
  'x-shader/x-vertex': {
    compressible: true
  }
};

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

/**
 * Module exports.
 */

var mimeDb = require$$0;

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

var mimeTypes = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  /**
   * Module dependencies.
   * @private
   */

  var extname = path__default['default'].extname;

  /**
   * Module variables.
   * @private
   */

  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;

  /**
   * Module exports.
   * @public
   */

  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);

  // Populate the extensions/types maps
  populateMaps(exports.extensions, exports.types);

  /**
   * Get the default charset for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function charset(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && mimeDb[match[1].toLowerCase()];

    if (mime && mime.charset) {
      return mime.charset;
    }

    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return 'UTF-8';
    }

    return false;
  }

  /**
   * Create a full Content-Type header given a MIME type or extension.
   *
   * @param {string} str
   * @return {boolean|string}
   */

  function contentType(str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== 'string') {
      return false;
    }

    var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;

    if (!mime) {
      return false;
    }

    // TODO: use content-type or other module
    if (mime.indexOf('charset') === -1) {
      var charset = exports.charset(mime);
      if (charset) mime += '; charset=' + charset.toLowerCase();
    }

    return mime;
  }

  /**
   * Get the default extension for a MIME type.
   *
   * @param {string} type
   * @return {boolean|string}
   */

  function extension(type) {
    if (!type || typeof type !== 'string') {
      return false;
    }

    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);

    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];

    if (!exts || !exts.length) {
      return false;
    }

    return exts[0];
  }

  /**
   * Lookup the MIME type for a file path/extension.
   *
   * @param {string} path
   * @return {boolean|string}
   */

  function lookup(path) {
    if (!path || typeof path !== 'string') {
      return false;
    }

    // get the extension ("ext" or ".ext" or full path)
    var extension = extname('x.' + path)
      .toLowerCase()
      .substr(1);

    if (!extension) {
      return false;
    }

    return exports.types[extension] || false;
  }

  /**
   * Populate the extensions and types maps.
   * @private
   */

  function populateMaps(extensions, types) {
    // source preference (least -> most)
    var preference = ['nginx', 'apache', undefined, 'iana'];

    Object.keys(mimeDb).forEach(function forEachMimeType(type) {
      var mime = mimeDb[type];
      var exts = mime.extensions;

      if (!exts || !exts.length) {
        return;
      }

      // mime -> extensions
      extensions[type] = exts;

      // extension -> mime
      for (var i = 0; i < exts.length; i++) {
        var extension = exts[i];

        if (types[extension]) {
          var from = preference.indexOf(mimeDb[types[extension]].source);
          var to = preference.indexOf(mime.source);

          if (
            types[extension] !== 'application/octet-stream' &&
            (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))
          ) {
            // skip the remapping
            continue;
          }
        }

        // set the extension -> mime
        types[extension] = type;
      }
    });
  }
});

function Caseless(dict) {
  this.dict = dict || {};
}
Caseless.prototype.set = function(name, value, clobber) {
  if (typeof name === 'object') {
    for (var i in name) {
      this.set(i, name[i], value);
    }
  } else {
    if (typeof clobber === 'undefined') clobber = true;
    var has = this.has(name);

    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value;
    else this.dict[has || name] = value;
    return has;
  }
};
Caseless.prototype.has = function(name) {
  var keys = Object.keys(this.dict),
    name = name.toLowerCase();
  for (var i = 0; i < keys.length; i++) {
    if (keys[i].toLowerCase() === name) return keys[i];
  }
  return false;
};
Caseless.prototype.get = function(name) {
  name = name.toLowerCase();
  var result, _key;
  var headers = this.dict;
  Object.keys(headers).forEach(function(key) {
    _key = key.toLowerCase();
    if (name === _key) result = headers[key];
  });
  return result;
};
Caseless.prototype.swap = function(name) {
  var has = this.has(name);
  if (has === name) return;
  if (!has) throw new Error('There is no header than matches "' + name + '"');
  this.dict[name] = this.dict[has];
  delete this.dict[has];
};
Caseless.prototype.del = function(name) {
  var has = this.has(name);
  return delete this.dict[has || name];
};

var caseless = function(dict) {
  return new Caseless(dict);
};
var httpify = function(resp, headers) {
  var c = new Caseless(headers);
  resp.setHeader = function(key, value, clobber) {
    if (typeof value === 'undefined') return;
    return c.set(key, value, clobber);
  };
  resp.hasHeader = function(key) {
    return c.has(key);
  };
  resp.getHeader = function(key) {
    return c.get(key);
  };
  resp.removeHeader = function(key) {
    return c.del(key);
  };
  resp.headers = c.dict;
  return c;
};
caseless.httpify = httpify;

var foreverAgent = ForeverAgent;
ForeverAgent.SSL = ForeverAgentSSL;

var Agent = http__default['default'].Agent,
  AgentSSL = https__default['default'].Agent;

function getConnectionName(host, port) {
  var name = '';
  if (typeof host === 'string') {
    name = host + ':' + port;
  } else {
    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
    name = host.host + ':' + host.port + ':' + (host.localAddress ? host.localAddress + ':' : ':');
  }
  return name;
}

function ForeverAgent(options) {
  var self = this;
  self.options = options || {};
  self.requests = {};
  self.sockets = {};
  self.freeSockets = {};
  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;
  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;
  self.on('free', function(socket, host, port) {
    var name = getConnectionName(host, port);

    if (self.requests[name] && self.requests[name].length) {
      self.requests[name].shift().onSocket(socket);
    } else if (self.sockets[name].length < self.minSockets) {
      if (!self.freeSockets[name]) self.freeSockets[name] = [];
      self.freeSockets[name].push(socket);

      // if an error happens while we don't use the socket anyway, meh, throw the socket away
      var onIdleError = function() {
        socket.destroy();
      };
      socket._onIdleError = onIdleError;
      socket.on('error', onIdleError);
    } else {
      // If there are no pending requests just destroy the
      // socket and it will get removed from the pool. This
      // gets us out of timeout issues and allows us to
      // default to Connection:keep-alive.
      socket.destroy();
    }
  });
}
util__default['default'].inherits(ForeverAgent, Agent);

ForeverAgent.defaultMinSockets = 5;

ForeverAgent.prototype.createConnection = net__default['default'].createConnection;
ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;
ForeverAgent.prototype.addRequest = function(req, host, port) {
  var name = getConnectionName(host, port);

  if (typeof host !== 'string') {
    var options = host;
    port = options.port;
    host = options.host;
  }

  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
    var idleSocket = this.freeSockets[name].pop();
    idleSocket.removeListener('error', idleSocket._onIdleError);
    delete idleSocket._onIdleError;
    req._reusedSocket = true;
    req.onSocket(idleSocket);
  } else {
    this.addRequestNoreuse(req, host, port);
  }
};

ForeverAgent.prototype.removeSocket = function(s, name, host, port) {
  if (this.sockets[name]) {
    var index = this.sockets[name].indexOf(s);
    if (index !== -1) {
      this.sockets[name].splice(index, 1);
    }
  } else if (this.sockets[name] && this.sockets[name].length === 0) {
    // don't leak
    delete this.sockets[name];
    delete this.requests[name];
  }

  if (this.freeSockets[name]) {
    var index = this.freeSockets[name].indexOf(s);
    if (index !== -1) {
      this.freeSockets[name].splice(index, 1);
      if (this.freeSockets[name].length === 0) {
        delete this.freeSockets[name];
      }
    }
  }

  if (this.requests[name] && this.requests[name].length) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(name, host, port).emit('free');
  }
};

function ForeverAgentSSL(options) {
  ForeverAgent.call(this, options);
}
util__default['default'].inherits(ForeverAgentSSL, ForeverAgent);

ForeverAgentSSL.prototype.createConnection = createConnectionSSL;
ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;

function createConnectionSSL(port, host, options) {
  if (typeof port === 'object') {
    options = port;
  } else if (typeof host === 'object') {
    options = host;
  } else if (typeof options === 'object') {
    options = options;
  } else {
    options = {};
  }

  if (typeof port === 'number') {
    options.port = port;
  }

  if (typeof host === 'string') {
    options.host = host;
  }

  return tls__default['default'].connect(options);
}

var Stream$1 = Stream__default['default'].Stream;

var delayed_stream = DelayedStream;
function DelayedStream() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util__default['default'].inherits(DelayedStream, Stream$1);

DelayedStream.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream.prototype.pause = function() {
  this.source.pause();
};

DelayedStream.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(
    function(args) {
      this.emit.apply(this, args);
    }.bind(this)
  );
  this._bufferedEvents = [];
};

DelayedStream.prototype.pipe = function() {
  var r = Stream$1.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this.emit('error', new Error(message));
};

var Stream$2 = Stream__default['default'].Stream;

var combined_stream = CombinedStream;
function CombinedStream() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util__default['default'].inherits(CombinedStream, Stream$2);

CombinedStream.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream.isStreamLike = function(stream) {
  return (
    typeof stream !== 'function' &&
    typeof stream !== 'string' &&
    typeof stream !== 'boolean' &&
    typeof stream !== 'number' &&
    !Buffer.isBuffer(stream)
  );
};

CombinedStream.prototype.append = function(stream) {
  var isStreamLike = CombinedStream.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof delayed_stream)) {
      var newStream = delayed_stream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream.prototype.pipe = function(dest, options) {
  Stream$2.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream.prototype._realGetNext = function() {
  var stream = this._streams.shift();

  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(
    function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on('data', this._checkDataSize.bind(this));
        this._handleErrors(stream);
      }

      this._pipeNext(stream);
    }.bind(this)
  );
};

CombinedStream.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(
      this,
      { end: false }
    );
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function')
    this._currentStream.pause();
  this.emit('pause');
};

CombinedStream.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function')
    this._currentStream.resume();
  this.emit('resume');
};

CombinedStream.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};

var defer_1$1 = defer$1;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer$1(fn) {
  var nextTick =
    typeof setImmediate == 'function'
      ? setImmediate
      : typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null;

  if (nextTick) {
    nextTick(fn);
  } else {
    setTimeout(fn, 0);
  }
}

// API
var async_1 = async;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async(callback) {
  var isAsync = false;

  // check if async happened
  defer_1$1(function() {
    isAsync = true;
  });

  return function async_callback(err, result) {
    if (isAsync) {
      callback(err, result);
    } else {
      defer_1$1(function nextTick_callback() {
        callback(err, result);
      });
    }
  };
}

// API
var abort_1 = abort;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort(state) {
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key) {
  if (typeof this.jobs[key] == 'function') {
    this.jobs[key]();
  }
}

// API
var iterate_1 = iterate;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate(list, iterator, state, callback) {
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs)) {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error) {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort_1(state);
    } else {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback) {
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2) {
    aborter = iterator(item, async_1(callback));
  }
  // otherwise go with full three arguments
  else {
    aborter = iterator(item, key, async_1(callback));
  }

  return aborter;
}

// API
var state_1 = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod) {
  var isNamedList = !Array.isArray(list),
    initState = {
      index: 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs: {},
      results: isNamedList ? {} : [],
      size: isNamedList ? Object.keys(list).length : list.length
    };
  if (sortMethod) {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(
      isNamedList
        ? sortMethod
        : function(a, b) {
            return sortMethod(list[a], list[b]);
          }
    );
  }

  return initState;
}

// API
var terminator_1 = terminator;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator(callback) {
  if (!Object.keys(this.jobs).length) {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort_1(this);

  // send back results we have so far
  async_1(callback)(null, this.results);
}

// Public API
var parallel_1 = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback) {
  var state = state_1(list);

  while (state.index < (state['keyedList'] || list).length) {
    iterate_1(list, iterator, state, function(error, result) {
      if (error) {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0) {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator_1.bind(state, callback);
}

// Public API
var serialOrdered_1 = serialOrdered;
// sorting helpers
var ascending_1 = ascending;
var descending_1 = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered(list, iterator, sortMethod, callback) {
  var state = state_1(list, sortMethod);

  iterate_1(list, iterator, state, function iteratorHandler(error, result) {
    if (error) {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length) {
      iterate_1(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator_1.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b) {
  return -1 * ascending(a, b);
}
serialOrdered_1.ascending = ascending_1;
serialOrdered_1.descending = descending_1;

// Public API
var serial_1 = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback) {
  return serialOrdered_1(list, iterator, null, callback);
}

var asynckit = {
  parallel: parallel_1,
  serial: serial_1,
  serialOrdered: serialOrdered_1
};

// populates missing values
var populate = function(dst, src) {
  Object.keys(src).forEach(function(prop) {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};

var parseUrl = url__default['default'].parse;

// Public API
var form_data = FormData;

// make it a Stream
util__default['default'].inherits(FormData, combined_stream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData(options) {
  if (!(this instanceof FormData)) {
    return new FormData();
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  combined_stream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData.prototype.append = function(field, value, options) {
  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = { filename: options };
  }

  var append = combined_stream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util__default['default'].isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response
  if (!value || (!value.path && !(value.readable && value.hasOwnProperty('httpVersion')))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData.prototype._lengthRetriever = function(value, callback) {
  if (value.hasOwnProperty('fd')) {
    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {
      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

      // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs__default['default'].stat(value.path, function(err, stat) {
        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

    // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

    // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

    // something else
  } else {
    callback('Unknown stream');
  }
};

FormData.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};

FormData.prototype._getContentDisposition = function(value, options) {
  var filename, contentDisposition;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path__default['default'].normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path__default['default'].basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path__default['default'].basename(value.client._httpMessage.path);
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData.prototype._getContentType = function(value, options) {
  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mimeTypes.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mimeTypes.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mimeTypes.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData.LINE_BREAK;

    var lastPart = this._streams.length === 0;
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};

FormData.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData.prototype.submit = function(params, cb) {
  var request,
    options,
    defaults = { method: 'post' };
  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {
    params = parseUrl(params);
    options = populate(
      {
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      },
      defaults
    );

    // use custom params
  } else {
    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https__default['default'].request(options);
  } else {
    request = http__default['default'].request(options);
  }

  // get content length and fire away
  this.getLength(
    function(err, length) {
      if (err) {
        this._error(err);
        return;
      }

      // add content length
      request.setHeader('Content-Length', length);

      this.pipe(request);
      if (cb) {
        request.on('error', cb);
        request.on('response', cb.bind(this, null));
      }
    }.bind(this)
  );

  return request;
};

FormData.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData.prototype.toString = function() {
  return '[object FormData]';
};

function isStream(obj) {
  return obj instanceof Stream__default['default'].Stream;
}

function isReadable(obj) {
  return isStream(obj) && typeof obj._read == 'function' && typeof obj._readableState == 'object';
}

function isWritable(obj) {
  return isStream(obj) && typeof obj._write == 'function' && typeof obj._writableState == 'object';
}

function isDuplex(obj) {
  return isReadable(obj) && isWritable(obj);
}

var isstream = isStream;
var isReadable_1 = isReadable;
var isWritable_1 = isWritable;
var isDuplex_1 = isDuplex;
isstream.isReadable = isReadable_1;
isstream.isWritable = isWritable_1;
isstream.isDuplex = isDuplex_1;

var isTypedarray = isTypedArray;
isTypedArray.strict = isStrictTypedArray;
isTypedArray.loose = isLooseTypedArray;

var toString = Object.prototype.toString;
var names = {
  '[object Int8Array]': true,
  '[object Int16Array]': true,
  '[object Int32Array]': true,
  '[object Uint8Array]': true,
  '[object Uint8ClampedArray]': true,
  '[object Uint16Array]': true,
  '[object Uint32Array]': true,
  '[object Float32Array]': true,
  '[object Float64Array]': true
};

function isTypedArray(arr) {
  return isStrictTypedArray(arr) || isLooseTypedArray(arr);
}

function isStrictTypedArray(arr) {
  return (
    arr instanceof Int8Array ||
    arr instanceof Int16Array ||
    arr instanceof Int32Array ||
    arr instanceof Uint8Array ||
    arr instanceof Uint8ClampedArray ||
    arr instanceof Uint16Array ||
    arr instanceof Uint32Array ||
    arr instanceof Float32Array ||
    arr instanceof Float64Array
  );
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)];
}

function formatHostname(hostname) {
  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
  return hostname.replace(/^\.*/, '.').toLowerCase();
}

function parseNoProxyZone(zone) {
  zone = zone.trim().toLowerCase();

  var zoneParts = zone.split(':', 2);
  var zoneHost = formatHostname(zoneParts[0]);
  var zonePort = zoneParts[1];
  var hasPort = zone.indexOf(':') > -1;

  return { hostname: zoneHost, port: zonePort, hasPort: hasPort };
}

function uriInNoProxy(uri, noProxy) {
  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80');
  var hostname = formatHostname(uri.hostname);
  var noProxyList = noProxy.split(',');

  // iterate through the noProxyList until it finds a match.
  return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {
    var isMatchedAt = hostname.indexOf(noProxyZone.hostname);
    var hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;

    if (noProxyZone.hasPort) {
      return port === noProxyZone.port && hostnameMatched;
    }

    return hostnameMatched;
  });
}

function getProxyFromURI(uri) {
  // Decide the proper request proxy to use based on the request URI object and the
  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)

  var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';

  // if the noProxy is a wildcard then return null

  if (noProxy === '*') {
    return null;
  }

  // if the noProxy is not empty and the uri is found return null

  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
    return null;
  }

  // Check for HTTP or HTTPS Proxy in environment Else default to null

  if (uri.protocol === 'http:') {
    return process.env.HTTP_PROXY || process.env.http_proxy || null;
  }

  if (uri.protocol === 'https:') {
    return (
      process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null
    );
  }

  // if none of that works, return null
  // (What uri protocol are you using then?)

  return null;
}

var getProxyFromURI_1 = getProxyFromURI;

var has = Object.prototype.hasOwnProperty;

var hexTable = (function() {
  var array = [];
  for (var i = 0; i < 256; ++i) {
    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
  }

  return array;
})();

var compactQueue = function compactQueue(queue) {
  var obj;

  while (queue.length) {
    var item = queue.pop();
    obj = item.obj[item.prop];

    if (Array.isArray(obj)) {
      var compacted = [];

      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== 'undefined') {
          compacted.push(obj[j]);
        }
      }

      item.obj[item.prop] = compacted;
    }
  }

  return obj;
};

var arrayToObject = function arrayToObject(source, options) {
  var obj = options && options.plainObjects ? Object.create(null) : {};
  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== 'undefined') {
      obj[i] = source[i];
    }
  }

  return obj;
};

var merge$1 = function merge(target, source, options) {
  if (!source) {
    return target;
  }

  if (typeof source !== 'object') {
    if (Array.isArray(target)) {
      target.push(source);
    } else if (typeof target === 'object') {
      if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }

    return target;
  }

  if (typeof target !== 'object') {
    return [target].concat(source);
  }

  var mergeTarget = target;
  if (Array.isArray(target) && !Array.isArray(source)) {
    mergeTarget = arrayToObject(target, options);
  }

  if (Array.isArray(target) && Array.isArray(source)) {
    source.forEach(function(item, i) {
      if (has.call(target, i)) {
        if (target[i] && typeof target[i] === 'object') {
          target[i] = merge(target[i], item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }

  return Object.keys(source).reduce(function(acc, key) {
    var value = source[key];

    if (has.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }
    return acc;
  }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function(acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};

var decode = function(str) {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  } catch (e) {
    return str;
  }
};

var encode = function encode(str) {
  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
  // It has been adapted here for stricter adherence to RFC 3986
  if (str.length === 0) {
    return str;
  }

  var string = typeof str === 'string' ? str : String(str);

  var out = '';
  for (var i = 0; i < string.length; ++i) {
    var c = string.charCodeAt(i);

    if (
      c === 0x2d || // -
      c === 0x2e || // .
      c === 0x5f || // _
      c === 0x7e || // ~
      (c >= 0x30 && c <= 0x39) || // 0-9
      (c >= 0x41 && c <= 0x5a) || // a-z
      (c >= 0x61 && c <= 0x7a) // A-Z
    ) {
      out += string.charAt(i);
      continue;
    }

    if (c < 0x80) {
      out = out + hexTable[c];
      continue;
    }

    if (c < 0x800) {
      out = out + (hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)]);
      continue;
    }

    if (c < 0xd800 || c >= 0xe000) {
      out = out + (hexTable[0xe0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3f)] + hexTable[0x80 | (c & 0x3f)]);
      continue;
    }

    i += 1;
    c = 0x10000 + (((c & 0x3ff) << 10) | (string.charCodeAt(i) & 0x3ff));
    out +=
      hexTable[0xf0 | (c >> 18)] +
      hexTable[0x80 | ((c >> 12) & 0x3f)] +
      hexTable[0x80 | ((c >> 6) & 0x3f)] +
      hexTable[0x80 | (c & 0x3f)];
  }

  return out;
};

var compact = function compact(value) {
  var queue = [{ obj: { o: value }, prop: 'o' }];
  var refs = [];

  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];

    var keys = Object.keys(obj);
    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      var val = obj[key];
      if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
        queue.push({ obj: obj, prop: key });
        refs.push(val);
      }
    }
  }

  return compactQueue(queue);
};

var isRegExp$1 = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer$1 = function isBuffer(obj) {
  if (obj === null || typeof obj === 'undefined') {
    return false;
  }

  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var utils$2 = {
  arrayToObject: arrayToObject,
  assign: assign,
  compact: compact,
  decode: decode,
  encode: encode,
  isBuffer: isBuffer$1,
  isRegExp: isRegExp$1,
  merge: merge$1
};

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var formats$3 = {
  default: 'RFC3986',
  formatters: {
    RFC1738: function(value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function(value) {
      return value;
    }
  },
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986'
};

var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    // eslint-disable-line func-name-matching
    return prefix + '[]';
  },
  indices: function indices(prefix, key) {
    // eslint-disable-line func-name-matching
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    // eslint-disable-line func-name-matching
    return prefix;
  }
};

var toISO = Date.prototype.toISOString;

var defaults = {
  delimiter: '&',
  encode: true,
  encoder: utils$2.encode,
  encodeValuesOnly: false,
  serializeDate: function serializeDate(date) {
    // eslint-disable-line func-name-matching
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};

var stringify = function stringify( // eslint-disable-line func-name-matching
  object,
  prefix,
  generateArrayPrefix,
  strictNullHandling,
  skipNulls,
  encoder,
  filter,
  sort,
  allowDots,
  serializeDate,
  formatter,
  encodeValuesOnly
) {
  var obj = object;
  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;
    }

    obj = '';
  }

  if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils$2.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);
      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];
    }
    return [formatter(prefix) + '=' + formatter(String(obj))];
  }

  var values = [];

  if (typeof obj === 'undefined') {
    return values;
  }

  var objKeys;
  if (Array.isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (skipNulls && obj[key] === null) {
      continue;
    }

    if (Array.isArray(obj)) {
      values = values.concat(
        stringify(
          obj[key],
          generateArrayPrefix(prefix, key),
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          formatter,
          encodeValuesOnly
        )
      );
    } else {
      values = values.concat(
        stringify(
          obj[key],
          prefix + (allowDots ? '.' + key : '[' + key + ']'),
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          formatter,
          encodeValuesOnly
        )
      );
    }
  }

  return values;
};

var stringify_1$1 = function(object, opts) {
  var obj = object;
  var options = opts ? utils$2.assign({}, opts) : {};

  if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
    throw new TypeError('Encoder has to be a function.');
  }

  var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
  var strictNullHandling =
    typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
  var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
  var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
  var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
  var sort = typeof options.sort === 'function' ? options.sort : null;
  var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
  var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
  var encodeValuesOnly =
    typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
  if (typeof options.format === 'undefined') {
    options.format = formats$3['default'];
  } else if (!Object.prototype.hasOwnProperty.call(formats$3.formatters, options.format)) {
    throw new TypeError('Unknown format option provided.');
  }
  var formatter = formats$3.formatters[options.format];
  var objKeys;
  var filter;

  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (Array.isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }

  var keys = [];

  if (typeof obj !== 'object' || obj === null) {
    return '';
  }

  var arrayFormat;
  if (options.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = options.arrayFormat;
  } else if ('indices' in options) {
    arrayFormat = options.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }

  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

  if (!objKeys) {
    objKeys = Object.keys(obj);
  }

  if (sort) {
    objKeys.sort(sort);
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (skipNulls && obj[key] === null) {
      continue;
    }

    keys = keys.concat(
      stringify(
        obj[key],
        key,
        generateArrayPrefix,
        strictNullHandling,
        skipNulls,
        encode ? encoder : null,
        filter,
        sort,
        allowDots,
        serializeDate,
        formatter,
        encodeValuesOnly
      )
    );
  }

  var joined = keys.join(delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';

  return joined.length > 0 ? prefix + joined : '';
};

var has$1 = Object.prototype.hasOwnProperty;

var defaults$1 = {
  allowDots: false,
  allowPrototypes: false,
  arrayLimit: 20,
  decoder: utils$2.decode,
  delimiter: '&',
  depth: 5,
  parameterLimit: 1000,
  plainObjects: false,
  strictNullHandling: false
};

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);

  for (var i = 0; i < parts.length; ++i) {
    var part = parts[i];

    var bracketEqualsPos = part.indexOf(']=');
    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

    var key, val;
    if (pos === -1) {
      key = options.decoder(part, defaults$1.decoder);
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults$1.decoder);
      val = options.decoder(part.slice(pos + 1), defaults$1.decoder);
    }
    if (has$1.call(obj, key)) {
      obj[key] = [].concat(obj[key]).concat(val);
    } else {
      obj[key] = val;
    }
  }

  return obj;
};

var parseObject = function(chain, val, options) {
  var leaf = val;

  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];

    if (root === '[]') {
      obj = [];
      obj = obj.concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
      var index = parseInt(cleanRoot, 10);
      if (
        !isNaN(index) &&
        root !== cleanRoot &&
        String(index) === cleanRoot &&
        index >= 0 &&
        (options.parseArrays && index <= options.arrayLimit)
      ) {
        obj = [];
        obj[index] = leaf;
      } else {
        obj[cleanRoot] = leaf;
      }
    }

    leaf = obj;
  }

  return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
  if (!givenKey) {
    return;
  }

  // Transform dot notation to bracket notation
  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

  // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g;

  // Get the parent

  var segment = brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key;

  // Stash the parent if it exists

  var keys = [];
  if (parent) {
    // If we aren't using plain objects, optionally prefix keys
    // that would overwrite object prototype properties
    if (!options.plainObjects && has$1.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(parent);
  }

  // Loop through children appending to the array until we hit depth

  var i = 0;
  while ((segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;
    if (!options.plainObjects && has$1.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys.push(segment[1]);
  }

  // If there's a remainder, just add whatever is left

  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }

  return parseObject(keys, val, options);
};

var parse$2 = function(str, opts) {
  var options = opts ? utils$2.assign({}, opts) : {};

  if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
    throw new TypeError('Decoder has to be a function.');
  }

  options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
  options.delimiter =
    typeof options.delimiter === 'string' || utils$2.isRegExp(options.delimiter)
      ? options.delimiter
      : defaults$1.delimiter;
  options.depth = typeof options.depth === 'number' ? options.depth : defaults$1.depth;
  options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults$1.arrayLimit;
  options.parseArrays = options.parseArrays !== false;
  options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults$1.decoder;
  options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults$1.allowDots;
  options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults$1.plainObjects;
  options.allowPrototypes =
    typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults$1.allowPrototypes;
  options.parameterLimit =
    typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults$1.parameterLimit;
  options.strictNullHandling =
    typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults$1.strictNullHandling;

  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }

  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {};

  // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);
  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options);
    obj = utils$2.merge(obj, newObj, options);
  }

  return utils$2.compact(obj);
};

var lib$3 = {
  formats: formats$3,
  parse: parse$2,
  stringify: stringify_1$1
};

function Querystring(request) {
  this.request = request;
  this.lib = null;
  this.useQuerystring = null;
  this.parseOptions = null;
  this.stringifyOptions = null;
}

Querystring.prototype.init = function(options) {
  if (this.lib) {
    return;
  }

  this.useQuerystring = options.useQuerystring;
  this.lib = this.useQuerystring ? querystring__default['default'] : lib$3;

  this.parseOptions = options.qsParseOptions || {};
  this.stringifyOptions = options.qsStringifyOptions || {};
};

Querystring.prototype.stringify = function(obj) {
  return this.useQuerystring
    ? this.rfc3986(
        this.lib.stringify(
          obj,
          this.stringifyOptions.sep || null,
          this.stringifyOptions.eq || null,
          this.stringifyOptions
        )
      )
    : this.lib.stringify(obj, this.stringifyOptions);
};

Querystring.prototype.parse = function(str) {
  return this.useQuerystring
    ? this.lib.parse(str, this.parseOptions.sep || null, this.parseOptions.eq || null, this.parseOptions)
    : this.lib.parse(str, this.parseOptions);
};

Querystring.prototype.rfc3986 = function(str) {
  return str.replace(/[!'()*]/g, function(c) {
    return (
      '%' +
      c
        .charCodeAt(0)
        .toString(16)
        .toUpperCase()
    );
  });
};

Querystring.prototype.unescape = querystring__default['default'].unescape;

var Querystring_1 = Querystring;

var querystring_1 = {
  Querystring: Querystring_1
};

/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

var uri_all = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  (function(global, factory) {
    factory(exports);
  })(_commonjsHelpers.commonjsGlobal, function(exports) {
    function merge() {
      for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
        sets[_key] = arguments[_key];
      }

      if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;
        for (var x = 1; x < xl; ++x) {
          sets[x] = sets[x].slice(1, -1);
        }
        sets[xl] = sets[xl].slice(1);
        return sets.join('');
      } else {
        return sets[0];
      }
    }
    function subexp(str) {
      return '(?:' + str + ')';
    }
    function typeOf(o) {
      return o === undefined
        ? 'undefined'
        : o === null
        ? 'null'
        : Object.prototype.toString
            .call(o)
            .split(' ')
            .pop()
            .split(']')
            .shift()
            .toLowerCase();
    }
    function toUpperCase(str) {
      return str.toUpperCase();
    }
    function toArray(obj) {
      return obj !== undefined && obj !== null
        ? obj instanceof Array
          ? obj
          : typeof obj.length !== 'number' || obj.split || obj.setInterval || obj.call
          ? [obj]
          : Array.prototype.slice.call(obj)
        : [];
    }
    function assign(target, source) {
      var obj = target;
      if (source) {
        for (var key in source) {
          obj[key] = source[key];
        }
      }
      return obj;
    }

    function buildExps(isIRI) {
      var ALPHA$$ = '[A-Za-z]',
        DIGIT$$ = '[0-9]',
        HEXDIG$$ = merge(DIGIT$$, '[A-Fa-f]'),
        PCT_ENCODED$ = subexp(
          subexp('%[EFef]' + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$) +
            '|' +
            subexp('%[89A-Fa-f]' + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$) +
            '|' +
            subexp('%' + HEXDIG$$ + HEXDIG$$)
        ),
        //expanded
        GEN_DELIMS$$ = '[\\:\\/\\?\\#\\[\\]\\@]',
        SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
        UCSCHAR$$ = isIRI ? '[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]' : '[]',
        //subset, excludes bidi control characters
        IPRIVATE$$ = isIRI ? '[\\uE000-\\uF8FF]' : '[]',
        //subset
        UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, '[\\-\\.\\_\\~]', UCSCHAR$$);
      subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, '[\\+\\-\\.]') + '*');
      subexp(subexp(PCT_ENCODED$ + '|' + merge(UNRESERVED$$, SUB_DELIMS$$, '[\\:]')) + '*');
      var DEC_OCTET_RELAXED$ = subexp(
          subexp('25[0-5]') +
            '|' +
            subexp('2[0-4]' + DIGIT$$) +
            '|' +
            subexp('1' + DIGIT$$ + DIGIT$$) +
            '|' +
            subexp('0?[1-9]' + DIGIT$$) +
            '|0?0?' +
            DIGIT$$
        ),
        //relaxed parsing rules
        IPV4ADDRESS$ = subexp(
          DEC_OCTET_RELAXED$ + '\\.' + DEC_OCTET_RELAXED$ + '\\.' + DEC_OCTET_RELAXED$ + '\\.' + DEC_OCTET_RELAXED$
        ),
        H16$ = subexp(HEXDIG$$ + '{1,4}'),
        LS32$ = subexp(subexp(H16$ + '\\:' + H16$) + '|' + IPV4ADDRESS$),
        IPV6ADDRESS1$ = subexp(subexp(H16$ + '\\:') + '{6}' + LS32$),
        //                           6( h16 ":" ) ls32
        IPV6ADDRESS2$ = subexp('\\:\\:' + subexp(H16$ + '\\:') + '{5}' + LS32$),
        //                      "::" 5( h16 ":" ) ls32
        IPV6ADDRESS3$ = subexp(subexp(H16$) + '?\\:\\:' + subexp(H16$ + '\\:') + '{4}' + LS32$),
        //[               h16 ] "::" 4( h16 ":" ) ls32
        IPV6ADDRESS4$ = subexp(
          subexp(subexp(H16$ + '\\:') + '{0,1}' + H16$) + '?\\:\\:' + subexp(H16$ + '\\:') + '{3}' + LS32$
        ),
        //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
        IPV6ADDRESS5$ = subexp(
          subexp(subexp(H16$ + '\\:') + '{0,2}' + H16$) + '?\\:\\:' + subexp(H16$ + '\\:') + '{2}' + LS32$
        ),
        //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
        IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + '\\:') + '{0,3}' + H16$) + '?\\:\\:' + H16$ + '\\:' + LS32$),
        //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
        IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + '\\:') + '{0,4}' + H16$) + '?\\:\\:' + LS32$),
        //[ *4( h16 ":" ) h16 ] "::"              ls32
        IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + '\\:') + '{0,5}' + H16$) + '?\\:\\:' + H16$),
        //[ *5( h16 ":" ) h16 ] "::"              h16
        IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + '\\:') + '{0,6}' + H16$) + '?\\:\\:'),
        //[ *6( h16 ":" ) h16 ] "::"
        IPV6ADDRESS$ = subexp(
          [
            IPV6ADDRESS1$,
            IPV6ADDRESS2$,
            IPV6ADDRESS3$,
            IPV6ADDRESS4$,
            IPV6ADDRESS5$,
            IPV6ADDRESS6$,
            IPV6ADDRESS7$,
            IPV6ADDRESS8$,
            IPV6ADDRESS9$
          ].join('|')
        ),
        ZONEID$ = subexp(subexp(UNRESERVED$$ + '|' + PCT_ENCODED$) + '+');
      //RFC 6874, with relaxed parsing rules
      subexp('[vV]' + HEXDIG$$ + '+\\.' + merge(UNRESERVED$$, SUB_DELIMS$$, '[\\:]') + '+');
      //RFC 6874
      subexp(subexp(PCT_ENCODED$ + '|' + merge(UNRESERVED$$, SUB_DELIMS$$)) + '*');
      var PCHAR$ = subexp(PCT_ENCODED$ + '|' + merge(UNRESERVED$$, SUB_DELIMS$$, '[\\:\\@]'));
      subexp(subexp(PCT_ENCODED$ + '|' + merge(UNRESERVED$$, SUB_DELIMS$$, '[\\@]')) + '+');
      subexp(subexp(PCHAR$ + '|' + merge('[\\/\\?]', IPRIVATE$$)) + '*');
      return {
        NOT_SCHEME: new RegExp(merge('[^]', ALPHA$$, DIGIT$$, '[\\+\\-\\.]'), 'g'),
        NOT_USERINFO: new RegExp(merge('[^\\%\\:]', UNRESERVED$$, SUB_DELIMS$$), 'g'),
        NOT_HOST: new RegExp(merge('[^\\%\\[\\]\\:]', UNRESERVED$$, SUB_DELIMS$$), 'g'),
        NOT_PATH: new RegExp(merge('[^\\%\\/\\:\\@]', UNRESERVED$$, SUB_DELIMS$$), 'g'),
        NOT_PATH_NOSCHEME: new RegExp(merge('[^\\%\\/\\@]', UNRESERVED$$, SUB_DELIMS$$), 'g'),
        NOT_QUERY: new RegExp(merge('[^\\%]', UNRESERVED$$, SUB_DELIMS$$, '[\\:\\@\\/\\?]', IPRIVATE$$), 'g'),
        NOT_FRAGMENT: new RegExp(merge('[^\\%]', UNRESERVED$$, SUB_DELIMS$$, '[\\:\\@\\/\\?]'), 'g'),
        ESCAPE: new RegExp(merge('[^]', UNRESERVED$$, SUB_DELIMS$$), 'g'),
        UNRESERVED: new RegExp(UNRESERVED$$, 'g'),
        OTHER_CHARS: new RegExp(merge('[^\\%]', UNRESERVED$$, RESERVED$$), 'g'),
        PCT_ENCODED: new RegExp(PCT_ENCODED$, 'g'),
        IPV4ADDRESS: new RegExp('^(' + IPV4ADDRESS$ + ')$'),
        IPV6ADDRESS: new RegExp(
          '^\\[?(' +
            IPV6ADDRESS$ +
            ')' +
            subexp(subexp('\\%25|\\%(?!' + HEXDIG$$ + '{2})') + '(' + ZONEID$ + ')') +
            '?\\]?$'
        ) //RFC 6874, with relaxed parsing rules
      };
    }
    var URI_PROTOCOL = buildExps(false);

    var IRI_PROTOCOL = buildExps(true);

    var slicedToArray = (function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i['return']) _i['return']();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      return function(arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError('Invalid attempt to destructure non-iterable instance');
        }
      };
    })();

    var toConsumableArray = function(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      } else {
        return Array.from(arr);
      }
    };

    /** Highest positive signed 32-bit float value */

    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter = '-'; // '\x2D'

    /** Regular expressions */
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    var errors = {
      overflow: 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error$1(type) {
      throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map(array, fn) {
      var result = [];
      var length = array.length;
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';
      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      }
      // Avoid `split(regex)` for IE8 compatibility. See #17.
      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map(labels, fn).join('.');
      return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var value = string.charCodeAt(counter++);
        if (value >= 0xd800 && value <= 0xdbff && counter < length) {
          // It's a high surrogate, and there is a next character.
          var extra = string.charCodeAt(counter++);
          if ((extra & 0xfc00) == 0xdc00) {
            // Low surrogate.
            output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);
          } else {
            // It's an unmatched surrogate; only append this code unit, in case the
            // next code unit is the high surrogate of a surrogate pair.
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }

    /**
     * Creates a string based on an array of numeric code points.
     * @see `punycode.ucs2.decode`
     * @memberOf punycode.ucs2
     * @name encode
     * @param {Array} codePoints The array of numeric code points.
     * @returns {String} The new Unicode string (UCS-2).
     */
    var ucs2encode = function ucs2encode(array) {
      return String.fromCodePoint.apply(String, toConsumableArray(array));
    };

    /**
     * Converts a basic code point into a digit/integer.
     * @see `digitToBasic()`
     * @private
     * @param {Number} codePoint The basic numeric code point value.
     * @returns {Number} The numeric value of a basic code point (for use in
     * representing integers) in the range `0` to `base - 1`, or `base` if
     * the code point does not represent a value.
     */
    var basicToDigit = function basicToDigit(codePoint) {
      if (codePoint - 0x30 < 0x0a) {
        return codePoint - 0x16;
      }
      if (codePoint - 0x41 < 0x1a) {
        return codePoint - 0x41;
      }
      if (codePoint - 0x61 < 0x1a) {
        return codePoint - 0x61;
      }
      return base;
    };

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    var digitToBasic = function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    var adapt = function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; /* no initialization */ delta > (baseMinusTMin * tMax) >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
    };

    /**
     * Converts a Punycode string of ASCII-only symbols to a string of Unicode
     * symbols.
     * @memberOf punycode
     * @param {String} input The Punycode string of ASCII-only symbols.
     * @returns {String} The resulting string of Unicode symbols.
     */
    var decode = function decode(input) {
      // Don't use UCS-2.
      var output = [];
      var inputLength = input.length;
      var i = 0;
      var n = initialN;
      var bias = initialBias;

      // Handle the basic code points: let `basic` be the number of input code
      // points before the last delimiter, or `0` if there is none, then copy
      // the first basic code points to the output.

      var basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }

      for (var j = 0; j < basic; ++j) {
        // if it's not a basic code point
        if (input.charCodeAt(j) >= 0x80) {
          error$1('not-basic');
        }
        output.push(input.charCodeAt(j));
      }

      // Main decoding loop: start just after the last delimiter if any basic code
      // points were copied; start at the beginning otherwise.

      for (var index = basic > 0 ? basic + 1 : 0; index < inputLength; ) /* no final expression */ {
        // `index` is the index of the next character to be consumed.
        // Decode a generalized variable-length integer into `delta`,
        // which gets added to `i`. The overflow checking is easier
        // if we increase `i` as we go, then subtract off its starting
        // value at the end to obtain `delta`.
        var oldi = i;
        for (var w = 1, k = base; ; /* no condition */ k += base) {
          if (index >= inputLength) {
            error$1('invalid-input');
          }

          var digit = basicToDigit(input.charCodeAt(index++));

          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error$1('overflow');
          }

          i += digit * w;
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

          if (digit < t) {
            break;
          }

          var baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error$1('overflow');
          }

          w *= baseMinusT;
        }

        var out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);

        // `i` was supposed to wrap around from `out` to `0`,
        // incrementing `n` each time, so we'll fix that now:
        if (floor(i / out) > maxInt - n) {
          error$1('overflow');
        }

        n += floor(i / out);
        i %= out;

        // Insert `n` at position `i` of the output.
        output.splice(i++, 0, n);
      }

      return String.fromCodePoint.apply(String, output);
    };

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    var encode = function encode(input) {
      var output = [];

      // Convert the input in UCS-2 to an array of Unicode code points.
      input = ucs2decode(input);

      // Cache the length.
      var inputLength = input.length;

      // Initialize the state.
      var n = initialN;
      var delta = 0;
      var bias = initialBias;

      // Handle the basic code points.
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (
          var _iterator = input[Symbol.iterator](), _step;
          !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
          _iteratorNormalCompletion = true
        ) {
          var _currentValue2 = _step.value;

          if (_currentValue2 < 0x80) {
            output.push(stringFromCharCode(_currentValue2));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var basicLength = output.length;
      var handledCPCount = basicLength;

      // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.

      // Finish the basic string with a delimiter unless it's empty.
      if (basicLength) {
        output.push(delimiter);
      }

      // Main encoding loop:
      while (handledCPCount < inputLength) {
        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        var m = maxInt;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (
            var _iterator2 = input[Symbol.iterator](), _step2;
            !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
            _iteratorNormalCompletion2 = true
          ) {
            var currentValue = _step2.value;

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }

          // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
          // but guard against overflow.
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error$1('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (
            var _iterator3 = input[Symbol.iterator](), _step3;
            !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
            _iteratorNormalCompletion3 = true
          ) {
            var _currentValue = _step3.value;

            if (_currentValue < n && ++delta > maxInt) {
              error$1('overflow');
            }
            if (_currentValue == n) {
              // Represent delta as a generalized variable-length integer.
              var q = delta;
              for (var k = base; ; /* no condition */ k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        ++delta;
        ++n;
      }
      return output.join('');
    };

    /**
     * Converts a Punycode string representing a domain name or an email address
     * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
     * it doesn't matter if you call it on a string that has already been
     * converted to Unicode.
     * @memberOf punycode
     * @param {String} input The Punycoded domain name or email address to
     * convert to Unicode.
     * @returns {String} The Unicode representation of the given Punycode
     * string.
     */
    var toUnicode = function toUnicode(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    var toASCII = function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
      });
    };

    /*--------------------------------------------------------------------------*/

    /** Define the public API */
    var punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      version: '2.1.0',
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      ucs2: {
        decode: ucs2decode,
        encode: ucs2encode
      },
      decode: decode,
      encode: encode,
      toASCII: toASCII,
      toUnicode: toUnicode
    };

    /**
     * URI.js
     *
     * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/uri-js
     */
    /**
     * Copyright 2011 Gary Court. All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without modification, are
     * permitted provided that the following conditions are met:
     *
     *    1. Redistributions of source code must retain the above copyright notice, this list of
     *       conditions and the following disclaimer.
     *
     *    2. Redistributions in binary form must reproduce the above copyright notice, this list
     *       of conditions and the following disclaimer in the documentation and/or other materials
     *       provided with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
     * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
     * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation are those of the
     * authors and should not be interpreted as representing official policies, either expressed
     * or implied, of Gary Court.
     */
    var SCHEMES = {};
    function pctEncChar(chr) {
      var c = chr.charCodeAt(0);
      var e = void 0;
      if (c < 16) e = '%0' + c.toString(16).toUpperCase();
      else if (c < 128) e = '%' + c.toString(16).toUpperCase();
      else if (c < 2048)
        e = '%' + ((c >> 6) | 192).toString(16).toUpperCase() + '%' + ((c & 63) | 128).toString(16).toUpperCase();
      else
        e =
          '%' +
          ((c >> 12) | 224).toString(16).toUpperCase() +
          '%' +
          (((c >> 6) & 63) | 128).toString(16).toUpperCase() +
          '%' +
          ((c & 63) | 128).toString(16).toUpperCase();
      return e;
    }
    function pctDecChars(str) {
      var newStr = '';
      var i = 0;
      var il = str.length;
      while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
          newStr += String.fromCharCode(c);
          i += 3;
        } else if (c >= 194 && c < 224) {
          if (il - i >= 6) {
            var c2 = parseInt(str.substr(i + 4, 2), 16);
            newStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
          } else {
            newStr += str.substr(i, 6);
          }
          i += 6;
        } else if (c >= 224) {
          if (il - i >= 9) {
            var _c = parseInt(str.substr(i + 4, 2), 16);
            var c3 = parseInt(str.substr(i + 7, 2), 16);
            newStr += String.fromCharCode(((c & 15) << 12) | ((_c & 63) << 6) | (c3 & 63));
          } else {
            newStr += str.substr(i, 9);
          }
          i += 9;
        } else {
          newStr += str.substr(i, 3);
          i += 3;
        }
      }
      return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
      function decodeUnreserved(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
      }
      if (components.scheme)
        components.scheme = String(components.scheme)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .toLowerCase()
          .replace(protocol.NOT_SCHEME, '');
      if (components.userinfo !== undefined)
        components.userinfo = String(components.userinfo)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .replace(protocol.NOT_USERINFO, pctEncChar)
          .replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.host !== undefined)
        components.host = String(components.host)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .toLowerCase()
          .replace(protocol.NOT_HOST, pctEncChar)
          .replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.path !== undefined)
        components.path = String(components.path)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar)
          .replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.query !== undefined)
        components.query = String(components.query)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .replace(protocol.NOT_QUERY, pctEncChar)
          .replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.fragment !== undefined)
        components.fragment = String(components.fragment)
          .replace(protocol.PCT_ENCODED, decodeUnreserved)
          .replace(protocol.NOT_FRAGMENT, pctEncChar)
          .replace(protocol.PCT_ENCODED, toUpperCase);
      return components;
    }

    function _stripLeadingZeros(str) {
      return str.replace(/^0*(.*)/, '$1') || '0';
    }
    function _normalizeIPv4(host, protocol) {
      var matches = host.match(protocol.IPV4ADDRESS) || [];

      var _matches = slicedToArray(matches, 2),
        address = _matches[1];

      if (address) {
        return address
          .split('.')
          .map(_stripLeadingZeros)
          .join('.');
      } else {
        return host;
      }
    }
    function _normalizeIPv6(host, protocol) {
      var matches = host.match(protocol.IPV6ADDRESS) || [];

      var _matches2 = slicedToArray(matches, 3),
        address = _matches2[1],
        zone = _matches2[2];

      if (address) {
        var _address$toLowerCase$ = address
            .toLowerCase()
            .split('::')
            .reverse(),
          _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
          last = _address$toLowerCase$2[0],
          first = _address$toLowerCase$2[1];

        var firstFields = first ? first.split(':').map(_stripLeadingZeros) : [];
        var lastFields = last.split(':').map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);
        for (var x = 0; x < fieldCount; ++x) {
          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
        }
        if (isLastFieldIPv4Address) {
          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        var allZeroFields = fields.reduce(function(acc, field, index) {
          if (!field || field === '0') {
            var lastLongest = acc[acc.length - 1];
            if (lastLongest && lastLongest.index + lastLongest.length === index) {
              lastLongest.length++;
            } else {
              acc.push({ index: index, length: 1 });
            }
          }
          return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function(a, b) {
          return b.length - a.length;
        })[0];
        var newHost = void 0;
        if (longestZeroFields && longestZeroFields.length > 1) {
          var newFirst = fields.slice(0, longestZeroFields.index);
          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
          newHost = newFirst.join(':') + '::' + newLast.join(':');
        } else {
          newHost = fields.join(':');
        }
        if (zone) {
          newHost += '%' + zone;
        }
        return newHost;
      } else {
        return host;
      }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = ''.match(/(){0}/)[1] === undefined;
    function parse(uriString) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var components = {};
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      if (options.reference === 'suffix') uriString = (options.scheme ? options.scheme + ':' : '') + '//' + uriString;
      var matches = uriString.match(URI_PARSE);
      if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
          //store each component
          components.scheme = matches[1];
          components.userinfo = matches[3];
          components.host = matches[4];
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || '';
          components.query = matches[7];
          components.fragment = matches[8];
          //fix port number
          if (isNaN(components.port)) {
            components.port = matches[5];
          }
        } else {
          //IE FIX for improper RegExp matching
          //store each component
          components.scheme = matches[1] || undefined;
          components.userinfo = uriString.indexOf('@') !== -1 ? matches[3] : undefined;
          components.host = uriString.indexOf('//') !== -1 ? matches[4] : undefined;
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || '';
          components.query = uriString.indexOf('?') !== -1 ? matches[7] : undefined;
          components.fragment = uriString.indexOf('#') !== -1 ? matches[8] : undefined;
          //fix port number
          if (isNaN(components.port)) {
            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
          }
        }
        if (components.host) {
          //normalize IP hosts
          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        }
        //determine reference type
        if (
          components.scheme === undefined &&
          components.userinfo === undefined &&
          components.host === undefined &&
          components.port === undefined &&
          !components.path &&
          components.query === undefined
        ) {
          components.reference = 'same-document';
        } else if (components.scheme === undefined) {
          components.reference = 'relative';
        } else if (components.fragment === undefined) {
          components.reference = 'absolute';
        } else {
          components.reference = 'uri';
        }
        //check for reference errors
        if (options.reference && options.reference !== 'suffix' && options.reference !== components.reference) {
          components.error = components.error || 'URI is not a ' + options.reference + ' reference.';
        }
        //find scheme handler
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];
        //check if scheme can't handle IRIs
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          //if host component is a domain name
          if (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {
            //convert Unicode IDN -> ASCII IDN
            try {
              components.host = punycode.toASCII(
                components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()
              );
            } catch (e) {
              components.error =
                components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
            }
          }
          //convert IRI -> URI
          _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
          //normalize encodings
          _normalizeComponentEncoding(components, protocol);
        }
        //perform scheme specific parsing
        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(components, options);
        }
      } else {
        components.error = components.error || 'URI can not be parsed.';
      }
      return components;
    }

    function _recomposeAuthority(components, options) {
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push('@');
      }
      if (components.host !== undefined) {
        //normalize IP hosts, add brackets and escape zone separator for IPv6
        uriTokens.push(
          _normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(
            protocol.IPV6ADDRESS,
            function(_, $1, $2) {
              return '[' + $1 + ($2 ? '%25' + $2 : '') + ']';
            }
          )
        );
      }
      if (typeof components.port === 'number') {
        uriTokens.push(':');
        uriTokens.push(components.port.toString(10));
      }
      return uriTokens.length ? uriTokens.join('') : undefined;
    }

    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
      var output = [];
      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, '');
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, '/');
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, '/');
          output.pop();
        } else if (input === '.' || input === '..') {
          input = '';
        } else {
          var im = input.match(RDS5);
          if (im) {
            var s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error('Unexpected dot segment condition');
          }
        }
      }
      return output.join('');
    }

    function serialize(components) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      //find scheme handler
      var schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()];
      //perform scheme specific serialization
      if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
      if (components.host) {
        //if host component is an IPv6 address
        if (protocol.IPV6ADDRESS.test(components.host));
        else if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {
          //TODO: normalize IPv6 address as per RFC 5952

          //if host component is a domain name
          //convert IDN via punycode
          try {
            components.host = !options.iri
              ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase())
              : punycode.toUnicode(components.host);
          } catch (e) {
            components.error =
              components.error ||
              "Host's domain name can not be converted to " +
                (!options.iri ? 'ASCII' : 'Unicode') +
                ' via punycode: ' +
                e;
          }
        }
      }
      //normalize encoding
      _normalizeComponentEncoding(components, protocol);
      if (options.reference !== 'suffix' && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(':');
      }
      var authority = _recomposeAuthority(components, options);
      if (authority !== undefined) {
        if (options.reference !== 'suffix') {
          uriTokens.push('//');
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== '/') {
          uriTokens.push('/');
        }
      }
      if (components.path !== undefined) {
        var s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }
        if (authority === undefined) {
          s = s.replace(/^\/\//, '/%2F'); //don't allow the path to start with "//"
        }
        uriTokens.push(s);
      }
      if (components.query !== undefined) {
        uriTokens.push('?');
        uriTokens.push(components.query);
      }
      if (components.fragment !== undefined) {
        uriTokens.push('#');
        uriTokens.push(components.fragment);
      }
      return uriTokens.join(''); //merge tokens into a string
    }

    function resolveComponents(base, relative) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var skipNormalization = arguments[3];

      var target = {};
      if (!skipNormalization) {
        base = parse(serialize(base, options), options); //normalize base components
        relative = parse(serialize(relative, options), options); //normalize relative components
      }
      options = options || {};
      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        //target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || '');
        target.query = relative.query;
      } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
          //target.authority = relative.authority;
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || '');
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base.path;
            if (relative.query !== undefined) {
              target.query = relative.query;
            } else {
              target.query = base.query;
            }
          } else {
            if (relative.path.charAt(0) === '/') {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                target.path = '/' + relative.path;
              } else if (!base.path) {
                target.path = relative.path;
              } else {
                target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path;
              }
              target.path = removeDotSegments(target.path);
            }
            target.query = relative.query;
          }
          //target.authority = base.authority;
          target.userinfo = base.userinfo;
          target.host = base.host;
          target.port = base.port;
        }
        target.scheme = base.scheme;
      }
      target.fragment = relative.fragment;
      return target;
    }

    function resolve(baseURI, relativeURI, options) {
      var schemelessOptions = assign({ scheme: 'null' }, options);
      return serialize(
        resolveComponents(
          parse(baseURI, schemelessOptions),
          parse(relativeURI, schemelessOptions),
          schemelessOptions,
          true
        ),
        schemelessOptions
      );
    }

    function normalize(uri, options) {
      if (typeof uri === 'string') {
        uri = serialize(parse(uri, options), options);
      } else if (typeOf(uri) === 'object') {
        uri = parse(serialize(uri, options), options);
      }
      return uri;
    }

    function equal(uriA, uriB, options) {
      if (typeof uriA === 'string') {
        uriA = serialize(parse(uriA, options), options);
      } else if (typeOf(uriA) === 'object') {
        uriA = serialize(uriA, options);
      }
      if (typeof uriB === 'string') {
        uriB = serialize(parse(uriB, options), options);
      } else if (typeOf(uriB) === 'object') {
        uriB = serialize(uriB, options);
      }
      return uriA === uriB;
    }

    function escapeComponent(str, options) {
      return (
        str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar)
      );
    }

    function unescapeComponent(str, options) {
      return (
        str &&
        str
          .toString()
          .replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars)
      );
    }

    var handler = {
      scheme: 'http',
      domainHost: true,
      parse: function parse(components, options) {
        //report missing host
        if (!components.host) {
          components.error = components.error || 'HTTP URIs must have a host.';
        }
        return components;
      },
      serialize: function serialize(components, options) {
        //normalize the default port
        if (
          components.port === (String(components.scheme).toLowerCase() !== 'https' ? 80 : 443) ||
          components.port === ''
        ) {
          components.port = undefined;
        }
        //normalize the empty path
        if (!components.path) {
          components.path = '/';
        }
        //NOTE: We do not parse query strings for HTTP URIs
        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
        //and not the HTTP spec.
        return components;
      }
    };

    var handler$1 = {
      scheme: 'https',
      domainHost: handler.domainHost,
      parse: handler.parse,
      serialize: handler.serialize
    };

    var O = {};
    //RFC 3986
    var UNRESERVED$$ =
      '[A-Za-z0-9\\-\\.\\_\\~' + '\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF' + ']';
    var HEXDIG$$ = '[0-9A-Fa-f]'; //case-insensitive
    var PCT_ENCODED$ = subexp(
      subexp('%[EFef]' + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$) +
        '|' +
        subexp('%[89A-Fa-f]' + HEXDIG$$ + '%' + HEXDIG$$ + HEXDIG$$) +
        '|' +
        subexp('%' + HEXDIG$$ + HEXDIG$$)
    ); //expanded
    //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
    //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
    //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
    //const VCHAR$$ = "[\\x21-\\x7E]";
    //const WSP$$ = "[\\x20\\x09]";
    //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
    //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
    //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
    //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, '[\\"\\\\]');
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, 'g');
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, 'g');
    var NOT_LOCAL_PART = new RegExp(merge('[^]', ATEXT$$, '[\\.]', '[\\"]', VCHAR$$), 'g');
    var NOT_HFNAME = new RegExp(merge('[^]', UNRESERVED$$, SOME_DELIMS$$), 'g');
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$2 = {
      scheme: 'mailto',
      parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = (mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(',') : []);
        mailtoComponents.path = undefined;
        if (mailtoComponents.query) {
          var unknownHeaders = false;
          var headers = {};
          var hfields = mailtoComponents.query.split('&');
          for (var x = 0, xl = hfields.length; x < xl; ++x) {
            var hfield = hfields[x].split('=');
            switch (hfield[0]) {
              case 'to':
                var toAddrs = hfield[1].split(',');
                for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                  to.push(toAddrs[_x]);
                }
                break;
              case 'subject':
                mailtoComponents.subject = unescapeComponent(hfield[1], options);
                break;
              case 'body':
                mailtoComponents.body = unescapeComponent(hfield[1], options);
                break;
              default:
                unknownHeaders = true;
                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                break;
            }
          }
          if (unknownHeaders) mailtoComponents.headers = headers;
        }
        mailtoComponents.query = undefined;
        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
          var addr = to[_x2].split('@');
          addr[0] = unescapeComponent(addr[0]);
          if (!options.unicodeSupport) {
            //convert Unicode IDN -> ASCII IDN
            try {
              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
            } catch (e) {
              mailtoComponents.error =
                mailtoComponents.error ||
                "Email address's domain name can not be converted to ASCII via punycode: " + e;
            }
          } else {
            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
          }
          to[_x2] = addr.join('@');
        }
        return mailtoComponents;
      },
      serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray(mailtoComponents.to);
        if (to) {
          for (var x = 0, xl = to.length; x < xl; ++x) {
            var toAddr = String(to[x]);
            var atIdx = toAddr.lastIndexOf('@');
            var localPart = toAddr
              .slice(0, atIdx)
              .replace(PCT_ENCODED, decodeUnreserved)
              .replace(PCT_ENCODED, toUpperCase)
              .replace(NOT_LOCAL_PART, pctEncChar);
            var domain = toAddr.slice(atIdx + 1);
            //convert IDN via punycode
            try {
              domain = !options.iri
                ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase())
                : punycode.toUnicode(domain);
            } catch (e) {
              components.error =
                components.error ||
                "Email address's domain name can not be converted to " +
                  (!options.iri ? 'ASCII' : 'Unicode') +
                  ' via punycode: ' +
                  e;
            }
            to[x] = localPart + '@' + domain;
          }
          components.path = to.join(',');
        }
        var headers = (mailtoComponents.headers = mailtoComponents.headers || {});
        if (mailtoComponents.subject) headers['subject'] = mailtoComponents.subject;
        if (mailtoComponents.body) headers['body'] = mailtoComponents.body;
        var fields = [];
        for (var name in headers) {
          if (headers[name] !== O[name]) {
            fields.push(
              name
                .replace(PCT_ENCODED, decodeUnreserved)
                .replace(PCT_ENCODED, toUpperCase)
                .replace(NOT_HFNAME, pctEncChar) +
                '=' +
                headers[name]
                  .replace(PCT_ENCODED, decodeUnreserved)
                  .replace(PCT_ENCODED, toUpperCase)
                  .replace(NOT_HFVALUE, pctEncChar)
            );
          }
        }
        if (fields.length) {
          components.query = fields.join('&');
        }
        return components;
      }
    };

    var URN_PARSE = /^([^\:]+)\:(.*)/;
    //RFC 2141
    var handler$3 = {
      scheme: 'urn',
      parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
          var scheme = options.scheme || urnComponents.scheme || 'urn';
          var nid = matches[1].toLowerCase();
          var nss = matches[2];
          var urnScheme = scheme + ':' + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          urnComponents.nid = nid;
          urnComponents.nss = nss;
          urnComponents.path = undefined;
          if (schemeHandler) {
            urnComponents = schemeHandler.parse(urnComponents, options);
          }
        } else {
          urnComponents.error = urnComponents.error || 'URN can not be parsed.';
        }
        return urnComponents;
      },
      serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || 'urn';
        var nid = urnComponents.nid;
        var urnScheme = scheme + ':' + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
          urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ':' + nss;
        return uriComponents;
      }
    };

    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    //RFC 4122
    var handler$4 = {
      scheme: 'urn:uuid',
      parse: function parse(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = undefined;
        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
          uuidComponents.error = uuidComponents.error || 'UUID is not valid.';
        }
        return uuidComponents;
      },
      serialize: function serialize(uuidComponents, options) {
        var urnComponents = uuidComponents;
        //normalize UUID
        urnComponents.nss = (uuidComponents.uuid || '').toLowerCase();
        return urnComponents;
      }
    };

    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;

    exports.SCHEMES = SCHEMES;
    exports.pctEncChar = pctEncChar;
    exports.pctDecChars = pctDecChars;
    exports.parse = parse;
    exports.removeDotSegments = removeDotSegments;
    exports.serialize = serialize;
    exports.resolveComponents = resolveComponents;
    exports.resolve = resolve;
    exports.normalize = normalize;
    exports.equal = equal;
    exports.escapeComponent = escapeComponent;
    exports.unescapeComponent = unescapeComponent;

    Object.defineProperty(exports, '__esModule', { value: true });
  });
});

var isArray$2 = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

var fastDeepEqual = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray$2(a),
      arrB = isArray$2(b),
      i,
      length,
      key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0; ) if (!equal(a[i], b[i])) return false;
      return true;
    }

    if (arrA != arrB) return false;

    var dateA = a instanceof Date,
      dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();

    var regexpA = a instanceof RegExp,
      regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();

    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length) return false;

    for (i = length; i-- !== 0; ) if (!hasProp.call(b, keys[i])) return false;

    for (i = length; i-- !== 0; ) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return a !== a && b !== b;
};

// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
var ucs2length = function ucs2length(str) {
  var length = 0,
    len = str.length,
    pos = 0,
    value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xd800 && value <= 0xdbff && pos < len) {
      // high surrogate, and there is a next character
      value = str.charCodeAt(pos);
      if ((value & 0xfc00) == 0xdc00) pos++; // low surrogate
    }
  }
  return length;
};

var util$1 = {
  copy: copy$1,
  checkDataType: checkDataType,
  checkDataTypes: checkDataTypes,
  coerceToTypes: coerceToTypes,
  toHash: toHash,
  getProperty: getProperty$1,
  escapeQuotes: escapeQuotes,
  equal: fastDeepEqual,
  ucs2length: ucs2length,
  varOccurences: varOccurences,
  varReplace: varReplace,
  cleanUpCode: cleanUpCode,
  finalCleanUpCode: finalCleanUpCode,
  schemaHasRules: schemaHasRules,
  schemaHasRulesExcept: schemaHasRulesExcept,
  schemaUnknownRules: schemaUnknownRules,
  toQuotedString: toQuotedString,
  getPathExpr: getPathExpr,
  getPath: getPath,
  getData: getData,
  unescapeFragment: unescapeFragment,
  unescapeJsonPointer: unescapeJsonPointer,
  escapeFragment: escapeFragment,
  escapeJsonPointer: escapeJsonPointer
};

function copy$1(o, to) {
  to = to || {};
  for (var key in o) to[key] = o[key];
  return to;
}

function checkDataType(dataType, data, negate) {
  var EQUAL = negate ? ' !== ' : ' === ',
    AND = negate ? ' || ' : ' && ',
    OK = negate ? '!' : '',
    NOT = negate ? '' : '!';
  switch (dataType) {
    case 'null':
      return data + EQUAL + 'null';
    case 'array':
      return OK + 'Array.isArray(' + data + ')';
    case 'object':
      return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';
    case 'integer':
      return (
        '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')'
      );
    default:
      return 'typeof ' + data + EQUAL + '"' + dataType + '"';
  }
}

function checkDataTypes(dataTypes, data) {
  switch (dataTypes.length) {
    case 1:
      return checkDataType(dataTypes[0], data, true);
    default:
      var code = '';
      var types = toHash(dataTypes);
      if (types.array && types.object) {
        code = types.null ? '(' : '(!' + data + ' || ';
        code += 'typeof ' + data + ' !== "object")';
        delete types.null;
        delete types.array;
        delete types.object;
      }
      if (types.number) delete types.integer;
      for (var t in types) code += (code ? ' && ' : '') + checkDataType(t, data, true);

      return code;
  }
}

var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);
function coerceToTypes(optionCoerceTypes, dataTypes) {
  if (Array.isArray(dataTypes)) {
    var types = [];
    for (var i = 0; i < dataTypes.length; i++) {
      var t = dataTypes[i];
      if (COERCE_TO_TYPES[t]) types[types.length] = t;
      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
    }
    if (types.length) return types;
  } else if (COERCE_TO_TYPES[dataTypes]) {
    return [dataTypes];
  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
    return ['array'];
  }
}

function toHash(arr) {
  var hash = {};
  for (var i = 0; i < arr.length; i++) hash[arr[i]] = true;
  return hash;
}

var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var SINGLE_QUOTE = /'|\\/g;
function getProperty$1(key) {
  return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
}

function escapeQuotes(str) {
  return str
    .replace(SINGLE_QUOTE, '\\$&')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\f/g, '\\f')
    .replace(/\t/g, '\\t');
}

function varOccurences(str, dataVar) {
  dataVar += '[^0-9]';
  var matches = str.match(new RegExp(dataVar, 'g'));
  return matches ? matches.length : 0;
}

function varReplace(str, dataVar, expr) {
  dataVar += '([^0-9])';
  expr = expr.replace(/\$/g, '$$$$');
  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
}

var EMPTY_ELSE = /else\s*{\s*}/g,
  EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
  EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
function cleanUpCode(out) {
  return out
    .replace(EMPTY_ELSE, '')
    .replace(EMPTY_IF_NO_ELSE, '')
    .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
}

var ERRORS_REGEXP = /[^v.]errors/g,
  REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
  REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,
  RETURN_VALID = 'return errors === 0;',
  RETURN_TRUE = 'validate.errors = null; return true;',
  RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/,
  RETURN_DATA_ASYNC = 'return data;',
  ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g,
  REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

function finalCleanUpCode(out, async) {
  var matches = out.match(ERRORS_REGEXP);
  if (matches && matches.length == 2) {
    out = async
      ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
      : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);
  }

  matches = out.match(ROOTDATA_REGEXP);
  if (!matches || matches.length !== 3) return out;
  return out.replace(REMOVE_ROOTDATA, '');
}

function schemaHasRules(schema, rules) {
  if (typeof schema == 'boolean') return !schema;
  for (var key in schema) if (rules[key]) return true;
}

function schemaHasRulesExcept(schema, rules, exceptKeyword) {
  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
}

function schemaUnknownRules(schema, rules) {
  if (typeof schema == 'boolean') return;
  for (var key in schema) if (!rules[key]) return key;
}

function toQuotedString(str) {
  return "'" + escapeQuotes(str) + "'";
}

function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
  var path = jsonPointers // false by default
    ? "'/' + " + expr + (isNumber ? '' : ".replace(/~/g, '~0').replace(/\\//g, '~1')")
    : isNumber
    ? "'[' + " + expr + " + ']'"
    : "'[\\'' + " + expr + " + '\\']'";
  return joinPaths(currentPath, path);
}

function getPath(currentPath, prop, jsonPointers) {
  var path = jsonPointers // false by default
    ? toQuotedString('/' + escapeJsonPointer(prop))
    : toQuotedString(getProperty$1(prop));
  return joinPaths(currentPath, path);
}

var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, lvl, paths) {
  var up, jsonPointer, data, matches;
  if ($data === '') return 'rootData';
  if ($data[0] == '/') {
    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
    jsonPointer = $data;
    data = 'rootData';
  } else {
    matches = $data.match(RELATIVE_JSON_POINTER);
    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
    up = +matches[1];
    jsonPointer = matches[2];
    if (jsonPointer == '#') {
      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
      return paths[lvl - up];
    }

    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
    data = 'data' + (lvl - up || '');
    if (!jsonPointer) return data;
  }

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment) {
      data += getProperty$1(unescapeJsonPointer(segment));
      expr += ' && ' + data;
    }
  }
  return expr;
}

function joinPaths(a, b) {
  if (a == '""') return b;
  return (a + ' + ' + b).replace(/' \+ '/g, '');
}

function unescapeFragment(str) {
  return unescapeJsonPointer(decodeURIComponent(str));
}

function escapeFragment(str) {
  return encodeURIComponent(escapeJsonPointer(str));
}

function escapeJsonPointer(str) {
  return str.replace(/~/g, '~0').replace(/\//g, '~1');
}

function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}

var schema_obj = SchemaObject;

function SchemaObject(obj) {
  util$1.copy(obj, this);
}

var jsonSchemaTraverse = _commonjsHelpers.createCommonjsModule(function(module) {
  var traverse = (module.exports = function(schema, opts, cb) {
    // Legacy support for v0.3.1 and earlier.
    if (typeof opts == 'function') {
      cb = opts;
      opts = {};
    }

    cb = opts.cb || cb;
    var pre = typeof cb == 'function' ? cb : cb.pre || function() {};
    var post = cb.post || function() {};

    _traverse(opts, pre, post, schema, '', schema);
  });

  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };

  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };

  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };

  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };

  function _traverse(
    opts,
    pre,
    post,
    schema,
    jsonPtr,
    rootSchema,
    parentJsonPtr,
    parentKeyword,
    parentSchema,
    keyIndex
  ) {
    if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i = 0; i < sch.length; i++)
              _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == 'object') {
            for (var prop in sch)
              _traverse(
                opts,
                pre,
                post,
                sch[prop],
                jsonPtr + '/' + key + '/' + escapeJsonPtr(prop),
                rootSchema,
                jsonPtr,
                key,
                schema,
                prop
              );
          }
        } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
          _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
        }
      }
      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }

  function escapeJsonPtr(str) {
    return str.replace(/~/g, '~0').replace(/\//g, '~1');
  }
});

var resolve_1 = resolve$1;

resolve$1.normalizeId = normalizeId;
resolve$1.fullPath = getFullPath;
resolve$1.url = resolveUrl;
resolve$1.ids = resolveIds;
resolve$1.inlineRef = inlineRef;
resolve$1.schema = resolveSchema;

/**
 * [resolve and compile the references ($ref)]
 * @this   Ajv
 * @param  {Function} compile reference to schema compilation funciton (localCompile)
 * @param  {Object} root object with information about the root schema for the current schema
 * @param  {String} ref reference to resolve
 * @return {Object|Function} schema object (if the schema can be inlined) or validation function
 */
function resolve$1(compile, root, ref) {
  /* jshint validthis: true */
  var refVal = this._refs[ref];
  if (typeof refVal == 'string') {
    if (this._refs[refVal]) refVal = this._refs[refVal];
    else return resolve$1.call(this, compile, root, refVal);
  }

  refVal = refVal || this._schemas[ref];
  if (refVal instanceof schema_obj) {
    return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
  }

  var res = resolveSchema.call(this, root, ref);
  var schema, v, baseId;
  if (res) {
    schema = res.schema;
    root = res.root;
    baseId = res.baseId;
  }

  if (schema instanceof schema_obj) {
    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
  } else if (schema !== undefined) {
    v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
  }

  return v;
}

/**
 * Resolve schema, its root and baseId
 * @this Ajv
 * @param  {Object} root root object with properties schema, refVal, refs
 * @param  {String} ref  reference to resolve
 * @return {Object} object with properties schema, root, baseId
 */
function resolveSchema(root, ref) {
  /* jshint validthis: true */
  var p = uri_all.parse(ref),
    refPath = _getFullPath(p),
    baseId = getFullPath(this._getId(root.schema));
  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
    var id = normalizeId(refPath);
    var refVal = this._refs[id];
    if (typeof refVal == 'string') {
      return resolveRecursive.call(this, root, refVal, p);
    } else if (refVal instanceof schema_obj) {
      if (!refVal.validate) this._compile(refVal);
      root = refVal;
    } else {
      refVal = this._schemas[id];
      if (refVal instanceof schema_obj) {
        if (!refVal.validate) this._compile(refVal);
        if (id == normalizeId(ref)) return { schema: refVal, root: root, baseId: baseId };
        root = refVal;
      } else {
        return;
      }
    }
    if (!root.schema) return;
    baseId = getFullPath(this._getId(root.schema));
  }
  return getJsonPointer.call(this, p, baseId, root.schema, root);
}

/* @this Ajv */
function resolveRecursive(root, ref, parsedRef) {
  /* jshint validthis: true */
  var res = resolveSchema.call(this, root, ref);
  if (res) {
    var schema = res.schema;
    var baseId = res.baseId;
    root = res.root;
    var id = this._getId(schema);
    if (id) baseId = resolveUrl(baseId, id);
    return getJsonPointer.call(this, parsedRef, baseId, schema, root);
  }
}

var PREVENT_SCOPE_CHANGE = util$1.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
/* @this Ajv */
function getJsonPointer(parsedRef, baseId, schema, root) {
  /* jshint validthis: true */
  parsedRef.fragment = parsedRef.fragment || '';
  if (parsedRef.fragment.slice(0, 1) != '/') return;
  var parts = parsedRef.fragment.split('/');

  for (var i = 1; i < parts.length; i++) {
    var part = parts[i];
    if (part) {
      part = util$1.unescapeFragment(part);
      schema = schema[part];
      if (schema === undefined) break;
      var id;
      if (!PREVENT_SCOPE_CHANGE[part]) {
        id = this._getId(schema);
        if (id) baseId = resolveUrl(baseId, id);
        if (schema.$ref) {
          var $ref = resolveUrl(baseId, schema.$ref);
          var res = resolveSchema.call(this, root, $ref);
          if (res) {
            schema = res.schema;
            root = res.root;
            baseId = res.baseId;
          }
        }
      }
    }
  }
  if (schema !== undefined && schema !== root.schema) return { schema: schema, root: root, baseId: baseId };
}

var SIMPLE_INLINED = util$1.toHash([
  'type',
  'format',
  'pattern',
  'maxLength',
  'minLength',
  'maxProperties',
  'minProperties',
  'maxItems',
  'minItems',
  'maximum',
  'minimum',
  'uniqueItems',
  'multipleOf',
  'required',
  'enum'
]);
function inlineRef(schema, limit) {
  if (limit === false) return false;
  if (limit === undefined || limit === true) return checkNoRef(schema);
  else if (limit) return countKeys(schema) <= limit;
}

function checkNoRef(schema) {
  var item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return false;
      item = schema[key];
      if (typeof item == 'object' && !checkNoRef(item)) return false;
    }
  }
  return true;
}

function countKeys(schema) {
  var count = 0,
    item;
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) {
      item = schema[i];
      if (typeof item == 'object') count += countKeys(item);
      if (count == Infinity) return Infinity;
    }
  } else {
    for (var key in schema) {
      if (key == '$ref') return Infinity;
      if (SIMPLE_INLINED[key]) {
        count++;
      } else {
        item = schema[key];
        if (typeof item == 'object') count += countKeys(item) + 1;
        if (count == Infinity) return Infinity;
      }
    }
  }
  return count;
}

function getFullPath(id, normalize) {
  if (normalize !== false) id = normalizeId(id);
  var p = uri_all.parse(id);
  return _getFullPath(p);
}

function _getFullPath(p) {
  return uri_all.serialize(p).split('#')[0] + '#';
}

var TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
}

function resolveUrl(baseId, id) {
  id = normalizeId(id);
  return uri_all.resolve(baseId, id);
}

/* @this Ajv */
function resolveIds(schema) {
  var schemaId = normalizeId(this._getId(schema));
  var baseIds = { '': schemaId };
  var fullPaths = { '': getFullPath(schemaId, false) };
  var localRefs = {};
  var self = this;

  jsonSchemaTraverse(schema, { allKeys: true }, function(
    sch,
    jsonPtr,
    rootSchema,
    parentJsonPtr,
    parentKeyword,
    parentSchema,
    keyIndex
  ) {
    if (jsonPtr === '') return;
    var id = self._getId(sch);
    var baseId = baseIds[parentJsonPtr];
    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
    if (keyIndex !== undefined)
      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util$1.escapeFragment(keyIndex));

    if (typeof id == 'string') {
      id = baseId = normalizeId(baseId ? uri_all.resolve(baseId, id) : id);

      var refVal = self._refs[id];
      if (typeof refVal == 'string') refVal = self._refs[refVal];
      if (refVal && refVal.schema) {
        if (!fastDeepEqual(sch, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
      } else if (id != normalizeId(fullPath)) {
        if (id[0] == '#') {
          if (localRefs[id] && !fastDeepEqual(sch, localRefs[id]))
            throw new Error('id "' + id + '" resolves to more than one schema');
          localRefs[id] = sch;
        } else {
          self._refs[id] = fullPath;
        }
      }
    }
    baseIds[jsonPtr] = baseId;
    fullPaths[jsonPtr] = fullPath;
  });

  return localRefs;
}

var error_classes = {
  Validation: errorSubclass(ValidationError),
  MissingRef: errorSubclass(MissingRefError)
};

function ValidationError(errors) {
  this.message = 'validation failed';
  this.errors = errors;
  this.ajv = this.validation = true;
}

MissingRefError.message = function(baseId, ref) {
  return "can't resolve reference " + ref + ' from id ' + baseId;
};

function MissingRefError(baseId, ref, message) {
  this.message = message || MissingRefError.message(baseId, ref);
  this.missingRef = resolve_1.url(baseId, ref);
  this.missingSchema = resolve_1.normalizeId(resolve_1.fullPath(this.missingRef));
}

function errorSubclass(Subclass) {
  Subclass.prototype = Object.create(Error.prototype);
  Subclass.prototype.constructor = Subclass;
  return Subclass;
}

var fastJsonStableStringify = function(data, opts) {
  if (!opts) opts = {};
  if (typeof opts === 'function') opts = { cmp: opts };
  var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;

  var cmp =
    opts.cmp &&
    (function(f) {
      return function(node) {
        return function(a, b) {
          var aobj = { key: a, value: node[a] };
          var bobj = { key: b, value: node[b] };
          return f(aobj, bobj);
        };
      };
    })(opts.cmp);

  var seen = [];
  return (function stringify(node) {
    if (node && node.toJSON && typeof node.toJSON === 'function') {
      node = node.toJSON();
    }

    if (node === undefined) return;
    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
    if (typeof node !== 'object') return JSON.stringify(node);

    var i, out;
    if (Array.isArray(node)) {
      out = '[';
      for (i = 0; i < node.length; i++) {
        if (i) out += ',';
        out += stringify(node[i]) || 'null';
      }
      return out + ']';
    }

    if (node === null) return 'null';

    if (seen.indexOf(node) !== -1) {
      if (cycles) return JSON.stringify('__cycle__');
      throw new TypeError('Converting circular structure to JSON');
    }

    var seenIndex = seen.push(node) - 1;
    var keys = Object.keys(node).sort(cmp && cmp(node));
    out = '';
    for (i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = stringify(node[key]);

      if (!value) continue;
      if (out) out += ',';
      out += JSON.stringify(key) + ':' + value;
    }
    seen.splice(seenIndex, 1);
    return '{' + out + '}';
  })(data);
};

var validate$1 = function generate_validate(it, $keyword, $ruleType) {
  var out = '';
  var $async = it.schema.$async === true,
    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
    $id = it.self._getId(it.schema);
  if (it.opts.strictKeywords) {
    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
    if ($unknownKwd) {
      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
      else throw new Error($keywordsMsg);
    }
  }
  if (it.isTop) {
    out += ' var validate = ';
    if ($async) {
      it.async = true;
      out += 'async ';
    }
    out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
    if ($id && (it.opts.sourceCode || it.opts.processCode)) {
      out += ' ' + ('/*# sourceURL=' + $id + ' */') + ' ';
    }
  }
  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
    var $keyword = 'false schema';
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = 'data' + ($dataLvl || '');
    var $valid = 'valid' + $lvl;
    if (it.schema === false) {
      if (it.isTop) {
        $breakOnError = true;
      } else {
        out += ' var ' + $valid + ' = false; ';
      }
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out +=
          " { keyword: '" +
          ($errorKeyword || 'false schema') +
          "' , dataPath: (dataPath || '') + " +
          it.errorPath +
          ' , schemaPath: ' +
          it.util.toQuotedString($errSchemaPath) +
          ' , params: {} ';
        if (it.opts.messages !== false) {
          out += " , message: 'boolean schema is false' ";
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
    } else {
      if (it.isTop) {
        if ($async) {
          out += ' return data; ';
        } else {
          out += ' validate.errors = null; return true; ';
        }
      } else {
        out += ' var ' + $valid + ' = true; ';
      }
    }
    if (it.isTop) {
      out += ' }; return validate; ';
    }
    return out;
  }
  if (it.isTop) {
    var $top = it.isTop,
      $lvl = (it.level = 0),
      $dataLvl = (it.dataLevel = 0),
      $data = 'data';
    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
    it.baseId = it.baseId || it.rootId;
    delete it.isTop;
    it.dataPathArr = [undefined];
    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
      var $defaultMsg = 'default is ignored in the schema root';
      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
      else throw new Error($defaultMsg);
    }
    out += ' var vErrors = null; ';
    out += ' var errors = 0;     ';
    out += ' if (rootData === undefined) rootData = data; ';
  } else {
    var $lvl = it.level,
      $dataLvl = it.dataLevel,
      $data = 'data' + ($dataLvl || '');
    if ($id) it.baseId = it.resolve.url(it.baseId, $id);
    if ($async && !it.async) throw new Error('async schema in sync schema');
    out += ' var errs_' + $lvl + ' = errors;';
  }
  var $valid = 'valid' + $lvl,
    $breakOnError = !it.opts.allErrors,
    $closingBraces1 = '',
    $closingBraces2 = '';
  var $errorKeyword;
  var $typeSchema = it.schema.type,
    $typeIsArray = Array.isArray($typeSchema);
  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
    if ($typeIsArray) {
      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
    } else if ($typeSchema != 'null') {
      $typeSchema = [$typeSchema, 'null'];
      $typeIsArray = true;
    }
  }
  if ($typeIsArray && $typeSchema.length == 1) {
    $typeSchema = $typeSchema[0];
    $typeIsArray = false;
  }
  if (it.schema.$ref && $refKeywords) {
    if (it.opts.extendRefs == 'fail') {
      throw new Error(
        '$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)'
      );
    } else if (it.opts.extendRefs !== true) {
      $refKeywords = false;
      it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
    }
  }
  if (it.schema.$comment && it.opts.$comment) {
    out += ' ' + it.RULES.all.$comment.code(it, '$comment');
  }
  if ($typeSchema) {
    if (it.opts.coerceTypes) {
      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
    }
    var $rulesGroup = it.RULES.types[$typeSchema];
    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type';
      var $schemaPath = it.schemaPath + '.type',
        $errSchemaPath = it.errSchemaPath + '/type',
        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
      out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') { ';
      if ($coerceToTypes) {
        var $dataType = 'dataType' + $lvl,
          $coerced = 'coerced' + $lvl;
        out += ' var ' + $dataType + ' = typeof ' + $data + '; ';
        if (it.opts.coerceTypes == 'array') {
          out += ' if (' + $dataType + " == 'object' && Array.isArray(" + $data + ')) ' + $dataType + " = 'array'; ";
        }
        out += ' var ' + $coerced + ' = undefined; ';
        var $bracesCoercion = '';
        var arr1 = $coerceToTypes;
        if (arr1) {
          var $type,
            $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $type = arr1[($i += 1)];
            if ($i) {
              out += ' if (' + $coerced + ' === undefined) { ';
              $bracesCoercion += '}';
            }
            if (it.opts.coerceTypes == 'array' && $type != 'array') {
              out +=
                ' if (' +
                $dataType +
                " == 'array' && " +
                $data +
                '.length == 1) { ' +
                $coerced +
                ' = ' +
                $data +
                ' = ' +
                $data +
                '[0]; ' +
                $dataType +
                ' = typeof ' +
                $data +
                ';  } ';
            }
            if ($type == 'string') {
              out +=
                ' if (' +
                $dataType +
                " == 'number' || " +
                $dataType +
                " == 'boolean') " +
                $coerced +
                " = '' + " +
                $data +
                '; else if (' +
                $data +
                ' === null) ' +
                $coerced +
                " = ''; ";
            } else if ($type == 'number' || $type == 'integer') {
              out +=
                ' if (' +
                $dataType +
                " == 'boolean' || " +
                $data +
                ' === null || (' +
                $dataType +
                " == 'string' && " +
                $data +
                ' && ' +
                $data +
                ' == +' +
                $data +
                ' ';
              if ($type == 'integer') {
                out += ' && !(' + $data + ' % 1)';
              }
              out += ')) ' + $coerced + ' = +' + $data + '; ';
            } else if ($type == 'boolean') {
              out +=
                ' if (' +
                $data +
                " === 'false' || " +
                $data +
                ' === 0 || ' +
                $data +
                ' === null) ' +
                $coerced +
                ' = false; else if (' +
                $data +
                " === 'true' || " +
                $data +
                ' === 1) ' +
                $coerced +
                ' = true; ';
            } else if ($type == 'null') {
              out +=
                ' if (' +
                $data +
                " === '' || " +
                $data +
                ' === 0 || ' +
                $data +
                ' === false) ' +
                $coerced +
                ' = null; ';
            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
              out +=
                ' if (' +
                $dataType +
                " == 'string' || " +
                $dataType +
                " == 'number' || " +
                $dataType +
                " == 'boolean' || " +
                $data +
                ' == null) ' +
                $coerced +
                ' = [' +
                $data +
                ']; ';
            }
          }
        }
        out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || 'type') +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { type: '";
          if ($typeIsArray) {
            out += '' + $typeSchema.join(',');
          } else {
            out += '' + $typeSchema;
          }
          out += "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be ";
            if ($typeIsArray) {
              out += '' + $typeSchema.join(',');
            } else {
              out += '' + $typeSchema;
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else {  ';
        var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
        out += ' ' + $data + ' = ' + $coerced + '; ';
        if (!$dataLvl) {
          out += 'if (' + $parentData + ' !== undefined)';
        }
        out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } ';
      } else {
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            ($errorKeyword || 'type') +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { type: '";
          if ($typeIsArray) {
            out += '' + $typeSchema.join(',');
          } else {
            out += '' + $typeSchema;
          }
          out += "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be ";
            if ($typeIsArray) {
              out += '' + $typeSchema.join(',');
            } else {
              out += '' + $typeSchema;
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      }
      out += ' } ';
    }
  }
  if (it.schema.$ref && !$refKeywords) {
    out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';
    if ($breakOnError) {
      out += ' } if (errors === ';
      if ($top) {
        out += '0';
      } else {
        out += 'errs_' + $lvl;
      }
      out += ') { ';
      $closingBraces2 += '}';
    }
  } else {
    var arr2 = it.RULES;
    if (arr2) {
      var $rulesGroup,
        i2 = -1,
        l2 = arr2.length - 1;
      while (i2 < l2) {
        $rulesGroup = arr2[(i2 += 1)];
        if ($shouldUseGroup($rulesGroup)) {
          if ($rulesGroup.type) {
            out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';
          }
          if (it.opts.useDefaults) {
            if ($rulesGroup.type == 'object' && it.schema.properties) {
              var $schema = it.schema.properties,
                $schemaKeys = Object.keys($schema);
              var arr3 = $schemaKeys;
              if (arr3) {
                var $propertyKey,
                  i3 = -1,
                  l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[(i3 += 1)];
                  var $sch = $schema[$propertyKey];
                  if ($sch.default !== undefined) {
                    var $passData = $data + it.util.getProperty($propertyKey);
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                        else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';
                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + " === '' ";
                      }
                      out += ' ) ' + $passData + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              }
            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
              var arr4 = it.schema.items;
              if (arr4) {
                var $sch,
                  $i = -1,
                  l4 = arr4.length - 1;
                while ($i < l4) {
                  $sch = arr4[($i += 1)];
                  if ($sch.default !== undefined) {
                    var $passData = $data + '[' + $i + ']';
                    if (it.compositeRule) {
                      if (it.opts.strictDefaults) {
                        var $defaultMsg = 'default is ignored for: ' + $passData;
                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                        else throw new Error($defaultMsg);
                      }
                    } else {
                      out += ' if (' + $passData + ' === undefined ';
                      if (it.opts.useDefaults == 'empty') {
                        out += ' || ' + $passData + ' === null || ' + $passData + " === '' ";
                      }
                      out += ' ) ' + $passData + ' = ';
                      if (it.opts.useDefaults == 'shared') {
                        out += ' ' + it.useDefault($sch.default) + ' ';
                      } else {
                        out += ' ' + JSON.stringify($sch.default) + ' ';
                      }
                      out += '; ';
                    }
                  }
                }
              }
            }
          }
          var arr5 = $rulesGroup.rules;
          if (arr5) {
            var $rule,
              i5 = -1,
              l5 = arr5.length - 1;
            while (i5 < l5) {
              $rule = arr5[(i5 += 1)];
              if ($shouldUseRule($rule)) {
                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                if ($code) {
                  out += ' ' + $code + ' ';
                  if ($breakOnError) {
                    $closingBraces1 += '}';
                  }
                }
              }
            }
          }
          if ($breakOnError) {
            out += ' ' + $closingBraces1 + ' ';
            $closingBraces1 = '';
          }
          if ($rulesGroup.type) {
            out += ' } ';
            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
              out += ' else { ';
              var $schemaPath = it.schemaPath + '.type',
                $errSchemaPath = it.errSchemaPath + '/type';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  ($errorKeyword || 'type') +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  ' , schemaPath: ' +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { type: '";
                if ($typeIsArray) {
                  out += '' + $typeSchema.join(',');
                } else {
                  out += '' + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += '' + $typeSchema.join(',');
                  } else {
                    out += '' + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out +=
                    ' , schema: validate.schema' +
                    $schemaPath +
                    ' , parentSchema: validate.schema' +
                    it.schemaPath +
                    ' , data: ' +
                    $data +
                    ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out +=
                  ' var err = ' +
                  __err +
                  ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
            }
          }
          if ($breakOnError) {
            out += ' if (errors === ';
            if ($top) {
              out += '0';
            } else {
              out += 'errs_' + $lvl;
            }
            out += ') { ';
            $closingBraces2 += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces2 + ' ';
  }
  if ($top) {
    if ($async) {
      out += ' if (errors === 0) return data;           ';
      out += ' else throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; ';
      out += ' return errors === 0;       ';
    }
    out += ' }; return validate;';
  } else {
    out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
  }
  out = it.util.cleanUpCode(out);
  if ($top) {
    out = it.util.finalCleanUpCode(out, $async);
  }

  function $shouldUseGroup($rulesGroup) {
    var rules = $rulesGroup.rules;
    for (var i = 0; i < rules.length; i++) if ($shouldUseRule(rules[i])) return true;
  }

  function $shouldUseRule($rule) {
    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
  }

  function $ruleImplementsSomeKeyword($rule) {
    var impl = $rule.implements;
    for (var i = 0; i < impl.length; i++) if (it.schema[impl[i]] !== undefined) return true;
  }
  return out;
};

/**
 * Functions below are used inside compiled validations function
 */

var ucs2length$1 = util$1.ucs2length;

// this error is thrown by async schemas to return validation errors via exception
var ValidationError$1 = error_classes.Validation;

var compile_1 = compile;

/**
 * Compiles schema to validation function
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Object} root object with information about the root schema for this schema
 * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
 * @param  {String} baseId base ID for IDs in the schema
 * @return {Function} validation function
 */
function compile(schema, root, localRefs, baseId) {
  /* jshint validthis: true, evil: true */
  /* eslint no-shadow: 0 */
  var self = this,
    opts = this._opts,
    refVal = [undefined],
    refs = {},
    patterns = [],
    patternsHash = {},
    defaults = [],
    defaultsHash = {},
    customRules = [];

  root = root || { schema: schema, refVal: refVal, refs: refs };

  var c = checkCompiling.call(this, schema, root, baseId);
  var compilation = this._compilations[c.index];
  if (c.compiling) return (compilation.callValidate = callValidate);

  var formats = this._formats;
  var RULES = this.RULES;

  try {
    var v = localCompile(schema, root, localRefs, baseId);
    compilation.validate = v;
    var cv = compilation.callValidate;
    if (cv) {
      cv.schema = v.schema;
      cv.errors = null;
      cv.refs = v.refs;
      cv.refVal = v.refVal;
      cv.root = v.root;
      cv.$async = v.$async;
      if (opts.sourceCode) cv.source = v.source;
    }
    return v;
  } finally {
    endCompiling.call(this, schema, root, baseId);
  }

  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var validate = compilation.validate;
    var result = validate.apply(this, arguments);
    callValidate.errors = validate.errors;
    return result;
  }

  function localCompile(_schema, _root, localRefs, baseId) {
    var isRoot = !_root || (_root && _root.schema == _schema);
    if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);

    var $async = _schema.$async === true;

    var sourceCode = validate$1({
      isTop: true,
      schema: _schema,
      isRoot: isRoot,
      baseId: baseId,
      root: _root,
      schemaPath: '',
      errSchemaPath: '#',
      errorPath: '""',
      MissingRefError: error_classes.MissingRef,
      RULES: RULES,
      validate: validate$1,
      util: util$1,
      resolve: resolve_1,
      resolveRef: resolveRef,
      usePattern: usePattern,
      useDefault: useDefault,
      useCustomRule: useCustomRule,
      opts: opts,
      formats: formats,
      logger: self.logger,
      self: self
    });

    sourceCode =
      vars(refVal, refValCode) +
      vars(patterns, patternCode) +
      vars(defaults, defaultCode) +
      vars(customRules, customRuleCode) +
      sourceCode;

    if (opts.processCode) sourceCode = opts.processCode(sourceCode);
    // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
    var validate;
    try {
      var makeValidate = new Function(
        'self',
        'RULES',
        'formats',
        'root',
        'refVal',
        'defaults',
        'customRules',
        'equal',
        'ucs2length',
        'ValidationError',
        sourceCode
      );

      validate = makeValidate(
        self,
        RULES,
        formats,
        root,
        refVal,
        defaults,
        customRules,
        fastDeepEqual,
        ucs2length$1,
        ValidationError$1
      );

      refVal[0] = validate;
    } catch (e) {
      self.logger.error('Error compiling schema, function code:', sourceCode);
      throw e;
    }

    validate.schema = _schema;
    validate.errors = null;
    validate.refs = refs;
    validate.refVal = refVal;
    validate.root = isRoot ? validate : _root;
    if ($async) validate.$async = true;
    if (opts.sourceCode === true) {
      validate.source = {
        code: sourceCode,
        patterns: patterns,
        defaults: defaults
      };
    }

    return validate;
  }

  function resolveRef(baseId, ref, isRoot) {
    ref = resolve_1.url(baseId, ref);
    var refIndex = refs[ref];
    var _refVal, refCode;
    if (refIndex !== undefined) {
      _refVal = refVal[refIndex];
      refCode = 'refVal[' + refIndex + ']';
      return resolvedRef(_refVal, refCode);
    }
    if (!isRoot && root.refs) {
      var rootRefId = root.refs[ref];
      if (rootRefId !== undefined) {
        _refVal = root.refVal[rootRefId];
        refCode = addLocalRef(ref, _refVal);
        return resolvedRef(_refVal, refCode);
      }
    }

    refCode = addLocalRef(ref);
    var v = resolve_1.call(self, localCompile, root, ref);
    if (v === undefined) {
      var localSchema = localRefs && localRefs[ref];
      if (localSchema) {
        v = resolve_1.inlineRef(localSchema, opts.inlineRefs)
          ? localSchema
          : compile.call(self, localSchema, root, localRefs, baseId);
      }
    }

    if (v === undefined) {
      removeLocalRef(ref);
    } else {
      replaceLocalRef(ref, v);
      return resolvedRef(v, refCode);
    }
  }

  function addLocalRef(ref, v) {
    var refId = refVal.length;
    refVal[refId] = v;
    refs[ref] = refId;
    return 'refVal' + refId;
  }

  function removeLocalRef(ref) {
    delete refs[ref];
  }

  function replaceLocalRef(ref, v) {
    var refId = refs[ref];
    refVal[refId] = v;
  }

  function resolvedRef(refVal, code) {
    return typeof refVal == 'object' || typeof refVal == 'boolean'
      ? { code: code, schema: refVal, inline: true }
      : { code: code, $async: refVal && !!refVal.$async };
  }

  function usePattern(regexStr) {
    var index = patternsHash[regexStr];
    if (index === undefined) {
      index = patternsHash[regexStr] = patterns.length;
      patterns[index] = regexStr;
    }
    return 'pattern' + index;
  }

  function useDefault(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
        return '' + value;
      case 'string':
        return util$1.toQuotedString(value);
      case 'object':
        if (value === null) return 'null';
        var valueStr = fastJsonStableStringify(value);
        var index = defaultsHash[valueStr];
        if (index === undefined) {
          index = defaultsHash[valueStr] = defaults.length;
          defaults[index] = value;
        }
        return 'default' + index;
    }
  }

  function useCustomRule(rule, schema, parentSchema, it) {
    if (self._opts.validateSchema !== false) {
      var deps = rule.definition.dependencies;
      if (
        deps &&
        !deps.every(function(keyword) {
          return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
        })
      )
        throw new Error('parent schema must have all required keywords: ' + deps.join(','));

      var validateSchema = rule.definition.validateSchema;
      if (validateSchema) {
        var valid = validateSchema(schema);
        if (!valid) {
          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
          if (self._opts.validateSchema == 'log') self.logger.error(message);
          else throw new Error(message);
        }
      }
    }

    var compile = rule.definition.compile,
      inline = rule.definition.inline,
      macro = rule.definition.macro;

    var validate;
    if (compile) {
      validate = compile.call(self, schema, parentSchema, it);
    } else if (macro) {
      validate = macro.call(self, schema, parentSchema, it);
      if (opts.validateSchema !== false) self.validateSchema(validate, true);
    } else if (inline) {
      validate = inline.call(self, it, rule.keyword, schema, parentSchema);
    } else {
      validate = rule.definition.validate;
      if (!validate) return;
    }

    if (validate === undefined) throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

    var index = customRules.length;
    customRules[index] = validate;

    return {
      code: 'customRule' + index,
      validate: validate
    };
  }
}

/**
 * Checks if the schema is currently compiled
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
 */
function checkCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var index = compIndex.call(this, schema, root, baseId);
  if (index >= 0) return { index: index, compiling: true };
  index = this._compilations.length;
  this._compilations[index] = {
    schema: schema,
    root: root,
    baseId: baseId
  };
  return { index: index, compiling: false };
}

/**
 * Removes the schema from the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 */
function endCompiling(schema, root, baseId) {
  /* jshint validthis: true */
  var i = compIndex.call(this, schema, root, baseId);
  if (i >= 0) this._compilations.splice(i, 1);
}

/**
 * Index of schema compilation in the currently compiled list
 * @this   Ajv
 * @param  {Object} schema schema to compile
 * @param  {Object} root root object
 * @param  {String} baseId base schema ID
 * @return {Integer} compilation index
 */
function compIndex(schema, root, baseId) {
  /* jshint validthis: true */
  for (var i = 0; i < this._compilations.length; i++) {
    var c = this._compilations[i];
    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
  }
  return -1;
}

function patternCode(i, patterns) {
  return 'var pattern' + i + ' = new RegExp(' + util$1.toQuotedString(patterns[i]) + ');';
}

function defaultCode(i) {
  return 'var default' + i + ' = defaults[' + i + '];';
}

function refValCode(i, refVal) {
  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
}

function customRuleCode(i) {
  return 'var customRule' + i + ' = customRules[' + i + '];';
}

function vars(arr, statement) {
  if (!arr.length) return '';
  var code = '';
  for (var i = 0; i < arr.length; i++) code += statement(i, arr);
  return code;
}

var cache = _commonjsHelpers.createCommonjsModule(function(module) {
  var Cache = (module.exports = function Cache() {
    this._cache = {};
  });

  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };

  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };

  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };

  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
});

var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
var JSON_POINTER$1 = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
var RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;

var formats_1 = formats$4;

function formats$4(mode) {
  mode = mode == 'full' ? 'full' : 'fast';
  return util$1.copy(formats$4[mode]);
}

formats$4.fast = {
  // date: http://tools.ietf.org/html/rfc3339#section-5.6
  date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
  time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
  'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
  'uri-template': URITEMPLATE,
  url: URL,
  // email (sources from jsen validator):
  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
  hostname: HOSTNAME,
  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  // uuid: http://tools.ietf.org/html/rfc4122
  uuid: UUID,
  // JSON-pointer: https://tools.ietf.org/html/rfc6901
  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
  'json-pointer': JSON_POINTER$1,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
  'relative-json-pointer': RELATIVE_JSON_POINTER$1
};

formats$4.full = {
  date: date,
  time: time,
  'date-time': date_time,
  uri: uri,
  'uri-reference': URIREF,
  'uri-template': URITEMPLATE,
  url: URL,
  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
  hostname: hostname,
  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
  ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
  regex: regex,
  uuid: UUID,
  'json-pointer': JSON_POINTER$1,
  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
  'relative-json-pointer': RELATIVE_JSON_POINTER$1
};

function isLeapYear(year) {
  // https://tools.ietf.org/html/rfc3339#appendix-C
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

function date(str) {
  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
  var matches = str.match(DATE);
  if (!matches) return false;

  var year = +matches[1];
  var month = +matches[2];
  var day = +matches[3];

  return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
}

function time(str, full) {
  var matches = str.match(TIME);
  if (!matches) return false;

  var hour = matches[1];
  var minute = matches[2];
  var second = matches[3];
  var timeZone = matches[5];
  return (
    ((hour <= 23 && minute <= 59 && second <= 59) || (hour == 23 && minute == 59 && second == 60)) &&
    (!full || timeZone)
  );
}

var DATE_TIME_SEPARATOR = /t|\s/i;
function date_time(str) {
  // http://tools.ietf.org/html/rfc3339#section-5.6
  var dateTime = str.split(DATE_TIME_SEPARATOR);
  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
}

function hostname(str) {
  // https://tools.ietf.org/html/rfc1034#section-3.5
  // https://tools.ietf.org/html/rfc1123#section-2
  return str.length <= 255 && HOSTNAME.test(str);
}

var NOT_URI_FRAGMENT = /\/|:/;
function uri(str) {
  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
}

var Z_ANCHOR = /[^\\]\\Z/;
function regex(str) {
  if (Z_ANCHOR.test(str)) return false;
  try {
    new RegExp(str);
    return true;
  } catch (e) {
    return false;
  }
}

var ref = function generate_ref(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $async, $refCode;
  if ($schema == '#' || $schema == '#/') {
    if (it.isRoot) {
      $async = it.async;
      $refCode = 'validate';
    } else {
      $async = it.root.schema.$async === true;
      $refCode = 'root.refVal[0]';
    }
  } else {
    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
    if ($refVal === undefined) {
      var $message = it.MissingRefError.message(it.baseId, $schema);
      if (it.opts.missingRefs == 'fail') {
        it.logger.error($message);
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            '$ref' +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { ref: '" +
            it.util.escapeQuotes($schema) +
            "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema) + "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: ' +
              it.util.toQuotedString($schema) +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        if ($breakOnError) {
          out += ' if (false) { ';
        }
      } else if (it.opts.missingRefs == 'ignore') {
        it.logger.warn($message);
        if ($breakOnError) {
          out += ' if (true) { ';
        }
      } else {
        throw new it.MissingRefError(it.baseId, $schema, $message);
      }
    } else if ($refVal.inline) {
      var $it = it.util.copy(it);
      $it.level++;
      var $nextValid = 'valid' + $it.level;
      $it.schema = $refVal.schema;
      $it.schemaPath = '';
      $it.errSchemaPath = $schema;
      var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
      out += ' ' + $code + ' ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
      }
    } else {
      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
      $refCode = $refVal.code;
    }
  }
  if ($refCode) {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    if (it.opts.passContext) {
      out += ' ' + $refCode + '.call(this, ';
    } else {
      out += ' ' + $refCode + '( ';
    }
    out += ' ' + $data + ", (dataPath || '')";
    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }
    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
    var __callValidate = out;
    out = $$outStack.pop();
    if ($async) {
      if (!it.async) throw new Error('async schema referenced by sync schema');
      if ($breakOnError) {
        out += ' var ' + $valid + '; ';
      }
      out += ' try { await ' + __callValidate + '; ';
      if ($breakOnError) {
        out += ' ' + $valid + ' = true; ';
      }
      out +=
        ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
      if ($breakOnError) {
        out += ' ' + $valid + ' = false; ';
      }
      out += ' } ';
      if ($breakOnError) {
        out += ' if (' + $valid + ') { ';
      }
    } else {
      out +=
        ' if (!' +
        __callValidate +
        ') { if (vErrors === null) vErrors = ' +
        $refCode +
        '.errors; else vErrors = vErrors.concat(' +
        $refCode +
        '.errors); errors = vErrors.length; } ';
      if ($breakOnError) {
        out += ' else { ';
      }
    }
  }
  return out;
};

var allOf = function generate_allOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
    $allSchemasEmpty = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch,
      $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[($i += 1)];
      if (
        it.opts.strictKeywords
          ? typeof $sch == 'object' && Object.keys($sch).length > 0
          : it.util.schemaHasRules($sch, it.RULES.all)
      ) {
        $allSchemasEmpty = false;
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($breakOnError) {
    if ($allSchemasEmpty) {
      out += ' if (true) { ';
    } else {
      out += ' ' + $closingBraces.slice(0, -1) + ' ';
    }
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $noEmptySchema = $schema.every(function($sch) {
    return it.opts.strictKeywords
      ? typeof $sch == 'object' && Object.keys($sch).length > 0
      : it.util.schemaHasRules($sch, it.RULES.all);
  });
  if ($noEmptySchema) {
    var $currentBaseId = $it.baseId;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch,
        $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[($i += 1)];
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
        out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
        $closingBraces += '}';
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'anyOf' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: {} ';
      if (it.opts.messages !== false) {
        out += " , message: 'should match some schema in anyOf' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out +=
      ' } else {  errors = ' +
      $errs +
      '; if (vErrors !== null) { if (' +
      $errs +
      ') vErrors.length = ' +
      $errs +
      '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

var comment = function generate_comment(it, $keyword, $ruleType) {
  var out = ' ';
  var $schema = it.schema[$keyword];
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  !it.opts.allErrors;
  var $comment = it.util.toQuotedString($schema);
  if (it.opts.$comment === true) {
    out += ' console.log(' + $comment + ');';
  } else if (typeof it.opts.$comment == 'function') {
    out +=
      ' self._opts.$comment(' + $comment + ', ' + it.util.toQuotedString($errSchemaPath) + ', validate.root.schema);';
  }
  return out;
};

var _const = function generate_const(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }
  if (!$isData) {
    out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
  }
  out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'const' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { allowedValue: schema' +
      $lvl +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should be equal to constant' ";
    }
    if (it.opts.verbose) {
      out +=
        ' , schema: validate.schema' +
        $schemaPath +
        ' , parentSchema: validate.schema' +
        it.schemaPath +
        ' , data: ' +
        $data +
        ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var contains = function generate_contains(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = ($it.dataLevel = it.dataLevel + 1),
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId,
    $nonEmptySchema = it.opts.strictKeywords
      ? typeof $schema == 'object' && Object.keys($schema).length > 0
      : it.util.schemaHasRules($schema, it.RULES.all);
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if ($nonEmptySchema) {
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out +=
      ' var ' +
      $nextValid +
      ' = false; for (var ' +
      $idx +
      ' = 0; ' +
      $idx +
      ' < ' +
      $data +
      '.length; ' +
      $idx +
      '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    out += ' if (' + $nextValid + ') break; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $closingBraces + ' if (!' + $nextValid + ') {';
  } else {
    out += ' if (' + $data + '.length == 0) {';
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'contains' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: {} ';
    if (it.opts.messages !== false) {
      out += " , message: 'should contain a valid item' ";
    }
    if (it.opts.verbose) {
      out +=
        ' , schema: validate.schema' +
        $schemaPath +
        ' , parentSchema: validate.schema' +
        it.schemaPath +
        ' , data: ' +
        $data +
        ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } else { ';
  if ($nonEmptySchema) {
    out +=
      '  errors = ' +
      $errs +
      '; if (vErrors !== null) { if (' +
      $errs +
      ') vErrors.length = ' +
      $errs +
      '; else vErrors = null; } ';
  }
  if (it.opts.allErrors) {
    out += ' } ';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var dependencies = function generate_dependencies(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $schemaDeps = {},
    $propertyDeps = {},
    $ownProperties = it.opts.ownProperties;
  for ($property in $schema) {
    var $sch = $schema[$property];
    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
    $deps[$property] = $sch;
  }
  out += 'var ' + $errs + ' = errors;';
  var $currentErrorPath = it.errorPath;
  out += 'var missing' + $lvl + ';';
  for (var $property in $propertyDeps) {
    $deps = $propertyDeps[$property];
    if ($deps.length) {
      out += ' if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ", '" + it.util.escapeQuotes($property) + "') ";
      }
      if ($breakOnError) {
        out += ' && ( ';
        var arr1 = $deps;
        if (arr1) {
          var $propertyKey,
            $i = -1,
            l1 = arr1.length - 1;
          while ($i < l1) {
            $propertyKey = arr1[($i += 1)];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out +=
                ' || ! Object.prototype.hasOwnProperty.call(' +
                $data +
                ", '" +
                it.util.escapeQuotes($propertyKey) +
                "') ";
            }
            out +=
              ') && (missing' +
              $lvl +
              ' = ' +
              it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) +
              ') ) ';
          }
        }
        out += ')) {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers
            ? it.util.getPathExpr($currentErrorPath, $propertyPath, true)
            : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            'dependencies' +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { property: '" +
            it.util.escapeQuotes($property) +
            "', missingProperty: '" +
            $missingProperty +
            "', depsCount: " +
            $deps.length +
            ", deps: '" +
            it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(', ')) +
            "' } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should have ";
            if ($deps.length == 1) {
              out += 'property ' + it.util.escapeQuotes($deps[0]);
            } else {
              out += 'properties ' + it.util.escapeQuotes($deps.join(', '));
            }
            out += ' when property ' + it.util.escapeQuotes($property) + " is present' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
      } else {
        out += ' ) { ';
        var arr2 = $deps;
        if (arr2) {
          var $propertyKey,
            i2 = -1,
            l2 = arr2.length - 1;
          while (i2 < l2) {
            $propertyKey = arr2[(i2 += 1)];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out +=
                ' || ! Object.prototype.hasOwnProperty.call(' +
                $data +
                ", '" +
                it.util.escapeQuotes($propertyKey) +
                "') ";
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out +=
                " { keyword: '" +
                'dependencies' +
                "' , dataPath: (dataPath || '') + " +
                it.errorPath +
                ' , schemaPath: ' +
                it.util.toQuotedString($errSchemaPath) +
                " , params: { property: '" +
                it.util.escapeQuotes($property) +
                "', missingProperty: '" +
                $missingProperty +
                "', depsCount: " +
                $deps.length +
                ", deps: '" +
                it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(', ')) +
                "' } ";
              if (it.opts.messages !== false) {
                out += " , message: 'should have ";
                if ($deps.length == 1) {
                  out += 'property ' + it.util.escapeQuotes($deps[0]);
                } else {
                  out += 'properties ' + it.util.escapeQuotes($deps.join(', '));
                }
                out += ' when property ' + it.util.escapeQuotes($property) + " is present' ";
              }
              if (it.opts.verbose) {
                out +=
                  ' , schema: validate.schema' +
                  $schemaPath +
                  ' , parentSchema: validate.schema' +
                  it.schemaPath +
                  ' , data: ' +
                  $data +
                  ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
      out += ' }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  it.errorPath = $currentErrorPath;
  var $currentBaseId = $it.baseId;
  for (var $property in $schemaDeps) {
    var $sch = $schemaDeps[$property];
    if (
      it.opts.strictKeywords
        ? typeof $sch == 'object' && Object.keys($sch).length > 0
        : it.util.schemaHasRules($sch, it.RULES.all)
    ) {
      out += ' ' + $nextValid + ' = true; if ( ' + $data + it.util.getProperty($property) + ' !== undefined ';
      if ($ownProperties) {
        out += ' && Object.prototype.hasOwnProperty.call(' + $data + ", '" + it.util.escapeQuotes($property) + "') ";
      }
      out += ') { ';
      $it.schema = $sch;
      $it.schemaPath = $schemaPath + it.util.getProperty($property);
      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' }  ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  }
  if ($breakOnError) {
    out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var _enum = function generate_enum(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }
  var $i = 'i' + $lvl,
    $vSchema = 'schema' + $lvl;
  if (!$isData) {
    out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
  }
  out += 'var ' + $valid + ';';
  if ($isData) {
    out +=
      ' if (schema' +
      $lvl +
      ' === undefined) ' +
      $valid +
      ' = true; else if (!Array.isArray(schema' +
      $lvl +
      ')) ' +
      $valid +
      ' = false; else {';
  }
  out +=
    '' +
    $valid +
    ' = false;for (var ' +
    $i +
    '=0; ' +
    $i +
    '<' +
    $vSchema +
    '.length; ' +
    $i +
    '++) if (equal(' +
    $data +
    ', ' +
    $vSchema +
    '[' +
    $i +
    '])) { ' +
    $valid +
    ' = true; break; }';
  if ($isData) {
    out += '  }  ';
  }
  out += ' if (!' + $valid + ') {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'enum' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { allowedValues: schema' +
      $lvl +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should be equal to one of the allowed values' ";
    }
    if (it.opts.verbose) {
      out +=
        ' , schema: validate.schema' +
        $schemaPath +
        ' , parentSchema: validate.schema' +
        it.schemaPath +
        ' , data: ' +
        $data +
        ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' }';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var format = function generate_format(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  if (it.opts.format === false) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
    return out;
  }
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $unknownFormats = it.opts.unknownFormats,
    $allowUnknown = Array.isArray($unknownFormats);
  if ($isData) {
    var $format = 'format' + $lvl,
      $isObject = 'isObject' + $lvl,
      $formatType = 'formatType' + $lvl;
    out +=
      ' var ' +
      $format +
      ' = formats[' +
      $schemaValue +
      ']; var ' +
      $isObject +
      ' = typeof ' +
      $format +
      " == 'object' && !(" +
      $format +
      ' instanceof RegExp) && ' +
      $format +
      '.validate; var ' +
      $formatType +
      ' = ' +
      $isObject +
      ' && ' +
      $format +
      ".type || 'string'; if (" +
      $isObject +
      ') { ';
    if (it.async) {
      out += ' var async' + $lvl + ' = ' + $format + '.async; ';
    }
    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';
    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'string') || ";
    }
    out += ' (';
    if ($unknownFormats != 'ignore') {
      out += ' (' + $schemaValue + ' && !' + $format + ' ';
      if ($allowUnknown) {
        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
      }
      out += ') || ';
    }
    out +=
      ' (' + $format + ' && ' + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
    if (it.async) {
      out += ' (async' + $lvl + ' ? await ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
    } else {
      out += ' ' + $format + '(' + $data + ') ';
    }
    out += ' : ' + $format + '.test(' + $data + '))))) {';
  } else {
    var $format = it.formats[$schema];
    if (!$format) {
      if ($unknownFormats == 'ignore') {
        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
        if ($breakOnError) {
          out += ' if (true) { ';
        }
        return out;
      } else {
        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
      }
    }
    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
    var $formatType = ($isObject && $format.type) || 'string';
    if ($isObject) {
      var $async = $format.async === true;
      $format = $format.validate;
    }
    if ($formatType != $ruleType) {
      if ($breakOnError) {
        out += ' if (true) { ';
      }
      return out;
    }
    if ($async) {
      if (!it.async) throw new Error('async format in sync schema');
      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
      out += ' if (!(await ' + $formatRef + '(' + $data + '))) { ';
    } else {
      out += ' if (! ';
      var $formatRef = 'formats' + it.util.getProperty($schema);
      if ($isObject) $formatRef += '.validate';
      if (typeof $format == 'function') {
        out += ' ' + $formatRef + '(' + $data + ') ';
      } else {
        out += ' ' + $formatRef + '.test(' + $data + ') ';
      }
      out += ') { ';
    }
  }
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'format' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { format:  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match format "';
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var _if = function generate_if(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $thenSch = it.schema['then'],
    $elseSch = it.schema['else'],
    $thenPresent =
      $thenSch !== undefined &&
      (it.opts.strictKeywords
        ? typeof $thenSch == 'object' && Object.keys($thenSch).length > 0
        : it.util.schemaHasRules($thenSch, it.RULES.all)),
    $elsePresent =
      $elseSch !== undefined &&
      (it.opts.strictKeywords
        ? typeof $elseSch == 'object' && Object.keys($elseSch).length > 0
        : it.util.schemaHasRules($elseSch, it.RULES.all)),
    $currentBaseId = $it.baseId;
  if ($thenPresent || $elsePresent) {
    var $ifClause;
    $it.createErrors = false;
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors; var ' + $valid + ' = true;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    out += '  ' + it.validate($it) + ' ';
    $it.baseId = $currentBaseId;
    $it.createErrors = true;
    out +=
      '  errors = ' +
      $errs +
      '; if (vErrors !== null) { if (' +
      $errs +
      ') vErrors.length = ' +
      $errs +
      '; else vErrors = null; }  ';
    it.compositeRule = $it.compositeRule = $wasComposite;
    if ($thenPresent) {
      out += ' if (' + $nextValid + ') {  ';
      $it.schema = it.schema['then'];
      $it.schemaPath = it.schemaPath + '.then';
      $it.errSchemaPath = it.errSchemaPath + '/then';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + " = 'then'; ";
      } else {
        $ifClause = "'then'";
      }
      out += ' } ';
      if ($elsePresent) {
        out += ' else { ';
      }
    } else {
      out += ' if (!' + $nextValid + ') { ';
    }
    if ($elsePresent) {
      $it.schema = it.schema['else'];
      $it.schemaPath = it.schemaPath + '.else';
      $it.errSchemaPath = it.errSchemaPath + '/else';
      out += '  ' + it.validate($it) + ' ';
      $it.baseId = $currentBaseId;
      out += ' ' + $valid + ' = ' + $nextValid + '; ';
      if ($thenPresent && $elsePresent) {
        $ifClause = 'ifClause' + $lvl;
        out += ' var ' + $ifClause + " = 'else'; ";
      } else {
        $ifClause = "'else'";
      }
      out += ' } ';
    }
    out += ' if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'if' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: { failingKeyword: ' +
        $ifClause +
        ' } ';
      if (it.opts.messages !== false) {
        out += " , message: 'should match \"' + " + $ifClause + " + '\" schema' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    out += ' }   ';
    if ($breakOnError) {
      out += ' else { ';
    }
    out = it.util.cleanUpCode(out);
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

var items = function generate_items(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $idx = 'i' + $lvl,
    $dataNxt = ($it.dataLevel = it.dataLevel + 1),
    $nextData = 'data' + $dataNxt,
    $currentBaseId = it.baseId;
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if (Array.isArray($schema)) {
    var $additionalItems = it.schema.additionalItems;
    if ($additionalItems === false) {
      out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';
      out += '  if (!' + $valid + ') {   ';
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = ''; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out +=
          " { keyword: '" +
          'additionalItems' +
          "' , dataPath: (dataPath || '') + " +
          it.errorPath +
          ' , schemaPath: ' +
          it.util.toQuotedString($errSchemaPath) +
          ' , params: { limit: ' +
          $schema.length +
          ' } ';
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT have more than " + $schema.length + " items' ";
        }
        if (it.opts.verbose) {
          out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError([' + __err + ']); ';
        } else {
          out += ' validate.errors = [' + __err + ']; return false; ';
        }
      } else {
        out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      }
      out += ' } ';
      $errSchemaPath = $currErrSchemaPath;
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
    var arr1 = $schema;
    if (arr1) {
      var $sch,
        $i = -1,
        l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[($i += 1)];
        if (
          it.opts.strictKeywords
            ? typeof $sch == 'object' && Object.keys($sch).length > 0
            : it.util.schemaHasRules($sch, it.RULES.all)
        ) {
          out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataNxt] = $i;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
    if (
      typeof $additionalItems == 'object' &&
      (it.opts.strictKeywords
        ? typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0
        : it.util.schemaHasRules($additionalItems, it.RULES.all))
    ) {
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
      out +=
        ' ' +
        $nextValid +
        ' = true; if (' +
        $data +
        '.length > ' +
        $schema.length +
        ') {  for (var ' +
        $idx +
        ' = ' +
        $schema.length +
        '; ' +
        $idx +
        ' < ' +
        $data +
        '.length; ' +
        $idx +
        '++) { ';
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $idx + ']';
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
      } else {
        out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
      }
      if ($breakOnError) {
        out += ' if (!' + $nextValid + ') break; ';
      }
      out += ' } }  ';
      if ($breakOnError) {
        out += ' if (' + $nextValid + ') { ';
        $closingBraces += '}';
      }
    }
  } else if (
    it.opts.strictKeywords
      ? typeof $schema == 'object' && Object.keys($schema).length > 0
      : it.util.schemaHasRules($schema, it.RULES.all)
  ) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
    var $passData = $data + '[' + $idx + ']';
    $it.dataPathArr[$dataNxt] = $idx;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    if ($breakOnError) {
      out += ' if (!' + $nextValid + ') break; ';
    }
    out += ' }';
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var _limit = function generate__limit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $isMax = $keyword == 'maximum',
    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
    $schemaExcl = it.schema[$exclusiveKeyword],
    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
    $op = $isMax ? '<' : '>',
    $notOp = $isMax ? '>' : '<',
    $errorKeyword = undefined;
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
      $exclusive = 'exclusive' + $lvl,
      $exclType = 'exclType' + $lvl,
      $exclIsNumber = 'exclIsNumber' + $lvl,
      $opExpr = 'op' + $lvl,
      $opStr = "' + " + $opExpr + " + '";
    out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out +=
      ' var ' +
      $exclusive +
      '; var ' +
      $exclType +
      ' = typeof ' +
      $schemaValueExcl +
      '; if (' +
      $exclType +
      " != 'boolean' && " +
      $exclType +
      " != 'undefined' && " +
      $exclType +
      " != 'number') { ";
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        ($errorKeyword || '_exclusiveLimit') +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: {} ';
      if (it.opts.messages !== false) {
        out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } else if ( ';
    if ($isData) {
      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
    }
    out +=
      ' ' +
      $exclType +
      " == 'number' ? ( (" +
      $exclusive +
      ' = ' +
      $schemaValue +
      ' === undefined || ' +
      $schemaValueExcl +
      ' ' +
      $op +
      '= ' +
      $schemaValue +
      ') ? ' +
      $data +
      ' ' +
      $notOp +
      '= ' +
      $schemaValueExcl +
      ' : ' +
      $data +
      ' ' +
      $notOp +
      ' ' +
      $schemaValue +
      ' ) : ( (' +
      $exclusive +
      ' = ' +
      $schemaValueExcl +
      ' === true) ? ' +
      $data +
      ' ' +
      $notOp +
      '= ' +
      $schemaValue +
      ' : ' +
      $data +
      ' ' +
      $notOp +
      ' ' +
      $schemaValue +
      ' ) || ' +
      $data +
      ' !== ' +
      $data +
      ') { var op' +
      $lvl +
      ' = ' +
      $exclusive +
      " ? '" +
      $op +
      "' : '" +
      $op +
      "='; ";
    if ($schema === undefined) {
      $errorKeyword = $exclusiveKeyword;
      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
      $schemaValue = $schemaValueExcl;
      $isData = $isDataExcl;
    }
  } else {
    var $exclIsNumber = typeof $schemaExcl == 'number',
      $opStr = $op;
    if ($exclIsNumber && $isData) {
      var $opExpr = "'" + $opStr + "'";
      out += ' if ( ';
      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
      }
      out +=
        ' ( ' +
        $schemaValue +
        ' === undefined || ' +
        $schemaExcl +
        ' ' +
        $op +
        '= ' +
        $schemaValue +
        ' ? ' +
        $data +
        ' ' +
        $notOp +
        '= ' +
        $schemaExcl +
        ' : ' +
        $data +
        ' ' +
        $notOp +
        ' ' +
        $schemaValue +
        ' ) || ' +
        $data +
        ' !== ' +
        $data +
        ') { ';
    } else {
      if ($exclIsNumber && $schema === undefined) {
        $exclusive = true;
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
        $schemaValue = $schemaExcl;
        $notOp += '=';
      } else {
        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
          $notOp += '=';
        } else {
          $exclusive = false;
          $opStr += '=';
        }
      }
      var $opExpr = "'" + $opStr + "'";
      out += ' if ( ';
      if ($isData) {
        out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
      }
      out += ' ' + $data + ' ' + $notOp + ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') { ';
    }
  }
  $errorKeyword = $errorKeyword || $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      ($errorKeyword || '_limit') +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { comparison: ' +
      $opExpr +
      ', limit: ' +
      $schemaValue +
      ', exclusive: ' +
      $exclusive +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should be " + $opStr + ' ';
      if ($isData) {
        out += "' + " + $schemaValue;
      } else {
        out += '' + $schemaValue + "'";
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += ' } ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxItems' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
  }
  out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      ($errorKeyword || '_limitItems') +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { limit: ' +
      $schemaValue +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT have ";
      if ($keyword == 'maxItems') {
        out += 'more';
      } else {
        out += 'fewer';
      }
      out += ' than ';
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += '' + $schema;
      }
      out += " items' ";
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxLength' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
  }
  if (it.opts.unicode === false) {
    out += ' ' + $data + '.length ';
  } else {
    out += ' ucs2length(' + $data + ') ';
  }
  out += ' ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      ($errorKeyword || '_limitLength') +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { limit: ' +
      $schemaValue +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT be ";
      if ($keyword == 'maxLength') {
        out += 'longer';
      } else {
        out += 'shorter';
      }
      out += ' than ';
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += '' + $schema;
      }
      out += " characters' ";
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $op = $keyword == 'maxProperties' ? '>' : '<';
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'number') || ";
  }
  out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      ($errorKeyword || '_limitProperties') +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { limit: ' +
      $schemaValue +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should NOT have ";
      if ($keyword == 'maxProperties') {
        out += 'more';
      } else {
        out += 'fewer';
      }
      out += ' than ';
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += '' + $schema;
      }
      out += " properties' ";
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  out += 'var division' + $lvl + ';if (';
  if ($isData) {
    out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + " != 'number' || ";
  }
  out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';
  if (it.opts.multipleOfPrecision) {
    out +=
      ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
  } else {
    out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
  }
  out += ' ) ';
  if ($isData) {
    out += '  )  ';
  }
  out += ' ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'multipleOf' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { multipleOf: ' +
      $schemaValue +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should be multiple of ";
      if ($isData) {
        out += "' + " + $schemaValue;
      } else {
        out += '' + $schemaValue + "'";
      }
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + $schema;
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var not = function generate_not(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  if (
    it.opts.strictKeywords
      ? typeof $schema == 'object' && Object.keys($schema).length > 0
      : it.util.schemaHasRules($schema, it.RULES.all)
  ) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    out += ' var ' + $errs + ' = errors;  ';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    $it.createErrors = false;
    var $allErrorsOption;
    if ($it.opts.allErrors) {
      $allErrorsOption = $it.opts.allErrors;
      $it.opts.allErrors = false;
    }
    out += ' ' + it.validate($it) + ' ';
    $it.createErrors = true;
    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' if (' + $nextValid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'not' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: {} ';
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be valid' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out +=
      ' } else {  errors = ' +
      $errs +
      '; if (vErrors !== null) { if (' +
      $errs +
      ') vErrors.length = ' +
      $errs +
      '; else vErrors = null; } ';
    if (it.opts.allErrors) {
      out += ' } ';
    }
  } else {
    out += '  var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'not' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: {} ';
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be valid' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if ($breakOnError) {
      out += ' if (false) { ';
    }
  }
  return out;
};

var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $currentBaseId = $it.baseId,
    $prevValid = 'prevValid' + $lvl,
    $passingSchemas = 'passingSchemas' + $lvl;
  out +=
    'var ' +
    $errs +
    ' = errors , ' +
    $prevValid +
    ' = false , ' +
    $valid +
    ' = false , ' +
    $passingSchemas +
    ' = null; ';
  var $wasComposite = it.compositeRule;
  it.compositeRule = $it.compositeRule = true;
  var arr1 = $schema;
  if (arr1) {
    var $sch,
      $i = -1,
      l1 = arr1.length - 1;
    while ($i < l1) {
      $sch = arr1[($i += 1)];
      if (
        it.opts.strictKeywords
          ? typeof $sch == 'object' && Object.keys($sch).length > 0
          : it.util.schemaHasRules($sch, it.RULES.all)
      ) {
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + '[' + $i + ']';
        $it.errSchemaPath = $errSchemaPath + '/' + $i;
        out += '  ' + it.validate($it) + ' ';
        $it.baseId = $currentBaseId;
      } else {
        out += ' var ' + $nextValid + ' = true; ';
      }
      if ($i) {
        out +=
          ' if (' +
          $nextValid +
          ' && ' +
          $prevValid +
          ') { ' +
          $valid +
          ' = false; ' +
          $passingSchemas +
          ' = [' +
          $passingSchemas +
          ', ' +
          $i +
          ']; } else { ';
        $closingBraces += '}';
      }
      out +=
        ' if (' +
        $nextValid +
        ') { ' +
        $valid +
        ' = ' +
        $prevValid +
        ' = true; ' +
        $passingSchemas +
        ' = ' +
        $i +
        '; }';
    }
  }
  it.compositeRule = $it.compositeRule = $wasComposite;
  out += '' + $closingBraces + 'if (!' + $valid + ') {   var err =   '; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'oneOf' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { passingSchemas: ' +
      $passingSchemas +
      ' } ';
    if (it.opts.messages !== false) {
      out += " , message: 'should match exactly one schema in oneOf' ";
    }
    if (it.opts.verbose) {
      out +=
        ' , schema: validate.schema' +
        $schemaPath +
        ' , parentSchema: validate.schema' +
        it.schemaPath +
        ' , data: ' +
        $data +
        ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError(vErrors); ';
    } else {
      out += ' validate.errors = vErrors; return false; ';
    }
  }
  out +=
    '} else {  errors = ' +
    $errs +
    '; if (vErrors !== null) { if (' +
    $errs +
    ') vErrors.length = ' +
    $errs +
    '; else vErrors = null; }';
  if (it.opts.allErrors) {
    out += ' } ';
  }
  return out;
};

var pattern = function generate_pattern(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
  out += 'if ( ';
  if ($isData) {
    out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + " != 'string') || ";
  }
  out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out +=
      " { keyword: '" +
      'pattern' +
      "' , dataPath: (dataPath || '') + " +
      it.errorPath +
      ' , schemaPath: ' +
      it.util.toQuotedString($errSchemaPath) +
      ' , params: { pattern:  ';
    if ($isData) {
      out += '' + $schemaValue;
    } else {
      out += '' + it.util.toQuotedString($schema);
    }
    out += '  } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should match pattern "';
      if ($isData) {
        out += "' + " + $schemaValue + " + '";
      } else {
        out += '' + it.util.escapeQuotes($schema);
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + $schemaPath;
      } else {
        out += '' + it.util.toQuotedString($schema);
      }
      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + __err + ']); ';
    } else {
      out += ' validate.errors = [' + __err + ']; return false; ';
    }
  } else {
    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '} ';
  if ($breakOnError) {
    out += ' else { ';
  }
  return out;
};

var properties = function generate_properties(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $key = 'key' + $lvl,
    $idx = 'idx' + $lvl,
    $dataNxt = ($it.dataLevel = it.dataLevel + 1),
    $nextData = 'data' + $dataNxt,
    $dataProperties = 'dataProperties' + $lvl;
  var $schemaKeys = Object.keys($schema || {}),
    $pProperties = it.schema.patternProperties || {},
    $pPropertyKeys = Object.keys($pProperties),
    $aProperties = it.schema.additionalProperties,
    $someProperties = $schemaKeys.length || $pPropertyKeys.length,
    $noAdditional = $aProperties === false,
    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
    $removeAdditional = it.opts.removeAdditional,
    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
    $ownProperties = it.opts.ownProperties,
    $currentBaseId = it.baseId;
  var $required = it.schema.required;
  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired)
    var $requiredHash = it.util.toHash($required);
  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';
  if ($ownProperties) {
    out += ' var ' + $dataProperties + ' = undefined;';
  }
  if ($checkAdditional) {
    if ($ownProperties) {
      out +=
        ' ' +
        $dataProperties +
        ' = ' +
        $dataProperties +
        ' || Object.keys(' +
        $data +
        '); for (var ' +
        $idx +
        '=0; ' +
        $idx +
        '<' +
        $dataProperties +
        '.length; ' +
        $idx +
        '++) { var ' +
        $key +
        ' = ' +
        $dataProperties +
        '[' +
        $idx +
        ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }
    if ($someProperties) {
      out += ' var isAdditional' + $lvl + ' = !(false ';
      if ($schemaKeys.length) {
        if ($schemaKeys.length > 8) {
          out += ' || validate.schema' + $schemaPath + '.hasOwnProperty(' + $key + ') ';
        } else {
          var arr1 = $schemaKeys;
          if (arr1) {
            var $propertyKey,
              i1 = -1,
              l1 = arr1.length - 1;
            while (i1 < l1) {
              $propertyKey = arr1[(i1 += 1)];
              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
            }
          }
        }
      }
      if ($pPropertyKeys.length) {
        var arr2 = $pPropertyKeys;
        if (arr2) {
          var $pProperty,
            $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $pProperty = arr2[($i += 1)];
            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
          }
        }
      }
      out += ' ); if (isAdditional' + $lvl + ') { ';
    }
    if ($removeAdditional == 'all') {
      out += ' delete ' + $data + '[' + $key + ']; ';
    } else {
      var $currentErrorPath = it.errorPath;
      var $additionalProperty = "' + " + $key + " + '";
      if (it.opts._errorDataPathProperty) {
        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
      }
      if ($noAdditional) {
        if ($removeAdditional) {
          out += ' delete ' + $data + '[' + $key + ']; ';
        } else {
          out += ' ' + $nextValid + ' = false; ';
          var $currErrSchemaPath = $errSchemaPath;
          $errSchemaPath = it.errSchemaPath + '/additionalProperties';
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = ''; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              'additionalProperties' +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              ' , schemaPath: ' +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { additionalProperty: '" +
              $additionalProperty +
              "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += 'is an invalid additional property';
              } else {
                out += 'should NOT have additional properties';
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            /* istanbul ignore if */
            if (it.async) {
              out += ' throw new ValidationError([' + __err + ']); ';
            } else {
              out += ' validate.errors = [' + __err + ']; return false; ';
            }
          } else {
            out +=
              ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
          }
          $errSchemaPath = $currErrSchemaPath;
          if ($breakOnError) {
            out += ' break; ';
          }
        }
      } else if ($additionalIsSchema) {
        if ($removeAdditional == 'failing') {
          out += ' var ' + $errs + ' = errors;  ';
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty
            ? it.errorPath
            : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          out +=
            ' if (!' +
            $nextValid +
            ') { errors = ' +
            $errs +
            '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' +
            $data +
            '[' +
            $key +
            ']; }  ';
          it.compositeRule = $it.compositeRule = $wasComposite;
        } else {
          $it.schema = $aProperties;
          $it.schemaPath = it.schemaPath + '.additionalProperties';
          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
          $it.errorPath = it.opts._errorDataPathProperty
            ? it.errorPath
            : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
        }
      }
      it.errorPath = $currentErrorPath;
    }
    if ($someProperties) {
      out += ' } ';
    }
    out += ' }  ';
    if ($breakOnError) {
      out += ' if (' + $nextValid + ') { ';
      $closingBraces += '}';
    }
  }
  var $useDefaults = it.opts.useDefaults && !it.compositeRule;
  if ($schemaKeys.length) {
    var arr3 = $schemaKeys;
    if (arr3) {
      var $propertyKey,
        i3 = -1,
        l3 = arr3.length - 1;
      while (i3 < l3) {
        $propertyKey = arr3[(i3 += 1)];
        var $sch = $schema[$propertyKey];
        if (
          it.opts.strictKeywords
            ? typeof $sch == 'object' && Object.keys($sch).length > 0
            : it.util.schemaHasRules($sch, it.RULES.all)
        ) {
          var $prop = it.util.getProperty($propertyKey),
            $passData = $data + $prop,
            $hasDefault = $useDefaults && $sch.default !== undefined;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + $prop;
          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            $code = it.util.varReplace($code, $nextData, $passData);
            var $useData = $passData;
          } else {
            var $useData = $nextData;
            out += ' var ' + $nextData + ' = ' + $passData + '; ';
          }
          if ($hasDefault) {
            out += ' ' + $code + ' ';
          } else {
            if ($requiredHash && $requiredHash[$propertyKey]) {
              out += ' if ( ' + $useData + ' === undefined ';
              if ($ownProperties) {
                out +=
                  ' || ! Object.prototype.hasOwnProperty.call(' +
                  $data +
                  ", '" +
                  it.util.escapeQuotes($propertyKey) +
                  "') ";
              }
              out += ') { ' + $nextValid + ' = false; ';
              var $currentErrorPath = it.errorPath,
                $currErrSchemaPath = $errSchemaPath,
                $missingProperty = it.util.escapeQuotes($propertyKey);
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              $errSchemaPath = it.errSchemaPath + '/required';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out +=
                  " { keyword: '" +
                  'required' +
                  "' , dataPath: (dataPath || '') + " +
                  it.errorPath +
                  ' , schemaPath: ' +
                  it.util.toQuotedString($errSchemaPath) +
                  " , params: { missingProperty: '" +
                  $missingProperty +
                  "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += 'is a required property';
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out +=
                    ' , schema: validate.schema' +
                    $schemaPath +
                    ' , parentSchema: validate.schema' +
                    it.schemaPath +
                    ' , data: ' +
                    $data +
                    ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + __err + ']); ';
                } else {
                  out += ' validate.errors = [' + __err + ']; return false; ';
                }
              } else {
                out +=
                  ' var err = ' +
                  __err +
                  ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              $errSchemaPath = $currErrSchemaPath;
              it.errorPath = $currentErrorPath;
              out += ' } else { ';
            } else {
              if ($breakOnError) {
                out += ' if ( ' + $useData + ' === undefined ';
                if ($ownProperties) {
                  out +=
                    ' || ! Object.prototype.hasOwnProperty.call(' +
                    $data +
                    ", '" +
                    it.util.escapeQuotes($propertyKey) +
                    "') ";
                }
                out += ') { ' + $nextValid + ' = true; } else { ';
              } else {
                out += ' if (' + $useData + ' !== undefined ';
                if ($ownProperties) {
                  out +=
                    ' &&   Object.prototype.hasOwnProperty.call(' +
                    $data +
                    ", '" +
                    it.util.escapeQuotes($propertyKey) +
                    "') ";
                }
                out += ' ) { ';
              }
            }
            out += ' ' + $code + ' } ';
          }
        }
        if ($breakOnError) {
          out += ' if (' + $nextValid + ') { ';
          $closingBraces += '}';
        }
      }
    }
  }
  if ($pPropertyKeys.length) {
    var arr4 = $pPropertyKeys;
    if (arr4) {
      var $pProperty,
        i4 = -1,
        l4 = arr4.length - 1;
      while (i4 < l4) {
        $pProperty = arr4[(i4 += 1)];
        var $sch = $pProperties[$pProperty];
        if (
          it.opts.strictKeywords
            ? typeof $sch == 'object' && Object.keys($sch).length > 0
            : it.util.schemaHasRules($sch, it.RULES.all)
        ) {
          $it.schema = $sch;
          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
          if ($ownProperties) {
            out +=
              ' ' +
              $dataProperties +
              ' = ' +
              $dataProperties +
              ' || Object.keys(' +
              $data +
              '); for (var ' +
              $idx +
              '=0; ' +
              $idx +
              '<' +
              $dataProperties +
              '.length; ' +
              $idx +
              '++) { var ' +
              $key +
              ' = ' +
              $dataProperties +
              '[' +
              $idx +
              ']; ';
          } else {
            out += ' for (var ' + $key + ' in ' + $data + ') { ';
          }
          out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
          var $passData = $data + '[' + $key + ']';
          $it.dataPathArr[$dataNxt] = $key;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
          } else {
            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
          }
          if ($breakOnError) {
            out += ' if (!' + $nextValid + ') break; ';
          }
          out += ' } ';
          if ($breakOnError) {
            out += ' else ' + $nextValid + ' = true; ';
          }
          out += ' }  ';
          if ($breakOnError) {
            out += ' if (' + $nextValid + ') { ';
            $closingBraces += '}';
          }
        }
      }
    }
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  out += 'var ' + $errs + ' = errors;';
  if (
    it.opts.strictKeywords
      ? typeof $schema == 'object' && Object.keys($schema).length > 0
      : it.util.schemaHasRules($schema, it.RULES.all)
  ) {
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
    var $key = 'key' + $lvl,
      $idx = 'idx' + $lvl,
      $i = 'i' + $lvl,
      $invalidName = "' + " + $key + " + '",
      $dataNxt = ($it.dataLevel = it.dataLevel + 1),
      $nextData = 'data' + $dataNxt,
      $dataProperties = 'dataProperties' + $lvl,
      $ownProperties = it.opts.ownProperties,
      $currentBaseId = it.baseId;
    if ($ownProperties) {
      out += ' var ' + $dataProperties + ' = undefined; ';
    }
    if ($ownProperties) {
      out +=
        ' ' +
        $dataProperties +
        ' = ' +
        $dataProperties +
        ' || Object.keys(' +
        $data +
        '); for (var ' +
        $idx +
        '=0; ' +
        $idx +
        '<' +
        $dataProperties +
        '.length; ' +
        $idx +
        '++) { var ' +
        $key +
        ' = ' +
        $dataProperties +
        '[' +
        $idx +
        ']; ';
    } else {
      out += ' for (var ' + $key + ' in ' + $data + ') { ';
    }
    out += ' var startErrs' + $lvl + ' = errors; ';
    var $passData = $key;
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it);
    $it.baseId = $currentBaseId;
    if (it.util.varOccurences($code, $nextData) < 2) {
      out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
    } else {
      out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out +=
      ' if (!' +
      $nextValid +
      ') { for (var ' +
      $i +
      '=startErrs' +
      $lvl +
      '; ' +
      $i +
      '<errors; ' +
      $i +
      '++) { vErrors[' +
      $i +
      '].propertyName = ' +
      $key +
      '; }   var err =   '; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'propertyNames' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        " , params: { propertyName: '" +
        $invalidName +
        "' } ";
      if (it.opts.messages !== false) {
        out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError(vErrors); ';
      } else {
        out += ' validate.errors = vErrors; return false; ';
      }
    }
    if ($breakOnError) {
      out += ' break; ';
    }
    out += ' } }';
  }
  if ($breakOnError) {
    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
  }
  out = it.util.cleanUpCode(out);
  return out;
};

var required = function generate_required(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
  }
  var $vSchema = 'schema' + $lvl;
  if (!$isData) {
    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
      var $required = [];
      var arr1 = $schema;
      if (arr1) {
        var $property,
          i1 = -1,
          l1 = arr1.length - 1;
        while (i1 < l1) {
          $property = arr1[(i1 += 1)];
          var $propertySch = it.schema.properties[$property];
          if (
            !(
              $propertySch &&
              (it.opts.strictKeywords
                ? typeof $propertySch == 'object' && Object.keys($propertySch).length > 0
                : it.util.schemaHasRules($propertySch, it.RULES.all))
            )
          ) {
            $required[$required.length] = $property;
          }
        }
      }
    } else {
      var $required = $schema;
    }
  }
  if ($isData || $required.length) {
    var $currentErrorPath = it.errorPath,
      $loopRequired = $isData || $required.length >= it.opts.loopRequired,
      $ownProperties = it.opts.ownProperties;
    if ($breakOnError) {
      out += ' var missing' + $lvl + '; ';
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        out += ' var ' + $valid + ' = true; ';
        if ($isData) {
          out +=
            ' if (schema' +
            $lvl +
            ' === undefined) ' +
            $valid +
            ' = true; else if (!Array.isArray(schema' +
            $lvl +
            ')) ' +
            $valid +
            ' = false; else {';
        }
        out +=
          ' for (var ' +
          $i +
          ' = 0; ' +
          $i +
          ' < ' +
          $vSchema +
          '.length; ' +
          $i +
          '++) { ' +
          $valid +
          ' = ' +
          $data +
          '[' +
          $vSchema +
          '[' +
          $i +
          ']] !== undefined ';
        if ($ownProperties) {
          out += ' &&   Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }
        out += '; if (!' + $valid + ') break; } ';
        if ($isData) {
          out += '  }  ';
        }
        out += '  if (!' + $valid + ') {   ';
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            'required' +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { missingProperty: '" +
            $missingProperty +
            "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      } else {
        out += ' if ( ';
        var arr2 = $required;
        if (arr2) {
          var $propertyKey,
            $i = -1,
            l2 = arr2.length - 1;
          while ($i < l2) {
            $propertyKey = arr2[($i += 1)];
            if ($i) {
              out += ' || ';
            }
            var $prop = it.util.getProperty($propertyKey),
              $useData = $data + $prop;
            out += ' ( ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out +=
                ' || ! Object.prototype.hasOwnProperty.call(' +
                $data +
                ", '" +
                it.util.escapeQuotes($propertyKey) +
                "') ";
            }
            out +=
              ') && (missing' +
              $lvl +
              ' = ' +
              it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) +
              ') ) ';
          }
        }
        out += ') {  ';
        var $propertyPath = 'missing' + $lvl,
          $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.opts.jsonPointers
            ? it.util.getPathExpr($currentErrorPath, $propertyPath, true)
            : $currentErrorPath + ' + ' + $propertyPath;
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = ''; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            'required' +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { missingProperty: '" +
            $missingProperty +
            "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          /* istanbul ignore if */
          if (it.async) {
            out += ' throw new ValidationError([' + __err + ']); ';
          } else {
            out += ' validate.errors = [' + __err + ']; return false; ';
          }
        } else {
          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
        }
        out += ' } else { ';
      }
    } else {
      if ($loopRequired) {
        if (!$isData) {
          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
        }
        var $i = 'i' + $lvl,
          $propertyPath = 'schema' + $lvl + '[' + $i + ']',
          $missingProperty = "' + " + $propertyPath + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
        }
        if ($isData) {
          out +=
            ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   '; /* istanbul ignore else */
          if (it.createErrors !== false) {
            out +=
              " { keyword: '" +
              'required' +
              "' , dataPath: (dataPath || '') + " +
              it.errorPath +
              ' , schemaPath: ' +
              it.util.toQuotedString($errSchemaPath) +
              " , params: { missingProperty: '" +
              $missingProperty +
              "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += 'is a required property';
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out +=
                ' , schema: validate.schema' +
                $schemaPath +
                ' , parentSchema: validate.schema' +
                it.schemaPath +
                ' , data: ' +
                $data +
                ' ';
            }
            out += ' } ';
          } else {
            out += ' {} ';
          }
          out +=
            ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' +
            $vSchema +
            ' !== undefined) { ';
        }
        out +=
          ' for (var ' +
          $i +
          ' = 0; ' +
          $i +
          ' < ' +
          $vSchema +
          '.length; ' +
          $i +
          '++) { if (' +
          $data +
          '[' +
          $vSchema +
          '[' +
          $i +
          ']] === undefined ';
        if ($ownProperties) {
          out += ' || ! Object.prototype.hasOwnProperty.call(' + $data + ', ' + $vSchema + '[' + $i + ']) ';
        }
        out += ') {  var err =   '; /* istanbul ignore else */
        if (it.createErrors !== false) {
          out +=
            " { keyword: '" +
            'required' +
            "' , dataPath: (dataPath || '') + " +
            it.errorPath +
            ' , schemaPath: ' +
            it.util.toQuotedString($errSchemaPath) +
            " , params: { missingProperty: '" +
            $missingProperty +
            "' } ";
          if (it.opts.messages !== false) {
            out += " , message: '";
            if (it.opts._errorDataPathProperty) {
              out += 'is a required property';
            } else {
              out += "should have required property \\'" + $missingProperty + "\\'";
            }
            out += "' ";
          }
          if (it.opts.verbose) {
            out +=
              ' , schema: validate.schema' +
              $schemaPath +
              ' , parentSchema: validate.schema' +
              it.schemaPath +
              ' , data: ' +
              $data +
              ' ';
          }
          out += ' } ';
        } else {
          out += ' {} ';
        }
        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
        if ($isData) {
          out += '  }  ';
        }
      } else {
        var arr3 = $required;
        if (arr3) {
          var $propertyKey,
            i3 = -1,
            l3 = arr3.length - 1;
          while (i3 < l3) {
            $propertyKey = arr3[(i3 += 1)];
            var $prop = it.util.getProperty($propertyKey),
              $missingProperty = it.util.escapeQuotes($propertyKey),
              $useData = $data + $prop;
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
            }
            out += ' if ( ' + $useData + ' === undefined ';
            if ($ownProperties) {
              out +=
                ' || ! Object.prototype.hasOwnProperty.call(' +
                $data +
                ", '" +
                it.util.escapeQuotes($propertyKey) +
                "') ";
            }
            out += ') {  var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out +=
                " { keyword: '" +
                'required' +
                "' , dataPath: (dataPath || '') + " +
                it.errorPath +
                ' , schemaPath: ' +
                it.util.toQuotedString($errSchemaPath) +
                " , params: { missingProperty: '" +
                $missingProperty +
                "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += 'is a required property';
                } else {
                  out += "should have required property \\'" + $missingProperty + "\\'";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out +=
                  ' , schema: validate.schema' +
                  $schemaPath +
                  ' , parentSchema: validate.schema' +
                  it.schemaPath +
                  ' , data: ' +
                  $data +
                  ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
          }
        }
      }
    }
    it.errorPath = $currentErrorPath;
  } else if ($breakOnError) {
    out += ' if (true) {';
  }
  return out;
};

var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if (($schema || $isData) && it.opts.uniqueItems !== false) {
    if ($isData) {
      out +=
        ' var ' +
        $valid +
        '; if (' +
        $schemaValue +
        ' === false || ' +
        $schemaValue +
        ' === undefined) ' +
        $valid +
        ' = true; else if (typeof ' +
        $schemaValue +
        " != 'boolean') " +
        $valid +
        ' = false; else { ';
    }
    out += ' var i = ' + $data + '.length , ' + $valid + ' = true , j; if (i > 1) { ';
    var $itemType = it.schema.items && it.schema.items.type,
      $typeIsArray = Array.isArray($itemType);
    if (
      !$itemType ||
      $itemType == 'object' ||
      $itemType == 'array' ||
      ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))
    ) {
      out +=
        ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' +
        $data +
        '[i], ' +
        $data +
        '[j])) { ' +
        $valid +
        ' = false; break outer; } } } ';
    } else {
      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + $data + '[i]; ';
      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
      out += ' if (' + it.util[$method]($itemType, 'item', true) + ') continue; ';
      if ($typeIsArray) {
        out += " if (typeof item == 'string') item = '\"' + item; ";
      }
      out +=
        " if (typeof itemIndices[item] == 'number') { " +
        $valid +
        ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
    }
    out += ' } ';
    if ($isData) {
      out += '  }  ';
    }
    out += ' if (!' + $valid + ') {   ';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        'uniqueItems' +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        ' , params: { i: i, j: j } ';
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
      }
      if (it.opts.verbose) {
        out += ' , schema:  ';
        if ($isData) {
          out += 'validate.schema' + $schemaPath;
        } else {
          out += '' + $schema;
        }
        out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  } else {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  }
  return out;
};

//all requires must be explicit because browserify won't work with dynamic requires
var dotjs = {
  $ref: ref,
  allOf: allOf,
  anyOf: anyOf,
  $comment: comment,
  const: _const,
  contains: contains,
  dependencies: dependencies,
  enum: _enum,
  format: format,
  if: _if,
  items: items,
  maximum: _limit,
  minimum: _limit,
  maxItems: _limitItems,
  minItems: _limitItems,
  maxLength: _limitLength,
  minLength: _limitLength,
  maxProperties: _limitProperties,
  minProperties: _limitProperties,
  multipleOf: multipleOf,
  not: not,
  oneOf: oneOf,
  pattern: pattern,
  properties: properties,
  propertyNames: propertyNames,
  required: required,
  uniqueItems: uniqueItems,
  validate: validate$1
};

var toHash$1 = util$1.toHash;

var rules = function rules() {
  var RULES = [
    {
      type: 'number',
      rules: [{ maximum: ['exclusiveMaximum'] }, { minimum: ['exclusiveMinimum'] }, 'multipleOf', 'format']
    },
    { type: 'string', rules: ['maxLength', 'minLength', 'pattern', 'format'] },
    { type: 'array', rules: ['maxItems', 'minItems', 'items', 'contains', 'uniqueItems'] },
    {
      type: 'object',
      rules: [
        'maxProperties',
        'minProperties',
        'required',
        'dependencies',
        'propertyNames',
        { properties: ['additionalProperties', 'patternProperties'] }
      ]
    },
    { rules: ['$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if'] }
  ];

  var ALL = ['type', '$comment'];
  var KEYWORDS = [
    '$schema',
    '$id',
    'id',
    '$data',
    '$async',
    'title',
    'description',
    'default',
    'definitions',
    'examples',
    'readOnly',
    'writeOnly',
    'contentMediaType',
    'contentEncoding',
    'additionalItems',
    'then',
    'else'
  ];
  var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
  RULES.all = toHash$1(ALL);
  RULES.types = toHash$1(TYPES);

  RULES.forEach(function(group) {
    group.rules = group.rules.map(function(keyword) {
      var implKeywords;
      if (typeof keyword == 'object') {
        var key = Object.keys(keyword)[0];
        implKeywords = keyword[key];
        keyword = key;
        implKeywords.forEach(function(k) {
          ALL.push(k);
          RULES.all[k] = true;
        });
      }
      ALL.push(keyword);
      var rule = (RULES.all[keyword] = {
        keyword: keyword,
        code: dotjs[keyword],
        implements: implKeywords
      });
      return rule;
    });

    RULES.all.$comment = {
      keyword: '$comment',
      code: dotjs.$comment
    };

    if (group.type) RULES.types[group.type] = group;
  });

  RULES.keywords = toHash$1(ALL.concat(KEYWORDS));
  RULES.custom = {};

  return RULES;
};

var KEYWORDS = [
  'multipleOf',
  'maximum',
  'exclusiveMaximum',
  'minimum',
  'exclusiveMinimum',
  'maxLength',
  'minLength',
  'pattern',
  'additionalItems',
  'maxItems',
  'minItems',
  'uniqueItems',
  'maxProperties',
  'minProperties',
  'required',
  'additionalProperties',
  'enum',
  'format',
  'const'
];

var data = function(metaSchema, keywordsJsonPointers) {
  for (var i = 0; i < keywordsJsonPointers.length; i++) {
    metaSchema = JSON.parse(JSON.stringify(metaSchema));
    var segments = keywordsJsonPointers[i].split('/');
    var keywords = metaSchema;
    var j;
    for (j = 1; j < segments.length; j++) keywords = keywords[segments[j]];

    for (j = 0; j < KEYWORDS.length; j++) {
      var key = KEYWORDS[j];
      var schema = keywords[key];
      if (schema) {
        keywords[key] = {
          anyOf: [schema, { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }]
        };
      }
    }
  }

  return metaSchema;
};

var MissingRefError$1 = error_classes.MissingRef;

var async$1 = compileAsync;

/**
 * Creates validating function for passed schema with asynchronous loading of missing schemas.
 * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
 * @this  Ajv
 * @param {Object}   schema schema object
 * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
 * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
 * @return {Promise} promise that resolves with a validating function.
 */
function compileAsync(schema, meta, callback) {
  /* eslint no-shadow: 0 */
  /* global Promise */
  /* jshint validthis: true */
  var self = this;
  if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');

  if (typeof meta == 'function') {
    callback = meta;
    meta = undefined;
  }

  var p = loadMetaSchemaOf(schema).then(function() {
    var schemaObj = self._addSchema(schema, undefined, meta);
    return schemaObj.validate || _compileAsync(schemaObj);
  });

  if (callback) {
    p.then(function(v) {
      callback(null, v);
    }, callback);
  }

  return p;

  function loadMetaSchemaOf(sch) {
    var $schema = sch.$schema;
    return $schema && !self.getSchema($schema) ? compileAsync.call(self, { $ref: $schema }, true) : Promise.resolve();
  }

  function _compileAsync(schemaObj) {
    try {
      return self._compile(schemaObj);
    } catch (e) {
      if (e instanceof MissingRefError$1) return loadMissingSchema(e);
      throw e;
    }

    function loadMissingSchema(e) {
      var ref = e.missingSchema;
      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

      var schemaPromise = self._loadingSchemas[ref];
      if (!schemaPromise) {
        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
        schemaPromise.then(removePromise, removePromise);
      }

      return schemaPromise
        .then(function(sch) {
          if (!added(ref)) {
            return loadMetaSchemaOf(sch).then(function() {
              if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
            });
          }
        })
        .then(function() {
          return _compileAsync(schemaObj);
        });

      function removePromise() {
        delete self._loadingSchemas[ref];
      }

      function added(ref) {
        return self._refs[ref] || self._schemas[ref];
      }
    }
  }
}

var custom = function generate_custom(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  var $rule = this,
    $definition = 'definition' + $lvl,
    $rDef = $rule.definition,
    $closingBraces = '';
  var $compile, $inline, $macro, $ruleValidate, $validateCode;
  if ($isData && $rDef.$data) {
    $validateCode = 'keywordValidate' + $lvl;
    var $validateSchema = $rDef.validateSchema;
    out +=
      ' var ' +
      $definition +
      " = RULES.custom['" +
      $keyword +
      "'].definition; var " +
      $validateCode +
      ' = ' +
      $definition +
      '.validate;';
  } else {
    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
    if (!$ruleValidate) return;
    $schemaValue = 'validate.schema' + $schemaPath;
    $validateCode = $ruleValidate.code;
    $compile = $rDef.compile;
    $inline = $rDef.inline;
    $macro = $rDef.macro;
  }
  var $ruleErrs = $validateCode + '.errors',
    $i = 'i' + $lvl,
    $ruleErr = 'ruleErr' + $lvl,
    $asyncKeyword = $rDef.async;
  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
  if (!($inline || $macro)) {
    out += '' + $ruleErrs + ' = null;';
  }
  out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
  if ($isData && $rDef.$data) {
    $closingBraces += '}';
    out += ' if (' + $schemaValue + ' === undefined) { ' + $valid + ' = true; } else { ';
    if ($validateSchema) {
      $closingBraces += '}';
      out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') { ';
    }
  }
  if ($inline) {
    if ($rDef.statements) {
      out += ' ' + $ruleValidate.validate + ' ';
    } else {
      out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
    }
  } else if ($macro) {
    var $it = it.util.copy(it);
    var $closingBraces = '';
    $it.level++;
    var $nextValid = 'valid' + $it.level;
    $it.schema = $ruleValidate.validate;
    $it.schemaPath = '';
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += ' ' + $code;
  } else {
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    out += '  ' + $validateCode + '.call( ';
    if (it.opts.passContext) {
      out += 'this';
    } else {
      out += 'self';
    }
    if ($compile || $rDef.schema === false) {
      out += ' , ' + $data + ' ';
    } else {
      out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
    }
    out += " , (dataPath || '')";
    if (it.errorPath != '""') {
      out += ' + ' + it.errorPath;
    }
    var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
    out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
    var def_callRuleValidate = out;
    out = $$outStack.pop();
    if ($rDef.errors === false) {
      out += ' ' + $valid + ' = ';
      if ($asyncKeyword) {
        out += 'await ';
      }
      out += '' + def_callRuleValidate + '; ';
    } else {
      if ($asyncKeyword) {
        $ruleErrs = 'customErrors' + $lvl;
        out +=
          ' var ' +
          $ruleErrs +
          ' = null; try { ' +
          $valid +
          ' = await ' +
          def_callRuleValidate +
          '; } catch (e) { ' +
          $valid +
          ' = false; if (e instanceof ValidationError) ' +
          $ruleErrs +
          ' = e.errors; else throw e; } ';
      } else {
        out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
      }
    }
  }
  if ($rDef.modifying) {
    out += ' if (' + $parentData + ') ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
  }
  out += '' + $closingBraces;
  if ($rDef.valid) {
    if ($breakOnError) {
      out += ' if (true) { ';
    }
  } else {
    out += ' if ( ';
    if ($rDef.valid === undefined) {
      out += ' !';
      if ($macro) {
        out += '' + $nextValid;
      } else {
        out += '' + $valid;
      }
    } else {
      out += ' ' + !$rDef.valid + ' ';
    }
    out += ') { ';
    $errorKeyword = $rule.keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out +=
        " { keyword: '" +
        ($errorKeyword || 'custom') +
        "' , dataPath: (dataPath || '') + " +
        it.errorPath +
        ' , schemaPath: ' +
        it.util.toQuotedString($errSchemaPath) +
        " , params: { keyword: '" +
        $rule.keyword +
        "' } ";
      if (it.opts.messages !== false) {
        out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
      }
      if (it.opts.verbose) {
        out +=
          ' , schema: validate.schema' +
          $schemaPath +
          ' , parentSchema: validate.schema' +
          it.schemaPath +
          ' , data: ' +
          $data +
          ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + __err + ']); ';
      } else {
        out += ' validate.errors = [' + __err + ']; return false; ';
      }
    } else {
      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    var def_customError = out;
    out = $$outStack.pop();
    if ($inline) {
      if ($rDef.errors) {
        if ($rDef.errors != 'full') {
          out +=
            '  for (var ' +
            $i +
            '=' +
            $errs +
            '; ' +
            $i +
            '<errors; ' +
            $i +
            '++) { var ' +
            $ruleErr +
            ' = vErrors[' +
            $i +
            ']; if (' +
            $ruleErr +
            '.dataPath === undefined) ' +
            $ruleErr +
            ".dataPath = (dataPath || '') + " +
            it.errorPath +
            '; if (' +
            $ruleErr +
            '.schemaPath === undefined) { ' +
            $ruleErr +
            '.schemaPath = "' +
            $errSchemaPath +
            '"; } ';
          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }
          out += ' } ';
        }
      } else {
        if ($rDef.errors === false) {
          out += ' ' + def_customError + ' ';
        } else {
          out +=
            ' if (' +
            $errs +
            ' == errors) { ' +
            def_customError +
            ' } else {  for (var ' +
            $i +
            '=' +
            $errs +
            '; ' +
            $i +
            '<errors; ' +
            $i +
            '++) { var ' +
            $ruleErr +
            ' = vErrors[' +
            $i +
            ']; if (' +
            $ruleErr +
            '.dataPath === undefined) ' +
            $ruleErr +
            ".dataPath = (dataPath || '') + " +
            it.errorPath +
            '; if (' +
            $ruleErr +
            '.schemaPath === undefined) { ' +
            $ruleErr +
            '.schemaPath = "' +
            $errSchemaPath +
            '"; } ';
          if (it.opts.verbose) {
            out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
          }
          out += ' } } ';
        }
      }
    } else if ($macro) {
      out += '   var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out +=
          " { keyword: '" +
          ($errorKeyword || 'custom') +
          "' , dataPath: (dataPath || '') + " +
          it.errorPath +
          ' , schemaPath: ' +
          it.util.toQuotedString($errSchemaPath) +
          " , params: { keyword: '" +
          $rule.keyword +
          "' } ";
        if (it.opts.messages !== false) {
          out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
        }
        if (it.opts.verbose) {
          out +=
            ' , schema: validate.schema' +
            $schemaPath +
            ' , parentSchema: validate.schema' +
            it.schemaPath +
            ' , data: ' +
            $data +
            ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
      if (!it.compositeRule && $breakOnError) {
        /* istanbul ignore if */
        if (it.async) {
          out += ' throw new ValidationError(vErrors); ';
        } else {
          out += ' validate.errors = vErrors; return false; ';
        }
      }
    } else {
      if ($rDef.errors === false) {
        out += ' ' + def_customError + ' ';
      } else {
        out +=
          ' if (Array.isArray(' +
          $ruleErrs +
          ')) { if (vErrors === null) vErrors = ' +
          $ruleErrs +
          '; else vErrors = vErrors.concat(' +
          $ruleErrs +
          '); errors = vErrors.length;  for (var ' +
          $i +
          '=' +
          $errs +
          '; ' +
          $i +
          '<errors; ' +
          $i +
          '++) { var ' +
          $ruleErr +
          ' = vErrors[' +
          $i +
          ']; if (' +
          $ruleErr +
          '.dataPath === undefined) ' +
          $ruleErr +
          ".dataPath = (dataPath || '') + " +
          it.errorPath +
          ';  ' +
          $ruleErr +
          '.schemaPath = "' +
          $errSchemaPath +
          '";  ';
        if (it.opts.verbose) {
          out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
        }
        out += ' } } else { ' + def_customError + ' } ';
      }
    }
    out += ' } ';
    if ($breakOnError) {
      out += ' else { ';
    }
  }
  return out;
};

var $schema = 'http://json-schema.org/draft-07/schema#';
var $id = 'http://json-schema.org/draft-07/schema#';
var title = 'Core schema meta-schema';
var definitions = {
  schemaArray: {
    type: 'array',
    minItems: 1,
    items: {
      $ref: '#'
    }
  },
  nonNegativeInteger: {
    type: 'integer',
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [
      {
        $ref: '#/definitions/nonNegativeInteger'
      },
      {
        default: 0
      }
    ]
  },
  simpleTypes: {
    enum: ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']
  },
  stringArray: {
    type: 'array',
    items: {
      type: 'string'
    },
    uniqueItems: true,
    default: []
  }
};
var type = ['object', 'boolean'];
var properties$1 = {
  $id: {
    type: 'string',
    format: 'uri-reference'
  },
  $schema: {
    type: 'string',
    format: 'uri'
  },
  $ref: {
    type: 'string',
    format: 'uri-reference'
  },
  $comment: {
    type: 'string'
  },
  title: {
    type: 'string'
  },
  description: {
    type: 'string'
  },
  default: true,
  readOnly: {
    type: 'boolean',
    default: false
  },
  examples: {
    type: 'array',
    items: true
  },
  multipleOf: {
    type: 'number',
    exclusiveMinimum: 0
  },
  maximum: {
    type: 'number'
  },
  exclusiveMaximum: {
    type: 'number'
  },
  minimum: {
    type: 'number'
  },
  exclusiveMinimum: {
    type: 'number'
  },
  maxLength: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minLength: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  pattern: {
    type: 'string',
    format: 'regex'
  },
  additionalItems: {
    $ref: '#'
  },
  items: {
    anyOf: [
      {
        $ref: '#'
      },
      {
        $ref: '#/definitions/schemaArray'
      }
    ],
    default: true
  },
  maxItems: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minItems: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  uniqueItems: {
    type: 'boolean',
    default: false
  },
  contains: {
    $ref: '#'
  },
  maxProperties: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minProperties: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  required: {
    $ref: '#/definitions/stringArray'
  },
  additionalProperties: {
    $ref: '#'
  },
  definitions: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    default: {}
  },
  properties: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    default: {}
  },
  patternProperties: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    propertyNames: {
      format: 'regex'
    },
    default: {}
  },
  dependencies: {
    type: 'object',
    additionalProperties: {
      anyOf: [
        {
          $ref: '#'
        },
        {
          $ref: '#/definitions/stringArray'
        }
      ]
    }
  },
  propertyNames: {
    $ref: '#'
  },
  const: true,
  enum: {
    type: 'array',
    items: true,
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: '#/definitions/simpleTypes'
      },
      {
        type: 'array',
        items: {
          $ref: '#/definitions/simpleTypes'
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: 'string'
  },
  contentMediaType: {
    type: 'string'
  },
  contentEncoding: {
    type: 'string'
  },
  if: {
    $ref: '#'
  },
  then: {
    $ref: '#'
  },
  else: {
    $ref: '#'
  },
  allOf: {
    $ref: '#/definitions/schemaArray'
  },
  anyOf: {
    $ref: '#/definitions/schemaArray'
  },
  oneOf: {
    $ref: '#/definitions/schemaArray'
  },
  not: {
    $ref: '#'
  }
};
var require$$2 = {
  $schema: $schema,
  $id: $id,
  title: title,
  definitions: definitions,
  type: type,
  properties: properties$1,
  default: true
};

var definition_schema = {
  $id: 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js',
  definitions: {
    simpleTypes: require$$2.definitions.simpleTypes
  },
  type: 'object',
  dependencies: {
    schema: ['validate'],
    $data: ['validate'],
    statements: ['inline'],
    valid: { not: { required: ['macro'] } }
  },
  properties: {
    type: require$$2.properties.type,
    schema: { type: 'boolean' },
    statements: { type: 'boolean' },
    dependencies: {
      type: 'array',
      items: { type: 'string' }
    },
    metaSchema: { type: 'object' },
    modifying: { type: 'boolean' },
    valid: { type: 'boolean' },
    $data: { type: 'boolean' },
    async: { type: 'boolean' },
    errors: {
      anyOf: [{ type: 'boolean' }, { const: 'full' }]
    }
  }
};

var IDENTIFIER$1 = /^[a-z_$][a-z0-9_$-]*$/i;

var keyword = {
  add: addKeyword,
  get: getKeyword,
  remove: removeKeyword,
  validate: validateKeyword
};

/**
 * Define custom keyword
 * @this  Ajv
 * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
 * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
 * @return {Ajv} this for method chaining
 */
function addKeyword(keyword, definition) {
  /* jshint validthis: true */
  /* eslint no-shadow: 0 */
  var RULES = this.RULES;
  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');

  if (!IDENTIFIER$1.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');

  if (definition) {
    this.validateKeyword(definition, true);

    var dataType = definition.type;
    if (Array.isArray(dataType)) {
      for (var i = 0; i < dataType.length; i++) _addRule(keyword, dataType[i], definition);
    } else {
      _addRule(keyword, dataType, definition);
    }

    var metaSchema = definition.metaSchema;
    if (metaSchema) {
      if (definition.$data && this._opts.$data) {
        metaSchema = {
          anyOf: [metaSchema, { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }]
        };
      }
      definition.validateSchema = this.compile(metaSchema, true);
    }
  }

  RULES.keywords[keyword] = RULES.all[keyword] = true;

  function _addRule(keyword, dataType, definition) {
    var ruleGroup;
    for (var i = 0; i < RULES.length; i++) {
      var rg = RULES[i];
      if (rg.type == dataType) {
        ruleGroup = rg;
        break;
      }
    }

    if (!ruleGroup) {
      ruleGroup = { type: dataType, rules: [] };
      RULES.push(ruleGroup);
    }

    var rule = {
      keyword: keyword,
      definition: definition,
      custom: true,
      code: custom,
      implements: definition.implements
    };
    ruleGroup.rules.push(rule);
    RULES.custom[keyword] = rule;
  }

  return this;
}

/**
 * Get keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
 */
function getKeyword(keyword) {
  /* jshint validthis: true */
  var rule = this.RULES.custom[keyword];
  return rule ? rule.definition : this.RULES.keywords[keyword] || false;
}

/**
 * Remove keyword
 * @this  Ajv
 * @param {String} keyword pre-defined or custom keyword.
 * @return {Ajv} this for method chaining
 */
function removeKeyword(keyword) {
  /* jshint validthis: true */
  var RULES = this.RULES;
  delete RULES.keywords[keyword];
  delete RULES.all[keyword];
  delete RULES.custom[keyword];
  for (var i = 0; i < RULES.length; i++) {
    var rules = RULES[i].rules;
    for (var j = 0; j < rules.length; j++) {
      if (rules[j].keyword == keyword) {
        rules.splice(j, 1);
        break;
      }
    }
  }
  return this;
}

/**
 * Validate keyword definition
 * @this  Ajv
 * @param {Object} definition keyword definition object.
 * @param {Boolean} throwError true to throw exception if definition is invalid
 * @return {boolean} validation result
 */
function validateKeyword(definition, throwError) {
  validateKeyword.errors = null;
  var v = (this._validateKeyword = this._validateKeyword || this.compile(definition_schema, true));

  if (v(definition)) return true;
  validateKeyword.errors = v.errors;
  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));
  else return false;
}

var $schema$1 = 'http://json-schema.org/draft-07/schema#';
var $id$1 = 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#';
var description = 'Meta-schema for $data reference (JSON Schema extension proposal)';
var type$1 = 'object';
var required$1 = ['$data'];
var properties$2 = {
  $data: {
    type: 'string',
    anyOf: [
      {
        format: 'relative-json-pointer'
      },
      {
        format: 'json-pointer'
      }
    ]
  }
};
var additionalProperties = false;
var require$$1 = {
  $schema: $schema$1,
  $id: $id$1,
  description: description,
  type: type$1,
  required: required$1,
  properties: properties$2,
  additionalProperties: additionalProperties
};

var ajv = Ajv;

Ajv.prototype.validate = validate$2;
Ajv.prototype.compile = compile$1;
Ajv.prototype.addSchema = addSchema;
Ajv.prototype.addMetaSchema = addMetaSchema;
Ajv.prototype.validateSchema = validateSchema;
Ajv.prototype.getSchema = getSchema;
Ajv.prototype.removeSchema = removeSchema;
Ajv.prototype.addFormat = addFormat;
Ajv.prototype.errorsText = errorsText;

Ajv.prototype._addSchema = _addSchema;
Ajv.prototype._compile = _compile;

Ajv.prototype.compileAsync = async$1;

Ajv.prototype.addKeyword = keyword.add;
Ajv.prototype.getKeyword = keyword.get;
Ajv.prototype.removeKeyword = keyword.remove;
Ajv.prototype.validateKeyword = keyword.validate;

Ajv.ValidationError = error_classes.Validation;
Ajv.MissingRefError = error_classes.MissingRef;
Ajv.$dataMetaSchema = data;

var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];
var META_SUPPORT_DATA = ['/properties'];

/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */
function Ajv(opts) {
  if (!(this instanceof Ajv)) return new Ajv(opts);
  opts = this._opts = util$1.copy(opts) || {};
  setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = formats_1(opts.format);

  this._cache = opts.cache || new cache();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = rules();
  this._getId = chooseGetId(opts);

  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = fastJsonStableStringify;
  this._metaOpts = getMetaSchemaOptions(this);

  if (opts.formats) addInitialFormats(this);
  addDefaultMetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  if (opts.nullable) this.addKeyword('nullable', { metaSchema: { type: 'boolean' } });
  addInitialSchemas(this);
}

/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */
function validate$2(schemaKeyRef, data) {
  var v;
  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);
    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}

/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */
function compile$1(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);
  return schemaObj.validate || this._compile(schemaObj);
}

/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */
function addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
    return this;
  }
  var id = this._getId(schema);
  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');
  key = resolve_1.normalizeId(key || id);
  checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}

/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */
function addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}

/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */
function validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }
  var valid = this.validate($schema, schema);
  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);
    else throw new Error(message);
  }
  return valid;
}

function defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta =
    typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
  return self._opts.defaultMeta;
}

/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */
function getSchema(keyRef) {
  var schemaObj = _getSchemaObj(this, keyRef);
  switch (typeof schemaObj) {
    case 'object':
      return schemaObj.validate || this._compile(schemaObj);
    case 'string':
      return this.getSchema(schemaObj);
    case 'undefined':
      return _getSchemaFragment(this, keyRef);
  }
}

function _getSchemaFragment(self, ref) {
  var res = resolve_1.schema.call(self, { schema: {} }, ref);
  if (res) {
    var schema = res.schema,
      root = res.root,
      baseId = res.baseId;
    var v = compile_1.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new schema_obj({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}

function _getSchemaObj(self, keyRef) {
  keyRef = resolve_1.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}

/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */
function removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    _removeAllSchemas(this, this._schemas, schemaKeyRef);
    _removeAllSchemas(this, this._refs, schemaKeyRef);
    return this;
  }
  switch (typeof schemaKeyRef) {
    case 'undefined':
      _removeAllSchemas(this, this._schemas);
      _removeAllSchemas(this, this._refs);
      this._cache.clear();
      return this;
    case 'string':
      var schemaObj = _getSchemaObj(this, schemaKeyRef);
      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;
    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
      this._cache.del(cacheKey);
      var id = this._getId(schemaKeyRef);
      if (id) {
        id = resolve_1.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }
  }
  return this;
}

function _removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];
    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);
      delete schemas[keyRef];
    }
  }
}

/* @this   Ajv */
function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;
  var cached = this._cache.get(cacheKey);
  if (cached) return cached;

  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

  var id = resolve_1.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) checkUnique(this, id);

  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == resolve_1.normalizeId(schema.$schema)))
    this.validateSchema(schema, true);

  var localRefs = resolve_1.ids.call(this, schema);

  var schemaObj = new schema_obj({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });

  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);

  return schemaObj;
}

/* @this   Ajv */
function _compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true) callValidate.$async = true;
    return callValidate;
  }
  schemaObj.compiling = true;

  var currentOpts;
  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;
  try {
    v = compile_1.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;

  /* @this   {*} - custom context, see passContext option */
  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;
    var result = _validate.apply(this, arguments);
    callValidate.errors = _validate.errors;
    return result;
  }
}

function chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto':
      return _get$IdOrId;
    case 'id':
      return _getId;
    default:
      return _get$Id;
  }
}

/* @this   Ajv */
function _getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}

/* @this   Ajv */
function _get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}

function _get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}

/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */
function errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

  var text = '';
  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }
  return text.slice(0, -separator.length);
}

/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */
function addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}

function addDefaultMetaSchema(self) {
  var $dataSchema;
  if (self._opts.$data) {
    $dataSchema = require$$1;
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }
  if (self._opts.meta === false) return;
  var metaSchema = require$$2;
  if (self._opts.$data) metaSchema = data(metaSchema, META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
}

function addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
}

function addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}

function checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
}

function getMetaSchemaOptions(self) {
  var metaOpts = util$1.copy(self._opts);
  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) delete metaOpts[META_IGNORE_OPTIONS[i]];
  return metaOpts;
}

function setLogger(self) {
  var logger = self._opts.logger;
  if (logger === false) {
    self.logger = { log: noop$2, warn: noop$2, error: noop$2 };
  } else {
    if (logger === undefined) logger = console;
    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
      throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}

function noop$2() {}

function HARError(errors) {
  var message = 'validation failed';

  this.name = 'HARError';
  this.message = message;
  this.errors = errors;

  if (typeof Error.captureStackTrace === 'function') {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error(message).stack;
  }
}

HARError.prototype = Error.prototype;

var error = HARError;

var $id$2 = 'afterRequest.json#';
var $schema$2 = 'http://json-schema.org/draft-06/schema#';
var type$2 = 'object';
var optional = true;
var required$2 = ['lastAccess', 'eTag', 'hitCount'];
var properties$3 = {
  expires: {
    type: 'string',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?'
  },
  lastAccess: {
    type: 'string',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?'
  },
  eTag: {
    type: 'string'
  },
  hitCount: {
    type: 'integer'
  },
  comment: {
    type: 'string'
  }
};
var require$$0$1 = {
  $id: $id$2,
  $schema: $schema$2,
  type: type$2,
  optional: optional,
  required: required$2,
  properties: properties$3
};

var $id$3 = 'beforeRequest.json#';
var $schema$3 = 'http://json-schema.org/draft-06/schema#';
var type$3 = 'object';
var optional$1 = true;
var required$3 = ['lastAccess', 'eTag', 'hitCount'];
var properties$4 = {
  expires: {
    type: 'string',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?'
  },
  lastAccess: {
    type: 'string',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))?'
  },
  eTag: {
    type: 'string'
  },
  hitCount: {
    type: 'integer'
  },
  comment: {
    type: 'string'
  }
};
var require$$1$1 = {
  $id: $id$3,
  $schema: $schema$3,
  type: type$3,
  optional: optional$1,
  required: required$3,
  properties: properties$4
};

var $id$4 = 'browser.json#';
var $schema$4 = 'http://json-schema.org/draft-06/schema#';
var type$4 = 'object';
var required$4 = ['name', 'version'];
var properties$5 = {
  name: {
    type: 'string'
  },
  version: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$2$1 = {
  $id: $id$4,
  $schema: $schema$4,
  type: type$4,
  required: required$4,
  properties: properties$5
};

var $id$5 = 'cache.json#';
var $schema$5 = 'http://json-schema.org/draft-06/schema#';
var properties$6 = {
  beforeRequest: {
    oneOf: [
      {
        type: 'null'
      },
      {
        $ref: 'beforeRequest.json#'
      }
    ]
  },
  afterRequest: {
    oneOf: [
      {
        type: 'null'
      },
      {
        $ref: 'afterRequest.json#'
      }
    ]
  },
  comment: {
    type: 'string'
  }
};
var require$$3 = {
  $id: $id$5,
  $schema: $schema$5,
  properties: properties$6
};

var $id$6 = 'content.json#';
var $schema$6 = 'http://json-schema.org/draft-06/schema#';
var type$5 = 'object';
var required$5 = ['size', 'mimeType'];
var properties$7 = {
  size: {
    type: 'integer'
  },
  compression: {
    type: 'integer'
  },
  mimeType: {
    type: 'string'
  },
  text: {
    type: 'string'
  },
  encoding: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$4 = {
  $id: $id$6,
  $schema: $schema$6,
  type: type$5,
  required: required$5,
  properties: properties$7
};

var $id$7 = 'cookie.json#';
var $schema$7 = 'http://json-schema.org/draft-06/schema#';
var type$6 = 'object';
var required$6 = ['name', 'value'];
var properties$8 = {
  name: {
    type: 'string'
  },
  value: {
    type: 'string'
  },
  path: {
    type: 'string'
  },
  domain: {
    type: 'string'
  },
  expires: {
    type: ['string', 'null'],
    format: 'date-time'
  },
  httpOnly: {
    type: 'boolean'
  },
  secure: {
    type: 'boolean'
  },
  comment: {
    type: 'string'
  }
};
var require$$5 = {
  $id: $id$7,
  $schema: $schema$7,
  type: type$6,
  required: required$6,
  properties: properties$8
};

var $id$8 = 'creator.json#';
var $schema$8 = 'http://json-schema.org/draft-06/schema#';
var type$7 = 'object';
var required$7 = ['name', 'version'];
var properties$9 = {
  name: {
    type: 'string'
  },
  version: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$6 = {
  $id: $id$8,
  $schema: $schema$8,
  type: type$7,
  required: required$7,
  properties: properties$9
};

var $id$9 = 'entry.json#';
var $schema$9 = 'http://json-schema.org/draft-06/schema#';
var type$8 = 'object';
var optional$2 = true;
var required$8 = ['startedDateTime', 'time', 'request', 'response', 'cache', 'timings'];
var properties$a = {
  pageref: {
    type: 'string'
  },
  startedDateTime: {
    type: 'string',
    format: 'date-time',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))'
  },
  time: {
    type: 'number',
    min: 0
  },
  request: {
    $ref: 'request.json#'
  },
  response: {
    $ref: 'response.json#'
  },
  cache: {
    $ref: 'cache.json#'
  },
  timings: {
    $ref: 'timings.json#'
  },
  serverIPAddress: {
    type: 'string',
    oneOf: [
      {
        format: 'ipv4'
      },
      {
        format: 'ipv6'
      }
    ]
  },
  connection: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$7 = {
  $id: $id$9,
  $schema: $schema$9,
  type: type$8,
  optional: optional$2,
  required: required$8,
  properties: properties$a
};

var $id$a = 'har.json#';
var $schema$a = 'http://json-schema.org/draft-06/schema#';
var type$9 = 'object';
var required$9 = ['log'];
var properties$b = {
  log: {
    $ref: 'log.json#'
  }
};
var require$$8 = {
  $id: $id$a,
  $schema: $schema$a,
  type: type$9,
  required: required$9,
  properties: properties$b
};

var $id$b = 'header.json#';
var $schema$b = 'http://json-schema.org/draft-06/schema#';
var type$a = 'object';
var required$a = ['name', 'value'];
var properties$c = {
  name: {
    type: 'string'
  },
  value: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$9 = {
  $id: $id$b,
  $schema: $schema$b,
  type: type$a,
  required: required$a,
  properties: properties$c
};

var $id$c = 'log.json#';
var $schema$c = 'http://json-schema.org/draft-06/schema#';
var type$b = 'object';
var required$b = ['version', 'creator', 'entries'];
var properties$d = {
  version: {
    type: 'string'
  },
  creator: {
    $ref: 'creator.json#'
  },
  browser: {
    $ref: 'browser.json#'
  },
  pages: {
    type: 'array',
    items: {
      $ref: 'page.json#'
    }
  },
  entries: {
    type: 'array',
    items: {
      $ref: 'entry.json#'
    }
  },
  comment: {
    type: 'string'
  }
};
var require$$10 = {
  $id: $id$c,
  $schema: $schema$c,
  type: type$b,
  required: required$b,
  properties: properties$d
};

var $id$d = 'page.json#';
var $schema$d = 'http://json-schema.org/draft-06/schema#';
var type$c = 'object';
var optional$3 = true;
var required$c = ['startedDateTime', 'id', 'title', 'pageTimings'];
var properties$e = {
  startedDateTime: {
    type: 'string',
    format: 'date-time',
    pattern:
      '^(\\d{4})(-)?(\\d\\d)(-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)(:)?(\\d\\d)(\\.\\d+)?(Z|([+-])(\\d\\d)(:)?(\\d\\d))'
  },
  id: {
    type: 'string',
    unique: true
  },
  title: {
    type: 'string'
  },
  pageTimings: {
    $ref: 'pageTimings.json#'
  },
  comment: {
    type: 'string'
  }
};
var require$$11 = {
  $id: $id$d,
  $schema: $schema$d,
  type: type$c,
  optional: optional$3,
  required: required$c,
  properties: properties$e
};

var $id$e = 'pageTimings.json#';
var $schema$e = 'http://json-schema.org/draft-06/schema#';
var type$d = 'object';
var properties$f = {
  onContentLoad: {
    type: 'number',
    min: -1
  },
  onLoad: {
    type: 'number',
    min: -1
  },
  comment: {
    type: 'string'
  }
};
var require$$12 = {
  $id: $id$e,
  $schema: $schema$e,
  type: type$d,
  properties: properties$f
};

var $id$f = 'postData.json#';
var $schema$f = 'http://json-schema.org/draft-06/schema#';
var type$e = 'object';
var optional$4 = true;
var required$d = ['mimeType'];
var properties$g = {
  mimeType: {
    type: 'string'
  },
  text: {
    type: 'string'
  },
  params: {
    type: 'array',
    required: ['name'],
    properties: {
      name: {
        type: 'string'
      },
      value: {
        type: 'string'
      },
      fileName: {
        type: 'string'
      },
      contentType: {
        type: 'string'
      },
      comment: {
        type: 'string'
      }
    }
  },
  comment: {
    type: 'string'
  }
};
var require$$13 = {
  $id: $id$f,
  $schema: $schema$f,
  type: type$e,
  optional: optional$4,
  required: required$d,
  properties: properties$g
};

var $id$g = 'query.json#';
var $schema$g = 'http://json-schema.org/draft-06/schema#';
var type$f = 'object';
var required$e = ['name', 'value'];
var properties$h = {
  name: {
    type: 'string'
  },
  value: {
    type: 'string'
  },
  comment: {
    type: 'string'
  }
};
var require$$14 = {
  $id: $id$g,
  $schema: $schema$g,
  type: type$f,
  required: required$e,
  properties: properties$h
};

var $id$h = 'request.json#';
var $schema$h = 'http://json-schema.org/draft-06/schema#';
var type$g = 'object';
var required$f = ['method', 'url', 'httpVersion', 'cookies', 'headers', 'queryString', 'headersSize', 'bodySize'];
var properties$i = {
  method: {
    type: 'string'
  },
  url: {
    type: 'string',
    format: 'uri'
  },
  httpVersion: {
    type: 'string'
  },
  cookies: {
    type: 'array',
    items: {
      $ref: 'cookie.json#'
    }
  },
  headers: {
    type: 'array',
    items: {
      $ref: 'header.json#'
    }
  },
  queryString: {
    type: 'array',
    items: {
      $ref: 'query.json#'
    }
  },
  postData: {
    $ref: 'postData.json#'
  },
  headersSize: {
    type: 'integer'
  },
  bodySize: {
    type: 'integer'
  },
  comment: {
    type: 'string'
  }
};
var require$$15 = {
  $id: $id$h,
  $schema: $schema$h,
  type: type$g,
  required: required$f,
  properties: properties$i
};

var $id$i = 'response.json#';
var $schema$i = 'http://json-schema.org/draft-06/schema#';
var type$h = 'object';
var required$g = [
  'status',
  'statusText',
  'httpVersion',
  'cookies',
  'headers',
  'content',
  'redirectURL',
  'headersSize',
  'bodySize'
];
var properties$j = {
  status: {
    type: 'integer'
  },
  statusText: {
    type: 'string'
  },
  httpVersion: {
    type: 'string'
  },
  cookies: {
    type: 'array',
    items: {
      $ref: 'cookie.json#'
    }
  },
  headers: {
    type: 'array',
    items: {
      $ref: 'header.json#'
    }
  },
  content: {
    $ref: 'content.json#'
  },
  redirectURL: {
    type: 'string'
  },
  headersSize: {
    type: 'integer'
  },
  bodySize: {
    type: 'integer'
  },
  comment: {
    type: 'string'
  }
};
var require$$16 = {
  $id: $id$i,
  $schema: $schema$i,
  type: type$h,
  required: required$g,
  properties: properties$j
};

var $id$j = 'timings.json#';
var $schema$j = 'http://json-schema.org/draft-06/schema#';
var required$h = ['send', 'wait', 'receive'];
var properties$k = {
  dns: {
    type: 'number',
    min: -1
  },
  connect: {
    type: 'number',
    min: -1
  },
  blocked: {
    type: 'number',
    min: -1
  },
  send: {
    type: 'number',
    min: -1
  },
  wait: {
    type: 'number',
    min: -1
  },
  receive: {
    type: 'number',
    min: -1
  },
  ssl: {
    type: 'number',
    min: -1
  },
  comment: {
    type: 'string'
  }
};
var require$$17 = {
  $id: $id$j,
  $schema: $schema$j,
  required: required$h,
  properties: properties$k
};

var lib$4 = {
  afterRequest: require$$0$1,
  beforeRequest: require$$1$1,
  browser: require$$2$1,
  cache: require$$3,
  content: require$$4,
  cookie: require$$5,
  creator: require$$6,
  entry: require$$7,
  har: require$$8,
  header: require$$9,
  log: require$$10,
  page: require$$11,
  pageTimings: require$$12,
  postData: require$$13,
  query: require$$14,
  request: require$$15,
  response: require$$16,
  timings: require$$17
};

var $schema$k = 'http://json-schema.org/draft-06/schema#';
var $id$k = 'http://json-schema.org/draft-06/schema#';
var title$1 = 'Core schema meta-schema';
var definitions$1 = {
  schemaArray: {
    type: 'array',
    minItems: 1,
    items: {
      $ref: '#'
    }
  },
  nonNegativeInteger: {
    type: 'integer',
    minimum: 0
  },
  nonNegativeIntegerDefault0: {
    allOf: [
      {
        $ref: '#/definitions/nonNegativeInteger'
      },
      {
        default: 0
      }
    ]
  },
  simpleTypes: {
    enum: ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']
  },
  stringArray: {
    type: 'array',
    items: {
      type: 'string'
    },
    uniqueItems: true,
    default: []
  }
};
var type$i = ['object', 'boolean'];
var properties$l = {
  $id: {
    type: 'string',
    format: 'uri-reference'
  },
  $schema: {
    type: 'string',
    format: 'uri'
  },
  $ref: {
    type: 'string',
    format: 'uri-reference'
  },
  title: {
    type: 'string'
  },
  description: {
    type: 'string'
  },
  default: {},
  examples: {
    type: 'array',
    items: {}
  },
  multipleOf: {
    type: 'number',
    exclusiveMinimum: 0
  },
  maximum: {
    type: 'number'
  },
  exclusiveMaximum: {
    type: 'number'
  },
  minimum: {
    type: 'number'
  },
  exclusiveMinimum: {
    type: 'number'
  },
  maxLength: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minLength: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  pattern: {
    type: 'string',
    format: 'regex'
  },
  additionalItems: {
    $ref: '#'
  },
  items: {
    anyOf: [
      {
        $ref: '#'
      },
      {
        $ref: '#/definitions/schemaArray'
      }
    ],
    default: {}
  },
  maxItems: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minItems: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  uniqueItems: {
    type: 'boolean',
    default: false
  },
  contains: {
    $ref: '#'
  },
  maxProperties: {
    $ref: '#/definitions/nonNegativeInteger'
  },
  minProperties: {
    $ref: '#/definitions/nonNegativeIntegerDefault0'
  },
  required: {
    $ref: '#/definitions/stringArray'
  },
  additionalProperties: {
    $ref: '#'
  },
  definitions: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    default: {}
  },
  properties: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    default: {}
  },
  patternProperties: {
    type: 'object',
    additionalProperties: {
      $ref: '#'
    },
    default: {}
  },
  dependencies: {
    type: 'object',
    additionalProperties: {
      anyOf: [
        {
          $ref: '#'
        },
        {
          $ref: '#/definitions/stringArray'
        }
      ]
    }
  },
  propertyNames: {
    $ref: '#'
  },
  const: {},
  enum: {
    type: 'array',
    minItems: 1,
    uniqueItems: true
  },
  type: {
    anyOf: [
      {
        $ref: '#/definitions/simpleTypes'
      },
      {
        type: 'array',
        items: {
          $ref: '#/definitions/simpleTypes'
        },
        minItems: 1,
        uniqueItems: true
      }
    ]
  },
  format: {
    type: 'string'
  },
  allOf: {
    $ref: '#/definitions/schemaArray'
  },
  anyOf: {
    $ref: '#/definitions/schemaArray'
  },
  oneOf: {
    $ref: '#/definitions/schemaArray'
  },
  not: {
    $ref: '#'
  }
};
var require$$0$2 = {
  $schema: $schema$k,
  $id: $id$k,
  title: title$1,
  definitions: definitions$1,
  type: type$i,
  properties: properties$l,
  default: {}
};

var ajv$1;

function createAjvInstance() {
  var ajv$1 = new ajv({
    allErrors: true
  });
  ajv$1.addMetaSchema(require$$0$2);
  ajv$1.addSchema(lib$4);

  return ajv$1;
}

function validate$3(name, data) {
  data = data || {};

  // validator config
  ajv$1 = ajv$1 || createAjvInstance();

  var validate = ajv$1.getSchema(name + '.json');

  return new Promise(function(resolve, reject) {
    var valid = validate(data);

    !valid ? reject(new error(validate.errors)) : resolve(data);
  });
}

var afterRequest = function(data) {
  return validate$3('afterRequest', data);
};

var beforeRequest = function(data) {
  return validate$3('beforeRequest', data);
};

var browser = function(data) {
  return validate$3('browser', data);
};

var cache$1 = function(data) {
  return validate$3('cache', data);
};

var content = function(data) {
  return validate$3('content', data);
};

var cookie = function(data) {
  return validate$3('cookie', data);
};

var creator = function(data) {
  return validate$3('creator', data);
};

var entry = function(data) {
  return validate$3('entry', data);
};

var har = function(data) {
  return validate$3('har', data);
};

var header = function(data) {
  return validate$3('header', data);
};

var log = function(data) {
  return validate$3('log', data);
};

var page = function(data) {
  return validate$3('page', data);
};

var pageTimings = function(data) {
  return validate$3('pageTimings', data);
};

var postData = function(data) {
  return validate$3('postData', data);
};

var query = function(data) {
  return validate$3('query', data);
};

var request = function(data) {
  return validate$3('request', data);
};

var response = function(data) {
  return validate$3('response', data);
};

var timings = function(data) {
  return validate$3('timings', data);
};

var promise$1 = {
  afterRequest: afterRequest,
  beforeRequest: beforeRequest,
  browser: browser,
  cache: cache$1,
  content: content,
  cookie: cookie,
  creator: creator,
  entry: entry,
  har: har,
  header: header,
  log: log,
  page: page,
  pageTimings: pageTimings,
  postData: postData,
  query: query,
  request: request,
  response: response,
  timings: timings
};

function Har(request) {
  this.request = request;
}

Har.prototype.reducer = function(obj, pair) {
  // new property ?
  if (obj[pair.name] === undefined) {
    obj[pair.name] = pair.value;
    return obj;
  }

  // existing? convert to array
  var arr = [obj[pair.name], pair.value];

  obj[pair.name] = arr;

  return obj;
};

Har.prototype.prep = function(data) {
  // construct utility properties
  data.queryObj = {};
  data.headersObj = {};
  data.postData.jsonObj = false;
  data.postData.paramsObj = false;

  // construct query objects
  if (data.queryString && data.queryString.length) {
    data.queryObj = data.queryString.reduce(this.reducer, {});
  }

  // construct headers objects
  if (data.headers && data.headers.length) {
    // loweCase header keys
    data.headersObj = data.headers.reduceRight(function(headers, header) {
      headers[header.name] = header.value;
      return headers;
    }, {});
  }

  // construct Cookie header
  if (data.cookies && data.cookies.length) {
    var cookies = data.cookies.map(function(cookie) {
      return cookie.name + '=' + cookie.value;
    });

    if (cookies.length) {
      data.headersObj.cookie = cookies.join('; ');
    }
  }

  // prep body
  function some(arr) {
    return arr.some(function(type) {
      return data.postData.mimeType.indexOf(type) === 0;
    });
  }

  if (some(['multipart/mixed', 'multipart/related', 'multipart/form-data', 'multipart/alternative'])) {
    // reset values
    data.postData.mimeType = 'multipart/form-data';
  } else if (some(['application/x-www-form-urlencoded'])) {
    if (!data.postData.params) {
      data.postData.text = '';
    } else {
      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});

      // always overwrite
      data.postData.text = querystring__default['default'].stringify(data.postData.paramsObj);
    }
  } else if (some(['text/json', 'text/x-json', 'application/json', 'application/x-json'])) {
    data.postData.mimeType = 'application/json';

    if (data.postData.text) {
      try {
        data.postData.jsonObj = JSON.parse(data.postData.text);
      } catch (e) {
        this.request.debug(e);

        // force back to text/plain
        data.postData.mimeType = 'text/plain';
      }
    }
  }

  return data;
};

Har.prototype.options = function(options) {
  // skip if no har property defined
  if (!options.har) {
    return options;
  }

  var har = {};
  extend(har, options.har);

  // only process the first entry
  if (har.log && har.log.entries) {
    har = har.log.entries[0];
  }

  // add optional properties to make validation successful
  har.url = har.url || options.url || options.uri || options.baseUrl || '/';
  har.httpVersion = har.httpVersion || 'HTTP/1.1';
  har.queryString = har.queryString || [];
  har.headers = har.headers || [];
  har.cookies = har.cookies || [];
  har.postData = har.postData || {};
  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';

  har.bodySize = 0;
  har.headersSize = 0;
  har.postData.size = 0;

  if (!promise$1.request(har)) {
    return options;
  }

  // clean up and get some utility properties
  var req = this.prep(har);

  // construct new options
  if (req.url) {
    options.url = req.url;
  }

  if (req.method) {
    options.method = req.method;
  }

  if (Object.keys(req.queryObj).length) {
    options.qs = req.queryObj;
  }

  if (Object.keys(req.headersObj).length) {
    options.headers = req.headersObj;
  }

  function test(type) {
    return req.postData.mimeType.indexOf(type) === 0;
  }
  if (test('application/x-www-form-urlencoded')) {
    options.form = req.postData.paramsObj;
  } else if (test('application/json')) {
    if (req.postData.jsonObj) {
      options.body = req.postData.jsonObj;
      options.json = true;
    }
  } else if (test('multipart/form-data')) {
    options.formData = {};

    req.postData.params.forEach(function(param) {
      var attachment = {};

      if (!param.fileName && !param.fileName && !param.contentType) {
        options.formData[param.name] = param.value;
        return;
      }

      // attempt to read from disk!
      if (param.fileName && !param.value) {
        attachment.value = fs__default['default'].createReadStream(param.fileName);
      } else if (param.value) {
        attachment.value = param.value;
      }

      if (param.fileName) {
        attachment.options = {
          filename: param.fileName,
          contentType: param.contentType ? param.contentType : null
        };
      }

      options.formData[param.name] = attachment;
    });
  } else {
    if (req.postData.text) {
      options.body = req.postData.text;
    }
  }

  return options;
};

var Har_1 = Har;

var har$1 = {
  Har: Har_1
};

// Unique ID creation requires a high quality random # generator.  In node.js
// this is pretty straight-forward - we use the crypto API.

var rng = function nodeRNG() {
  return crypto__default['default'].randomBytes(16);
};

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return [
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    '-',
    bth[buf[i++]],
    bth[buf[i++]],
    '-',
    bth[buf[i++]],
    bth[buf[i++]],
    '-',
    bth[buf[i++]],
    bth[buf[i++]],
    '-',
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]],
    bth[buf[i++]]
  ].join('');
}

var bytesToUuid_1 = bytesToUuid;

function v4(options, buf, offset) {
  var i = (buf && offset) || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid_1(rnds);
}

var v4_1 = v4;

var md5$1 = helpers.md5;
var toBase64$1 = helpers.toBase64;

function Auth(request) {
  // define all public properties here
  this.request = request;
  this.hasAuth = false;
  this.sentAuth = false;
  this.bearerToken = null;
  this.user = null;
  this.pass = null;
}

Auth.prototype.basic = function(user, pass, sendImmediately) {
  var self = this;
  if (typeof user !== 'string' || (pass !== undefined && typeof pass !== 'string')) {
    self.request.emit('error', new Error('auth() received invalid user or password'));
  }
  self.user = user;
  self.pass = pass;
  self.hasAuth = true;
  var header = user + ':' + (pass || '');
  if (sendImmediately || typeof sendImmediately === 'undefined') {
    var authHeader = 'Basic ' + toBase64$1(header);
    self.sentAuth = true;
    return authHeader;
  }
};

Auth.prototype.bearer = function(bearer, sendImmediately) {
  var self = this;
  self.bearerToken = bearer;
  self.hasAuth = true;
  if (sendImmediately || typeof sendImmediately === 'undefined') {
    if (typeof bearer === 'function') {
      bearer = bearer();
    }
    var authHeader = 'Bearer ' + (bearer || '');
    self.sentAuth = true;
    return authHeader;
  }
};

Auth.prototype.digest = function(method, path, authHeader) {
  // TODO: More complete implementation of RFC 2617.
  //   - handle challenge.domain
  //   - support qop="auth-int" only
  //   - handle Authentication-Info (not necessarily?)
  //   - check challenge.stale (not necessarily?)
  //   - increase nc (not necessarily?)
  // For reference:
  // http://tools.ietf.org/html/rfc2617#section-3
  // https://github.com/bagder/curl/blob/master/lib/http_digest.c

  var self = this;

  var challenge = {};
  var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;
  for (;;) {
    var match = re.exec(authHeader);
    if (!match) {
      break;
    }
    challenge[match[1]] = match[2] || match[3];
  }

  /**
   * RFC 2617: handle both MD5 and MD5-sess algorithms.
   *
   * If the algorithm directive's value is "MD5" or unspecified, then HA1 is
   *   HA1=MD5(username:realm:password)
   * If the algorithm directive's value is "MD5-sess", then HA1 is
   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)
   */
  var ha1Compute = function(algorithm, user, realm, pass, nonce, cnonce) {
    var ha1 = md5$1(user + ':' + realm + ':' + pass);
    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
      return md5$1(ha1 + ':' + nonce + ':' + cnonce);
    } else {
      return ha1;
    }
  };

  var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth';
  var nc = qop && '00000001';
  var cnonce = qop && v4_1().replace(/-/g, '');
  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);
  var ha2 = md5$1(method + ':' + path);
  var digestResponse = qop
    ? md5$1(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2)
    : md5$1(ha1 + ':' + challenge.nonce + ':' + ha2);
  var authValues = {
    username: self.user,
    realm: challenge.realm,
    nonce: challenge.nonce,
    uri: path,
    qop: qop,
    response: digestResponse,
    nc: nc,
    cnonce: cnonce,
    algorithm: challenge.algorithm,
    opaque: challenge.opaque
  };

  authHeader = [];
  for (var k in authValues) {
    if (authValues[k]) {
      if (k === 'qop' || k === 'nc' || k === 'algorithm') {
        authHeader.push(k + '=' + authValues[k]);
      } else {
        authHeader.push(k + '="' + authValues[k] + '"');
      }
    }
  }
  authHeader = 'Digest ' + authHeader.join(', ');
  self.sentAuth = true;
  return authHeader;
};

Auth.prototype.onRequest = function(user, pass, sendImmediately, bearer) {
  var self = this;
  var request = self.request;

  var authHeader;
  if (bearer === undefined && user === undefined) {
    self.request.emit('error', new Error('no auth mechanism defined'));
  } else if (bearer !== undefined) {
    authHeader = self.bearer(bearer, sendImmediately);
  } else {
    authHeader = self.basic(user, pass, sendImmediately);
  }
  if (authHeader) {
    request.setHeader('authorization', authHeader);
  }
};

Auth.prototype.onResponse = function(response) {
  var self = this;
  var request = self.request;

  if (!self.hasAuth || self.sentAuth) {
    return null;
  }

  var c = caseless(response.headers);

  var authHeader = c.get('www-authenticate');
  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase();
  request.debug('reauth', authVerb);

  switch (authVerb) {
    case 'basic':
      return self.basic(self.user, self.pass, true);

    case 'bearer':
      return self.bearer(self.bearerToken, true);

    case 'digest':
      return self.digest(request.method, request.path, authHeader);
  }
};

var Auth_1 = Auth;

var auth = {
  Auth: Auth_1
};

function sha(key, body, algorithm) {
  return crypto__default['default']
    .createHmac(algorithm, key)
    .update(body)
    .digest('base64');
}

function rsa(key, body) {
  return crypto__default['default']
    .createSign('RSA-SHA1')
    .update(body)
    .sign(key, 'base64');
}

function rfc3986(str) {
  return encodeURIComponent(str)
    .replace(/!/g, '%21')
    .replace(/\*/g, '%2A')
    .replace(/\(/g, '%28')
    .replace(/\)/g, '%29')
    .replace(/'/g, '%27');
}

// Maps object to bi-dimensional array
// Converts { foo: 'A', bar: [ 'b', 'B' ]} to
// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
function map(obj) {
  var key,
    val,
    arr = [];
  for (key in obj) {
    val = obj[key];
    if (Array.isArray(val)) for (var i = 0; i < val.length; i++) arr.push([key, val[i]]);
    else if (typeof val === 'object') for (var prop in val) arr.push([key + '[' + prop + ']', val[prop]]);
    else arr.push([key, val]);
  }
  return arr;
}

// Compare function for sort
function compare(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}

function generateBase(httpMethod, base_uri, params) {
  // adapted from https://dev.twitter.com/docs/auth/oauth and
  // https://dev.twitter.com/docs/auth/creating-signature

  // Parameter normalization
  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
  var normalized = map(params)
    // 1.  First, the name and value of each parameter are encoded
    .map(function(p) {
      return [rfc3986(p[0]), rfc3986(p[1] || '')];
    })
    // 2.  The parameters are sorted by name, using ascending byte value
    //     ordering.  If two or more parameters share the same name, they
    //     are sorted by their value.
    .sort(function(a, b) {
      return compare(a[0], b[0]) || compare(a[1], b[1]);
    })
    // 3.  The name of each parameter is concatenated to its corresponding
    //     value using an "=" character (ASCII code 61) as a separator, even
    //     if the value is empty.
    .map(function(p) {
      return p.join('=');
    })
    // 4.  The sorted name/value pairs are concatenated together into a
    //     single string by using an "&" character (ASCII code 38) as
    //     separator.
    .join('&');

  var base = [rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'), rfc3986(base_uri), rfc3986(normalized)].join('&');

  return base;
}

function hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {
  var base = generateBase(httpMethod, base_uri, params);
  var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');

  return sha(key, base, 'sha1');
}

function hmacsign256(httpMethod, base_uri, params, consumer_secret, token_secret) {
  var base = generateBase(httpMethod, base_uri, params);
  var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');

  return sha(key, base, 'sha256');
}

function rsasign(httpMethod, base_uri, params, private_key, token_secret) {
  var base = generateBase(httpMethod, base_uri, params);
  var key = private_key || '';

  return rsa(key, base);
}

function plaintext(consumer_secret, token_secret) {
  var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');

  return key;
}

function sign$3(signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
  var method;
  var skipArgs = 1;

  switch (signMethod) {
    case 'RSA-SHA1':
      method = rsasign;
      break;
    case 'HMAC-SHA1':
      method = hmacsign;
      break;
    case 'HMAC-SHA256':
      method = hmacsign256;
      break;
    case 'PLAINTEXT':
      method = plaintext;
      skipArgs = 4;
      break;
    default:
      throw new Error('Signature method not supported: ' + signMethod);
  }

  return method.apply(null, [].slice.call(arguments, skipArgs));
}

var hmacsign_1 = hmacsign;
var hmacsign256_1 = hmacsign256;
var rsasign_1 = rsasign;
var plaintext_1 = plaintext;
var sign_1$1 = sign$3;
var rfc3986_1 = rfc3986;
var generateBase_1 = generateBase;

var oauthSign = {
  hmacsign: hmacsign_1,
  hmacsign256: hmacsign256_1,
  rsasign: rsasign_1,
  plaintext: plaintext_1,
  sign: sign_1$1,
  rfc3986: rfc3986_1,
  generateBase: generateBase_1
};

var Buffer$r = driver.safeBuffer.Buffer;

function OAuth(request) {
  this.request = request;
  this.params = null;
}

OAuth.prototype.buildParams = function(_oauth, uri, method, query, form, qsLib) {
  var oa = {};
  for (var i in _oauth) {
    oa['oauth_' + i] = _oauth[i];
  }
  if (!oa.oauth_version) {
    oa.oauth_version = '1.0';
  }
  if (!oa.oauth_timestamp) {
    oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();
  }
  if (!oa.oauth_nonce) {
    oa.oauth_nonce = v4_1().replace(/-/g, '');
  }
  if (!oa.oauth_signature_method) {
    oa.oauth_signature_method = 'HMAC-SHA1';
  }

  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key; // eslint-disable-line camelcase
  delete oa.oauth_consumer_secret;
  delete oa.oauth_private_key;

  var token_secret = oa.oauth_token_secret; // eslint-disable-line camelcase
  delete oa.oauth_token_secret;

  var realm = oa.oauth_realm;
  delete oa.oauth_realm;
  delete oa.oauth_transport_method;

  var baseurl = uri.protocol + '//' + uri.host + uri.pathname;
  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'));

  oa.oauth_signature = oauthSign.sign(
    oa.oauth_signature_method,
    method,
    baseurl,
    params,
    consumer_secret_or_private_key, // eslint-disable-line camelcase
    token_secret // eslint-disable-line camelcase
  );

  if (realm) {
    oa.realm = realm;
  }

  return oa;
};

OAuth.prototype.buildBodyHash = function(_oauth, body) {
  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
    this.request.emit(
      'error',
      new Error('oauth: ' + _oauth.signature_method + ' signature_method not supported with body_hash signing.')
    );
  }

  var shasum = crypto__default['default'].createHash('sha1');
  shasum.update(body || '');
  var sha1 = shasum.digest('hex');

  return Buffer$r.from(sha1, 'hex').toString('base64');
};

OAuth.prototype.concatParams = function(oa, sep, wrap) {
  wrap = wrap || '';

  var params = Object.keys(oa)
    .filter(function(i) {
      return i !== 'realm' && i !== 'oauth_signature';
    })
    .sort();

  if (oa.realm) {
    params.splice(0, 0, 'realm');
  }
  params.push('oauth_signature');

  return params
    .map(function(i) {
      return i + '=' + wrap + oauthSign.rfc3986(oa[i]) + wrap;
    })
    .join(sep);
};

OAuth.prototype.onRequest = function(_oauth) {
  var self = this;
  self.params = _oauth;

  var uri = self.request.uri || {};
  var method = self.request.method || '';
  var headers = caseless(self.request.headers);
  var body = self.request.body || '';
  var qsLib = self.request.qsLib || lib$3;

  var form;
  var query;
  var contentType = headers.get('content-type') || '';
  var formContentType = 'application/x-www-form-urlencoded';
  var transport = _oauth.transport_method || 'header';

  if (contentType.slice(0, formContentType.length) === formContentType) {
    contentType = formContentType;
    form = body;
  }
  if (uri.query) {
    query = uri.query;
  }
  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
    self.request.emit(
      'error',
      new Error('oauth: transport_method of body requires POST ' + 'and content-type ' + formContentType)
    );
  }

  if (!form && typeof _oauth.body_hash === 'boolean') {
    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());
  }

  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);

  switch (transport) {
    case 'header':
      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'));
      break;

    case 'query':
      var href = (self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&'));
      self.request.uri = url__default['default'].parse(href);
      self.request.path = self.request.uri.path;
      break;

    case 'body':
      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&');
      break;

    default:
      self.request.emit('error', new Error('oauth: transport_method invalid'));
  }
};

var OAuth_1 = OAuth;

var oauth_1 = {
  OAuth: OAuth_1
};

var hawk = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  function randomString(size) {
    var bits = (size + 1) * 6;
    var buffer = crypto__default['default'].randomBytes(Math.ceil(bits / 8));
    var string = buffer
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
    return string.slice(0, size);
  }

  function calculatePayloadHash(payload, algorithm, contentType) {
    var hash = crypto__default['default'].createHash(algorithm);
    hash.update('hawk.1.payload\n');
    hash.update(
      (contentType
        ? contentType
            .split(';')[0]
            .trim()
            .toLowerCase()
        : '') + '\n'
    );
    hash.update(payload || '');
    hash.update('\n');
    return hash.digest('base64');
  }

  exports.calculateMac = function(credentials, opts) {
    var normalized =
      'hawk.1.header\n' +
      opts.ts +
      '\n' +
      opts.nonce +
      '\n' +
      (opts.method || '').toUpperCase() +
      '\n' +
      opts.resource +
      '\n' +
      opts.host.toLowerCase() +
      '\n' +
      opts.port +
      '\n' +
      (opts.hash || '') +
      '\n';

    if (opts.ext) {
      normalized = normalized + opts.ext.replace('\\', '\\\\').replace('\n', '\\n');
    }

    normalized = normalized + '\n';

    if (opts.app) {
      normalized = normalized + opts.app + '\n' + (opts.dlg || '') + '\n';
    }

    var hmac = crypto__default['default'].createHmac(credentials.algorithm, credentials.key).update(normalized);
    var digest = hmac.digest('base64');
    return digest;
  };

  exports.header = function(uri, method, opts) {
    var timestamp = opts.timestamp || Math.floor((Date.now() + (opts.localtimeOffsetMsec || 0)) / 1000);
    var credentials = opts.credentials;
    if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
      return '';
    }

    if (['sha1', 'sha256'].indexOf(credentials.algorithm) === -1) {
      return '';
    }

    var artifacts = {
      ts: timestamp,
      nonce: opts.nonce || randomString(6),
      method: method,
      resource: uri.pathname + (uri.search || ''),
      host: uri.hostname,
      port: uri.port || (uri.protocol === 'http:' ? 80 : 443),
      hash: opts.hash,
      ext: opts.ext,
      app: opts.app,
      dlg: opts.dlg
    };

    if (!artifacts.hash && (opts.payload || opts.payload === '')) {
      artifacts.hash = calculatePayloadHash(opts.payload, credentials.algorithm, opts.contentType);
    }

    var mac = exports.calculateMac(credentials, artifacts);

    var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== '';
    var header =
      'Hawk id="' +
      credentials.id +
      '", ts="' +
      artifacts.ts +
      '", nonce="' +
      artifacts.nonce +
      (artifacts.hash ? '", hash="' + artifacts.hash : '') +
      (hasExt ? '", ext="' + artifacts.ext.replace(/\\/g, '\\\\').replace(/"/g, '\\"') : '') +
      '", mac="' +
      mac +
      '"';

    if (artifacts.app) {
      header = header + ', app="' + artifacts.app + (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
    }

    return header;
  };
});

var Buffer$s = driver.safeBuffer.Buffer;

function Multipart(request) {
  this.request = request;
  this.boundary = v4_1();
  this.chunked = false;
  this.body = null;
}

Multipart.prototype.isChunked = function(options) {
  var self = this;
  var chunked = false;
  var parts = options.data || options;

  if (!parts.forEach) {
    self.request.emit('error', new Error('Argument error, options.multipart.'));
  }

  if (options.chunked !== undefined) {
    chunked = options.chunked;
  }

  if (self.request.getHeader('transfer-encoding') === 'chunked') {
    chunked = true;
  }

  if (!chunked) {
    parts.forEach(function(part) {
      if (typeof part.body === 'undefined') {
        self.request.emit('error', new Error('Body attribute missing in multipart.'));
      }
      if (isstream(part.body)) {
        chunked = true;
      }
    });
  }

  return chunked;
};

Multipart.prototype.setHeaders = function(chunked) {
  var self = this;

  if (chunked && !self.request.hasHeader('transfer-encoding')) {
    self.request.setHeader('transfer-encoding', 'chunked');
  }

  var header = self.request.getHeader('content-type');

  if (!header || header.indexOf('multipart') === -1) {
    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary);
  } else {
    if (header.indexOf('boundary') !== -1) {
      self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1');
    } else {
      self.request.setHeader('content-type', header + '; boundary=' + self.boundary);
    }
  }
};

Multipart.prototype.build = function(parts, chunked) {
  var self = this;
  var body = chunked ? new combined_stream() : [];

  function add(part) {
    if (typeof part === 'number') {
      part = part.toString();
    }
    return chunked ? body.append(part) : body.push(Buffer$s.from(part));
  }

  if (self.request.preambleCRLF) {
    add('\r\n');
  }

  parts.forEach(function(part) {
    var preamble = '--' + self.boundary + '\r\n';
    Object.keys(part).forEach(function(key) {
      if (key === 'body') {
        return;
      }
      preamble += key + ': ' + part[key] + '\r\n';
    });
    preamble += '\r\n';
    add(preamble);
    add(part.body);
    add('\r\n');
  });
  add('--' + self.boundary + '--');

  if (self.request.postambleCRLF) {
    add('\r\n');
  }

  return body;
};

Multipart.prototype.onRequest = function(options) {
  var self = this;

  var chunked = self.isChunked(options);
  var parts = options.data || options;

  self.setHeaders(chunked);
  self.chunked = chunked;
  self.body = self.build(parts, chunked);
};

var Multipart_1 = Multipart;

var multipart = {
  Multipart: Multipart_1
};

var isUrl = /^https?:/;

function Redirect(request) {
  this.request = request;
  this.followRedirect = true;
  this.followRedirects = true;
  this.followAllRedirects = false;
  this.followOriginalHttpMethod = false;
  this.allowRedirect = function() {
    return true;
  };
  this.maxRedirects = 10;
  this.redirects = [];
  this.redirectsFollowed = 0;
  this.removeRefererHeader = false;
}

Redirect.prototype.onRequest = function(options) {
  var self = this;

  if (options.maxRedirects !== undefined) {
    self.maxRedirects = options.maxRedirects;
  }
  if (typeof options.followRedirect === 'function') {
    self.allowRedirect = options.followRedirect;
  }
  if (options.followRedirect !== undefined) {
    self.followRedirects = !!options.followRedirect;
  }
  if (options.followAllRedirects !== undefined) {
    self.followAllRedirects = options.followAllRedirects;
  }
  if (self.followRedirects || self.followAllRedirects) {
    self.redirects = self.redirects || [];
  }
  if (options.removeRefererHeader !== undefined) {
    self.removeRefererHeader = options.removeRefererHeader;
  }
  if (options.followOriginalHttpMethod !== undefined) {
    self.followOriginalHttpMethod = options.followOriginalHttpMethod;
  }
};

Redirect.prototype.redirectTo = function(response) {
  var self = this;
  var request = self.request;

  var redirectTo = null;
  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
    var location = response.caseless.get('location');
    request.debug('redirect', location);

    if (self.followAllRedirects) {
      redirectTo = location;
    } else if (self.followRedirects) {
      switch (request.method) {
        case 'PATCH':
        case 'PUT':
        case 'POST':
        case 'DELETE':
          // Do not follow redirects
          break;
        default:
          redirectTo = location;
          break;
      }
    }
  } else if (response.statusCode === 401) {
    var authHeader = request._auth.onResponse(response);
    if (authHeader) {
      request.setHeader('authorization', authHeader);
      redirectTo = request.uri;
    }
  }
  return redirectTo;
};

Redirect.prototype.onResponse = function(response) {
  var self = this;
  var request = self.request;

  var redirectTo = self.redirectTo(response);
  if (!redirectTo || !self.allowRedirect.call(request, response)) {
    return false;
  }

  request.debug('redirect to', redirectTo);

  // ignore any potential response body.  it cannot possibly be useful
  // to us at this point.
  // response.resume should be defined, but check anyway before calling. Workaround for browserify.
  if (response.resume) {
    response.resume();
  }

  if (self.redirectsFollowed >= self.maxRedirects) {
    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));
    return false;
  }
  self.redirectsFollowed += 1;

  if (!isUrl.test(redirectTo)) {
    redirectTo = url__default['default'].resolve(request.uri.href, redirectTo);
  }

  var uriPrev = request.uri;
  request.uri = url__default['default'].parse(redirectTo);

  // handle the case where we change protocol from https to http or vice versa
  if (request.uri.protocol !== uriPrev.protocol) {
    delete request.agent;
  }

  self.redirects.push({ statusCode: response.statusCode, redirectUri: redirectTo });

  if (
    self.followAllRedirects &&
    request.method !== 'HEAD' &&
    response.statusCode !== 401 &&
    response.statusCode !== 307
  ) {
    request.method = self.followOriginalHttpMethod ? request.method : 'GET';
  }
  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215
  delete request.src;
  delete request.req;
  delete request._started;
  if (response.statusCode !== 401 && response.statusCode !== 307) {
    // Remove parameters from the previous response, unless this is the second request
    // for a server that requires digest authentication.
    delete request.body;
    delete request._form;
    if (request.headers) {
      request.removeHeader('host');
      request.removeHeader('content-type');
      request.removeHeader('content-length');
      if (request.uri.hostname !== request.originalHost.split(':')[0]) {
        // Remove authorization if changing hostnames (but not if just
        // changing ports or protocols).  This matches the behavior of curl:
        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710
        request.removeHeader('authorization');
      }
    }
  }

  if (!self.removeRefererHeader) {
    request.setHeader('referer', uriPrev.href);
  }

  request.emit('redirect');

  request.init();

  return true;
};

var Redirect_1 = Redirect;

var redirect = {
  Redirect: Redirect_1
};

var defaultProxyHeaderWhiteList = [
  'accept',
  'accept-charset',
  'accept-encoding',
  'accept-language',
  'accept-ranges',
  'cache-control',
  'content-encoding',
  'content-language',
  'content-location',
  'content-md5',
  'content-range',
  'content-type',
  'connection',
  'date',
  'expect',
  'max-forwards',
  'pragma',
  'referer',
  'te',
  'user-agent',
  'via'
];

var defaultProxyHeaderExclusiveList = ['proxy-authorization'];

function constructProxyHost(uriObject) {
  var port = uriObject.port;
  var protocol = uriObject.protocol;
  var proxyHost = uriObject.hostname + ':';

  if (port) {
    proxyHost += port;
  } else if (protocol === 'https:') {
    proxyHost += '443';
  } else {
    proxyHost += '80';
  }

  return proxyHost;
}

function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
  var whiteList = proxyHeaderWhiteList.reduce(function(set, header) {
    set[header.toLowerCase()] = true;
    return set;
  }, {});

  return Object.keys(headers)
    .filter(function(header) {
      return whiteList[header.toLowerCase()];
    })
    .reduce(function(set, header) {
      set[header] = headers[header];
      return set;
    }, {});
}

function constructTunnelOptions(request, proxyHeaders) {
  var proxy = request.proxy;

  var tunnelOptions = {
    proxy: {
      host: proxy.hostname,
      port: +proxy.port,
      proxyAuth: proxy.auth,
      headers: proxyHeaders
    },
    headers: request.headers,
    ca: request.ca,
    cert: request.cert,
    key: request.key,
    passphrase: request.passphrase,
    pfx: request.pfx,
    ciphers: request.ciphers,
    rejectUnauthorized: request.rejectUnauthorized,
    secureOptions: request.secureOptions,
    secureProtocol: request.secureProtocol
  };

  return tunnelOptions;
}

function constructTunnelFnName(uri, proxy) {
  var uriProtocol = uri.protocol === 'https:' ? 'https' : 'http';
  var proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http';
  return [uriProtocol, proxyProtocol].join('Over');
}

function getTunnelFn(request) {
  var uri = request.uri;
  var proxy = request.proxy;
  var tunnelFnName = constructTunnelFnName(uri, proxy);
  return driver.tunnelAgent[tunnelFnName];
}

function Tunnel(request) {
  this.request = request;
  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;
  this.proxyHeaderExclusiveList = [];
  if (typeof request.tunnel !== 'undefined') {
    this.tunnelOverride = request.tunnel;
  }
}

Tunnel.prototype.isEnabled = function() {
  var self = this;
  var request = self.request;
  // Tunnel HTTPS by default. Allow the user to override this setting.

  // If self.tunnelOverride is set (the user specified a value), use it.
  if (typeof self.tunnelOverride !== 'undefined') {
    return self.tunnelOverride;
  }

  // If the destination is HTTPS, tunnel.
  if (request.uri.protocol === 'https:') {
    return true;
  }

  // Otherwise, do not use tunnel.
  return false;
};

Tunnel.prototype.setup = function(options) {
  var self = this;
  var request = self.request;

  options = options || {};

  if (typeof request.proxy === 'string') {
    request.proxy = url__default['default'].parse(request.proxy);
  }

  if (!request.proxy || !request.tunnel) {
    return false;
  }

  // Setup Proxy Header Exclusive List and White List
  if (options.proxyHeaderWhiteList) {
    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;
  }
  if (options.proxyHeaderExclusiveList) {
    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;
  }

  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);
  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);

  // Setup Proxy Headers and Proxy Headers Host
  // Only send the Proxy White Listed Header names
  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);
  proxyHeaders.host = constructProxyHost(request.uri);

  proxyHeaderExclusiveList.forEach(request.removeHeader, request);

  // Set Agent from Tunnel Data
  var tunnelFn = getTunnelFn(request);
  var tunnelOptions = constructTunnelOptions(request, proxyHeaders);
  request.agent = tunnelFn(tunnelOptions);

  return true;
};

Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;
Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;
var Tunnel_1 = Tunnel;

var tunnel_1 = {
  Tunnel: Tunnel_1
};

var performanceNow = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.2
  (function() {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if (typeof performance !== 'undefined' && performance !== null && performance.now) {
      module.exports = function() {
        return performance.now();
      };
    } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
      module.exports = function() {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };
      hrtime = process.hrtime;
      getNanoSeconds = function() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };
      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      module.exports = function() {
        return Date.now() - loadTime;
      };
      loadTime = Date.now();
    } else {
      module.exports = function() {
        return new Date().getTime() - loadTime;
      };
      loadTime = new Date().getTime();
    }
  }.call(_commonjsHelpers.commonjsGlobal));
});

var isTypedArray$1 = isTypedarray.strict;

var cookies$1 = cookies;

var Querystring$1 = querystring_1.Querystring;
var Har$1 = har$1.Har;
var Auth$1 = auth.Auth;
var OAuth$1 = oauth_1.OAuth;

var Multipart$1 = multipart.Multipart;
var Redirect$1 = redirect.Redirect;
var Tunnel$1 = tunnel_1.Tunnel;

var Buffer$t = driver.safeBuffer.Buffer;

var safeStringify$1 = helpers.safeStringify;
var isReadStream$1 = helpers.isReadStream;
var toBase64$2 = helpers.toBase64;
var defer$2 = helpers.defer;
var copy$2 = helpers.copy;
var version$1 = helpers.version;
var globalCookieJar = cookies$1.jar();

var globalPool = {};

function filterForNonReserved(reserved, options) {
  // Filter out properties that are not reserved.
  // Reserved values are passed in at call site.

  var object = {};
  for (var i in options) {
    var notReserved = reserved.indexOf(i) === -1;
    if (notReserved) {
      object[i] = options[i];
    }
  }
  return object;
}

function filterOutReservedFunctions(reserved, options) {
  // Filter out properties that are functions and are reserved.
  // Reserved values are passed in at call site.

  var object = {};
  for (var i in options) {
    var isReserved = !(reserved.indexOf(i) === -1);
    var isFunction = typeof options[i] === 'function';
    if (!(isReserved && isFunction)) {
      object[i] = options[i];
    }
  }
  return object;
}

// Return a simpler request object to allow serialization
function requestToJSON() {
  var self = this;
  return {
    uri: self.uri,
    method: self.method,
    headers: self.headers
  };
}

// Return a simpler response object to allow serialization
function responseToJSON() {
  var self = this;
  return {
    statusCode: self.statusCode,
    body: self.body,
    headers: self.headers,
    request: requestToJSON.call(self.request)
  };
}

function Request(options) {
  // if given the method property in options, set property explicitMethod to true

  // extend the Request instance with any non-reserved properties
  // remove any reserved functions from the options object
  // set Request instance to be readable and writable
  // call init

  var self = this;

  // start with HAR, then override with additional options
  if (options.har) {
    self._har = new Har$1(self);
    options = self._har.options(options);
  }

  Stream__default['default'].Stream.call(self);
  var reserved = Object.keys(Request.prototype);
  var nonReserved = filterForNonReserved(reserved, options);

  extend(self, nonReserved);
  options = filterOutReservedFunctions(reserved, options);

  self.readable = true;
  self.writable = true;
  if (options.method) {
    self.explicitMethod = true;
  }
  self._qs = new Querystring$1(self);
  self._auth = new Auth$1(self);
  self._oauth = new OAuth$1(self);
  self._multipart = new Multipart$1(self);
  self._redirect = new Redirect$1(self);
  self._tunnel = new Tunnel$1(self);
  self.init(options);
}

util__default['default'].inherits(Request, Stream__default['default'].Stream);

// Debugging
Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG);
function debug() {
  if (Request.debug) {
    console.error('REQUEST %s', util__default['default'].format.apply(util__default['default'], arguments));
  }
}
Request.prototype.debug = debug;

Request.prototype.init = function(options) {
  // init() contains all the code to setup the request object.
  // the actual outgoing request is not started until start() is called
  // this function is called from both the constructor and on redirect.
  var self = this;
  if (!options) {
    options = {};
  }
  self.headers = self.headers ? copy$2(self.headers) : {};

  // Delete headers with value undefined since they break
  // ClientRequest.OutgoingMessage.setHeader in node 0.12
  for (var headerName in self.headers) {
    if (typeof self.headers[headerName] === 'undefined') {
      delete self.headers[headerName];
    }
  }

  caseless.httpify(self, self.headers);

  if (!self.method) {
    self.method = options.method || 'GET';
  }
  if (!self.localAddress) {
    self.localAddress = options.localAddress;
  }

  self._qs.init(options);

  debug(options);
  if (!self.pool && self.pool !== false) {
    self.pool = globalPool;
  }
  self.dests = self.dests || [];
  self.__isRequestRequest = true;

  // Protect against double callback
  if (!self._callback && self.callback) {
    self._callback = self.callback;
    self.callback = function() {
      if (self._callbackCalled) {
        return; // Print a warning maybe?
      }
      self._callbackCalled = true;
      self._callback.apply(self, arguments);
    };
    self.on('error', self.callback.bind());
    self.on('complete', self.callback.bind(self, null));
  }

  // People use this property instead all the time, so support it
  if (!self.uri && self.url) {
    self.uri = self.url;
    delete self.url;
  }

  // If there's a baseUrl, then use it as the base URL (i.e. uri must be
  // specified as a relative path and is appended to baseUrl).
  if (self.baseUrl) {
    if (typeof self.baseUrl !== 'string') {
      return self.emit('error', new Error('options.baseUrl must be a string'));
    }

    if (typeof self.uri !== 'string') {
      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'));
    }

    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'));
    }

    // Handle all cases to make sure that there's only one slash between
    // baseUrl and uri.
    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1;
    var uriStartsWithSlash = self.uri.indexOf('/') === 0;

    if (baseUrlEndsWithSlash && uriStartsWithSlash) {
      self.uri = self.baseUrl + self.uri.slice(1);
    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
      self.uri = self.baseUrl + self.uri;
    } else if (self.uri === '') {
      self.uri = self.baseUrl;
    } else {
      self.uri = self.baseUrl + '/' + self.uri;
    }
    delete self.baseUrl;
  }

  // A URI is needed by this point, emit error if we haven't been able to get one
  if (!self.uri) {
    return self.emit('error', new Error('options.uri is a required argument'));
  }

  // If a string URI/URL was given, parse it into a URL object
  if (typeof self.uri === 'string') {
    self.uri = url__default['default'].parse(self.uri);
  }

  // Some URL objects are not from a URL parsed string and need href added
  if (!self.uri.href) {
    self.uri.href = url__default['default'].format(self.uri);
  }

  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
  if (self.uri.protocol === 'unix:') {
    return self.emit(
      'error',
      new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`')
    );
  }

  // Support Unix Sockets
  if (self.uri.host === 'unix') {
    self.enableUnixSocket();
  }

  if (self.strictSSL === false) {
    self.rejectUnauthorized = false;
  }

  if (!self.uri.pathname) {
    self.uri.pathname = '/';
  }

  if (!(self.uri.host || (self.uri.hostname && self.uri.port)) && !self.uri.isUnix) {
    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
    // Detect and reject it as soon as possible
    var faultyUri = url__default['default'].format(self.uri);
    var message = 'Invalid URI "' + faultyUri + '"';
    if (Object.keys(options).length === 0) {
      // No option ? This can be the sign of a redirect
      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
      // they should be warned that it can be caused by a redirection (can save some hair)
      message += '. This can be caused by a crappy redirection.';
    }
    // This error was fatal
    self.abort();
    return self.emit('error', new Error(message));
  }

  if (!self.hasOwnProperty('proxy')) {
    self.proxy = getProxyFromURI_1(self.uri);
  }

  self.tunnel = self._tunnel.isEnabled();
  if (self.proxy) {
    self._tunnel.setup(options);
  }

  self._redirect.onRequest(options);

  self.setHost = false;
  if (!self.hasHeader('host')) {
    var hostHeaderName = self.originalHostHeaderName || 'host';
    self.setHeader(hostHeaderName, self.uri.host);
    // Drop :port suffix from Host header if known protocol.
    if (self.uri.port) {
      if (
        (self.uri.port === '80' && self.uri.protocol === 'http:') ||
        (self.uri.port === '443' && self.uri.protocol === 'https:')
      ) {
        self.setHeader(hostHeaderName, self.uri.hostname);
      }
    }
    self.setHost = true;
  }

  self.jar(self._jar || options.jar);

  if (!self.uri.port) {
    if (self.uri.protocol === 'http:') {
      self.uri.port = 80;
    } else if (self.uri.protocol === 'https:') {
      self.uri.port = 443;
    }
  }

  if (self.proxy && !self.tunnel) {
    self.port = self.proxy.port;
    self.host = self.proxy.hostname;
  } else {
    self.port = self.uri.port;
    self.host = self.uri.hostname;
  }

  if (options.form) {
    self.form(options.form);
  }

  if (options.formData) {
    var formData = options.formData;
    var requestForm = self.form();
    var appendFormValue = function(key, value) {
      if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
        requestForm.append(key, value.value, value.options);
      } else {
        requestForm.append(key, value);
      }
    };
    for (var formKey in formData) {
      if (formData.hasOwnProperty(formKey)) {
        var formValue = formData[formKey];
        if (formValue instanceof Array) {
          for (var j = 0; j < formValue.length; j++) {
            appendFormValue(formKey, formValue[j]);
          }
        } else {
          appendFormValue(formKey, formValue);
        }
      }
    }
  }

  if (options.qs) {
    self.qs(options.qs);
  }

  if (self.uri.path) {
    self.path = self.uri.path;
  } else {
    self.path = self.uri.pathname + (self.uri.search || '');
  }

  if (self.path.length === 0) {
    self.path = '/';
  }

  // Auth must happen last in case signing is dependent on other headers
  if (options.aws) {
    self.aws(options.aws);
  }

  if (options.hawk) {
    self.hawk(options.hawk);
  }

  if (options.httpSignature) {
    self.httpSignature(options.httpSignature);
  }

  if (options.auth) {
    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
      options.auth.user = options.auth.username;
    }
    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
      options.auth.pass = options.auth.password;
    }

    self.auth(options.auth.user, options.auth.pass, options.auth.sendImmediately, options.auth.bearer);
  }

  if (self.gzip && !self.hasHeader('accept-encoding')) {
    self.setHeader('accept-encoding', 'gzip, deflate');
  }

  if (self.uri.auth && !self.hasHeader('authorization')) {
    var uriAuthPieces = self.uri.auth.split(':').map(function(item) {
      return self._qs.unescape(item);
    });
    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true);
  }

  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
    var proxyAuthPieces = self.proxy.auth.split(':').map(function(item) {
      return self._qs.unescape(item);
    });
    var authHeader = 'Basic ' + toBase64$2(proxyAuthPieces.join(':'));
    self.setHeader('proxy-authorization', authHeader);
  }

  if (self.proxy && !self.tunnel) {
    self.path = self.uri.protocol + '//' + self.uri.host + self.path;
  }

  if (options.json) {
    self.json(options.json);
  }
  if (options.multipart) {
    self.multipart(options.multipart);
  }

  if (options.time) {
    self.timing = true;

    // NOTE: elapsedTime is deprecated in favor of .timings
    self.elapsedTime = self.elapsedTime || 0;
  }

  function setContentLength() {
    if (isTypedArray$1(self.body)) {
      self.body = Buffer$t.from(self.body);
    }

    if (!self.hasHeader('content-length')) {
      var length;
      if (typeof self.body === 'string') {
        length = Buffer$t.byteLength(self.body);
      } else if (Array.isArray(self.body)) {
        length = self.body.reduce(function(a, b) {
          return a + b.length;
        }, 0);
      } else {
        length = self.body.length;
      }

      if (length) {
        self.setHeader('content-length', length);
      } else {
        self.emit('error', new Error('Argument error, options.body.'));
      }
    }
  }
  if (self.body && !isstream(self.body)) {
    setContentLength();
  }

  if (options.oauth) {
    self.oauth(options.oauth);
  } else if (self._oauth.params && self.hasHeader('authorization')) {
    self.oauth(self._oauth.params);
  }

  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol;
  var defaultModules = { 'http:': http__default['default'], 'https:': https__default['default'] };
  var httpModules = self.httpModules || {};

  self.httpModule = httpModules[protocol] || defaultModules[protocol];

  if (!self.httpModule) {
    return self.emit('error', new Error('Invalid protocol: ' + protocol));
  }

  if (options.ca) {
    self.ca = options.ca;
  }

  if (!self.agent) {
    if (options.agentOptions) {
      self.agentOptions = options.agentOptions;
    }

    if (options.agentClass) {
      self.agentClass = options.agentClass;
    } else if (options.forever) {
      var v = version$1();
      // use ForeverAgent in node 0.10- only
      if (v.major === 0 && v.minor <= 10) {
        self.agentClass = protocol === 'http:' ? foreverAgent : foreverAgent.SSL;
      } else {
        self.agentClass = self.httpModule.Agent;
        self.agentOptions = self.agentOptions || {};
        self.agentOptions.keepAlive = true;
      }
    } else {
      self.agentClass = self.httpModule.Agent;
    }
  }

  if (self.pool === false) {
    self.agent = false;
  } else {
    self.agent = self.agent || self.getNewAgent();
  }

  self.on('pipe', function(src) {
    if (self.ntick && self._started) {
      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'));
    }
    self.src = src;
    if (isReadStream$1(src)) {
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', mimeTypes.lookup(src.path));
      }
    } else {
      if (src.headers) {
        for (var i in src.headers) {
          if (!self.hasHeader(i)) {
            self.setHeader(i, src.headers[i]);
          }
        }
      }
      if (self._json && !self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json');
      }
      if (src.method && !self.explicitMethod) {
        self.method = src.method;
      }
    }

    // self.on('pipe', function () {
    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
    // })
  });

  defer$2(function() {
    if (self._aborted) {
      return;
    }

    var end = function() {
      if (self._form) {
        if (!self._auth.hasAuth) {
          self._form.pipe(self);
        } else if (self._auth.hasAuth && self._auth.sentAuth) {
          self._form.pipe(self);
        }
      }
      if (self._multipart && self._multipart.chunked) {
        self._multipart.body.pipe(self);
      }
      if (self.body) {
        if (isstream(self.body)) {
          self.body.pipe(self);
        } else {
          setContentLength();
          if (Array.isArray(self.body)) {
            self.body.forEach(function(part) {
              self.write(part);
            });
          } else {
            self.write(self.body);
          }
          self.end();
        }
      } else if (self.requestBodyStream) {
        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.');
        self.requestBodyStream.pipe(self);
      } else if (!self.src) {
        if (self._auth.hasAuth && !self._auth.sentAuth) {
          self.end();
          return;
        }
        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
          self.setHeader('content-length', 0);
        }
        self.end();
      }
    };

    if (self._form && !self.hasHeader('content-length')) {
      // Before ending the request, we had to compute the length of the whole form, asyncly
      self.setHeader(self._form.getHeaders(), true);
      self._form.getLength(function(err, length) {
        if (!err && !isNaN(length)) {
          self.setHeader('content-length', length);
        }
        end();
      });
    } else {
      end();
    }

    self.ntick = true;
  });
};

Request.prototype.getNewAgent = function() {
  var self = this;
  var Agent = self.agentClass;
  var options = {};
  if (self.agentOptions) {
    for (var i in self.agentOptions) {
      options[i] = self.agentOptions[i];
    }
  }
  if (self.ca) {
    options.ca = self.ca;
  }
  if (self.ciphers) {
    options.ciphers = self.ciphers;
  }
  if (self.secureProtocol) {
    options.secureProtocol = self.secureProtocol;
  }
  if (self.secureOptions) {
    options.secureOptions = self.secureOptions;
  }
  if (typeof self.rejectUnauthorized !== 'undefined') {
    options.rejectUnauthorized = self.rejectUnauthorized;
  }

  if (self.cert && self.key) {
    options.key = self.key;
    options.cert = self.cert;
  }

  if (self.pfx) {
    options.pfx = self.pfx;
  }

  if (self.passphrase) {
    options.passphrase = self.passphrase;
  }

  var poolKey = '';

  // different types of agents are in different pools
  if (Agent !== self.httpModule.Agent) {
    poolKey += Agent.name;
  }

  // ca option is only relevant if proxy or destination are https
  var proxy = self.proxy;
  if (typeof proxy === 'string') {
    proxy = url__default['default'].parse(proxy);
  }
  var isHttps = (proxy && proxy.protocol === 'https:') || this.uri.protocol === 'https:';

  if (isHttps) {
    if (options.ca) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.ca;
    }

    if (typeof options.rejectUnauthorized !== 'undefined') {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.rejectUnauthorized;
    }

    if (options.cert) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.cert.toString('ascii') + options.key.toString('ascii');
    }

    if (options.pfx) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.pfx.toString('ascii');
    }

    if (options.ciphers) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.ciphers;
    }

    if (options.secureProtocol) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.secureProtocol;
    }

    if (options.secureOptions) {
      if (poolKey) {
        poolKey += ':';
      }
      poolKey += options.secureOptions;
    }
  }

  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
    // not doing anything special.  Use the globalAgent
    return self.httpModule.globalAgent;
  }

  // we're using a stored agent.  Make sure it's protocol-specific
  poolKey = self.uri.protocol + poolKey;

  // generate a new agent for this setting if none yet exists
  if (!self.pool[poolKey]) {
    self.pool[poolKey] = new Agent(options);
    // properly set maxSockets on new agents
    if (self.pool.maxSockets) {
      self.pool[poolKey].maxSockets = self.pool.maxSockets;
    }
  }

  return self.pool[poolKey];
};

Request.prototype.start = function() {
  // start() is called once we are ready to send the outgoing HTTP request.
  // this is usually called on the first write(), end() or on nextTick()
  var self = this;

  if (self.timing) {
    // All timings will be relative to this request's startTime.  In order to do this,
    // we need to capture the wall-clock start time (via Date), immediately followed
    // by the high-resolution timer (via now()).  While these two won't be set
    // at the _exact_ same time, they should be close enough to be able to calculate
    // high-resolution, monotonically non-decreasing timestamps relative to startTime.
    var startTime = new Date().getTime();
    var startTimeNow = performanceNow();
  }

  if (self._aborted) {
    return;
  }

  self._started = true;
  self.method = self.method || 'GET';
  self.href = self.uri.href;

  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
    self.setHeader('content-length', self.src.stat.size);
  }
  if (self._aws) {
    self.aws(self._aws, true);
  }

  // We have a method named auth, which is completely different from the http.request
  // auth option.  If we don't remove it, we're gonna have a bad time.
  var reqOptions = copy$2(self);
  delete reqOptions.auth;

  debug('make request', self.uri.href);

  // node v6.8.0 now supports a `timeout` value in `http.request()`, but we
  // should delete it for now since we handle timeouts manually for better
  // consistency with node versions before v6.8.0
  delete reqOptions.timeout;

  try {
    self.req = self.httpModule.request(reqOptions);
  } catch (err) {
    self.emit('error', err);
    return;
  }

  if (self.timing) {
    self.startTime = startTime;
    self.startTimeNow = startTimeNow;

    // Timing values will all be relative to startTime (by comparing to startTimeNow
    // so we have an accurate clock)
    self.timings = {};
  }

  var timeout;
  if (self.timeout && !self.timeoutTimer) {
    if (self.timeout < 0) {
      timeout = 0;
    } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {
      timeout = self.timeout;
    }
  }

  self.req.on('response', self.onRequestResponse.bind(self));
  self.req.on('error', self.onRequestError.bind(self));
  self.req.on('drain', function() {
    self.emit('drain');
  });

  self.req.on('socket', function(socket) {
    // `._connecting` was the old property which was made public in node v6.1.0
    var isConnecting = socket._connecting || socket.connecting;
    if (self.timing) {
      self.timings.socket = performanceNow() - self.startTimeNow;

      if (isConnecting) {
        var onLookupTiming = function() {
          self.timings.lookup = performanceNow() - self.startTimeNow;
        };

        var onConnectTiming = function() {
          self.timings.connect = performanceNow() - self.startTimeNow;
        };

        socket.once('lookup', onLookupTiming);
        socket.once('connect', onConnectTiming);

        // clean up timing event listeners if needed on error
        self.req.once('error', function() {
          socket.removeListener('lookup', onLookupTiming);
          socket.removeListener('connect', onConnectTiming);
        });
      }
    }

    var setReqTimeout = function() {
      // This timeout sets the amount of time to wait *between* bytes sent
      // from the server once connected.
      //
      // In particular, it's useful for erroring if the server fails to send
      // data halfway through streaming a response.
      self.req.setTimeout(timeout, function() {
        if (self.req) {
          self.abort();
          var e = new Error('ESOCKETTIMEDOUT');
          e.code = 'ESOCKETTIMEDOUT';
          e.connect = false;
          self.emit('error', e);
        }
      });
    };
    if (timeout !== undefined) {
      // Only start the connection timer if we're actually connecting a new
      // socket, otherwise if we're already connected (because this is a
      // keep-alive connection) do not bother. This is important since we won't
      // get a 'connect' event for an already connected socket.
      if (isConnecting) {
        var onReqSockConnect = function() {
          socket.removeListener('connect', onReqSockConnect);
          clearTimeout(self.timeoutTimer);
          self.timeoutTimer = null;
          setReqTimeout();
        };

        socket.on('connect', onReqSockConnect);

        self.req.on('error', function(err) {
          // eslint-disable-line handle-callback-err
          socket.removeListener('connect', onReqSockConnect);
        });

        // Set a timeout in memory - this block will throw if the server takes more
        // than `timeout` to write the HTTP status and headers (corresponding to
        // the on('response') event on the client). NB: this measures wall-clock
        // time, not the time between bytes sent by the server.
        self.timeoutTimer = setTimeout(function() {
          socket.removeListener('connect', onReqSockConnect);
          self.abort();
          var e = new Error('ETIMEDOUT');
          e.code = 'ETIMEDOUT';
          e.connect = true;
          self.emit('error', e);
        }, timeout);
      } else {
        // We're already connected
        setReqTimeout();
      }
    }
    self.emit('socket', socket);
  });

  self.emit('request', self.req);
};

Request.prototype.onRequestError = function(error) {
  var self = this;
  if (self._aborted) {
    return;
  }
  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' && self.agent.addRequestNoreuse) {
    self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) };
    self.start();
    self.req.end();
    return;
  }
  if (self.timeout && self.timeoutTimer) {
    clearTimeout(self.timeoutTimer);
    self.timeoutTimer = null;
  }
  self.emit('error', error);
};

Request.prototype.onRequestResponse = function(response) {
  var self = this;

  if (self.timing) {
    self.timings.response = performanceNow() - self.startTimeNow;
  }

  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers);
  response.on('end', function() {
    if (self.timing) {
      self.timings.end = performanceNow() - self.startTimeNow;
      response.timingStart = self.startTime;

      // fill in the blanks for any periods that didn't trigger, such as
      // no lookup or connect due to keep alive
      if (!self.timings.socket) {
        self.timings.socket = 0;
      }
      if (!self.timings.lookup) {
        self.timings.lookup = self.timings.socket;
      }
      if (!self.timings.connect) {
        self.timings.connect = self.timings.lookup;
      }
      if (!self.timings.response) {
        self.timings.response = self.timings.connect;
      }

      debug('elapsed time', self.timings.end);

      // elapsedTime includes all redirects
      self.elapsedTime += Math.round(self.timings.end);

      // NOTE: elapsedTime is deprecated in favor of .timings
      response.elapsedTime = self.elapsedTime;

      // timings is just for the final fetch
      response.timings = self.timings;

      // pre-calculate phase timings as well
      response.timingPhases = {
        wait: self.timings.socket,
        dns: self.timings.lookup - self.timings.socket,
        tcp: self.timings.connect - self.timings.lookup,
        firstByte: self.timings.response - self.timings.connect,
        download: self.timings.end - self.timings.response,
        total: self.timings.end
      };
    }
    debug('response end', self.uri.href, response.statusCode, response.headers);
  });

  if (self._aborted) {
    debug('aborted', self.uri.href);
    response.resume();
    return;
  }

  self.response = response;
  response.request = self;
  response.toJSON = responseToJSON;

  // XXX This is different on 0.10, because SSL is strict by default
  if (
    self.httpModule === https__default['default'] &&
    self.strictSSL &&
    (!response.hasOwnProperty('socket') || !response.socket.authorized)
  ) {
    debug('strict ssl error', self.uri.href);
    var sslErr = response.hasOwnProperty('socket')
      ? response.socket.authorizationError
      : self.uri.href + ' does not support SSL';
    self.emit('error', new Error('SSL Error: ' + sslErr));
    return;
  }

  // Save the original host before any redirect (if it changes, we need to
  // remove any authorization headers).  Also remember the case of the header
  // name because lots of broken servers expect Host instead of host and we
  // want the caller to be able to specify this.
  self.originalHost = self.getHeader('host');
  if (!self.originalHostHeaderName) {
    self.originalHostHeaderName = self.hasHeader('host');
  }
  if (self.setHost) {
    self.removeHeader('host');
  }
  if (self.timeout && self.timeoutTimer) {
    clearTimeout(self.timeoutTimer);
    self.timeoutTimer = null;
  }

  var targetCookieJar = self._jar && self._jar.setCookie ? self._jar : globalCookieJar;
  var addCookie = function(cookie) {
    // set the cookie if it's domain in the href's domain.
    try {
      targetCookieJar.setCookie(cookie, self.uri.href, { ignoreError: true });
    } catch (e) {
      self.emit('error', e);
    }
  };

  response.caseless = caseless(response.headers);

  if (response.caseless.has('set-cookie') && !self._disableCookies) {
    var headerName = response.caseless.has('set-cookie');
    if (Array.isArray(response.headers[headerName])) {
      response.headers[headerName].forEach(addCookie);
    } else {
      addCookie(response.headers[headerName]);
    }
  }

  if (self._redirect.onResponse(response)) {
    return; // Ignore the rest of the response
  } else {
    // Be a good stream and emit end when the response is finished.
    // Hack to emit end on close because of a core bug that never fires end
    response.on('close', function() {
      if (!self._ended) {
        self.response.emit('end');
      }
    });

    response.once('end', function() {
      self._ended = true;
    });

    var noBody = function(code) {
      return (
        self.method === 'HEAD' ||
        // Informational
        (code >= 100 && code < 200) ||
        // No Content
        code === 204 ||
        // Not Modified
        code === 304
      );
    };

    var responseContent;
    if (self.gzip && !noBody(response.statusCode)) {
      var contentEncoding = response.headers['content-encoding'] || 'identity';
      contentEncoding = contentEncoding.trim().toLowerCase();

      // Be more lenient with decoding compressed responses, since (very rarely)
      // servers send slightly invalid gzip responses that are still accepted
      // by common browsers.
      // Always using Z_SYNC_FLUSH is what cURL does.
      var zlibOptions = {
        flush: zlib__default['default'].Z_SYNC_FLUSH,
        finishFlush: zlib__default['default'].Z_SYNC_FLUSH
      };

      if (contentEncoding === 'gzip') {
        responseContent = zlib__default['default'].createGunzip(zlibOptions);
        response.pipe(responseContent);
      } else if (contentEncoding === 'deflate') {
        responseContent = zlib__default['default'].createInflate(zlibOptions);
        response.pipe(responseContent);
      } else {
        // Since previous versions didn't check for Content-Encoding header,
        // ignore any invalid values to preserve backwards-compatibility
        if (contentEncoding !== 'identity') {
          debug('ignoring unrecognized Content-Encoding ' + contentEncoding);
        }
        responseContent = response;
      }
    } else {
      responseContent = response;
    }

    if (self.encoding) {
      if (self.dests.length !== 0) {
        console.error(
          'Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.'
        );
      } else {
        responseContent.setEncoding(self.encoding);
      }
    }

    if (self._paused) {
      responseContent.pause();
    }

    self.responseContent = responseContent;

    self.emit('response', response);

    self.dests.forEach(function(dest) {
      self.pipeDest(dest);
    });

    responseContent.on('data', function(chunk) {
      if (self.timing && !self.responseStarted) {
        self.responseStartTime = new Date().getTime();

        // NOTE: responseStartTime is deprecated in favor of .timings
        response.responseStartTime = self.responseStartTime;
      }
      self._destdata = true;
      self.emit('data', chunk);
    });
    responseContent.once('end', function(chunk) {
      self.emit('end', chunk);
    });
    responseContent.on('error', function(error) {
      self.emit('error', error);
    });
    responseContent.on('close', function() {
      self.emit('close');
    });

    if (self.callback) {
      self.readResponseBody(response);
    } else {
      // if no callback
      self.on('end', function() {
        if (self._aborted) {
          debug('aborted', self.uri.href);
          return;
        }
        self.emit('complete', response);
      });
    }
  }
  debug('finish init function', self.uri.href);
};

Request.prototype.readResponseBody = function(response) {
  var self = this;
  debug("reading response's body");
  var buffers = [];
  var bufferLength = 0;
  var strings = [];

  self.on('data', function(chunk) {
    if (!Buffer$t.isBuffer(chunk)) {
      strings.push(chunk);
    } else if (chunk.length) {
      bufferLength += chunk.length;
      buffers.push(chunk);
    }
  });
  self.on('end', function() {
    debug('end event', self.uri.href);
    if (self._aborted) {
      debug('aborted', self.uri.href);
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffers = [];
      bufferLength = 0;
      return;
    }

    if (bufferLength) {
      debug('has body', self.uri.href, bufferLength);
      response.body = Buffer$t.concat(buffers, bufferLength);
      if (self.encoding !== null) {
        response.body = response.body.toString(self.encoding);
      }
      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
      // This can lead to leaky behavior if the user retains a reference to the request object.
      buffers = [];
      bufferLength = 0;
    } else if (strings.length) {
      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
        strings[0] = strings[0].substring(1);
      }
      response.body = strings.join('');
    }

    if (self._json) {
      try {
        response.body = JSON.parse(response.body, self._jsonReviver);
      } catch (e) {
        debug('invalid JSON received', self.uri.href);
      }
    }
    debug('emitting complete', self.uri.href);
    if (typeof response.body === 'undefined' && !self._json) {
      response.body = self.encoding === null ? Buffer$t.alloc(0) : '';
    }
    self.emit('complete', response, response.body);
  });
};

Request.prototype.abort = function() {
  var self = this;
  self._aborted = true;

  if (self.req) {
    self.req.abort();
  } else if (self.response) {
    self.response.destroy();
  }

  self.emit('abort');
};

Request.prototype.pipeDest = function(dest) {
  var self = this;
  var response = self.response;
  // Called after the response is received
  if (dest.headers && !dest.headersSent) {
    if (response.caseless.has('content-type')) {
      var ctname = response.caseless.has('content-type');
      if (dest.setHeader) {
        dest.setHeader(ctname, response.headers[ctname]);
      } else {
        dest.headers[ctname] = response.headers[ctname];
      }
    }

    if (response.caseless.has('content-length')) {
      var clname = response.caseless.has('content-length');
      if (dest.setHeader) {
        dest.setHeader(clname, response.headers[clname]);
      } else {
        dest.headers[clname] = response.headers[clname];
      }
    }
  }
  if (dest.setHeader && !dest.headersSent) {
    for (var i in response.headers) {
      // If the response content is being decoded, the Content-Encoding header
      // of the response doesn't represent the piped content, so don't pass it.
      if (!self.gzip || i !== 'content-encoding') {
        dest.setHeader(i, response.headers[i]);
      }
    }
    dest.statusCode = response.statusCode;
  }
  if (self.pipefilter) {
    self.pipefilter(response, dest);
  }
};

Request.prototype.qs = function(q, clobber) {
  var self = this;
  var base;
  if (!clobber && self.uri.query) {
    base = self._qs.parse(self.uri.query);
  } else {
    base = {};
  }

  for (var i in q) {
    base[i] = q[i];
  }

  var qs = self._qs.stringify(base);

  if (qs === '') {
    return self;
  }

  self.uri = url__default['default'].parse(self.uri.href.split('?')[0] + '?' + qs);
  self.url = self.uri;
  self.path = self.uri.path;

  if (self.uri.host === 'unix') {
    self.enableUnixSocket();
  }

  return self;
};
Request.prototype.form = function(form) {
  var self = this;
  if (form) {
    if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
      self.setHeader('content-type', 'application/x-www-form-urlencoded');
    }
    self.body =
      typeof form === 'string' ? self._qs.rfc3986(form.toString('utf8')) : self._qs.stringify(form).toString('utf8');
    return self;
  }
  // create form-data object
  self._form = new form_data();
  self._form.on('error', function(err) {
    err.message = 'form-data: ' + err.message;
    self.emit('error', err);
    self.abort();
  });
  return self._form;
};
Request.prototype.multipart = function(multipart) {
  var self = this;

  self._multipart.onRequest(multipart);

  if (!self._multipart.chunked) {
    self.body = self._multipart.body;
  }

  return self;
};
Request.prototype.json = function(val) {
  var self = this;

  if (!self.hasHeader('accept')) {
    self.setHeader('accept', 'application/json');
  }

  if (typeof self.jsonReplacer === 'function') {
    self._jsonReplacer = self.jsonReplacer;
  }

  self._json = true;
  if (typeof val === 'boolean') {
    if (self.body !== undefined) {
      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
        self.body = safeStringify$1(self.body, self._jsonReplacer);
      } else {
        self.body = self._qs.rfc3986(self.body);
      }
      if (!self.hasHeader('content-type')) {
        self.setHeader('content-type', 'application/json');
      }
    }
  } else {
    self.body = safeStringify$1(val, self._jsonReplacer);
    if (!self.hasHeader('content-type')) {
      self.setHeader('content-type', 'application/json');
    }
  }

  if (typeof self.jsonReviver === 'function') {
    self._jsonReviver = self.jsonReviver;
  }

  return self;
};
Request.prototype.getHeader = function(name, headers) {
  var self = this;
  var result, re, match;
  if (!headers) {
    headers = self.headers;
  }
  Object.keys(headers).forEach(function(key) {
    if (key.length !== name.length) {
      return;
    }
    re = new RegExp(name, 'i');
    match = key.match(re);
    if (match) {
      result = headers[key];
    }
  });
  return result;
};
Request.prototype.enableUnixSocket = function() {
  // Get the socket & request paths from the URL
  var unixParts = this.uri.path.split(':');
  var host = unixParts[0];
  var path = unixParts[1];
  // Apply unix properties to request
  this.socketPath = host;
  this.uri.pathname = path;
  this.uri.path = path;
  this.uri.host = host;
  this.uri.hostname = host;
  this.uri.isUnix = true;
};

Request.prototype.auth = function(user, pass, sendImmediately, bearer) {
  var self = this;

  self._auth.onRequest(user, pass, sendImmediately, bearer);

  return self;
};
Request.prototype.aws = function(opts, now) {
  var self = this;

  if (!now) {
    self._aws = opts;
    return self;
  }

  if (opts.sign_version === 4 || opts.sign_version === '4') {
    // use aws4
    var options = {
      host: self.uri.host,
      path: self.uri.path,
      method: self.method,
      headers: self.headers,
      body: self.body
    };
    if (opts.service) {
      options.service = opts.service;
    }
    var signRes = aws4_1.sign(options, {
      accessKeyId: opts.key,
      secretAccessKey: opts.secret,
      sessionToken: opts.session
    });
    self.setHeader('authorization', signRes.headers.Authorization);
    self.setHeader('x-amz-date', signRes.headers['X-Amz-Date']);
    if (signRes.headers['X-Amz-Security-Token']) {
      self.setHeader('x-amz-security-token', signRes.headers['X-Amz-Security-Token']);
    }
  } else {
    // default: use aws-sign2
    var date = new Date();
    self.setHeader('date', date.toUTCString());
    var auth = {
      key: opts.key,
      secret: opts.secret,
      verb: self.method.toUpperCase(),
      date: date,
      contentType: self.getHeader('content-type') || '',
      md5: self.getHeader('content-md5') || '',
      amazonHeaders: awsSign2.canonicalizeHeaders(self.headers)
    };
    var path = self.uri.path;
    if (opts.bucket && path) {
      auth.resource = '/' + opts.bucket + path;
    } else if (opts.bucket && !path) {
      auth.resource = '/' + opts.bucket;
    } else if (!opts.bucket && path) {
      auth.resource = path;
    } else if (!opts.bucket && !path) {
      auth.resource = '/';
    }
    auth.resource = awsSign2.canonicalizeResource(auth.resource);
    self.setHeader('authorization', awsSign2.authorization(auth));
  }

  return self;
};
Request.prototype.httpSignature = function(opts) {
  var self = this;
  lib$2.signRequest(
    {
      getHeader: function(header) {
        return self.getHeader(header, self.headers);
      },
      setHeader: function(header, value) {
        self.setHeader(header, value);
      },
      method: self.method,
      path: self.path
    },
    opts
  );
  debug('httpSignature authorization', self.getHeader('authorization'));

  return self;
};
Request.prototype.hawk = function(opts) {
  var self = this;
  self.setHeader('Authorization', hawk.header(self.uri, self.method, opts));
};
Request.prototype.oauth = function(_oauth) {
  var self = this;

  self._oauth.onRequest(_oauth);

  return self;
};

Request.prototype.jar = function(jar) {
  var self = this;
  var cookies;

  if (self._redirect.redirectsFollowed === 0) {
    self.originalCookieHeader = self.getHeader('cookie');
  }

  if (!jar) {
    // disable cookies
    cookies = false;
    self._disableCookies = true;
  } else {
    var targetCookieJar = jar && jar.getCookieString ? jar : globalCookieJar;
    var urihref = self.uri.href;
    // fetch cookie in the Specified host
    if (targetCookieJar) {
      cookies = targetCookieJar.getCookieString(urihref);
    }
  }

  // if need cookie and cookie is not empty
  if (cookies && cookies.length) {
    if (self.originalCookieHeader) {
      // Don't overwrite existing Cookie header
      self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies);
    } else {
      self.setHeader('cookie', cookies);
    }
  }
  self._jar = jar;
  return self;
};

// Stream API
Request.prototype.pipe = function(dest, opts) {
  var self = this;

  if (self.response) {
    if (self._destdata) {
      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'));
    } else if (self._ended) {
      self.emit('error', new Error('You cannot pipe after the response has been ended.'));
    } else {
      Stream__default['default'].Stream.prototype.pipe.call(self, dest, opts);
      self.pipeDest(dest);
      return dest;
    }
  } else {
    self.dests.push(dest);
    Stream__default['default'].Stream.prototype.pipe.call(self, dest, opts);
    return dest;
  }
};
Request.prototype.write = function() {
  var self = this;
  if (self._aborted) {
    return;
  }

  if (!self._started) {
    self.start();
  }
  if (self.req) {
    return self.req.write.apply(self.req, arguments);
  }
};
Request.prototype.end = function(chunk) {
  var self = this;
  if (self._aborted) {
    return;
  }

  if (chunk) {
    self.write(chunk);
  }
  if (!self._started) {
    self.start();
  }
  if (self.req) {
    self.req.end();
  }
};
Request.prototype.pause = function() {
  var self = this;
  if (!self.responseContent) {
    self._paused = true;
  } else {
    self.responseContent.pause.apply(self.responseContent, arguments);
  }
};
Request.prototype.resume = function() {
  var self = this;
  if (!self.responseContent) {
    self._paused = false;
  } else {
    self.responseContent.resume.apply(self.responseContent, arguments);
  }
};
Request.prototype.destroy = function() {
  var self = this;
  if (!self._ended) {
    self.end();
  } else if (self.response) {
    self.response.destroy();
  }
};

Request.defaultProxyHeaderWhiteList = Tunnel$1.defaultProxyHeaderWhiteList.slice();

Request.defaultProxyHeaderExclusiveList = Tunnel$1.defaultProxyHeaderExclusiveList.slice();

// Exports

Request.prototype.toJSON = requestToJSON;
var request$1 = Request;

var paramsHaveRequestBody$1 = helpers.paramsHaveRequestBody;

// organize params for patch, post, put, head, del
function initParams(uri, options, callback) {
  if (typeof options === 'function') {
    callback = options;
  }

  var params = {};
  if (typeof options === 'object') {
    extend(params, options, { uri: uri });
  } else if (typeof uri === 'string') {
    extend(params, { uri: uri });
  } else {
    extend(params, uri);
  }

  params.callback = callback || params.callback;
  return params;
}

function request$2(uri, options, callback) {
  if (typeof uri === 'undefined') {
    throw new Error('undefined is not a valid uri or options object.');
  }

  var params = initParams(uri, options, callback);

  if (params.method === 'HEAD' && paramsHaveRequestBody$1(params)) {
    throw new Error('HTTP HEAD requests MUST NOT include a request body.');
  }

  return new request$2.Request(params);
}

function verbFunc(verb) {
  var method = verb.toUpperCase();
  return function(uri, options, callback) {
    var params = initParams(uri, options, callback);
    params.method = method;
    return request$2(params, params.callback);
  };
}

// define like this to please codeintel/intellisense IDEs
request$2.get = verbFunc('get');
request$2.head = verbFunc('head');
request$2.options = verbFunc('options');
request$2.post = verbFunc('post');
request$2.put = verbFunc('put');
request$2.patch = verbFunc('patch');
request$2.del = verbFunc('delete');
request$2['delete'] = verbFunc('delete');

request$2.jar = function(store) {
  return cookies.jar(store);
};

request$2.cookie = function(str) {
  return cookies.parse(str);
};

function wrapRequestMethod(method, options, requester, verb) {
  return function(uri, opts, callback) {
    var params = initParams(uri, opts, callback);

    var target = {};
    extend(true, target, options, params);

    target.pool = params.pool || options.pool;

    if (verb) {
      target.method = verb.toUpperCase();
    }

    if (typeof requester === 'function') {
      method = requester;
    }

    return method(target, target.callback);
  };
}

request$2.defaults = function(options, requester) {
  var self = this;

  options = options || {};

  if (typeof options === 'function') {
    requester = options;
    options = {};
  }

  var defaults = wrapRequestMethod(self, options, requester);

  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete'];
  verbs.forEach(function(verb) {
    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);
  });

  defaults.cookie = wrapRequestMethod(self.cookie, options, requester);
  defaults.jar = self.jar;
  defaults.defaults = self.defaults;
  return defaults;
};

request$2.forever = function(agentOptions, optionsArg) {
  var options = {};
  if (optionsArg) {
    extend(options, optionsArg);
  }
  if (agentOptions) {
    options.agentOptions = agentOptions;
  }

  options.forever = true;
  return request$2.defaults(options);
};

// Exports

var request_1 = request$2;
request$2.Request = request$1;
request$2.initParams = initParams;

// Backwards compatibility for request.debug
Object.defineProperty(request$2, 'debug', {
  enumerable: true,
  get: function() {
    return request$2.Request.debug;
  },
  set: function(debug) {
    request$2.Request.debug = debug;
  }
});

var processNextickArgs = _commonjsHelpers.createCommonjsModule(function(module) {
  if (
    typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    (process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0)
  ) {
    module.exports = { nextTick: nextTick };
  } else {
    module.exports = process;
  }

  function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== 'function') {
      throw new TypeError('"callback" argument must be a function');
    }
    var len = arguments.length;
    var args, i;
    switch (len) {
      case 0:
      case 1:
        return process.nextTick(fn);
      case 2:
        return process.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg2);
        });
      case 4:
        return process.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg2, arg3);
        });
      default:
        args = new Array(len - 1);
        i = 0;
        while (i < args.length) {
          args[i++] = arguments[i];
        }
        return process.nextTick(function afterTick() {
          fn.apply(null, args);
        });
    }
  }
});

var toString$1 = {}.toString;

var isarray =
  Array.isArray ||
  function(arr) {
    return toString$1.call(arr) == '[object Array]';
  };

var stream = Stream__default['default'];

/* eslint-disable node/no-deprecated-api */

var safeBuffer = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  var Buffer = buffer__default['default'].Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer__default['default'];
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer__default['default'], exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }
    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };

  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return buffer__default['default'].SlowBuffer(size);
  };
});

var BufferList = _commonjsHelpers.createCommonjsModule(function(module) {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var Buffer = safeBuffer.Buffer;

  function copyBuffer(src, target, offset) {
    src.copy(target, offset);
  }

  module.exports = (function() {
    function BufferList() {
      _classCallCheck(this, BufferList);

      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function push(v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;
      else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function unshift(v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;
      else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function clear() {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while ((p = p.next)) {
        ret += s + p.data;
      }
      return ret;
    };

    BufferList.prototype.concat = function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    return BufferList;
  })();

  if (util__default['default'] && util__default['default'].inspect && util__default['default'].inspect.custom) {
    module.exports.prototype[util__default['default'].inspect.custom] = function() {
      var obj = util__default['default'].inspect({ length: this.length });
      return this.constructor.name + ' ' + obj;
    };
  }
});

/*<replacement>*/

/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextickArgs.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function(err) {
    if (!cb && err) {
      processNextickArgs.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

var destroy_1 = {
  destroy: destroy,
  undestroy: undestroy
};

/**
 * For Node.js, simply re-export the core `util.deprecate` function.
 */

var node = util__default['default'].deprecate;

/*<replacement>*/

/*</replacement>*/

var _stream_writable = Writable;

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function() {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite =
  !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1
    ? setImmediate
    : processNextickArgs.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/

util.inherits = inherits;
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: node
};
/*</replacement>*/

/*<replacement>*/

/*</replacement>*/

/*<replacement>*/

var Buffer$u = safeBuffer.Buffer;
var OurUint8Array = _commonjsHelpers.commonjsGlobal.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer$u.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer$u.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

util.inherits(Writable, stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || _stream_duplex;

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;
  else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
  else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function() {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(
        function() {
          return this.getBuffer();
        },
        '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.',
        'DEP0003'
      )
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (
  typeof Symbol === 'function' &&
  Symbol.hasInstance &&
  typeof Function.prototype[Symbol.hasInstance] === 'function'
) {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || _stream_duplex;

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextickArgs.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextickArgs.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer$u.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';
  else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);
  else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (
    !(
      ['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf(
        (encoding + '').toLowerCase()
      ) > -1
    )
  )
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer$u.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);
  else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextickArgs.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextickArgs.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function(err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextickArgs.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextickArgs.nextTick(cb);
    else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroy_1.destroy;
Writable.prototype._undestroy = destroy_1.undestroy;
Writable.prototype._destroy = function(err, cb) {
  this.end();
  cb(err);
};

/*<replacement>*/

/*</replacement>*/

/*<replacement>*/
var objectKeys =
  Object.keys ||
  function(obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }
    return keys;
  };
/*</replacement>*/

var _stream_duplex = Duplex$1;

/*<replacement>*/

util.inherits = inherits;
/*</replacement>*/

util.inherits(Duplex$1, _stream_readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys$1 = objectKeys(_stream_writable.prototype);
  for (var v = 0; v < keys$1.length; v++) {
    var method = keys$1[v];
    if (!Duplex$1.prototype[method]) Duplex$1.prototype[method] = _stream_writable.prototype[method];
  }
}

function Duplex$1(options) {
  if (!(this instanceof Duplex$1)) return new Duplex$1(options);

  _stream_readable.call(this, options);
  _stream_writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex$1.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function() {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextickArgs.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex$1.prototype, 'destroyed', {
  get: function() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex$1.prototype._destroy = function(err, cb) {
  this.push(null);
  this.end();

  processNextickArgs.nextTick(cb, err);
};

/* eslint-disable node/no-deprecated-api */

var safeBuffer$1 = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  var Buffer = buffer__default['default'].Buffer;

  // alternative to using Object.keys for old browsers
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
    module.exports = buffer__default['default'];
  } else {
    // Copy properties from require('buffer')
    copyProps(buffer__default['default'], exports);
    exports.Buffer = SafeBuffer;
  }

  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
  }

  // Copy static methods from Buffer
  copyProps(Buffer, SafeBuffer);

  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') {
      throw new TypeError('Argument must not be a number');
    }
    return Buffer(arg, encodingOrOffset, length);
  };

  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    var buf = Buffer(size);
    if (fill !== undefined) {
      if (typeof encoding === 'string') {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };

  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return Buffer(size);
  };

  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') {
      throw new TypeError('Argument must be a number');
    }
    return buffer__default['default'].SlowBuffer(size);
  };
});

/*<replacement>*/

var Buffer$v = safeBuffer$1.Buffer;
/*</replacement>*/

var isEncoding =
  Buffer$v.isEncoding ||
  function(encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
      case 'raw':
        return true;
      default:
        return false;
    }
  };

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer$v.isEncoding === isEncoding || !isEncoding(enc)))
    throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var StringDecoder_1 = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer$v.allocUnsafe(nb);
}

StringDecoder.prototype.write = function(buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7f) return 0;
  else if (byte >> 5 === 0x06) return 2;
  else if (byte >> 4 === 0x0e) return 3;
  else if (byte >> 3 === 0x1e) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;
      else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xc0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xc0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xc0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xd800 && c <= 0xdbff) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

var string_decoder = {
  StringDecoder: StringDecoder_1
};

/*<replacement>*/

/*</replacement>*/

var _stream_readable = Readable;

/*<replacement>*/

/*</replacement>*/

/*<replacement>*/
var Duplex$2;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
events__default['default'].EventEmitter;

var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/

/*</replacement>*/

/*<replacement>*/

var Buffer$w = safeBuffer.Buffer;
var OurUint8Array$1 = _commonjsHelpers.commonjsGlobal.Uint8Array || function() {};
function _uint8ArrayToBuffer$1(chunk) {
  return Buffer$w.from(chunk);
}
function _isUint8Array$1(obj) {
  return Buffer$w.isBuffer(obj) || obj instanceof OurUint8Array$1;
}

/*</replacement>*/

/*<replacement>*/

util.inherits = inherits;
/*</replacement>*/

/*<replacement>*/

var debug$1 = void 0;
if (util__default['default'] && util__default['default'].debuglog) {
  debug$1 = util__default['default'].debuglog('stream');
} else {
  debug$1 = function() {};
}
/*</replacement>*/

var StringDecoder$1;

util.inherits(Readable, stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
  else if (isarray(emitter._events[event])) emitter._events[event].unshift(fn);
  else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex$2 = Duplex$2 || _stream_duplex;

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex$2;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;
  else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
  else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder$1) StringDecoder$1 = string_decoder.StringDecoder;
    this.decoder = new StringDecoder$1(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex$2 = Duplex$2 || _stream_duplex;

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroy_1.destroy;
Readable.prototype._undestroy = destroy_1.undestroy;
Readable.prototype._destroy = function(err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer$w.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || (chunk && chunk.length > 0)) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$w.prototype) {
        chunk = _uint8ArrayToBuffer$1(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));
        else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
          else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);
    else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array$1(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder$1) StringDecoder$1 = string_decoder.StringDecoder;
  this._readableState.decoder = new StringDecoder$1(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || (state.length === 0 && state.ended)) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;
    else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug$1('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug$1('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);
    else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug$1('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug$1('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug$1('reading or ended', doRead);
  } else if (doRead) {
    debug$1('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);
  else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug$1('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextickArgs.nextTick(emitReadable_, stream);
    else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug$1('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextickArgs.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug$1('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug$1('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextickArgs.nextTick(endFn);
  else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug$1('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug$1('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug$1('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug$1('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if (
        ((state.pipesCount === 1 && state.pipes === dest) ||
          (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) &&
        !cleanedUp
      ) {
        debug$1('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug$1('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug$1('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug$1('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug$1('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug$1('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextickArgs.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug$1('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug$1('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextickArgs.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug$1('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function() {
  debug$1('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug$1('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug$1('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function() {
    debug$1('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function(chunk) {
    debug$1('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;
    else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = (function(method) {
        return function() {
          return stream[method].apply(stream, arguments);
        };
      })(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function(n) {
    debug$1('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function() {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();
  else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');
    else if (state.buffer.length === 1) ret = state.buffer.head.data;
    else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while ((p = p.next)) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;
    else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;
        else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer$w.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while ((p = p.next)) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;
        else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextickArgs.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

var _stream_transform = Transform;

/*<replacement>*/

util.inherits = inherits;
/*</replacement>*/

util.inherits(Transform, _stream_duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  _stream_duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish$1);
}

function prefinish$1() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function(er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return _stream_duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function(err, cb) {
  var _this2 = this;

  _stream_duplex.prototype._destroy.call(this, err, function(err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

var _stream_passthrough = PassThrough;

/*<replacement>*/

util.inherits = inherits;
/*</replacement>*/

util.inherits(PassThrough, _stream_transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  _stream_transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

var readable = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  if (process.env.READABLE_STREAM === 'disable' && Stream__default['default']) {
    module.exports = Stream__default['default'];
    exports = module.exports = Stream__default['default'].Readable;
    exports.Readable = Stream__default['default'].Readable;
    exports.Writable = Stream__default['default'].Writable;
    exports.Duplex = Stream__default['default'].Duplex;
    exports.Transform = Stream__default['default'].Transform;
    exports.PassThrough = Stream__default['default'].PassThrough;
    exports.Stream = Stream__default['default'];
  } else {
    exports = module.exports = _stream_readable;
    exports.Stream = Stream__default['default'] || exports;
    exports.Readable = exports;
    exports.Writable = _stream_writable;
    exports.Duplex = _stream_duplex;
    exports.Transform = _stream_transform;
    exports.PassThrough = _stream_passthrough;
  }
});

/*global Sfdc */

var Duplex$3 = readable.Duplex;

function parseHeaders(hs) {
  var headers = {};
  hs.split(/\n/).forEach(function(line) {
    var pair = line.split(/\s*:\s*/);
    var name = pair[0].toLowerCase();
    var value = pair[1];
    headers[name] = value;
  });
  return headers;
}

var canvas = {
  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',

  createRequest: function(signedRequest) {
    return function(params, callback) {
      var response;
      var str = new Duplex$3();
      str._read = function(size) {
        if (response) {
          str.push(response.body);
        }
      };
      var bufs = [];
      var sent = false;
      str._write = function(chunk, encoding, callback) {
        bufs.push(chunk.toString(encoding));
        callback();
      };
      str.on('finish', function() {
        if (!sent) {
          send(bufs.join(''));
          sent = true;
        }
      });
      if (params.body || params.body === '' || !/^(put|post|patch)$/i.test(params.method)) {
        send(params.body);
        sent = true;
      }

      function send(body) {
        var settings = {
          client: signedRequest.client,
          method: params.method,
          data: body
        };
        if (params.headers) {
          settings.headers = {};
          for (var name in params.headers) {
            if (name.toLowerCase() === 'content-type') {
              settings.contentType = params.headers[name];
            } else {
              settings.headers[name] = params.headers[name];
            }
          }
        }
        settings.success = function(data) {
          var headers = parseHeaders(data.responseHeaders);
          var body = data.payload;
          if (!core.isString(body)) {
            body = JSON.stringify(body);
          }
          response = {
            statusCode: data.status,
            headers: headers,
            body: body
          };
          if (callback) {
            callback(null, response, response.body);
          }
          str.end();
        };
        settings.failure = function(err) {
          if (callback) {
            callback(err);
          }
        };
        Sfdc.canvas.client.ajax(params.url, settings);
      }
      return str;
    };
  }
};

/*global window, document */

var _index = 0;

var jsonp = {
  supported: typeof window !== 'undefined' && typeof document !== 'undefined',

  createRequest: function(jsonpParam, timeout) {
    jsonpParam = jsonpParam || 'callback';
    timeout = timeout || 10000;

    return function(params, callback) {
      if (params.method.toUpperCase() !== 'GET') {
        return callback(new Error('JSONP only supports GET request.'));
      }
      var cbFuncName = '_jsforce_jsonpCallback_' + ++_index;
      var callbacks = window;
      var url = params.url;
      url += url.indexOf('?') > 0 ? '&' : '?';
      url += jsonpParam + '=' + cbFuncName;

      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = url;
      document.documentElement.appendChild(script);

      var pid = setTimeout(function() {
        cleanup();
        callback(new Error('JSONP call time out.'));
      }, timeout);

      callbacks[cbFuncName] = function(res) {
        cleanup();
        callback(null, {
          statusCode: 200,
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify(res)
        });
      };

      var cleanup = function() {
        clearTimeout(pid);
        document.documentElement.removeChild(script);
        delete callbacks[cbFuncName];
      };
    };
  }
};

/*global process, Sfdc */

var transport = _commonjsHelpers.createCommonjsModule(function(module) {
  /* */

  var request = request_1;

  // set options if defaults setting is available in request, which is not available in xhr module.
  if (request.defaults) {
    var defaults = {
      followAllRedirects: true
    };
    if (process.env.HTTP_PROXY) {
      defaults.proxy = process.env.HTTP_PROXY;
    }
    if (parseInt(process.env.HTTP_TIMEOUT)) {
      defaults.timeout = parseInt(process.env.HTTP_TIMEOUT);
    }
    request = request.defaults(defaults);
  }

  var baseUrl;
  if (typeof window === 'undefined') {
    baseUrl = process.env.LOCATION_BASE_URL || '';
  } else {
    var apiHost = normalizeApiHost(window.location.host);
    baseUrl = apiHost ? 'https://' + apiHost : '';
  }

  /**
   * Add stream() method to promise (and following promise chain), to access original request stream.
   * @private
   */
  function streamify(promise, factory) {
    var _then = promise.then;
    promise.then = function() {
      factory();
      var newPromise = _then.apply(promise, arguments);
      return streamify(newPromise, factory);
    };
    promise.stream = factory;
    return promise;
  }

  /**
   * Normarize Salesforce API host name
   * @private
   */
  function normalizeApiHost(apiHost) {
    var m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);
    if (m) {
      apiHost = m[1] + '.salesforce.com';
    }
    return apiHost;
  }

  /**
   * Class for HTTP request transport
   *
   * @class
   * @protected
   */
  var Transport = (module.exports = function() {});

  /**
   * Make HTTP request, returns promise instead of stream
   *
   * @param {Object} params - HTTP request
   * @param {Callback.<Object>} [callback] - Calback Function
   * @returns {Promise.<Object>}
   */
  Transport.prototype.httpRequest = function(params, callback) {
    var deferred = promise.defer();
    var req;
    var httpRequest = this._getHttpRequestModule();
    var createRequest = function() {
      if (!req) {
        req = httpRequest(params, function(err, response) {
          if (err) {
            deferred.reject(err);
          } else {
            deferred.resolve(response);
          }
        });
      }
      return req;
    };
    return streamify(deferred.promise, createRequest).thenCall(callback);
  };

  /** @protected **/
  Transport.prototype._getHttpRequestModule = function() {
    return request;
  };

  /**
   * Class for JSONP request transport
   * @class Transport~JsonpTransport
   * @protected
   * @extends Transport
   * @param {String} jsonpParam - Callback parameter name for JSONP invokation.
   */
  var JsonpTransport = (Transport.JsonpTransport = function(jsonpParam) {
    this._jsonpParam = jsonpParam;
  });

  inherits(JsonpTransport, Transport);

  /** @protected **/
  JsonpTransport.prototype._getHttpRequestModule = function() {
    return jsonp.createRequest(this._jsonpParam);
  };

  JsonpTransport.supported = jsonp.supported;

  /**
   * Class for Sfdc Canvas request transport
   * @class Transport~CanvasTransport
   * @protected
   * @extends Transport
   * @param {Object} signedRequest - Parsed signed request object
   */
  var CanvasTransport = (Transport.CanvasTransport = function(signedRequest) {
    this._signedRequest = signedRequest;
  });

  inherits(CanvasTransport, Transport);

  /** @protected **/
  CanvasTransport.prototype._getHttpRequestModule = function() {
    return canvas.createRequest(this._signedRequest);
  };

  CanvasTransport.supported = canvas.supported;

  /**
   * Class for HTTP request transport using AJAX proxy service
   *
   * @class Transport~ProxyTransport
   * @protected
   * @extends Transport
   * @param {String} proxyUrl - AJAX Proxy server URL
   */
  var ProxyTransport = (Transport.ProxyTransport = function(proxyUrl) {
    this._proxyUrl = proxyUrl;
  });

  inherits(ProxyTransport, Transport);

  /**
   * Make HTTP request via AJAX proxy
   *
   * @method Transport~ProxyTransport#httpRequest
   * @param {Object} params - HTTP request
   * @param {Callback.<Object>} [callback] - Calback Function
   * @returns {Promise.<Object>}
   */
  ProxyTransport.prototype.httpRequest = function(params, callback) {
    var url = params.url;
    if (url.indexOf('/') === 0) {
      url = baseUrl + url;
    }
    var proxyParams = {
      method: params.method,
      url: this._proxyUrl + '?' + Date.now() + '.' + ('' + Math.random()).substring(2),
      headers: {
        'salesforceproxy-endpoint': url
      }
    };
    if (params.body || params.body === '') {
      proxyParams.body = params.body;
    }
    if (params.headers) {
      for (var name in params.headers) {
        proxyParams.headers[name] = params.headers[name];
      }
    }
    return ProxyTransport.super_.prototype.httpRequest.call(this, proxyParams, callback);
  };

  /**
   * Class for HTTP request transport using a proxy server
   *
   * @class Transport~HttpProxyTransport
   * @protected
   * @extends Transport
   * @param {String} httpProxy - URL of the HTTP proxy server
   */
  var HttpProxyTransport = (Transport.HttpProxyTransport = function(httpProxy) {
    this._httpProxy = httpProxy;
  });

  inherits(HttpProxyTransport, Transport);

  /**
   * Make HTTP request via proxy server
   *
   * @method Transport~HttpProxyTransport#httpRequest
   * @param {Object} params - HTTP request
   * @param {Callback.<Object>} [callback] - Callback Function
   * @returns {Promise.<Object>}
   */
  HttpProxyTransport.prototype.httpRequest = function(params, callback) {
    var url = params.url;
    if (url.indexOf('/') === 0) {
      url = baseUrl + url;
    }
    var proxyParams = {
      method: params.method,
      url: params.url,
      proxy: this._httpProxy,
      headers: {}
    };
    if (params.body || params.body === '') {
      proxyParams.body = params.body;
    }
    if (params.headers) {
      for (var name in params.headers) {
        proxyParams.headers[name] = params.headers[name];
      }
    }
    return HttpProxyTransport.super_.prototype.httpRequest.call(this, proxyParams, callback);
  };
});

var Transport = /*#__PURE__*/ Object.freeze(
  /*#__PURE__*/ Object.assign(/*#__PURE__*/ Object.create(null), transport, {
    default: transport
  })
);

/**
 * @file Manages Salesforce OAuth2 operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var oauth2 = _commonjsHelpers.createCommonjsModule(function(module) {
  var defaults = {
    loginUrl: 'https://login.salesforce.com'
  };

  /**
   * OAuth2 class
   *
   * @class
   * @constructor
   * @param {Object} options - OAuth2 config options
   * @param {String} [options.loginUrl] - Salesforce login server URL
   * @param {String} [options.authzServiceUrl] - OAuth2 authorization service URL. If not specified, it generates from default by adding to login server URL.
   * @param {String} [options.tokenServiceUrl] - OAuth2 token service URL. If not specified it generates from default by adding to login server URL.
   * @param {String} options.clientId - OAuth2 client ID.
   * @param {String} [options.clientSecret] - OAuth2 client secret (This is optional for public client).
   * @param {String} options.redirectUri - URI to be callbacked from Salesforce OAuth2 authorization service.
   */
  var OAuth2 = (module.exports = function(options) {
    if (options.authzServiceUrl && options.tokenServiceUrl) {
      this.loginUrl = options.authzServiceUrl
        .split('/')
        .slice(0, 3)
        .join('/');
      this.authzServiceUrl = options.authzServiceUrl;
      this.tokenServiceUrl = options.tokenServiceUrl;
      this.revokeServiceUrl = options.revokeServiceUrl;
    } else {
      this.loginUrl = options.loginUrl || defaults.loginUrl;
      this.authzServiceUrl = this.loginUrl + '/services/oauth2/authorize';
      this.tokenServiceUrl = this.loginUrl + '/services/oauth2/token';
      this.revokeServiceUrl = this.loginUrl + '/services/oauth2/revoke';
    }
    this.clientId = options.clientId;
    this.clientSecret = options.clientSecret;
    this.redirectUri = options.redirectUri;
    if (options.proxyUrl) {
      this._transport = new transport.ProxyTransport(options.proxyUrl);
    } else if (options.httpProxy) {
      this._transport = new transport.HttpProxyTransport(options.httpProxy);
    } else {
      this._transport = new transport();
    }
  });

  /**
   *
   */
  core.extend(
    OAuth2.prototype,
    /** @lends OAuth2.prototype **/ {
      /**
       * Get Salesforce OAuth2 authorization page URL to redirect user agent.
       *
       * @param {Object} params - Parameters
       * @param {String} [params.scope] - Scope values in space-separated string
       * @param {String} [params.state] - State parameter
       * @param {String} [params.code_challenge] - Code challenge value (RFC 7636 - Proof Key of Code Exchange)
       * @returns {String} Authorization page URL
       */
      getAuthorizationUrl: function(params) {
        params = core.extend(
          {
            response_type: 'code',
            client_id: this.clientId,
            redirect_uri: this.redirectUri
          },
          params || {}
        );
        return (
          this.authzServiceUrl +
          (this.authzServiceUrl.indexOf('?') >= 0 ? '&' : '?') +
          querystring__default['default'].stringify(params)
        );
      },

      /**
       * @typedef TokenResponse
       * @type {Object}
       * @property {String} access_token
       * @property {String} refresh_token
       */

      /**
       * OAuth2 Refresh Token Flow
       *
       * @param {String} refreshToken - Refresh token
       * @param {Callback.<TokenResponse>} [callback] - Callback function
       * @returns {Promise.<TokenResponse>}
       */
      refreshToken: function(refreshToken, callback) {
        var params = {
          grant_type: 'refresh_token',
          refresh_token: refreshToken,
          client_id: this.clientId
        };
        if (this.clientSecret) {
          params.client_secret = this.clientSecret;
        }
        return this._postParams(params, callback);
      },

      /**
       * OAuth2 Web Server Authentication Flow (Authorization Code)
       * Access Token Request
       *
       * @param {String} code - Authorization code
       * @param {Object} [params] - Optional parameters to send in token retrieval
       * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)
       * @param {Callback.<TokenResponse>} [callback] - Callback function
       * @returns {Promise.<TokenResponse>}
       */
      requestToken: function(code, params, callback) {
        if (typeof params === 'function') {
          callback = params;
          params = {};
        }
        params = core.extend(
          {
            grant_type: 'authorization_code',
            code: code,
            client_id: this.clientId,
            redirect_uri: this.redirectUri
          },
          params || {}
        );
        if (this.clientSecret) {
          params.client_secret = this.clientSecret;
        }
        return this._postParams(params, callback);
      },

      /**
       * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
       *
       * @param {String} username - Salesforce username
       * @param {String} password - Salesforce password
       * @param {Callback.<TokenResponse>} [callback] - Callback function
       * @returns {Promise.<TokenResponse>}
       */
      authenticate: function(username, password, callback) {
        return this._postParams(
          {
            grant_type: 'password',
            username: username,
            password: password,
            client_id: this.clientId,
            client_secret: this.clientSecret,
            redirect_uri: this.redirectUri
          },
          callback
        );
      },

      /**
       * OAuth2 Revoke Session or API Token
       *
       * @param {String} token - Access or Refresh token to revoke. Passing in the Access token revokes the session. Passing in the Refresh token revokes API Access.
       * @param {Callback.<undefined>} [callback] - Callback function
       * @returns {Promise.<undefined>}
       */
      revokeToken: function(token, callback) {
        return this._transport
          .httpRequest({
            method: 'POST',
            url: this.revokeServiceUrl,
            body: querystring__default['default'].stringify({ token: token }),
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          })
          .then(function(response) {
            if (response.statusCode >= 400) {
              var res = querystring__default['default'].parse(response.body);
              if (!res || !res.error) {
                res = { error: 'ERROR_HTTP_' + response.statusCode, error_description: response.body };
              }
              var err = new Error(res.error_description);
              err.name = res.error;
              throw err;
            }
          })
          .thenCall(callback);
      },

      /**
       * @private
       */
      _postParams: function(params, callback) {
        return this._transport
          .httpRequest({
            method: 'POST',
            url: this.tokenServiceUrl,
            body: querystring__default['default'].stringify(params),
            headers: {
              'content-type': 'application/x-www-form-urlencoded'
            }
          })
          .then(function(response) {
            var res;
            try {
              res = JSON.parse(response.body);
            } catch (e) {}
            if (response.statusCode >= 400) {
              res = res || { error: 'ERROR_HTTP_' + response.statusCode, error_description: response.body };
              var err = new Error(res.error_description);
              err.name = res.error;
              throw err;
            }
            return res;
          })
          .thenCall(callback);
      }
    }
  );
});

var date$1 = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * A date object to keep Salesforce date literal
   *
   * @class
   * @constructor
   * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
   */
  var SfDate = (module.exports = function(literal) {
    this._literal = literal;
  });

  /**
   * Returns literal when converted to string
   *
   * @override
   */
  SfDate.prototype.toString = SfDate.prototype.toJSON = function() {
    return this._literal;
  };

  /** @private **/
  function zeropad(n) {
    return (n < 10 ? '0' : '') + n;
  }

  /**
   * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
   *
   * @param {String|Number|Date} date - Input date
   * @returns {SfDate} - Salesforce date literal with ISO8601 date format
   */
  SfDate.toDateLiteral = function(date) {
    if (core.isNumber(date)) {
      date = new Date(date);
    } else if (core.isString(date)) {
      date = SfDate.parseDate(date);
    }
    var yy = date.getFullYear();
    var mm = date.getMonth() + 1;
    var dd = date.getDate();
    var dstr = [yy, zeropad(mm), zeropad(dd)].join('-');
    return new SfDate(dstr);
  };

  /**
   * Convert JavaScript date object to ISO8601 DateTime format
   * (e.g. 2012-10-31T12:34:56Z)
   *
   * @param {String|Number|Date} date - Input date
   * @returns {SfDate} - Salesforce date literal with ISO8601 datetime format
   */
  SfDate.toDateTimeLiteral = function(date) {
    if (core.isNumber(date)) {
      date = new Date(date);
    } else if (core.isString(date)) {
      date = SfDate.parseDate(date);
    }
    var yy = date.getUTCFullYear();
    var mm = date.getUTCMonth() + 1;
    var dd = date.getUTCDate();
    var hh = date.getUTCHours();
    var mi = date.getUTCMinutes();
    var ss = date.getUTCSeconds();
    var dtstr =
      [yy, zeropad(mm), zeropad(dd)].join('-') + 'T' + [zeropad(hh), zeropad(mi), zeropad(ss)].join(':') + 'Z';
    return new SfDate(dtstr);
  };

  /**
   * Parse IS08601 date(time) formatted string and return date instance
   *
   * @param {String} str
   * @returns {Date}
   */
  SfDate.parseDate = function(str) {
    var d = new Date();
    var regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([\+\-])([\d]{2}):?([\d]{2})))?$/;
    var m = str.match(regexp);
    if (m) {
      d = new Date(0);
      if (!m[4]) {
        d.setFullYear(parseInt(m[1], 10));
        d.setDate(parseInt(m[3], 10));
        d.setMonth(parseInt(m[2], 10) - 1);
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        d.setMilliseconds(0);
      } else {
        d.setUTCFullYear(parseInt(m[1], 10));
        d.setUTCDate(parseInt(m[3], 10));
        d.setUTCMonth(parseInt(m[2], 10) - 1);
        d.setUTCHours(parseInt(m[5], 10));
        d.setUTCMinutes(parseInt(m[6], 10));
        d.setUTCSeconds(parseInt(m[7], 10));
        d.setUTCMilliseconds(parseInt(m[9] || '0', 10));
        if (m[10] && m[10] !== 'Z') {
          var offset = parseInt(m[12], 10) * 60 + parseInt(m[13], 10);
          d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 + d.getTime());
        }
      }
      return d;
    } else {
      throw new Error('Invalid date format is specified : ' + str);
    }
  };

  /*
   * Pre-defined Salesforce Date Literals
   */
  var SfDateLiterals = {
    YESTERDAY: 1,
    TODAY: 1,
    TOMORROW: 1,
    LAST_WEEK: 1,
    THIS_WEEK: 1,
    NEXT_WEEK: 1,
    LAST_MONTH: 1,
    THIS_MONTH: 1,
    NEXT_MONTH: 1,
    LAST_90_DAYS: 1,
    NEXT_90_DAYS: 1,
    LAST_N_DAYS: 2,
    NEXT_N_DAYS: 2,
    NEXT_N_WEEKS: 2,
    LAST_N_WEEKS: 2,
    NEXT_N_MONTHS: 2,
    LAST_N_MONTHS: 2,
    THIS_QUARTER: 1,
    LAST_QUARTER: 1,
    NEXT_QUARTER: 1,
    NEXT_N_QUARTERS: 2,
    LAST_N_QUARTERS: 2,
    THIS_YEAR: 1,
    LAST_YEAR: 1,
    NEXT_YEAR: 1,
    NEXT_N_YEARS: 2,
    LAST_N_YEARS: 2,
    THIS_FISCAL_QUARTER: 1,
    LAST_FISCAL_QUARTER: 1,
    NEXT_FISCAL_QUARTER: 1,
    NEXT_N_FISCAL_QUARTERS: 2,
    LAST_N_FISCAL_QUARTERS: 2,
    THIS_FISCAL_YEAR: 1,
    LAST_FISCAL_YEAR: 1,
    NEXT_FISCAL_YEAR: 1,
    NEXT_N_FISCAL_YEARS: 2,
    LAST_N_FISCAL_YEARS: 2
  };

  for (var literal in SfDateLiterals) {
    var type = SfDateLiterals[literal];
    SfDate[literal] = type === 1 ? new SfDate(literal) : createLiteralBuilder(literal);
  }

  /** @private **/
  function createLiteralBuilder(literal) {
    return function(num) {
      return new SfDate(literal + ':' + num);
    };
  }
});

/**
 * @file Create and build SOQL string from configuration
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * Create SOQL
 * @private
 */
function createSOQL(query) {
  var soql = ['SELECT ', createFieldsClause(query.fields, query.includes), ' FROM ', query.table].join('');
  var cond = createConditionClause(query.conditions);
  if (cond) {
    soql += ' WHERE ' + cond;
  }
  var orderby = createOrderByClause(query.sort);
  if (orderby) {
    soql += ' ORDER BY ' + orderby;
  }
  if (query.limit) {
    soql += ' LIMIT ' + query.limit;
  }
  if (query.offset) {
    soql += ' OFFSET ' + query.offset;
  }
  return soql;
}

/** @private **/
function createFieldsClause(fields, childQueries) {
  childQueries = core.map(core.values(childQueries || {}), function(cquery) {
    return '(' + createSOQL(cquery) + ')';
  });
  return (fields || ['Id']).concat(childQueries).join(', ');
}

/** @private **/
function createConditionClause(conditions, operator, depth) {
  if (core.isString(conditions)) {
    return conditions;
  }
  conditions = conditions || [];
  operator = operator || 'AND';
  depth = depth || 0;
  if (!isArray$3(conditions)) {
    // if passed in hash object
    conditions = core.keys(conditions).map(function(key) {
      return {
        key: key,
        value: conditions[key]
      };
    });
  } else {
    conditions = conditions.map(function(cond) {
      var conds = [];
      for (var key in cond) {
        conds.push({
          key: key,
          value: cond[key]
        });
      }
      return conds.length > 1 ? conds : conds[0];
    });
  }
  conditions = conditions
    .map(function(cond) {
      var d = depth + 1,
        op;
      switch (cond.key) {
        case '$or':
        case '$and':
        case '$not':
          if (operator !== 'NOT' && conditions.length === 1) {
            d = depth; // not change tree depth
          }
          op = cond.key === '$or' ? 'OR' : cond.key === '$and' ? 'AND' : 'NOT';
          return createConditionClause(cond.value, op, d);
        default:
          return createFieldExpression(cond.key, cond.value);
      }
    })
    .filter(function(expr) {
      return expr;
    });

  var paren;
  if (operator === 'NOT') {
    paren = depth > 0;
    return (paren ? '(' : '') + 'NOT ' + conditions[0] + (paren ? ')' : '');
  } else {
    paren = depth > 0 && conditions.length > 1;
    return (paren ? '(' : '') + conditions.join(' ' + operator + ' ') + (paren ? ')' : '');
  }
}

var opMap = {
  '=': '=',
  $eq: '=',
  '!=': '!=',
  $ne: '!=',
  '>': '>',
  $gt: '>',
  '<': '<',
  $lt: '<',
  '>=': '>=',
  $gte: '>=',
  '<=': '<=',
  $lte: '<=',
  $like: 'LIKE',
  $nlike: 'NOT LIKE',
  $in: 'IN',
  $nin: 'NOT IN',
  $includes: 'INCLUDES',
  $excludes: 'EXCLUDES',
  $exists: 'EXISTS'
};

/** @private **/
function createFieldExpression(field, value) {
  var op = '$eq';

  // Assume the `$in` operator if value is an array and none was supplied.
  if (core.isArray(value)) {
    op = '$in';
  }
  // Otherwise, if an object was passed then process the supplied ops.
  else if (core.isObject(value)) {
    for (var k in value) {
      if (k[0] === '$') {
        op = k;
        value = value[k];
        break;
      }
    }
  }
  var sfop = opMap[op];
  if (!sfop || core.isUndefined(value)) {
    return null;
  }
  var valueExpr = createValueExpression(value);
  if (core.isUndefined(valueExpr)) {
    return null;
  }
  switch (sfop) {
    case 'NOT LIKE':
      return '(' + ['NOT', field, 'LIKE', valueExpr].join(' ') + ')';
    case 'EXISTS':
      return [field, value ? '!=' : '=', 'null'].join(' ');
    default:
      return [field, sfop, valueExpr].join(' ');
  }
}

/** @private **/
function createValueExpression(value) {
  if (isArray$3(value)) {
    return value.length > 0 ? '(' + value.map(createValueExpression).join(', ') + ')' : undefined;
  }
  if (value instanceof date$1) {
    return value.toString();
  }
  if (core.isString(value)) {
    return "'" + escapeSOQLString(value) + "'";
  }
  if (core.isNumber(value)) {
    return value.toString();
  }
  if (core.isNull(value)) {
    return 'null';
  }
  return value;
}

/** @private **/
function escapeSOQLString(str) {
  return String(str || '').replace(/'/g, "\\'");
}

/** @private **/
function isArray$3(a) {
  return core.isObject(a) && core.isFunction(a.pop);
}

/** @private **/
function createOrderByClause(sort) {
  sort = sort || [];
  if (core.isString(sort)) {
    if (/,|\s+(asc|desc)\s*$/.test(sort)) {
      // must be specified in pure "order by" clause. Return raw config.
      return sort;
    }
    // sort order in mongoose-style expression.
    // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"
    sort = sort.split(/\s+/).map(function(field) {
      var dir = 'ASC'; // ascending
      var flag = field[0];
      if (flag === '-') {
        dir = 'DESC';
        field = field.substring(1);
      } else if (flag === '+') {
        field = field.substring(1);
      }
      return [field, dir];
    });
  } else if (!isArray$3(sort)) {
    sort = core.keys(sort).map(function(field) {
      var dir = sort[field];
      return [field, dir];
    });
  }
  return sort
    .map(function(s) {
      var field = s[0],
        dir = s[1];
      switch (String(dir)) {
        case 'DESC':
        case 'desc':
        case 'descending':
        case '-':
        case '-1':
          dir = 'DESC';
          break;
        default:
          dir = 'ASC';
      }
      return field + ' ' + dir;
    })
    .join(', ');
}

var createSOQL_1 = createSOQL;

var soqlBuilder = {
  createSOQL: createSOQL_1
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var ResizeableBuffer =
  /*#__PURE__*/
  (function() {
    function ResizeableBuffer() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;

      _classCallCheck(this, ResizeableBuffer);

      this.size = size;
      this.length = 0;
      this.buf = Buffer.alloc(size);
    }

    _createClass(ResizeableBuffer, [
      {
        key: 'prepend',
        value: function prepend(val) {
          var length = this.length++;

          if (length === this.size) {
            this.resize();
          }

          var buf = this.clone();
          this.buf[0] = val;
          buf.copy(this.buf, 1, 0, length);
        }
      },
      {
        key: 'append',
        value: function append(val) {
          var length = this.length++;

          if (length === this.size) {
            this.resize();
          }

          this.buf[length] = val;
        }
      },
      {
        key: 'clone',
        value: function clone() {
          return Buffer.from(this.buf.slice(0, this.length));
        }
      },
      {
        key: 'resize',
        value: function resize() {
          var length = this.length;
          this.size = this.size * 2;
          var buf = Buffer.alloc(this.size);
          this.buf.copy(buf, 0, 0, length);
          this.buf = buf;
        }
      },
      {
        key: 'toString',
        value: function toString() {
          return this.buf.slice(0, this.length).toString();
        }
      },
      {
        key: 'toJSON',
        value: function toJSON() {
          return this.toString();
        }
      },
      {
        key: 'reset',
        value: function reset() {
          this.length = 0;
        }
      }
    ]);

    return ResizeableBuffer;
  })();

var ResizeableBuffer_1 = ResizeableBuffer;

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === 'function' ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== 'function') {
      throw new TypeError('Super expression must either be null or a function');
    }
    if (typeof _cache !== 'undefined') {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf('[native code]') !== -1;
}

function _typeof(obj) {
  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
        ? 'symbol'
        : typeof obj;
    };
  }
  return _typeof(obj);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i['return'] != null) _i['return']();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError('Invalid attempt to spread non-iterable instance');
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]')
    return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(source, true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
    return call;
  }
  return _assertThisInitialized(self);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf
    ? Object.getPrototypeOf
    : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
  return _getPrototypeOf(o);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function');
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: { value: subClass, writable: true, configurable: true }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf =
    Object.setPrototypeOf ||
    function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
  return _setPrototypeOf(o, p);
}

/*
CSV Parse

Please look at the [project documentation](https://csv.js.org/parse/) for additional
information.
*/
var Transform$1 = Stream__default['default'].Transform;

var cr = 13;
var nl = 10;
var space = 32;
var tab = 9;
var bom_utf8 = Buffer.from([239, 187, 191]);

var Parser =
  /*#__PURE__*/
  (function(_Transform) {
    _inherits(Parser, _Transform);

    function Parser() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck$1(this, Parser);

      _this = _possibleConstructorReturn(
        this,
        _getPrototypeOf(Parser).call(
          this,
          _objectSpread(
            {},
            {
              readableObjectMode: true
            },
            {},
            opts
          )
        )
      );
      var options = {}; // Merge with user options

      for (var opt in opts) {
        options[underscore(opt)] = opts[opt];
      } // Normalize option `bom`

      if (options.bom === undefined || options.bom === null || options.bom === false) {
        options.bom = false;
      } else if (options.bom !== true) {
        throw new Error('Invalid Option: bom must be true, got '.concat(JSON.stringify(options.bom)));
      } // Normalize option `cast`

      var fnCastField = null;

      if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {
        options.cast = undefined;
      } else if (typeof options.cast === 'function') {
        fnCastField = options.cast;
        options.cast = true;
      } else if (options.cast !== true) {
        throw new Error('Invalid Option: cast must be true or a function');
      } // Normalize option `cast_date`

      if (
        options.cast_date === undefined ||
        options.cast_date === null ||
        options.cast_date === false ||
        options.cast_date === ''
      ) {
        options.cast_date = false;
      } else if (options.cast_date === true) {
        options.cast_date = function(value) {
          var date = Date.parse(value);
          return !isNaN(date) ? new Date(date) : value;
        };
      } else if (typeof options.cast_date !== 'function') {
        throw new Error('Invalid Option: cast_date must be true or a function');
      } // Normalize option `columns`

      var fnFirstLineToHeaders = null;

      if (options.columns === true) {
        // Fields in the first line are converted as-is to columns
        fnFirstLineToHeaders = undefined;
      } else if (typeof options.columns === 'function') {
        fnFirstLineToHeaders = options.columns;
        options.columns = true;
      } else if (Array.isArray(options.columns)) {
        options.columns = normalizeColumnsArray(options.columns);
      } else if (options.columns === undefined || options.columns === null || options.columns === false) {
        options.columns = false;
      } else {
        throw new Error(
          'Invalid Option columns: expect an object or true, got '.concat(JSON.stringify(options.columns))
        );
      } // Normalize option `comment`

      if (
        options.comment === undefined ||
        options.comment === null ||
        options.comment === false ||
        options.comment === ''
      ) {
        options.comment = null;
      } else {
        if (typeof options.comment === 'string') {
          options.comment = Buffer.from(options.comment);
        }

        if (!Buffer.isBuffer(options.comment)) {
          throw new Error(
            'Invalid Option: comment must be a buffer or a string, got '.concat(JSON.stringify(options.comment))
          );
        }
      } // Normalize option `delimiter`

      if (options.delimiter === undefined || options.delimiter === null || options.delimiter === false) {
        options.delimiter = Buffer.from(',');
      } else if (Buffer.isBuffer(options.delimiter)) {
        if (options.delimiter.length === 0) {
          throw new Error('Invalid Option: delimiter must be a non empty buffer');
        } // Great, nothing to do
      } else if (typeof options.delimiter === 'string') {
        if (options.delimiter.length === 0) {
          throw new Error('Invalid Option: delimiter must be a non empty string');
        }

        options.delimiter = Buffer.from(options.delimiter);
      } else {
        throw new Error('Invalid Option: delimiter must be a string or a buffer, got '.concat(options.delimiter));
      } // Normalize option `escape`

      if (options.escape === undefined || options.escape === null) {
        options.escape = Buffer.from('"');
      } else if (typeof options.escape === 'string') {
        options.escape = Buffer.from(options.escape);
      }

      if (!Buffer.isBuffer(options.escape)) {
        throw new Error(
          'Invalid Option: escape must be a buffer or a string, got '.concat(JSON.stringify(options.escape))
        );
      } else if (options.escape.length !== 1) {
        throw new Error('Invalid Option Length: escape must be one character, got '.concat(options.escape.length));
      } else {
        options.escape = options.escape[0];
      } // Normalize option `from`

      if (options.from === undefined || options.from === null) {
        options.from = 1;
      } else {
        if (typeof options.from === 'string' && /\d+/.test(options.from)) {
          options.from = parseInt(options.from);
        }

        if (Number.isInteger(options.from)) {
          if (options.from < 0) {
            throw new Error('Invalid Option: from must be a positive integer, got '.concat(JSON.stringify(opts.from)));
          }
        } else {
          throw new Error('Invalid Option: from must be an integer, got '.concat(JSON.stringify(options.from)));
        }
      } // Normalize option `from_line`

      if (options.from_line === undefined || options.from_line === null) {
        options.from_line = 1;
      } else {
        if (typeof options.from_line === 'string' && /\d+/.test(options.from_line)) {
          options.from_line = parseInt(options.from_line);
        }

        if (Number.isInteger(options.from_line)) {
          if (options.from_line <= 0) {
            throw new Error(
              'Invalid Option: from_line must be a positive integer greater than 0, got '.concat(
                JSON.stringify(opts.from_line)
              )
            );
          }
        } else {
          throw new Error('Invalid Option: from_line must be an integer, got '.concat(JSON.stringify(opts.from_line)));
        }
      } // Normalize option `info`

      if (options.info === undefined || options.info === null || options.info === false) {
        options.info = false;
      } else if (options.info !== true) {
        throw new Error('Invalid Option: info must be true, got '.concat(JSON.stringify(options.info)));
      } // Normalize option `max_record_size`

      if (
        options.max_record_size === undefined ||
        options.max_record_size === null ||
        options.max_record_size === false
      ) {
        options.max_record_size = 0;
      } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0);
      else if (typeof options.max_record_size === 'string' && /\d+/.test(options.max_record_size)) {
        options.max_record_size = parseInt(options.max_record_size);
      } else {
        throw new Error(
          'Invalid Option: max_record_size must be a positive integer, got '.concat(
            JSON.stringify(options.max_record_size)
          )
        );
      } // Normalize option `objname`

      if (options.objname === undefined || options.objname === null || options.objname === false) {
        options.objname = undefined;
      } else if (Buffer.isBuffer(options.objname)) {
        if (options.objname.length === 0) {
          throw new Error('Invalid Option: objname must be a non empty buffer');
        }

        options.objname = options.objname.toString();
      } else if (typeof options.objname === 'string') {
        if (options.objname.length === 0) {
          throw new Error('Invalid Option: objname must be a non empty string');
        } // Great, nothing to do
      } else {
        throw new Error('Invalid Option: objname must be a string or a buffer, got '.concat(options.objname));
      } // Normalize option `quote`

      if (options.quote === null || options.quote === false || options.quote === '') {
        options.quote = null;
      } else {
        if (options.quote === undefined || options.quote === true) {
          options.quote = Buffer.from('"');
        } else if (typeof options.quote === 'string') {
          options.quote = Buffer.from(options.quote);
        }

        if (!Buffer.isBuffer(options.quote)) {
          throw new Error(
            'Invalid Option: quote must be a buffer or a string, got '.concat(JSON.stringify(options.quote))
          );
        } else if (options.quote.length !== 1) {
          throw new Error('Invalid Option Length: quote must be one character, got '.concat(options.quote.length));
        } else {
          options.quote = options.quote[0];
        }
      } // Normalize option `raw`

      if (options.raw === undefined || options.raw === null || options.raw === false) {
        options.raw = false;
      } else if (options.raw !== true) {
        throw new Error('Invalid Option: raw must be true, got '.concat(JSON.stringify(options.raw)));
      } // Normalize option `record_delimiter`

      if (!options.record_delimiter) {
        options.record_delimiter = [];
      } else if (!Array.isArray(options.record_delimiter)) {
        options.record_delimiter = [options.record_delimiter];
      }

      options.record_delimiter = options.record_delimiter.map(function(rd) {
        if (typeof rd === 'string') {
          rd = Buffer.from(rd);
        }

        return rd;
      }); // Normalize option `relax`

      if (typeof options.relax === 'boolean');
      else if (options.relax === undefined || options.relax === null) {
        options.relax = false;
      } else {
        throw new Error('Invalid Option: relax must be a boolean, got '.concat(JSON.stringify(options.relax)));
      } // Normalize option `relax_column_count`

      if (typeof options.relax_column_count === 'boolean');
      else if (options.relax_column_count === undefined || options.relax_column_count === null) {
        options.relax_column_count = false;
      } else {
        throw new Error(
          'Invalid Option: relax_column_count must be a boolean, got '.concat(
            JSON.stringify(options.relax_column_count)
          )
        );
      } // Normalize option `skip_empty_lines`

      if (typeof options.skip_empty_lines === 'boolean');
      else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {
        options.skip_empty_lines = false;
      } else {
        throw new Error(
          'Invalid Option: skip_empty_lines must be a boolean, got '.concat(JSON.stringify(options.skip_empty_lines))
        );
      } // Normalize option `skip_lines_with_empty_values`

      if (typeof options.skip_lines_with_empty_values === 'boolean');
      else if (options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null) {
        options.skip_lines_with_empty_values = false;
      } else {
        throw new Error(
          'Invalid Option: skip_lines_with_empty_values must be a boolean, got '.concat(
            JSON.stringify(options.skip_lines_with_empty_values)
          )
        );
      } // Normalize option `skip_lines_with_error`

      if (typeof options.skip_lines_with_error === 'boolean');
      else if (options.skip_lines_with_error === undefined || options.skip_lines_with_error === null) {
        options.skip_lines_with_error = false;
      } else {
        throw new Error(
          'Invalid Option: skip_lines_with_error must be a boolean, got '.concat(
            JSON.stringify(options.skip_lines_with_error)
          )
        );
      } // Normalize option `rtrim`

      if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {
        options.rtrim = false;
      } else if (options.rtrim !== true) {
        throw new Error('Invalid Option: rtrim must be a boolean, got '.concat(JSON.stringify(options.rtrim)));
      } // Normalize option `ltrim`

      if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {
        options.ltrim = false;
      } else if (options.ltrim !== true) {
        throw new Error('Invalid Option: ltrim must be a boolean, got '.concat(JSON.stringify(options.ltrim)));
      } // Normalize option `trim`

      if (options.trim === undefined || options.trim === null || options.trim === false) {
        options.trim = false;
      } else if (options.trim !== true) {
        throw new Error('Invalid Option: trim must be a boolean, got '.concat(JSON.stringify(options.trim)));
      } // Normalize options `trim`, `ltrim` and `rtrim`

      if (options.trim === true && opts.ltrim !== false) {
        options.ltrim = true;
      } else if (options.ltrim !== true) {
        options.ltrim = false;
      }

      if (options.trim === true && opts.rtrim !== false) {
        options.rtrim = true;
      } else if (options.rtrim !== true) {
        options.rtrim = false;
      } // Normalize option `to`

      if (options.to === undefined || options.to === null) {
        options.to = -1;
      } else {
        if (typeof options.to === 'string' && /\d+/.test(options.to)) {
          options.to = parseInt(options.to);
        }

        if (Number.isInteger(options.to)) {
          if (options.to <= 0) {
            throw new Error(
              'Invalid Option: to must be a positive integer greater than 0, got '.concat(JSON.stringify(opts.to))
            );
          }
        } else {
          throw new Error('Invalid Option: to must be an integer, got '.concat(JSON.stringify(opts.to)));
        }
      } // Normalize option `to_line`

      if (options.to_line === undefined || options.to_line === null) {
        options.to_line = -1;
      } else {
        if (typeof options.to_line === 'string' && /\d+/.test(options.to_line)) {
          options.to_line = parseInt(options.to_line);
        }

        if (Number.isInteger(options.to_line)) {
          if (options.to_line <= 0) {
            throw new Error(
              'Invalid Option: to_line must be a positive integer greater than 0, got '.concat(
                JSON.stringify(opts.to_line)
              )
            );
          }
        } else {
          throw new Error('Invalid Option: to_line must be an integer, got '.concat(JSON.stringify(opts.to_line)));
        }
      }

      _this.info = {
        comment_lines: 0,
        empty_lines: 0,
        invalid_field_length: 0,
        lines: 1,
        records: 0
      };
      _this.options = options;
      _this.state = {
        bomSkipped: false,
        castField: fnCastField,
        commenting: false,
        enabled: options.from_line === 1,
        escaping: false,
        escapeIsQuote: options.escape === options.quote,
        expectedRecordLength: options.columns === null ? 0 : options.columns.length,
        field: new ResizeableBuffer_1(20),
        firstLineToHeaders: fnFirstLineToHeaders,
        info: Object.assign({}, _this.info),
        previousBuf: undefined,
        quoting: false,
        stop: false,
        rawBuffer: new ResizeableBuffer_1(100),
        record: [],
        recordHasError: false,
        record_length: 0,
        recordDelimiterMaxLength:
          options.record_delimiter.length === 0
            ? 2
            : Math.max.apply(
                Math,
                _toConsumableArray(
                  options.record_delimiter.map(function(v) {
                    return v.length;
                  })
                )
              ),
        trimChars: [Buffer.from(' ')[0], Buffer.from('\t')[0]],
        wasQuoting: false,
        wasRowDelimiter: false
      };
      return _this;
    } // Implementation of `Transform._transform`

    _createClass$1(Parser, [
      {
        key: '_transform',
        value: function _transform(buf, encoding, callback) {
          if (this.state.stop === true) {
            return;
          }

          var err = this.__parse(buf, false);

          if (err !== undefined) {
            this.state.stop = true;
          }

          callback(err);
        } // Implementation of `Transform._flush`
      },
      {
        key: '_flush',
        value: function _flush(callback) {
          if (this.state.stop === true) {
            return;
          }

          var err = this.__parse(undefined, true);

          callback(err);
        } // Central parser implementation
      },
      {
        key: '__parse',
        value: function __parse(nextBuf, end) {
          var _this$options = this.options,
            bom = _this$options.bom,
            comment = _this$options.comment,
            escape = _this$options.escape,
            from_line = _this$options.from_line,
            info = _this$options.info,
            ltrim = _this$options.ltrim,
            max_record_size = _this$options.max_record_size,
            quote = _this$options.quote,
            raw = _this$options.raw,
            relax = _this$options.relax,
            rtrim = _this$options.rtrim,
            skip_empty_lines = _this$options.skip_empty_lines,
            to = _this$options.to,
            to_line = _this$options.to_line;
          var record_delimiter = this.options.record_delimiter;
          var _this$state = this.state,
            bomSkipped = _this$state.bomSkipped,
            previousBuf = _this$state.previousBuf,
            rawBuffer = _this$state.rawBuffer,
            escapeIsQuote = _this$state.escapeIsQuote;
          var buf;

          if (previousBuf === undefined) {
            if (nextBuf === undefined) {
              // Handle empty string
              this.push(null);
              return;
            } else {
              buf = nextBuf;
            }
          } else if (previousBuf !== undefined && nextBuf === undefined) {
            buf = previousBuf;
          } else {
            buf = Buffer.concat([previousBuf, nextBuf]);
          } // Handle UTF BOM

          if (bomSkipped === false) {
            if (bom === false) {
              this.state.bomSkipped = true;
            } else if (buf.length < 3) {
              // No enough data
              if (end === false) {
                // Wait for more data
                this.state.previousBuf = buf;
                return;
              } // skip BOM detect because data length < 3
            } else {
              if (bom_utf8.compare(buf, 0, 3) === 0) {
                // Skip BOM
                buf = buf.slice(3);
              }

              this.state.bomSkipped = true;
            }
          }

          var bufLen = buf.length;
          var pos;

          for (pos = 0; pos < bufLen; pos++) {
            // Ensure we get enough space to look ahead
            // There should be a way to move this out of the loop
            if (this.__needMoreData(pos, bufLen, end)) {
              break;
            }

            if (this.state.wasRowDelimiter === true) {
              this.info.lines++;

              if (
                info === true &&
                this.state.record.length === 0 &&
                this.state.field.length === 0 &&
                this.state.wasQuoting === false
              ) {
                this.state.info = Object.assign({}, this.info);
              }

              this.state.wasRowDelimiter = false;
            }

            if (to_line !== -1 && this.info.lines > to_line) {
              this.state.stop = true;
              this.push(null);
              return;
            } // Auto discovery of record_delimiter, unix, mac and windows supported

            if (this.state.quoting === false && record_delimiter.length === 0) {
              var record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos);

              if (record_delimiterCount) {
                record_delimiter = this.options.record_delimiter;
              }
            }

            var chr = buf[pos];

            if (raw === true) {
              rawBuffer.append(chr);
            }

            if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {
              this.state.wasRowDelimiter = true;
            } // Previous char was a valid escape char
            // treat the current char as a regular char

            if (this.state.escaping === true) {
              this.state.escaping = false;
            } else {
              // Escape is only active inside quoted fields
              if (this.state.quoting === true && chr === escape && pos + 1 < bufLen) {
                // We are quoting, the char is an escape chr and there is a chr to escape
                if (escapeIsQuote) {
                  if (buf[pos + 1] === quote) {
                    this.state.escaping = true;
                    continue;
                  }
                } else {
                  this.state.escaping = true;
                  continue;
                }
              } // Not currently escaping and chr is a quote
              // TODO: need to compare bytes instead of single char

              if (this.state.commenting === false && chr === quote) {
                if (this.state.quoting === true) {
                  var nextChr = buf[pos + 1];

                  var isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr); // const isNextChrComment = nextChr === comment

                  var isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + 1, nextChr);

                  var isNextChrDelimiter = this.__isDelimiter(nextChr, buf, pos + 1);

                  var isNextChrRowDelimiter =
                    record_delimiter.length === 0
                      ? this.__autoDiscoverRowDelimiter(buf, pos + 1)
                      : this.__isRecordDelimiter(nextChr, buf, pos + 1); // Escape a quote
                  // Treat next char as a regular character
                  // TODO: need to compare bytes instead of single char

                  if (chr === escape && nextChr === quote) {
                    pos++;
                  } else if (
                    !nextChr ||
                    isNextChrDelimiter ||
                    isNextChrRowDelimiter ||
                    isNextChrComment ||
                    isNextChrTrimable
                  ) {
                    this.state.quoting = false;
                    this.state.wasQuoting = true;
                    continue;
                  } else if (relax === false) {
                    var err = this.__error(
                      new CsvError(
                        'CSV_INVALID_CLOSING_QUOTE',
                        [
                          'Invalid Closing Quote:',
                          'got "'.concat(String.fromCharCode(nextChr), '"'),
                          'at line '.concat(this.info.lines),
                          'instead of delimiter, row delimiter, trimable character',
                          '(if activated) or comment'
                        ],
                        this.__context()
                      )
                    );

                    if (err !== undefined) return err;
                  } else {
                    this.state.quoting = false;
                    this.state.wasQuoting = true; // continue

                    this.state.field.prepend(quote);
                  }
                } else {
                  if (this.state.field.length !== 0) {
                    // In relax mode, treat opening quote preceded by chrs as regular
                    if (relax === false) {
                      var _err = this.__error(
                        new CsvError(
                          'INVALID_OPENING_QUOTE',
                          [
                            'Invalid Opening Quote:',
                            'a quote is found inside a field at line '.concat(this.info.lines)
                          ],
                          this.__context(),
                          {
                            field: this.state.field
                          }
                        )
                      );

                      if (_err !== undefined) return _err;
                    }
                  } else {
                    this.state.quoting = true;
                    continue;
                  }
                }
              }

              if (this.state.quoting === false) {
                var recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);

                if (recordDelimiterLength !== 0) {
                  // Do not emit comments which take a full line
                  var skipCommentLine =
                    this.state.commenting &&
                    this.state.wasQuoting === false &&
                    this.state.record.length === 0 &&
                    this.state.field.length === 0;

                  if (skipCommentLine) {
                    this.info.comment_lines++; // Skip full comment line
                  } else {
                    // Skip if line is empty and skip_empty_lines activated
                    if (
                      skip_empty_lines === true &&
                      this.state.wasQuoting === false &&
                      this.state.record.length === 0 &&
                      this.state.field.length === 0
                    ) {
                      this.info.empty_lines++;
                      pos += recordDelimiterLength - 1;
                      continue;
                    } // Activate records emition if above from_line

                    if (
                      this.state.enabled === false &&
                      this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line
                    ) {
                      this.state.enabled = true;

                      this.__resetField();

                      this.__resetRow();

                      pos += recordDelimiterLength - 1;
                      continue;
                    } else {
                      var errField = this.__onField();

                      if (errField !== undefined) return errField;

                      var errRecord = this.__onRow();

                      if (errRecord !== undefined) return errRecord;
                    }

                    if (to !== -1 && this.info.records >= to) {
                      this.state.stop = true;
                      this.push(null);
                      return;
                    }
                  }

                  this.state.commenting = false;
                  pos += recordDelimiterLength - 1;
                  continue;
                }

                if (this.state.commenting) {
                  continue;
                }

                var commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);

                if (commentCount !== 0) {
                  this.state.commenting = true;
                  continue;
                }

                var delimiterLength = this.__isDelimiter(chr, buf, pos);

                if (delimiterLength !== 0) {
                  var _errField = this.__onField();

                  if (_errField !== undefined) return _errField;
                  pos += delimiterLength - 1;
                  continue;
                }
              }
            }

            if (this.state.commenting === false) {
              if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {
                var _err2 = this.__error(
                  new CsvError(
                    'CSV_MAX_RECORD_SIZE',
                    [
                      'Max Record Size:',
                      'record exceed the maximum number of tolerated bytes',
                      'of '.concat(max_record_size),
                      'at line '.concat(this.info.lines)
                    ],
                    this.__context()
                  )
                );

                if (_err2 !== undefined) return _err2;
              }
            }

            var lappend =
              ltrim === false ||
              this.state.quoting === true ||
              this.state.field.length !== 0 ||
              !this.__isCharTrimable(chr); // rtrim in non quoting is handle in __onField

            var rappend = rtrim === false || this.state.wasQuoting === false;

            if (lappend === true && rappend === true) {
              this.state.field.append(chr);
            } else if (rtrim === true && !this.__isCharTrimable(chr)) {
              var _err3 = this.__error(
                new CsvError(
                  'CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE',
                  ['Invalid Closing Quote:', 'found non trimable byte after quote', 'at line '.concat(this.info.lines)],
                  this.__context()
                )
              );

              if (_err3 !== undefined) return _err3;
            }
          }

          if (end === true) {
            if (this.state.quoting === true) {
              var _err4 = this.__error(
                new CsvError(
                  'CSV_QUOTE_NOT_CLOSED',
                  [
                    'Quote Not Closed:',
                    'the parsing is finished with an opening quote at line '.concat(this.info.lines)
                  ],
                  this.__context()
                )
              );

              if (_err4 !== undefined) return _err4;
            } else {
              // Skip last line if it has no characters
              if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {
                var _errField2 = this.__onField();

                if (_errField2 !== undefined) return _errField2;

                var _errRecord = this.__onRow();

                if (_errRecord !== undefined) return _errRecord;
              } else if (this.state.wasRowDelimiter === true) {
                this.info.empty_lines++;
              } else if (this.state.commenting === true) {
                this.info.comment_lines++;
              }
            }
          } else {
            this.state.previousBuf = buf.slice(pos);
          }

          if (this.state.wasRowDelimiter === true) {
            this.info.lines++;
            this.state.wasRowDelimiter = false;
          }
        } // Helper to test if a character is a space or a line delimiter
      },
      {
        key: '__isCharTrimable',
        value: function __isCharTrimable(chr) {
          return chr === space || chr === tab || chr === cr || chr === nl;
        }
      },
      {
        key: '__onRow',
        value: function __onRow() {
          var _this$options2 = this.options,
            columns = _this$options2.columns,
            info = _this$options2.info,
            from = _this$options2.from,
            relax_column_count = _this$options2.relax_column_count,
            raw = _this$options2.raw,
            skip_lines_with_empty_values = _this$options2.skip_lines_with_empty_values;
          var _this$state2 = this.state,
            enabled = _this$state2.enabled,
            record = _this$state2.record; // Convert the first line into column names

          if (columns === true) {
            return this.__firstLineToColumns(record);
          }

          var recordLength = record.length;

          if (columns === false && this.info.records === 0) {
            this.state.expectedRecordLength = recordLength;
          } else if (enabled === true) {
            if (recordLength !== this.state.expectedRecordLength) {
              if (relax_column_count === true) {
                this.info.invalid_field_length++;
              } else {
                if (columns === false) {
                  var err = this.__error(
                    new CsvError(
                      'CSV_INVALID_RECORD_LENGTH_DONT_PREVIOUS_RECORDS',
                      [
                        'Invalid Record Length:',
                        'expect '.concat(this.state.expectedRecordLength, ','),
                        'got '.concat(recordLength, ' on line ').concat(this.info.lines)
                      ],
                      this.__context(),
                      {
                        record: record
                      }
                    )
                  );

                  if (err !== undefined) return err;
                } else {
                  var _err5 = this.__error(
                    new CsvError(
                      'CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS',
                      [
                        'Invalid Record Length:',
                        'header length is '.concat(columns.length, ','),
                        'got '.concat(recordLength, ' on line ').concat(this.info.lines)
                      ],
                      this.__context(),
                      {
                        record: record
                      }
                    )
                  );

                  if (_err5 !== undefined) return _err5;
                }
              }
            }
          }

          if (enabled === false) {
            return this.__resetRow();
          }

          if (skip_lines_with_empty_values === true) {
            if (
              record.every(function(field) {
                return field == null || (field.toString && field.toString().trim() === '');
              })
            ) {
              this.__resetRow();

              return;
            }
          }

          if (this.state.recordHasError === true) {
            this.__resetRow();

            this.state.recordHasError = false;
            return;
          }

          this.info.records++;

          if (from === 1 || this.info.records >= from) {
            if (columns !== false) {
              var obj = {}; // Transform record array to an object

              for (var i in record) {
                if (columns[i] === undefined || columns[i].disabled) continue;
                obj[columns[i].name] = record[i];
              }

              var objname = this.options.objname;

              if (objname === undefined) {
                if (raw === true || info === true) {
                  this.push(
                    Object.assign(
                      {
                        record: obj
                      },
                      raw === true
                        ? {
                            raw: this.state.rawBuffer.toString()
                          }
                        : {},
                      info === true
                        ? {
                            info: this.state.info
                          }
                        : {}
                    )
                  );
                } else {
                  this.push(obj);
                }
              } else {
                if (raw === true || info === true) {
                  this.push(
                    Object.assign(
                      {
                        record: [obj[objname], obj]
                      },
                      raw === true
                        ? {
                            raw: this.state.rawBuffer.toString()
                          }
                        : {},
                      info === true
                        ? {
                            info: this.state.info
                          }
                        : {}
                    )
                  );
                } else {
                  this.push([obj[objname], obj]);
                }
              }
            } else {
              if (raw === true || info === true) {
                this.push(
                  Object.assign(
                    {
                      record: record
                    },
                    raw === true
                      ? {
                          raw: this.state.rawBuffer.toString()
                        }
                      : {},
                    info === true
                      ? {
                          info: this.state.info
                        }
                      : {}
                  )
                );
              } else {
                this.push(record);
              }
            }
          }

          this.__resetRow();
        }
      },
      {
        key: '__firstLineToColumns',
        value: function __firstLineToColumns(record) {
          var firstLineToHeaders = this.state.firstLineToHeaders;

          try {
            var headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);

            if (!Array.isArray(headers)) {
              return this.__error(
                new CsvError(
                  'CSV_INVALID_COLUMN_MAPPING',
                  [
                    'Invalid Column Mapping:',
                    'expect an array from column function,',
                    'got '.concat(JSON.stringify(headers))
                  ],
                  this.__context(),
                  {
                    headers: headers
                  }
                )
              );
            }

            var normalizedHeaders = normalizeColumnsArray(headers);
            this.state.expectedRecordLength = normalizedHeaders.length;
            this.options.columns = normalizedHeaders;

            this.__resetRow();

            return;
          } catch (err) {
            return err;
          }
        }
      },
      {
        key: '__resetRow',
        value: function __resetRow() {
          if (this.options.raw === true) {
            this.state.rawBuffer.reset();
          }

          this.state.record = [];
          this.state.record_length = 0;
        }
      },
      {
        key: '__onField',
        value: function __onField() {
          var _this$options3 = this.options,
            cast = _this$options3.cast,
            rtrim = _this$options3.rtrim,
            max_record_size = _this$options3.max_record_size;
          var _this$state3 = this.state,
            enabled = _this$state3.enabled,
            wasQuoting = _this$state3.wasQuoting; // Deal with from_to options

          if (this.options.columns !== true && enabled === false) {
            return this.__resetField();
          }

          var field = this.state.field.toString();

          if (rtrim === true && wasQuoting === false) {
            field = field.trimRight();
          }

          if (cast === true) {
            var _this$__cast = this.__cast(field),
              _this$__cast2 = _slicedToArray(_this$__cast, 2),
              err = _this$__cast2[0],
              f = _this$__cast2[1];

            if (err !== undefined) return err;
            field = f;
          }

          this.state.record.push(field); // Increment record length if record size must not exceed a limit

          if (max_record_size !== 0 && typeof field === 'string') {
            this.state.record_length += field.length;
          }

          this.__resetField();
        }
      },
      {
        key: '__resetField',
        value: function __resetField() {
          this.state.field.reset();
          this.state.wasQuoting = false;
        } // Return a tuple with the error and the casted value
      },
      {
        key: '__cast',
        value: function __cast(field) {
          var _this$options4 = this.options,
            columns = _this$options4.columns,
            relax_column_count = _this$options4.relax_column_count;
          var isColumns = Array.isArray(columns); // Dont loose time calling cast
          // because the final record is an object
          // and this field can't be associated to a key present in columns

          if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {
            return [undefined, undefined];
          }

          var context = this.__context();

          if (this.state.castField !== null) {
            try {
              return [undefined, this.state.castField.call(null, field, context)];
            } catch (err) {
              return [err];
            }
          }

          if (this.__isFloat(field)) {
            return [undefined, parseFloat(field)];
          } else if (this.options.cast_date !== false) {
            return [undefined, this.options.cast_date.call(null, field, context)];
          }

          return [undefined, field];
        } // Keep it in case we implement the `cast_int` option
        // __isInt(value){
        //   // return Number.isInteger(parseInt(value))
        //   // return !isNaN( parseInt( obj ) );
        //   return /^(\-|\+)?[1-9][0-9]*$/.test(value)
        // }
      },
      {
        key: '__isFloat',
        value: function __isFloat(value) {
          return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery
        }
      },
      {
        key: '__compareBytes',
        value: function __compareBytes(sourceBuf, targetBuf, pos, firtByte) {
          if (sourceBuf[0] !== firtByte) return 0;
          var sourceLength = sourceBuf.length;

          for (var i = 1; i < sourceLength; i++) {
            if (sourceBuf[i] !== targetBuf[pos + i]) return 0;
          }

          return sourceLength;
        }
      },
      {
        key: '__needMoreData',
        value: function __needMoreData(i, bufLen, end) {
          if (end) {
            return false;
          }

          var _this$options5 = this.options,
            comment = _this$options5.comment,
            delimiter = _this$options5.delimiter;
          var _this$state4 = this.state,
            quoting = _this$state4.quoting,
            recordDelimiterMaxLength = _this$state4.recordDelimiterMaxLength;
          var numOfCharLeft = bufLen - i - 1;
          var requiredLength = Math.max(
            // Skip if the remaining buffer smaller than comment
            comment ? comment.length : 0, // Skip if the remaining buffer smaller than row delimiter
            recordDelimiterMaxLength, // Skip if the remaining buffer can be row delimiter following the closing quote
            // 1 is for quote.length
            quoting ? 1 + recordDelimiterMaxLength : 0, // Skip if the remaining buffer can be delimiter
            delimiter.length, // Skip if the remaining buffer can be escape sequence
            // 1 is for escape.length
            1
          );
          return numOfCharLeft < requiredLength;
        }
      },
      {
        key: '__isDelimiter',
        value: function __isDelimiter(chr, buf, pos) {
          var delimiter = this.options.delimiter;
          var delLength = delimiter.length;
          if (delimiter[0] !== chr) return 0;

          for (var i = 1; i < delLength; i++) {
            if (delimiter[i] !== buf[pos + i]) return 0;
          }

          return delimiter.length;
        }
      },
      {
        key: '__isRecordDelimiter',
        value: function __isRecordDelimiter(chr, buf, pos) {
          var record_delimiter = this.options.record_delimiter;
          var recordDelimiterLength = record_delimiter.length;

          loop1: for (var i = 0; i < recordDelimiterLength; i++) {
            var rd = record_delimiter[i];
            var rdLength = rd.length;

            if (rd[0] !== chr) {
              continue;
            }

            for (var j = 1; j < rdLength; j++) {
              if (rd[j] !== buf[pos + j]) {
                continue loop1;
              }
            }

            return rd.length;
          }

          return 0;
        }
      },
      {
        key: '__autoDiscoverRowDelimiter',
        value: function __autoDiscoverRowDelimiter(buf, pos) {
          var chr = buf[pos];

          if (chr === cr) {
            if (buf[pos + 1] === nl) {
              this.options.record_delimiter.push(Buffer.from('\r\n'));
              this.state.recordDelimiterMaxLength = 2;
              return 2;
            } else {
              this.options.record_delimiter.push(Buffer.from('\r'));
              this.state.recordDelimiterMaxLength = 1;
              return 1;
            }
          } else if (chr === nl) {
            this.options.record_delimiter.push(Buffer.from('\n'));
            this.state.recordDelimiterMaxLength = 1;
            return 1;
          }

          return 0;
        }
      },
      {
        key: '__error',
        value: function __error(msg) {
          var skip_lines_with_error = this.options.skip_lines_with_error;
          var err = typeof msg === 'string' ? new Error(msg) : msg;

          if (skip_lines_with_error) {
            this.state.recordHasError = true;
            this.emit('skip', err);
            return undefined;
          } else {
            return err;
          }
        }
      },
      {
        key: '__context',
        value: function __context() {
          var columns = this.options.columns;
          var isColumns = Array.isArray(columns);
          return {
            column:
              isColumns === true
                ? columns.length > this.state.record.length
                  ? columns[this.state.record.length].name
                  : null
                : this.state.record.length,
            empty_lines: this.info.empty_lines,
            header: columns === true,
            index: this.state.record.length,
            invalid_field_length: this.info.invalid_field_length,
            quoting: this.state.wasQuoting,
            lines: this.info.lines,
            records: this.info.records
          };
        }
      }
    ]);

    return Parser;
  })(Transform$1);

var parse$3 = function parse() {
  var data, options, callback;

  for (var i in arguments) {
    var argument = arguments[i];

    var type = _typeof(argument);

    if (data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))) {
      data = argument;
    } else if (options === undefined && isObject$1(argument)) {
      options = argument;
    } else if (callback === undefined && type === 'function') {
      callback = argument;
    } else {
      throw new Error('Invalid argument: got '.concat(JSON.stringify(argument), ' at index ').concat(i));
    }
  }

  var parser = new Parser(options);

  if (callback) {
    var records = options === undefined || options.objname === undefined ? [] : {};
    parser.on('readable', function() {
      var record;

      while ((record = this.read()) !== null) {
        if (options === undefined || options.objname === undefined) {
          records.push(record);
        } else {
          records[record[0]] = record[1];
        }
      }
    });
    parser.on('error', function(err) {
      callback(err, undefined, parser.info);
    });
    parser.on('end', function() {
      callback(undefined, records, parser.info);
    });
  }

  if (data !== undefined) {
    parser.write(data);
    parser.end();
  }

  return parser;
};

var CsvError =
  /*#__PURE__*/
  (function(_Error) {
    _inherits(CsvError, _Error);

    function CsvError(code, message) {
      var _this2;

      _classCallCheck$1(this, CsvError);

      if (Array.isArray(message)) message = message.join(' ');
      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CsvError).call(this, [message]));
      Error.captureStackTrace(_assertThisInitialized(_this2), CsvError);
      _this2.code = code;

      for (var _len = arguments.length, contexts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        contexts[_key - 2] = arguments[_key];
      }

      for (var _i2 = 0, _contexts = contexts; _i2 < _contexts.length; _i2++) {
        var context = _contexts[_i2];

        for (var key in context) {
          var value = context[key];
          _this2[key] = Buffer.isBuffer(value)
            ? value.toString()
            : value == null
            ? value
            : JSON.parse(JSON.stringify(value));
        }
      }

      return _this2;
    }

    return CsvError;
  })(_wrapNativeSuper(Error));

parse$3.Parser = Parser;
parse$3.CsvError = CsvError;
var es5 = parse$3;

var underscore = function underscore(str) {
  return str.replace(/([A-Z])/g, function(_, match) {
    return '_' + match.toLowerCase();
  });
};

var isObject$1 = function isObject(obj) {
  return _typeof(obj) === 'object' && obj !== null && !Array.isArray(obj);
};

var normalizeColumnsArray = function normalizeColumnsArray(columns) {
  var normalizedColumns = [];

  for (var i = 0; i < columns.length; i++) {
    var column = columns[i];

    if (column === undefined || column === null || column === false) {
      normalizedColumns[i] = {
        disabled: true
      };
    } else if (typeof column === 'string') {
      normalizedColumns[i] = {
        name: column
      };
    } else if (isObject$1(column)) {
      if (typeof column.name !== 'string') {
        throw new Error(
          'Invalid Option columns: property "name" is required at position '.concat(
            i,
            ' when column is an object literal'
          )
        );
      }

      normalizedColumns[i] = column;
    } else {
      throw new Error(
        'Invalid Option columns: expect a string or an object, got '
          .concat(JSON.stringify(column), ' at position ')
          .concat(i)
      );
    }
  }

  return normalizedColumns;
};

var sync = function(data) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof data === 'string') {
    data = Buffer.from(data);
  }

  var records = options && options.objname ? {} : [];
  var parser = new es5.Parser(options);

  parser.push = function(record) {
    if (options.objname === undefined) records.push(record);
    else {
      records[record[0]] = record[1];
    }
  };

  var err1 = parser.__parse(data, false);

  if (err1 !== undefined) throw err1;

  var err2 = parser.__parse(undefined, true);

  if (err2 !== undefined) throw err2;
  return records;
};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
  genTag = '[object GeneratorFunction]',
  symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
  reIsPlainProp = /^\w*$/,
  reLeadingDot = /^\./,
  rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal =
  typeof _commonjsHelpers.commonjsGlobal == 'object' &&
  _commonjsHelpers.commonjsGlobal &&
  _commonjsHelpers.commonjsGlobal.Object === Object &&
  _commonjsHelpers.commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
  funcProto = Function.prototype,
  objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
})();

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString$1 = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp(
  '^' +
    funcToString
      .call(hasOwnProperty)
      .replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') +
    '$'
);

/** Built-in value references. */
var Symbol$1 = root.Symbol,
  splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map'),
  nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
  symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
    length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
    length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
    index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
    index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
    index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
    length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    hash: new Hash(),
    map: new (Map$1 || ListCache)(),
    string: new Hash()
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
    length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject$2(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction$1(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol$1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray$4(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray$4(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'
    ? value !== '__proto__'
    : value === null;
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString$2(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol$1(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
      key = resolver ? resolver.apply(this, args) : args[0],
      cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray$4 = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject$2(value) ? objectToString$1.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$2(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol$1(value) {
  return typeof value == 'symbol' || (isObjectLike(value) && objectToString$1.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString$2(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var lodash_get = get;

// Generated by CoffeeScript 1.12.7
var Stringifier, get$1, stream$1, util$2;

stream$1 = Stream__default['default'];

util$2 = util__default['default'];

get$1 = lodash_get;

var lib$5 = function() {
  var callback, chunks, data, options, stringifier;
  if (arguments.length === 3) {
    data = arguments[0];
    options = arguments[1];
    callback = arguments[2];
  } else if (arguments.length === 2) {
    if (Array.isArray(arguments[0])) {
      data = arguments[0];
    } else {
      options = arguments[0];
    }
    if (typeof arguments[1] === 'function') {
      callback = arguments[1];
    } else {
      options = arguments[1];
    }
  } else if (arguments.length === 1) {
    if (typeof arguments[0] === 'function') {
      callback = arguments[0];
    } else if (Array.isArray(arguments[0])) {
      data = arguments[0];
    } else {
      options = arguments[0];
    }
  }
  if (options == null) {
    options = {};
  }
  stringifier = new Stringifier(options);
  if (data) {
    process.nextTick(function() {
      var d, j, len;
      for (j = 0, len = data.length; j < len; j++) {
        d = data[j];
        stringifier.write(d);
      }
      return stringifier.end();
    });
  }
  if (callback) {
    chunks = [];
    stringifier.on('readable', function() {
      var chunk, results;
      results = [];
      while ((chunk = stringifier.read())) {
        results.push(chunks.push(chunk));
      }
      return results;
    });
    stringifier.on('error', function(err) {
      return callback(err);
    });
    stringifier.on('end', function() {
      return callback(null, chunks.join(''));
    });
  }
  return stringifier;
};

Stringifier = function(opts) {
  var base,
    base1,
    base10,
    base11,
    base12,
    base13,
    base2,
    base3,
    base4,
    base5,
    base6,
    base7,
    base8,
    base9,
    k,
    options,
    v;
  if (opts == null) {
    opts = {};
  }
  options = {};
  for (k in opts) {
    v = opts[k];
    options[k] = v;
  }
  stream$1.Transform.call(this, options);
  this.options = options;
  if ((base = this.options).delimiter == null) {
    base.delimiter = ',';
  }
  if ((base1 = this.options).quote == null) {
    base1.quote = '"';
  }
  if ((base2 = this.options).quoted == null) {
    base2.quoted = false;
  }
  if ((base3 = this.options).quotedEmpty == null) {
    base3.quotedEmpty = void 0;
  }
  if ((base4 = this.options).quotedString == null) {
    base4.quotedString = false;
  }
  if ((base5 = this.options).eof == null) {
    base5.eof = true;
  }
  if ((base6 = this.options).escape == null) {
    base6.escape = '"';
  }
  if ((base7 = this.options).columns == null) {
    base7.columns = null;
  }
  if ((base8 = this.options).header == null) {
    base8.header = false;
  }
  if ((base9 = this.options).formatters == null) {
    base9.formatters = {};
  }
  if ((base10 = this.options.formatters).date == null) {
    base10.date = function(value) {
      return '' + value.getTime();
    };
  }
  if ((base11 = this.options.formatters).bool == null) {
    base11.bool = function(value) {
      if (value) {
        return '1';
      } else {
        return '';
      }
    };
  }
  if ((base12 = this.options.formatters).object == null) {
    base12.object = function(value) {
      return JSON.stringify(value);
    };
  }
  if ((base13 = this.options).rowDelimiter == null) {
    base13.rowDelimiter = '\n';
  }
  if (this.countWriten == null) {
    this.countWriten = 0;
  }
  switch (this.options.rowDelimiter) {
    case 'auto':
      this.options.rowDelimiter = null;
      break;
    case 'unix':
      this.options.rowDelimiter = '\n';
      break;
    case 'mac':
      this.options.rowDelimiter = '\r';
      break;
    case 'windows':
      this.options.rowDelimiter = '\r\n';
      break;
    case 'unicode':
      this.options.rowDelimiter = '\u2028';
  }
  return this;
};

util$2.inherits(Stringifier, stream$1.Transform);

var Stringifier_1 = Stringifier;

Stringifier.prototype.headers = function() {
  var k, label, labels;
  if (!this.options.header) {
    return;
  }
  if (!this.options.columns) {
    return;
  }
  labels = this.options.columns;
  if (typeof labels === 'object') {
    labels = (function() {
      var results;
      results = [];
      for (k in labels) {
        label = labels[k];
        results.push(label);
      }
      return results;
    })();
  }
  if (this.options.eof) {
    labels = this.stringify(labels) + this.options.rowDelimiter;
  } else {
    labels = this.stringify(labels);
  }
  return stream$1.Transform.prototype.write.call(this, labels);
};

Stringifier.prototype.end = function(chunk, encoding, callback) {
  if (this.countWriten === 0) {
    this.headers();
  }
  return stream$1.Transform.prototype.end.apply(this, arguments);
};

Stringifier.prototype.write = function(chunk, encoding, callback) {
  var base, e, preserve;
  if (chunk == null) {
    return;
  }
  preserve = typeof chunk !== 'object';
  if (!preserve) {
    if (this.countWriten === 0 && !Array.isArray(chunk)) {
      if ((base = this.options).columns == null) {
        base.columns = Object.keys(chunk);
      }
    }
    try {
      this.emit('record', chunk, this.countWriten);
    } catch (error) {
      e = error;
      return this.emit('error', e);
    }
    if (this.options.eof) {
      chunk = this.stringify(chunk) + this.options.rowDelimiter;
    } else {
      chunk = this.stringify(chunk);
      if (this.options.header || this.countWriten) {
        chunk = this.options.rowDelimiter + chunk;
      }
    }
  }
  if (typeof chunk === 'number') {
    chunk = '' + chunk;
  }
  if (this.countWriten === 0) {
    this.headers();
  }
  if (!preserve) {
    this.countWriten++;
  }
  return stream$1.Transform.prototype.write.call(this, chunk, encoding, callback);
};

Stringifier.prototype._transform = function(chunk, encoding, callback) {
  this.push(chunk);
  return callback();
};

Stringifier.prototype.stringify = function(line) {
  var _line,
    column,
    columns,
    containsEscape,
    containsLinebreak,
    containsQuote,
    containsdelimiter,
    delimiter,
    escape,
    field,
    i,
    j,
    l,
    newLine,
    quote,
    ref,
    ref1,
    regexp,
    shouldQuote,
    value;
  if (typeof line !== 'object') {
    return line;
  }
  columns = this.options.columns;
  if (typeof columns === 'object' && columns !== null && !Array.isArray(columns)) {
    columns = Object.keys(columns);
  }
  delimiter = this.options.delimiter;
  quote = this.options.quote;
  escape = this.options.escape;
  if (!Array.isArray(line)) {
    _line = [];
    if (columns) {
      for (i = j = 0, ref = columns.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        column = columns[i];
        value = get$1(line, column);
        _line[i] = typeof value === 'undefined' || value === null ? '' : value;
      }
    } else {
      for (column in line) {
        _line.push(line[column]);
      }
    }
    line = _line;
    _line = null;
  } else if (columns) {
    line.splice(columns.length);
  }
  if (Array.isArray(line)) {
    newLine = '';
    for (i = l = 0, ref1 = line.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
      field = line[i];
      if (typeof field === 'string');
      else if (typeof field === 'number') {
        field = '' + field;
      } else if (typeof field === 'boolean') {
        field = this.options.formatters.bool(field);
      } else if (field instanceof Date) {
        field = this.options.formatters.date(field);
      } else if (typeof field === 'object' && field !== null) {
        field = this.options.formatters.object(field);
      }
      if (field) {
        containsdelimiter = field.indexOf(delimiter) >= 0;
        containsQuote = field.indexOf(quote) >= 0;
        containsEscape = field.indexOf(escape) >= 0 && escape !== quote;
        containsLinebreak = field.indexOf('\r') >= 0 || field.indexOf('\n') >= 0;
        shouldQuote =
          containsQuote ||
          containsdelimiter ||
          containsLinebreak ||
          this.options.quoted ||
          (this.options.quotedString && typeof line[i] === 'string');
        if (shouldQuote && containsEscape) {
          regexp = escape === '\\' ? new RegExp(escape + escape, 'g') : new RegExp(escape, 'g');
          field = field.replace(regexp, escape + escape);
        }
        if (containsQuote) {
          regexp = new RegExp(quote, 'g');
          field = field.replace(regexp, escape + quote);
        }
        if (shouldQuote) {
          field = quote + field + quote;
        }
        newLine += field;
      } else if (
        this.options.quotedEmpty ||
        (this.options.quotedEmpty == null && line[i] === '' && this.options.quotedString)
      ) {
        newLine += quote + quote;
      }
      if (i !== line.length - 1) {
        newLine += delimiter;
      }
    }
    line = newLine;
  }
  return line;
};
lib$5.Stringifier = Stringifier_1;

// Generated by CoffeeScript 1.12.7
var StringDecoder$2, stringify$1;

StringDecoder$2 = require$$0__default['default'].StringDecoder;

stringify$1 = lib$5;

var sync$1 = function(records, options) {
  var data, decoder, i, len, record, stringifier;
  if (options == null) {
    options = {};
  }
  data = [];
  if (records instanceof Buffer) {
    decoder = new StringDecoder$2();
    records = decoder.write(records);
  }
  stringifier = new stringify$1.Stringifier(options);
  stringifier.push = function(record) {
    if (record) {
      return data.push(record.toString());
    }
  };
  for (i = 0, len = records.length; i < len; i++) {
    record = records[i];
    stringifier.write(record);
  }
  stringifier.end();
  return data.join('');
};

/**
 * @private
 */
function parseCSV(str, options) {
  options = core.extend({}, options, { columns: true });
  return sync(str, options);
}

/**
 * @private
 */
function toCSV(records, options) {
  options = core.extend({}, options, { header: true });
  return sync$1(records, options);
}

/**
 * @private
 */
function parseCSVStream(options) {
  options = core.extend({}, options, { columns: true });
  return es5(options);
}

/**
 * @private
 */
function serializeCSVStream(options) {
  options = core.extend({}, options, { header: true });
  return lib$5(options);
}

/**
 * @protected
 */
var csv = {
  parseCSV: parseCSV,
  toCSV: toCSV,
  parseCSVStream: parseCSVStream,
  serializeCSVStream: serializeCSVStream
};

/**
 * @file Represents stream that handles Salesforce record as stream data
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var recordStream = _commonjsHelpers.createCommonjsModule(function(module) {
  readable.Duplex;
  var Transform = readable.Transform,
    PassThrough = readable.PassThrough;

  /**
   * Class for Record Stream
   *
   * @class
   * @constructor
   * @extends stream.Transform
   */
  var RecordStream = (module.exports = function() {
    RecordStream.super_.call(this, { objectMode: true });
  });

  inherits(RecordStream, Transform);

  /*
   * @override
   */
  RecordStream.prototype._transform = function(record, enc, callback) {
    this.emit('record', record);
    this.push(record);
    callback();
  };

  /**
   * Get record stream of queried records applying the given mapping function
   *
   * @param {RecordMapFunction} fn - Record mapping function
   * @returns {RecordStream}
   */
  RecordStream.prototype.map = function(fn) {
    return this.pipe(RecordStream.map(fn));
  };

  /**
   * Get record stream of queried records, applying the given filter function
   *
   * @param {RecordFilterFunction} fn - Record filtering function
   * @returns {RecordStream}
   */
  RecordStream.prototype.filter = function(fn) {
    return this.pipe(RecordStream.filter(fn));
  };

  /**
   * @class RecordStream.Serializable
   * @extends {RecordStream}
   */
  var Serializable = (RecordStream.Serializable = function() {
    Serializable.super_.call(this);
    this._dataStream = null;
  });

  inherits(Serializable, RecordStream);

  /**
   * Create readable data stream which emits serialized record data
   *
   * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
   * @param {Object} [options] - Options passed to converter
   * @returns {stream.Readable}
   */
  Serializable.prototype.stream = function(type, options) {
    type = type || 'csv';
    var converter = DataStreamConverters[type];
    if (!converter) {
      throw new Error('Converting [' + type + '] data stream is not supported.');
    }
    if (!this._dataStream) {
      this._dataStream = new PassThrough();
      this.pipe(converter.serialize(options)).pipe(this._dataStream);
    }
    return this._dataStream;
  };

  /**
   * @class RecordStream.Parsable
   * @extends {RecordStream}
   */
  var Parsable = (RecordStream.Parsable = function() {
    Parsable.super_.call(this);
    this._dataStream = null;
  });

  inherits(Parsable, RecordStream);

  /**
   * Create writable data stream which accepts serialized record data
   *
   * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
   * @param {Object} [options] - Options passed to converter
   * @returns {stream.Readable}
   */
  Parsable.prototype.stream = function(type, options) {
    type = type || 'csv';
    var converter = DataStreamConverters[type];
    var self = this;
    if (!converter) {
      throw new Error('Converting [' + type + '] data stream is not supported.');
    }
    if (!this._dataStream) {
      this._dataStream = new PassThrough();
      this._parserStream = converter.parse(options).on('error', function(error) {
        self.emit('error', error);
      });
      this._parserStream.pipe(this).pipe(new PassThrough({ objectMode: true, highWaterMark: 500 * 1000 }));
    }
    return this._dataStream;
  };

  /* @override */
  Parsable.prototype.on = function(ev, fn) {
    if (ev === 'readable' || ev === 'record') {
      this._dataStream.pipe(this._parserStream);
    }
    return Parsable.super_.prototype.on.call(this, ev, fn);
  };

  /* @override */
  Parsable.prototype.addListener = Parsable.prototype.on;

  /* --------------------------------------------------- */

  /**
   * @callback RecordMapFunction
   * @param {Record} record - Source record to map
   * @returns {Record}
   */

  /**
   * Create a record stream which maps records and pass them to downstream
   *
   * @param {RecordMapFunction} fn - Record mapping function
   * @returns {RecordStream.Serializable}
   */
  RecordStream.map = function(fn) {
    var mapStream = new RecordStream.Serializable();
    mapStream._transform = function(record, enc, callback) {
      var rec = fn(record) || record; // if not returned record, use same record
      this.push(rec);
      callback();
    };
    return mapStream;
  };

  /**
   * Create mapping stream using given record template
   *
   * @param {Record} record - Mapping record object. In mapping field value, temlate notation can be used to refer field value in source record, if noeval param is not true.
   * @param {Boolean} [noeval] - Disable template evaluation in mapping record.
   * @returns {RecordStream.Serializable}
   */
  RecordStream.recordMapStream = function(record, noeval) {
    return RecordStream.map(function(rec) {
      var mapped = { Id: rec.Id };
      for (var prop in record) {
        mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);
      }
      return mapped;
    });

    function evalMapping(value, mapping) {
      if (core.isString(value)) {
        var m = /^\$\{(\w+)\}$/.exec(value);
        if (m) {
          return mapping[m[1]];
        }
        return value.replace(/\$\{(\w+)\}/g, function($0, prop) {
          var v = mapping[prop];
          return core.isNull(v) || core.isUndefined(v) ? '' : String(v);
        });
      } else {
        return value;
      }
    }
  };

  /**
   * @callback RecordFilterFunction
   * @param {Record} record - Source record to filter
   * @returns {Boolean}
   */

  /**
   * Create a record stream which filters records and pass them to downstream
   *
   * @param {RecordFilterFunction} fn - Record filtering function
   * @returns {RecordStream.Serializable}
   */
  RecordStream.filter = function(fn) {
    var filterStream = new RecordStream.Serializable();
    filterStream._transform = function(record, enc, callback) {
      if (fn(record)) {
        this.push(record);
      }
      callback();
    };
    return filterStream;
  };

  /**
   * @private
   */
  function convertRecordForSerialization(record, options) {
    return Object.keys(record).reduce(function(rec, key) {
      var value = rec[key];
      var urec = {};
      if (key === 'attributes') {
        // 'attributes' prop will be ignored
        rec = core.extend({}, rec);
        delete rec[key];
      } else if (options.nullValue && value === null) {
        urec[key] = options.nullValue;
        rec = core.extend({}, rec, urec);
      } else if (value !== null && typeof value === 'object') {
        var precord = convertRecordForSerialization(value, options);
        rec = Object.keys(precord).reduce(function(prec, pkey) {
          prec[key + '.' + pkey] = precord[pkey];
          return prec;
        }, core.extend({}, rec));
      }
      return rec;
    }, record);
  }

  /**
   * @private
   */
  function createPipelineStream(s1, s2) {
    var pipeline = new PassThrough();
    pipeline.on('pipe', function(source) {
      source.unpipe(pipeline);
      source.pipe(s1).pipe(s2);
    });
    pipeline.pipe = function(dest, options) {
      return s2.pipe(
        dest,
        options
      );
    };
    return pipeline;
  }

  /** ---------------------------------------------------------------------- **/

  /**
   * @private
   */
  var CSVStreamConverter = {
    serialize: function(options) {
      options = options || {};
      return createPipelineStream(
        RecordStream.map(function(record) {
          return convertRecordForSerialization(record, options);
        }),
        csv.serializeCSVStream(options)
      );
    },
    parse: function(options) {
      return csv.parseCSVStream(options);
    }
  };

  /**
   * @private
   */
  var DataStreamConverters = (RecordStream.DataStreamConverters = {
    csv: CSVStreamConverter
  });
});

/*global process*/

var query$1 = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * Query
   *
   * @protected
   * @class
   * @extends {stream.Readable}
   * @implements Promise.<T>
   * @template T
   * @param {Connection} conn - Connection object
   * @param {Object|String} config - Query config object or SOQL string
   * @param {Object} [options] - Default query options
   * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
   * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
   * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
   * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
   */
  var Query = (module.exports = function(conn, config, options) {
    Query.super_.call(this, { objectMode: true });

    this._conn = conn;
    if (core.isString(config)) {
      // if query config is string, it is given in SOQL.
      this._soql = config;
    } else if (config.locator && config.locator.indexOf('/') >= 0) {
      // if locator given in url for next records
      this._locator = config.locator.split('/').pop();
    } else {
      this._config = config;
      this.select(config.fields);
      if (config.includes) {
        this.include(config.includes);
      }
      if (config.sort) {
        this.sort(config.sort);
      }
    }
    this._options = core.defaults(options || {}, {
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: ResponseTargets.QueryResult
    });
    this._executed = false;
    this._finished = false;
    this._chaining = false;

    this._deferred = promise.defer();
  });

  inherits(Query, readable.Readable);

  /**
   * Select fields to include in the returning result
   *
   * @param {Object|Array.<String>|String} fields - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
   * @returns {Query.<T>}
   */
  Query.prototype.select = function(fields) {
    if (this._soql) {
      throw Error('Cannot set select fields for the query which has already built SOQL.');
    }
    fields = fields || '*';
    if (core.isString(fields)) {
      fields = fields.split(/\s*,\s*/);
    } else if (core.isObject(fields) && !core.isArray(fields)) {
      var _fields = [];
      for (var k in fields) {
        if (fields[k]) {
          _fields.push(k);
        }
      }
      fields = _fields;
    }
    this._config.fields = fields;
    return this;
  };

  /**
   * Set query conditions to filter the result records
   *
   * @param {Object|String} conditions - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
   * @returns {Query.<T>}
   */
  Query.prototype.where = function(conditions) {
    if (this._soql) {
      throw Error('Cannot set where conditions for the query which has already built SOQL.');
    }
    this._config.conditions = conditions;
    return this;
  };

  /**
   * Limit the returning result
   *
   * @param {Number} limit - Maximum number of records the query will return.
   * @returns {Query.<T>}
   */
  Query.prototype.limit = function(limit) {
    if (this._soql) {
      throw Error('Cannot set limit for the query which has already built SOQL.');
    }
    this._config.limit = limit;
    return this;
  };

  /**
   * Synonym of Query#offset()
   *
   * @method Query#skip
   * @param {Number} offset - Offset number where begins returning results.
   * @returns {Query.<T>}
   */
  /**
   * Skip records
   *
   * @method Query#offset
   * @param {Number} offset - Offset number where begins returning results.
   * @returns {Query.<T>}
   */
  Query.prototype.skip = Query.prototype.offset = function(offset) {
    if (this._soql) {
      throw Error('Cannot set skip/offset for the query which has already built SOQL.');
    }
    this._config.offset = offset;
    return this;
  };

  /**
   * Synonym of Query#sort()
   *
   * @memthod Query#orderby
   * @param {String|Object} sort - Sorting field or hash object with field name and sord direction
   * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)
   * @returns {Query.<T>}
   */
  /**
   * Set query sort with direction
   *
   * @method Query#sort
   * @param {String|Object} sort - Sorting field or hash object with field name and sord direction
   * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)
   * @returns {Query.<T>}
   */
  Query.prototype.sort = Query.prototype.orderby = function(sort, dir) {
    if (this._soql) {
      throw Error('Cannot set sort for the query which has already built SOQL.');
    }
    if (core.isString(sort) && core.isString(dir)) {
      sort = [[sort, dir]];
    }
    this._config.sort = sort;
    return this;
  };

  /**
   * Include child relationship query
   *
   * @param {String} childRelName - Child relationship name to include in query result
   * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
   * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
   * @param {Object} [options] - Optional query configulations.
   * @param {Number} [options.limit] - Maximum number of records the query will return.
   * @param {Number} [options.offset] - Offset number where begins returning results.
   * @param {Number} [options.skip] - Synonym of options.offset.
   * @returns {Query~SubQuery}
   */
  Query.prototype.include = function(childRelName, conditions, fields, options) {
    if (this._soql) {
      throw Error('Cannot include child relationship into the query which has already built SOQL.');
    }
    if (core.isObject(childRelName)) {
      var includes = childRelName;
      for (var crname in includes) {
        var config = includes[crname];
        this.include(crname, config.conditions, config.fields, config);
      }
      return;
    }
    var childConfig = {
      table: childRelName,
      conditions: conditions,
      fields: fields,
      limit: options && options.limit,
      offset: options && (options.offset || options.skip),
      sort: options && options.sort
    };
    if (!core.isArray(this._config.includes)) this._config.includes = [];
    this._config.includes.push(childConfig);
    var childQuery = new SubQuery(this._conn, this, childConfig);
    this._children = this._children || [];
    this._children.push(childQuery);
    return childQuery;
  };

  /**
   * Setting maxFetch query option
   *
   * @param {Number} maxFetch - Max fetching records in auto fetch mode
   * @returns {Query.<T>}
   */
  Query.prototype.maxFetch = function(maxFetch) {
    this._options.maxFetch = maxFetch;
    return this;
  };

  /**
   * Switching auto fetch mode
   *
   * @param {Boolean} autoFetch - Using auto fetch mode or not
   * @returns {Query.<T>}
   */
  Query.prototype.autoFetch = function(autoFetch) {
    this._options.autoFetch = autoFetch;
    return this;
  };

  /**
   * Set flag to scan all records including deleted and archived.
   *
   * @param {Boolean} scanAll - Flag whether include deleted/archived record or not. Default is false.
   * @returns {Query.<T>}
   */
  Query.prototype.scanAll = function(scanAll) {
    this._options.scanAll = scanAll;
    return this;
  };

  /**
   * @private
   */
  var ResponseTargets = (Query.ResponseTargets = {});
  ['QueryResult', 'Records', 'SingleRecord', 'Count'].forEach(function(f) {
    ResponseTargets[f] = f;
  });

  /**
   * @protected
   * @param {String} responseTarget - Query response target
   * @returns {Query.<S>}
   */
  Query.prototype.setResponseTarget = function(responseTarget) {
    if (responseTarget in ResponseTargets) {
      this._options.responseTarget = responseTarget;
    }
    return this;
  };

  /**
   * Synonym of Query#execute()
   *
   * @method Query#run
   * @param {Object} [options] - Query options
   * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
   * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
   * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
   * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
   * @param {Callback.<T>} [callback] - Callback function
   * @returns {Query.<T>}
   */
  Query.prototype.run =
    /**
     * Synonym of Query#execute()
     *
     * @method Query#exec
     * @param {Object} [options] - Query options
     * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
     * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
     * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
     * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
     * @param {Callback.<T>} [callback] - Callback function
     * @returns {Query.<T>}
     */
    Query.prototype.exec =
      /**
       * Execute query and fetch records from server.
       *
       * @method Query#execute
       * @param {Object} [options] - Query options
       * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
       * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
       * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
       * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
       * @param {Callback.<T>} [callback] - Callback function
       * @returns {Query.<T>}
       */
      Query.prototype.execute = function(options, callback) {
        var self = this;
        var logger = this._conn._logger;
        var deferred = this._deferred;

        if (this._executed) {
          deferred.reject(new Error('re-executing already executed query'));
          return this;
        }

        if (this._finished) {
          deferred.reject(new Error('executing already closed query'));
          return this;
        }

        if (typeof options === 'function') {
          callback = options;
          options = {};
        }
        options = options || {};
        options = {
          headers: options.headers || self._options.headers,
          responseTarget: options.responseTarget || self._options.responseTarget,
          autoFetch: options.autoFetch || self._options.autoFetch,
          maxFetch: options.maxFetch || self._options.maxFetch,
          scanAll: options.scanAll || self._options.scanAll
        };

        // callback and promise resolution;
        var promiseCallback = function(err, res) {
          if (core.isFunction(callback)) {
            try {
              res = callback(err, res);
              err = null;
            } catch (e) {
              err = e;
            }
          }
          if (err) {
            deferred.reject(err);
          } else {
            deferred.resolve(res);
          }
        };
        this.once('response', function(res) {
          promiseCallback(null, res);
        });
        this.once('error', function(err) {
          promiseCallback(err);
        });

        // collect fetched records in array
        // only when response target is Records and
        // either callback or chaining promises are available to this query.
        this.once('fetch', function() {
          if (options.responseTarget === ResponseTargets.Records && (self._chaining || callback)) {
            logger.debug('--- collecting all fetched records ---');
            var records = [];
            var onRecord = function(record) {
              records.push(record);
            };
            self.on('record', onRecord);
            self.once('end', function() {
              self.removeListener('record', onRecord);
              self.emit('response', records, self);
            });
          }
        });

        // flag to prevent re-execution
        this._executed = true;

        // start actual query
        logger.debug('>>> Query start >>>');
        this._execute(options)
          .then(function() {
            logger.debug('*** Query finished ***');
          })
          .fail(function(err) {
            logger.debug('--- Query error ---');
            self.emit('error', err);
          });

        // return Query instance for chaining
        return this;
      };

  /**
   * @private
   */
  Query.prototype._execute = function(options) {
    var self = this;
    var logger = this._conn._logger;
    var responseTarget = options.responseTarget;
    var autoFetch = options.autoFetch;
    var maxFetch = options.maxFetch;
    var scanAll = options.scanAll;

    return promise
      .resolve(
        self._locator
          ? self._conn._baseUrl() + '/query/' + self._locator
          : self.toSOQL().then(function(soql) {
              self.totalFetched = 0;
              logger.debug('SOQL = ' + soql);
              return self._conn._baseUrl() + '/' + (scanAll ? 'queryAll' : 'query') + '?q=' + encodeURIComponent(soql);
            })
      )
      .then(function(url) {
        return self._conn.request({
          method: 'GET',
          url: url,
          headers: options.headers
        });
      })
      .then(function(data) {
        self.emit('fetch');
        self.totalSize = data.totalSize;
        var res;
        switch (responseTarget) {
          case ResponseTargets.SingleRecord:
            res = data.records && data.records.length > 0 ? data.records[0] : null;
            break;
          case ResponseTargets.Records:
            res = data.records;
            break;
          case ResponseTargets.Count:
            res = data.totalSize;
            break;
          default:
            res = data;
        }
        // only fire response event when it should be notified per fetch
        if (responseTarget !== ResponseTargets.Records) {
          self.emit('response', res, self);
        }

        // streaming record instances
        var numRecords = (data.records && data.records.length) || 0;
        for (var i = 0; i < numRecords; i++) {
          if (self.totalFetched >= maxFetch) {
            self._finished = true;
            break;
          }
          var record = data.records[i];
          self.push(record);
          self.emit('record', record, self.totalFetched++, self);
        }
        if (data.nextRecordsUrl) {
          self._locator = data.nextRecordsUrl.split('/').pop();
        }
        self._finished = self._finished || data.done || !autoFetch;
        if (self._finished) {
          self.push(null);
        } else {
          self._execute(options);
        }
        return res;
      });
  };

  /**
   * Readable stream implementation
   *
   * @override
   * @private
   */
  Query.prototype._read = function(size) {
    if (!this._finished && !this._executed) {
      this.execute({ autoFetch: true });
    }
  };

  /** @override **/
  Query.prototype.on = function(e, fn) {
    if (e === 'record') {
      var self = this;
      this.on('readable', function() {
        while (self.read() !== null) {} // discard buffered records
      });
    }
    return Query.super_.prototype.on.call(this, e, fn);
  };

  /** @override **/
  Query.prototype.addListener = Query.prototype.on;

  /**
   * @private
   */
  Query.prototype._expandFields = function() {
    if (this._soql) {
      return promise.reject(new Error('Cannot expand fields for the query which has already built SOQL.'));
    }
    var self = this;
    var logger = self._conn._logger;
    var conn = this._conn;
    var table = this._config.table;
    var fields = this._config.fields || [];

    logger.debug('_expandFields: table = ' + table + ', fields = ' + fields.join(', '));

    return promise.all([
      promise.resolve(self._parent ? findRelationTable(table) : table).then(function(table) {
        return promise
          .all(
            core.map(fields, function(field) {
              return expandAsteriskField(table, field);
            })
          )
          .then(function(expandedFields) {
            self._config.fields = core.flatten(expandedFields);
          });
      }),
      promise.all(
        core.map(self._children || [], function(childQuery) {
          return childQuery._expandFields();
        })
      )
    ]);

    function findRelationTable(rname) {
      var ptable = self._parent._config.table;
      logger.debug('finding table for relation "' + rname + '" in "' + ptable + '"...');
      return describeCache(ptable).then(function(sobject) {
        var upperRname = rname.toUpperCase();
        var childRelation = core.find(sobject.childRelationships, function(cr) {
          return (cr.relationshipName || '').toUpperCase() === upperRname;
        });
        return childRelation
          ? childRelation.childSObject
          : promise.reject(new Error('No child relationship found: ' + rname));
      });
    }

    function describeCache(table) {
      logger.debug('describe cache: ' + table);
      var deferred = promise.defer();
      conn.describe$(table, function(err, sobject) {
        logger.debug('... done.');
        if (err) {
          deferred.reject(err);
        } else {
          deferred.resolve(sobject);
        }
      });
      return deferred.promise;
    }

    function expandAsteriskField(table, field) {
      logger.debug('expanding field "' + field + '" in "' + table + '"...');
      var fpath = field.split('.');
      return fpath[fpath.length - 1] === '*'
        ? describeCache(table).then(function(sobject) {
            logger.debug('table ' + table + 'has been described');
            if (fpath.length > 1) {
              var rname = fpath.shift();
              var rfield = core.find(sobject.fields, function(f) {
                return f.relationshipName && f.relationshipName.toUpperCase() === rname.toUpperCase();
              });
              if (rfield) {
                var rtable = rfield.referenceTo.length === 1 ? rfield.referenceTo[0] : 'Name';
                return expandAsteriskField(rtable, fpath.join('.')).then(function(fpaths) {
                  return core.map(fpaths, function(fpath) {
                    return rname + '.' + fpath;
                  });
                });
              } else {
                return [];
              }
            } else {
              return core.map(sobject.fields, function(f) {
                return f.name;
              });
            }
          })
        : promise.resolve([field]);
    }
  };

  /**
   * Explain plan for executing query
   *
   * @param {Callback.<ExplainInfo>} [callback] - Callback function
   * @returns {Promise.<ExplainInfo>}
   */
  Query.prototype.explain = function(callback) {
    var self = this;
    var logger = this._conn._logger;
    return self
      .toSOQL()
      .then(function(soql) {
        logger.debug('SOQL = ' + soql);
        var url = '/query/?explain=' + encodeURIComponent(soql);
        return self._conn.request(url);
      })
      .thenCall(callback);
  };

  /**
   * Return SOQL expression for the query
   *
   * @param {Callback.<String>} [callback] - Callback function
   * @returns {Promise.<String>}
   */
  Query.prototype.toSOQL = function(callback) {
    var self = this;
    return promise
      .resolve(
        self._soql ||
          self._expandFields().then(function() {
            return soqlBuilder.createSOQL(self._config);
          })
      )
      .thenCall(callback);
  };

  /**
   * Create data stream of queried records.
   * Automatically resume query if paused.
   *
   * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
   * @param {Object} [options] - Options passed to converter
   * @returns {stream.Readable}
   */
  Query.prototype.stream = recordStream.Serializable.prototype.stream;

  /**
   * Get record stream of queried records applying the given mapping function
   *
   * @param {RecordMapFunction} fn - Record mapping function
   * @returns {RecordStream.Serializable}
   */
  Query.prototype.map = recordStream.prototype.map;

  /**
   * Get record stream of queried records, applying the given filter function
   *
   * @param {RecordFilterFunction} fn - Record filtering function
   * @returns {RecordStream.Serializable}
   */
  Query.prototype.filter = recordStream.prototype.map;

  /*
   * Default threshold num of bulk API switching
   */
  var DEFAULT_BULK_THRESHOLD = 200;

  /**
   * Synonym of Query#destroy()
   *
   * @method Query#delete
   * @param {String} [type] - SObject type. Required for SOQL based query object.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  /**
   * Synonym of Query#destroy()
   *
   * @method Query#del
   * @param {String} [type] - SObject type. Required for SOQL based query object.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  /**
   * Delete queried records
   *
   * @method Query#destroy
   * @param {String} [type] - SObject type. Required for SOQL based query object.
   * @param {Object} [options] - Mass delete operation options
   * @param {Boolean} [options.allowBulk] - Allow switching to Bulk API when the num of queried records reached to certain threshold. Default is true.
   * @param {Number} [options.bulkThreshold] - Threshold num to switch to use Bulk API instead of usual `SObject#delete()` call. Default value is 200 after API ver 42.0, and 0.5 * `maxRequest` before API ver 42.0.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  Query.prototype['delete'] = Query.prototype.del = Query.prototype.destroy = function(type, options, callback) {
    if (typeof type === 'function') {
      callback = type;
      options = {};
      type = null;
    } else if (typeof type === 'object' && type !== null) {
      callback = options;
      options = type;
      type = null;
    }
    options = options || {};
    type = type || (this._config && this._config.table);
    if (!type) {
      throw new Error('SOQL based query needs SObject type information to bulk delete.');
    }
    // Set the threshold number to pass to bulk API
    var thresholdNum =
      options.allowBulk === false
        ? -1
        : typeof options.bulkThreshold === 'number'
        ? options.bulkThreshold
        : // determine threshold if the connection version supports SObject collection API or not
        this._conn._ensureVersion(42)
        ? DEFAULT_BULK_THRESHOLD
        : this._conn.maxRequest / 2;
    var self = this;
    return new promise(function(resolve, reject) {
      var records = [];
      var batch = null;
      var handleRecord = function(rec) {
        if (!rec.Id) {
          self.emit('error', new Error('Queried record does not include Salesforce record ID.'));
          return;
        }
        var record = { Id: rec.Id };
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
          if (thresholdNum < 0 || records.length > thresholdNum) {
            // Use bulk delete instead of SObject REST API
            batch = self._conn
              .sobject(type)
              .deleteBulk()
              .on('response', resolve)
              .on('error', reject);
            records.forEach(function(record) {
              batch.write(record);
            });
            records = [];
          }
        }
      };
      var handleEnd = function() {
        if (batch) {
          batch.end();
        } else {
          var ids = records.map(function(record) {
            return record.Id;
          });
          self._conn
            .sobject(type)
            .destroy(ids, { allowRecursive: true })
            .then(resolve, reject);
        }
      };
      self
        .on('data', handleRecord)
        .on('end', handleEnd)
        .on('error', reject);
    }).thenCall(callback);
  };

  /**
   * Update queried records, using given mapping function/object
   *
   * @param {Record|RecordMapFunction} mapping - Mapping record or record mapping function
   * @param {String} [type] - SObject type. Required for SOQL based query object.
   * @param {Object} [options] - Mass update operation options
   * @param {Boolean} [options.allowBulk] - Allow switching to Bulk API when the num of queried records reached to certain threshold. Default is true.
   * @param {Number} [options.bulkThreshold] - Threshold num to switch to use Bulk API instead of usual `SObject#delete()` call. Default value is 200 after API ver 42.0, and 0.5 * `maxRequest` before API ver 42.0.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  Query.prototype.update = function(mapping, type, options, callback) {
    if (typeof type === 'function') {
      callback = type;
      options = {};
      type = null;
    } else if (typeof type === 'object' && type !== null) {
      callback = options;
      options = type;
      type = null;
    }
    options = options || {};
    type = type || (this._config && this._config.table);
    if (!type) {
      throw new Error('SOQL based query needs SObject type information to bulk update.');
    }
    var updateStream = core.isFunction(mapping) ? recordStream.map(mapping) : recordStream.recordMapStream(mapping);
    // Set the threshold number to pass to bulk API
    var thresholdNum =
      options.allowBulk === false
        ? -1
        : typeof options.bulkThreshold === 'number'
        ? options.bulkThreshold
        : // determine threshold if the connection version supports SObject collection API or not
        this._conn._ensureVersion(42)
        ? DEFAULT_BULK_THRESHOLD
        : this._conn.maxRequest / 2;
    var self = this;
    return new promise(function(resolve, reject) {
      var records = [];
      var batch = null;
      var handleRecord = function(record) {
        if (batch) {
          batch.write(record);
        } else {
          records.push(record);
          if (thresholdNum < 0 || records.length > thresholdNum) {
            // Use bulk update instead of SObject REST API
            batch = self._conn
              .sobject(type)
              .updateBulk()
              .on('response', resolve)
              .on('error', reject);
            records.forEach(function(record) {
              batch.write(record);
            });
            records = [];
          }
        }
      };
      var handleEnd = function() {
        if (batch) {
          batch.end();
        } else {
          self._conn
            .sobject(type)
            .update(records, { allowRecursive: true })
            .then(resolve, reject);
        }
      };
      self
        .on('error', reject)
        .pipe(updateStream)
        .on('data', handleRecord)
        .on('end', handleEnd)
        .on('error', reject);
    }).thenCall(callback);
  };

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for query result
   *
   * @param {FulfilledCallback.<T, S1>} [onFulfilled]
   * @param {RejectedCallback.<S2>} [onRejected]
   * @returns {Promise.<S1|S2>}
   */
  Query.prototype.then = function(onResolved, onReject) {
    this._chaining = true;
    if (!this._finished && !this._executed) {
      this.execute();
    }
    return this._deferred.promise.then.apply(this._deferred.promise, arguments);
  };

  /**
   * Promise/A+ extension
   * Call "then" using given node-style callback function
   *
   * @param {Callback.<T>} [callback] - Callback function
   * @returns {Query}
   */
  Query.prototype.thenCall = function(callback) {
    if (core.isFunction(callback)) {
      this.then(
        function(res) {
          process.nextTick(function() {
            callback(null, res);
          });
        },
        function(err) {
          process.nextTick(function() {
            callback(err);
          });
        }
      );
    }
    return this;
  };

  /*--------------------------------------------*/

  /**
   * SubQuery object for representing child relationship query
   *
   * @protected
   * @class Query~SubQuery
   * @extends Query
   * @param {Connection} conn - Connection object
   * @param {Query} parent - Parent query object
   * @param {Object} config - Sub query configuration
   */
  var SubQuery = function(conn, parent, config) {
    SubQuery.super_.call(this, conn, config);
    this._parent = parent;
  };

  inherits(SubQuery, Query);

  /**
   * @method Query~SubQuery#include
   * @override
   */
  SubQuery.prototype.include = function() {
    throw new Error('Not allowed to include another subquery in subquery.');
  };

  /**
   * Back the context to parent query object
   *
   * @method Query~SubQuery#end
   * @returns {Query}
   */
  SubQuery.prototype.end = function() {
    return this._parent;
  };

  /**
   * If execute is called in subquery context, delegate it to parent query object
   *
   * @method Query~SubQuery#execute
   * @override
   */
  SubQuery.prototype.run = SubQuery.prototype.exec = SubQuery.prototype.execute = function() {
    return this._parent.execute.apply(this._parent, arguments);
  };
});

/**
 * @file Represents Salesforce record information
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var record = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * A simple hash object including record field information
   *
   * @typedef {Object} Record
   */

  /**
   * Remote reference to record information
   *
   * @protected
   * @class
   * @constructor
   * @param {Connection} conn - Connection object
   * @param {String} type - SObject type
   * @param {String} id - Record ID
   */
  var RecordReference = (module.exports = function(conn, type, id) {
    this._conn = conn;
    this.type = type;
    this.id = id;
  });

  /**
   * Retrieve record field information
   *
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<Record>} [callback] - Callback function
   * @returns {Promise.<Record>}
   */
  RecordReference.prototype.retrieve = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.retrieve(this.type, this.id, options, callback);
  };

  /**
   * Update record field information
   *
   * @param {Record} record - A Record which includes fields to update
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult>} [callback] - Callback function
   * @returns {Promise.<RecordResult>}
   */
  RecordReference.prototype.update = function(record, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    record = core.clone(record);
    record.Id = this.id;
    return this._conn.update(this.type, record, options, callback);
  };

  /**
   * Synonym of Record#destroy()
   *
   * @method RecordReference#delete
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult>} [callback] - Callback function
   * @returns {Promise.<RecordResult>}
   */
  RecordReference.prototype['delete'] =
    /**
     * Synonym of Record#destroy()
     *
     * @method RecordReference#del
     * @param {Callback.<RecordResult>} [callback] - Callback function
     * @returns {Promise.<RecordResult>}
     */
    RecordReference.prototype.del =
      /**
       * Delete record field
       *
       * @method RecordReference#destroy
       * @param {Object} [options] - Options for rest api.
       * @param {Callback.<RecordResult>} [callback] - Callback function
       * @returns {Promise.<RecordResult>}
       */
      RecordReference.prototype.destroy = function(options, callback) {
        if (typeof options === 'function') {
          callback = options;
          options = {};
        }
        return this._conn.destroy(this.type, this.id, options, callback);
      };

  /**
   * Get blob field as stream
   *
   * @param {String} fieldName - Blob field name
   * @returns {stream.Stream}
   */
  RecordReference.prototype.blob = function(fieldName) {
    var url = [this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName].join('/');
    return this._conn.request(url).stream();
  };
});

/**
 * @file Manages asynchronous method response cache
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * Class for managing cache entry
 *
 * @private
 * @class
 * @constructor
 * @template T
 */
var CacheEntry = function() {
  this.fetching = false;
};

inherits(CacheEntry, events__default['default'].EventEmitter);

/**
 * Get value in the cache entry
 *
 * @param {Callback.<T>} [callback] - Callback function callbacked the cache entry updated
 * @returns {T|undefined}
 */
CacheEntry.prototype.get = function(callback) {
  if (!callback) {
    return this._value;
  } else {
    this.once('value', callback);
    if (!core.isUndefined(this._value)) {
      this.emit('value', this._value);
    }
  }
};

/**
 * Set value in the cache entry
 *
 * @param {T} [value] - A value for caching
 */
CacheEntry.prototype.set = function(value) {
  this._value = value;
  this.emit('value', this._value);
};

/**
 * Clear cached value
 */
CacheEntry.prototype.clear = function() {
  this.fetching = false;
  delete this._value;
};

/**
 * Caching manager for async methods
 *
 * @class
 * @constructor
 */
var Cache = function() {
  this._entries = {};
};

/**
 * retrive cache entry, or create if not exists.
 *
 * @param {String} [key] - Key of cache entry
 * @returns {CacheEntry}
 */
Cache.prototype.get = function(key) {
  if (key && this._entries[key]) {
    return this._entries[key];
  } else {
    var entry = new CacheEntry();
    this._entries[key] = entry;
    return entry;
  }
};

/**
 * clear cache entries prefix matching given key
 * @param {String} [key] - Key prefix of cache entry to clear
 */
Cache.prototype.clear = function(key) {
  for (var k in this._entries) {
    if (!key || k.indexOf(key) === 0) {
      this._entries[k].clear();
    }
  }
};

/**
 * create and return cache key from namespace and serialized arguments.
 * @private
 */
function createCacheKey(namespace, args) {
  args = Array.prototype.slice.apply(args);
  return (
    namespace +
    '(' +
    core
      .map(args, function(a) {
        return JSON.stringify(a);
      })
      .join(',') +
    ')'
  );
}

/**
 * Enable caching for async call fn to intercept the response and store it to cache.
 * The original async calll fn is always invoked.
 *
 * @protected
 * @param {Function} fn - Function to covert cacheable
 * @param {Object} [scope] - Scope of function call
 * @param {Object} [options] - Options
 * @return {Function} - Cached version of function
 */
Cache.prototype.makeResponseCacheable = function(fn, scope, options) {
  var cache = this;
  options = options || {};
  return function() {
    var args = Array.prototype.slice.apply(arguments);
    var callback = args.pop();
    if (!core.isFunction(callback)) {
      args.push(callback);
      callback = null;
    }
    var key = core.isString(options.key)
      ? options.key
      : core.isFunction(options.key)
      ? options.key.apply(scope, args)
      : createCacheKey(options.namespace, args);
    var entry = cache.get(key);
    entry.fetching = true;
    if (callback) {
      args.push(function(err, result) {
        entry.set({ error: err, result: result });
        callback(err, result);
      });
    }
    var ret, error;
    try {
      ret = fn.apply(scope || this, args);
    } catch (e) {
      error = e;
    }
    if (ret && core.isFunction(ret.then)) {
      // if the returned value is promise
      if (!callback) {
        return ret.then(
          function(result) {
            entry.set({ error: undefined, result: result });
            return result;
          },
          function(err) {
            entry.set({ error: err, result: undefined });
            throw err;
          }
        );
      } else {
        return ret;
      }
    } else {
      entry.set({ error: error, result: ret });
      if (error) {
        throw error;
      }
      return ret;
    }
  };
};

/**
 * Enable caching for async call fn to lookup the response cache first, then invoke original if no cached value.
 *
 * @protected
 * @param {Function} fn - Function to covert cacheable
 * @param {Object} [scope] - Scope of function call
 * @param {Object} [options] - Options
 * @return {Function} - Cached version of function
 */
Cache.prototype.makeCacheable = function(fn, scope, options) {
  var cache = this;
  options = options || {};
  var $fn = function() {
    var args = Array.prototype.slice.apply(arguments);
    var callback = args.pop();
    if (!core.isFunction(callback)) {
      args.push(callback);
    }
    var key = core.isString(options.key)
      ? options.key
      : core.isFunction(options.key)
      ? options.key.apply(scope, args)
      : createCacheKey(options.namespace, args);
    var entry = cache.get(key);
    if (!core.isFunction(callback)) {
      // if callback is not given in last arg, return cached result (immediate).
      var value = entry.get();
      if (!value) {
        throw new Error('Function call result is not cached yet.');
      }
      if (value.error) {
        throw value.error;
      }
      return value.result;
    }
    entry.get(function(value) {
      callback(value.error, value.result);
    });
    if (!entry.fetching) {
      // only when no other client is calling function
      entry.fetching = true;
      args.push(function(err, result) {
        entry.set({ error: err, result: result });
      });
      fn.apply(scope || this, args);
    }
  };
  $fn.clear = function() {
    var key = core.isString(options.key)
      ? options.key
      : core.isFunction(options.key)
      ? options.key.apply(scope, arguments)
      : createCacheKey(options.namespace, arguments);
    cache.clear(key);
  };
  return $fn;
};

var cache$2 = Cache;

/**
 * @file Represents Salesforce QuickAction
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var quickAction = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * A class for quick action
   *
   * @protected
   * @constructor
   */
  var QuickAction = (module.exports = function(conn, path) {
    this._conn = conn;
    this._path = path;
  });

  /**
   * @typedef {Object} QuickAction~QuickActionInfo
   * @prop {String} type - Type of the action (e.g. Create, Update, Post, LogACall)
   * @prop {String} name - Name of the action
   * @prop {String} label - Label of the action
   * @prop {Object} urls - Endpoint URL information of the action
   */
  /**
   * @typedef {QuickAction~QuickActionInfo} QuickAction~QuickActionDescriveInfo
   * @prop {String} contextSobjectType - Object type used for the action
   * @prop {String} targetSobjectType - Object type of the action to target
   * @prop {String} targetParentField - Field name in the target object which refers parent(context) object record ID.
   * @prop {String} targetRecordTypeId - Record type of the targeted record
   * @prop {Object} layout - Layout sections that comprise an action
   */

  /**
   * Describe the action's information (including layout, etc.)
   *
   * @param {Callback.<QuickAction~QuickActionDescriveInfo>} [callback] - Callback function
   * @returns {Promise.<QuickAction~QuickActionDescriveInfo>}
   */
  QuickAction.prototype.describe = function(callback) {
    var url = this._path + '/describe';
    return this._conn.request(url).thenCall(callback);
  };

  /**
   * Retrieve default field values in the action (for given record, if specified)
   *
   * @param {String} [contextId] - ID of record to get default values specific to the record
   * @param {Callback.<Record>} [callback] - Callback function
   * @returns {Promise.<Record>}
   */
  QuickAction.prototype.defaultValues = function(contextId, callback) {
    if (typeof contextId === 'function') {
      callback = contextId;
      contextId = null;
    }
    var url = this._path + '/defaultValues';
    if (contextId) {
      url += '/' + contextId;
    }
    return this._conn.request(url).thenCall(callback);
  };

  /**
   * @typedef {Object} QuickAction~QuickActionResult
   * @param {String} id - Record id of the action result
   * @param {Array.<String>} feedItemIds - List of IDs for feed item
   * @param {Boolean} success - True if the action successfully completed
   * @param {Boolean} created - True if the action yields a new record
   * @param {String} contextId - Context record ID of the action
   * @param {Array.<Object>} errors - Errors if the action failed
   */

  /**
   * Execute the action for given context Id and record information
   *
   * @param {String} contextId - Context record ID of the action
   * @param {Record} record - Input record information for the action
   * @param {Callback.<QuickAction~QuickActionResult>} [callback] - Callback function
   * @returns {Promise.<QuickAction~QuickActionResult>}
   */
  QuickAction.prototype.execute = function(contextId, record, callback) {
    var body = {
      contextId: contextId,
      record: record
    };
    return this._conn.requestPost(this._path, body).thenCall(callback);
  };
});

/**
 * @file Represents Salesforce SObject
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var sobject = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * A class for organizing all SObject access
   *
   * @constructor
   */
  var SObject = (module.exports = function(conn, type) {
    this._conn = conn;
    this.type = type;
    var cacheOptions = { key: 'describe.' + this.type };
    this.describe$ = conn.cache.makeCacheable(this.describe, this, cacheOptions);
    this.describe = conn.cache.makeResponseCacheable(this.describe, this, cacheOptions);

    cacheOptions = { key: 'layouts.' + this.type };
    this.layouts$ = conn.cache.makeCacheable(this.layouts, this, cacheOptions);
    this.layouts = conn.cache.makeResponseCacheable(this.layouts, this, cacheOptions);

    cacheOptions = { key: 'compactLayouts.' + this.type };
    this.compactLayouts$ = conn.cache.makeCacheable(this.compactLayouts, this, cacheOptions);
    this.compactLayouts = conn.cache.makeResponseCacheable(this.compactLayouts, this, cacheOptions);

    cacheOptions = { key: 'approvalLayouts.' + this.type };
    this.approvalLayouts$ = conn.cache.makeCacheable(this.approvalLayouts, this, cacheOptions);
    this.approvalLayouts = conn.cache.makeResponseCacheable(this.approvalLayouts, this, cacheOptions);
  });

  /**
   * Synonym of SObject#create()
   *
   * @method SObject#insert
   * @param {Record|Array.<Record>} records - A record or array of records to create
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Create records
   *
   * @method SObject#create
   * @param {Record|Array.<Record>} records - A record or array of records to create
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  SObject.prototype.insert = SObject.prototype.create = function(records, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.create(this.type, records, options, callback);
  };

  /**
   * Retrieve specified records
   *
   * @param {String|Array.<String>} ids - A record ID or array of record IDs
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
   * @returns {Promise.<Record|Array.<Record>>}
   */
  SObject.prototype.retrieve = function(ids, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.retrieve(this.type, ids, options, callback);
  };

  /**
   * Update records
   *
   * @param {Record|Array.<Record>} records - A record or array of records to update
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  SObject.prototype.update = function(records, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.update(this.type, records, options, callback);
  };

  /**
   * Upsert records
   *
   * @param {Record|Array.<Record>} records - Record or array of records to upsert
   * @param {String} extIdField - External ID field name
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  SObject.prototype.upsert = function(records, extIdField, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.upsert(this.type, records, extIdField, options, callback);
  };

  /**
   * Synonym of SObject#destroy()
   *
   * @method SObject#delete
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Synonym of SObject#destroy()
   *
   * @method SObject#del
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Delete records
   *
   * @method SObject#destroy
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Object} [options] - Options for rest api.
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  SObject.prototype['delete'] = SObject.prototype.del = SObject.prototype.destroy = function(ids, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return this._conn.destroy(this.type, ids, options, callback);
  };

  /**
   * Describe SObject metadata
   *
   * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
   * @returns {Promise.<DescribeSObjectResult>}
   */
  SObject.prototype.describe = function(callback) {
    return this._conn.describe(this.type, callback);
  };

  /**
   * Get record representation instance by given id
   *
   * @param {String} id - A record ID
   * @returns {RecordReference}
   */
  SObject.prototype.record = function(id) {
    return new record(this._conn, this.type, id);
  };

  /**
   * Find and fetch records which matches given conditions
   *
   * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
   * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
   * @param {Object} [options] - Query options.
   * @param {Number} [options.limit] - Maximum number of records the query will return.
   * @param {Number} [options.offset] - Offset number where begins returning results.
   * @param {Number} [options.skip] - Synonym of options.offset.
   * @param {Callback.<Array.<Record>>} [callback] - Callback function
   * @returns {Query.<Array.<Record>>}
   */
  SObject.prototype.find = function(conditions, fields, options, callback) {
    if (typeof conditions === 'function') {
      callback = conditions;
      conditions = {};
      fields = null;
      options = null;
    } else if (typeof fields === 'function') {
      callback = fields;
      fields = null;
      options = null;
    } else if (typeof options === 'function') {
      callback = options;
      options = null;
    }
    options = options || {};
    var config = {
      fields: fields,
      includes: options.includes,
      table: this.type,
      conditions: conditions,
      limit: options.limit,
      sort: options.sort,
      offset: options.offset || options.skip
    };
    var query = new query$1(this._conn, config, options);
    query.setResponseTarget(query$1.ResponseTargets.Records);
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /**
   * Fetch one record which matches given conditions
   *
   * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
   * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
   * @param {Object} [options] - Query options.
   * @param {Number} [options.limit] - Maximum number of records the query will return.
   * @param {Number} [options.offset] - Offset number where begins returning results.
   * @param {Number} [options.skip] - Synonym of options.offset.
   * @param {Callback.<Record>} [callback] - Callback function
   * @returns {Query.<Record>}
   */
  SObject.prototype.findOne = function(conditions, fields, options, callback) {
    if (typeof conditions === 'function') {
      callback = conditions;
      conditions = {};
      fields = null;
      options = null;
    } else if (typeof fields === 'function') {
      callback = fields;
      fields = null;
      options = null;
    } else if (typeof options === 'function') {
      callback = options;
      options = null;
    }
    options = core.extend(options || {}, { limit: 1 });
    var query = this.find(conditions, fields, options);
    query.setResponseTarget(query$1.ResponseTargets.SingleRecord);
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /**
   * Find and fetch records only by specifying fields to fetch.
   *
   * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
   * @param {Callback.<Array.<Record>>} [callback] - Callback function
   * @returns {Query.<Array.<Record>>}
   */
  SObject.prototype.select = function(fields, callback) {
    return this.find(null, fields, null, callback);
  };

  /**
   * Count num of records which matches given conditions
   *
   * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
   * @param {Callback.<Number>} [callback] - Callback function
   * @returns {Query.<Number>}
   */
  SObject.prototype.count = function(conditions, callback) {
    if (typeof conditions === 'function') {
      callback = conditions;
      conditions = {};
    }
    var query = this.find(conditions, { 'count()': true });
    query.setResponseTarget('Count');
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /**
   * Call Bulk#load() to execute bulkload, returning batch object
   *
   * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
   * @param {Object} [options] - Options for bulk loading operation
   * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.bulkload = function(operation, options, input, callback) {
    return this._conn.bulk.load(this.type, operation, options, input, callback);
  };

  /**
   * Synonym of SObject#createBulk()
   *
   * @method SObject#insertBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  /**
   * Bulkly insert input data using bulk API
   *
   * @method SObject#createBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.insertBulk = SObject.prototype.createBulk = function(input, callback) {
    return this.bulkload('insert', input, callback);
  };

  /**
   * Bulkly update records by input data using bulk API
   *
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk update Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.updateBulk = function(input, callback) {
    return this.bulkload('update', input, callback);
  };

  /**
   * Bulkly upsert records by input data using bulk API
   *
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk upsert. Accepts array of records, CSv string, and CSV data input stream.
   * @param {String} [options.extIdField] - External ID field name
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.upsertBulk = function(input, extIdField, callback) {
    return this.bulkload('upsert', { extIdField: extIdField }, input, callback);
  };

  /**
   * Synonym of SObject#destroyBulk()
   *
   * @method SObject#deleteBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  /**
   * Bulkly delete records specified by input data using bulk API
   *
   * @method SObject#destroyBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.deleteBulk = SObject.prototype.destroyBulk = function(input, callback) {
    return this.bulkload('delete', input, callback);
  };

  /**
   * Synonym of SObject#destroyHardBulk()
   *
   * @method SObject#deleteHardBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  /**
   * Bulkly hard delete records specified in input data using bulk API
   *
   * @method SObject#destroyHardBulk
   * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Bulk~Batch}
   */
  SObject.prototype.deleteHardBulk = SObject.prototype.destroyHardBulk = function(input, callback) {
    return this.bulkload('hardDelete', input, callback);
  };

  /**
   * Retrieve recently accessed records
   *
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  SObject.prototype.recent = function(callback) {
    return this._conn.recent(this.type, callback);
  };

  /**
   * Retrieve the updated records
   *
   * @param {String|Date} start - start date or string representing the start of the interval
   * @param {String|Date} end - start date or string representing the end of the interval, must be > start
   * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function
   * @returns {Promise.<UpdatedRecordsInfo>}
   */
  SObject.prototype.updated = function(start, end, callback) {
    return this._conn.updated(this.type, start, end, callback);
  };

  /**
   * Retrieve the deleted records
   *
   * @param {String|Date} start - start date or string representing the start of the interval
   * @param {String|Date} end - start date or string representing the end of the interval, must be > start
   * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function
   * @returns {Promise.<DeletedRecordsInfo>}
   */
  SObject.prototype.deleted = function(start, end, callback) {
    return this._conn.deleted(this.type, start, end, callback);
  };

  /**
   * @typedef {Object} LayoutInfo
   * @prop {Array.<Object>} layouts - Array of layouts
   * @prop {Array.<Object>} recordTypeMappings - Array of record type mappings
   */
  /**
   * Describe layout information for SObject
   *
   * @param {String} [layoutName] - Name of named layout. (e.g. UserAlt in User SObject)
   * @param {Callback.<LayoutInfo>} [callback] - Callback function
   * @returns {Promise.<LayoutInfo>}
   */
  SObject.prototype.layouts = function(layoutName, callback) {
    if (typeof layoutName === 'function') {
      callback = layoutName;
      layoutName = null;
    }
    var url = '/sobjects/' + this.type + '/describe/' + (layoutName ? 'namedLayouts/' + layoutName : 'layouts');
    return this._conn.request(url, callback);
  };

  /**
   * @typedef {Object} CompactLayoutInfo
   * @prop {Array.<Object>} compactLayouts - Array of compact layouts
   * @prop {String} defaultCompactLayoutId - ID of default compact layout
   * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings
   */
  /**
   * Describe compact layout information defined for SObject
   *
   * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function
   * @returns {Promise.<CompactLayoutInfo>}
   */
  SObject.prototype.compactLayouts = function(callback) {
    var url = '/sobjects/' + this.type + '/describe/compactLayouts';
    return this._conn.request(url, callback);
  };

  /**
   * @typedef {Object} ApprovalLayoutInfo
   * @prop {Array.<Object>} approvalLayouts - Array of approval layouts
   */
  /**
   * Describe compact layout information defined for SObject
   *
   * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function
   * @returns {Promise.<ApprovalLayoutInfo>}
   */
  SObject.prototype.approvalLayouts = function(callback) {
    var url = '/sobjects/' + this.type + '/describe/approvalLayouts';
    return this._conn.request(url, callback);
  };

  /**
   * Returns the list of list views for the SObject
   *
   * @param {Callback.<ListViewsInfo>} [callback] - Callback function
   * @returns {Promise.<ListViewsInfo>}
   */
  SObject.prototype.listviews = function(callback) {
    var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews';
    return this._conn.request(url, callback);
  };

  /**
   * Returns the list view info in specifed view id
   *
   * @param {String} id - List view ID
   * @returns {ListView}
   */
  SObject.prototype.listview = function(id) {
    return new ListView(this._conn, this.type, id);
  };

  /**
   * Returns all registered quick actions for the SObject
   *
   * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
   * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
   */
  SObject.prototype.quickActions = function(callback) {
    return this._conn.request('/sobjects/' + this.type + '/quickActions').thenCall(callback);
  };

  /**
   * Get reference for specified quick aciton in the SObject
   *
   * @param {String} actionName - Name of the quick action
   * @returns {QuickAction}
   */
  SObject.prototype.quickAction = function(actionName) {
    return new quickAction(this._conn, '/sobjects/' + this.type + '/quickActions/' + actionName);
  };

  /**
   * A class for organizing list view information
   *
   * @protected
   * @class ListView
   * @param {Connection} conn - Connection instance
   * @param {SObject} type - SObject type
   * @param {String} id - List view ID
   */
  var ListView = function(conn, type, id) {
    this._conn = conn;
    this.type = type;
    this.id = id;
  };

  /**
   * Executes query for the list view and returns the resulting data and presentation information.
   *
   * @param {Callback.<ListViewResultInfo>} [callback] - Callback function
   * @returns {Promise.<ListViewResultInfo>}
   */
  ListView.prototype.results = function(callback) {
    var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/results';
    return this._conn.request(url, callback);
  };

  /**
   * Returns detailed information about a list view
   *
   * @param {Object} [options] - Identity call options
   * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request
   * @param {Callback.<ListViewDescribeInfo>} [callback] - Callback function
   * @returns {Promise.<ListViewDescribeInfo>}
   */
  ListView.prototype.describe = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/describe';
    return this._conn.request({ method: 'GET', url: url, headers: options.headers }, callback);
  };

  /**
   * Explain plan for executing list view
   *
   * @param {Callback.<ExplainInfo>} [callback] - Callback function
   * @returns {Promise.<ExplainInfo>}
   */
  ListView.prototype.explain = function(callback) {
    var url = '/query/?explain=' + this.id;
    return this._conn.request(url, callback);
  };
});

var defaults$2 = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    exports.defaults = {
      '0.1': {
        explicitCharkey: false,
        trim: true,
        normalize: true,
        normalizeTags: false,
        attrkey: '@',
        charkey: '#',
        explicitArray: false,
        ignoreAttrs: false,
        mergeAttrs: false,
        explicitRoot: false,
        validator: null,
        xmlns: false,
        explicitChildren: false,
        childkey: '@@',
        charsAsChildren: false,
        includeWhiteChars: false,
        async: false,
        strict: true,
        attrNameProcessors: null,
        attrValueProcessors: null,
        tagNameProcessors: null,
        valueProcessors: null,
        emptyTag: ''
      },
      '0.2': {
        explicitCharkey: false,
        trim: false,
        normalize: false,
        normalizeTags: false,
        attrkey: '$',
        charkey: '_',
        explicitArray: true,
        ignoreAttrs: false,
        mergeAttrs: false,
        explicitRoot: true,
        validator: null,
        xmlns: false,
        explicitChildren: false,
        preserveChildrenOrder: false,
        childkey: '$$',
        charsAsChildren: false,
        includeWhiteChars: false,
        async: false,
        strict: true,
        attrNameProcessors: null,
        attrValueProcessors: null,
        tagNameProcessors: null,
        valueProcessors: null,
        rootName: 'root',
        xmldec: {
          version: '1.0',
          encoding: 'UTF-8',
          standalone: true
        },
        doctype: null,
        renderOpts: {
          pretty: true,
          indent: '  ',
          newline: '\n'
        },
        headless: false,
        chunkSize: 10000,
        emptyTag: '',
        cdata: false
      }
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var Utility = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var assign,
      getValue,
      isArray,
      isEmpty,
      isFunction,
      isObject,
      isPlainObject,
      slice = [].slice,
      hasProp = {}.hasOwnProperty;

    assign = function() {
      var i, key, len, source, sources, target;
      (target = arguments[0]), (sources = 2 <= arguments.length ? slice.call(arguments, 1) : []);
      if (isFunction(Object.assign)) {
        Object.assign.apply(null, arguments);
      } else {
        for (i = 0, len = sources.length; i < len; i++) {
          source = sources[i];
          if (source != null) {
            for (key in source) {
              if (!hasProp.call(source, key)) continue;
              target[key] = source[key];
            }
          }
        }
      }
      return target;
    };

    isFunction = function(val) {
      return !!val && Object.prototype.toString.call(val) === '[object Function]';
    };

    isObject = function(val) {
      var ref;
      return !!val && ((ref = typeof val) === 'function' || ref === 'object');
    };

    isArray = function(val) {
      if (isFunction(Array.isArray)) {
        return Array.isArray(val);
      } else {
        return Object.prototype.toString.call(val) === '[object Array]';
      }
    };

    isEmpty = function(val) {
      var key;
      if (isArray(val)) {
        return !val.length;
      } else {
        for (key in val) {
          if (!hasProp.call(val, key)) continue;
          return false;
        }
        return true;
      }
    };

    isPlainObject = function(val) {
      var ctor, proto;
      return (
        isObject(val) &&
        (proto = Object.getPrototypeOf(val)) &&
        (ctor = proto.constructor) &&
        typeof ctor === 'function' &&
        ctor instanceof ctor &&
        Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object)
      );
    };

    getValue = function(obj) {
      if (isFunction(obj.valueOf)) {
        return obj.valueOf();
      } else {
        return obj;
      }
    };

    module.exports.assign = assign;

    module.exports.isFunction = isFunction;

    module.exports.isObject = isObject;

    module.exports.isArray = isArray;

    module.exports.isEmpty = isEmpty;

    module.exports.isPlainObject = isPlainObject;

    module.exports.getValue = getValue;
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDOMImplementation = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = (function() {
      function XMLDOMImplementation() {}

      XMLDOMImplementation.prototype.hasFeature = function(feature, version) {
        return true;
      };

      XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
        throw new Error('This DOM method is not implemented.');
      };

      XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
        throw new Error('This DOM method is not implemented.');
      };

      XMLDOMImplementation.prototype.createHTMLDocument = function(title) {
        throw new Error('This DOM method is not implemented.');
      };

      XMLDOMImplementation.prototype.getFeature = function(feature, version) {
        throw new Error('This DOM method is not implemented.');
      };

      return XMLDOMImplementation;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDOMErrorHandler = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = (function() {
      function XMLDOMErrorHandler() {}

      XMLDOMErrorHandler.prototype.handleError = function(error) {
        throw new Error(error);
      };

      return XMLDOMErrorHandler;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDOMStringList = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = (function() {
      function XMLDOMStringList(arr) {
        this.arr = arr || [];
      }

      Object.defineProperty(XMLDOMStringList.prototype, 'length', {
        get: function() {
          return this.arr.length;
        }
      });

      XMLDOMStringList.prototype.item = function(index) {
        return this.arr[index] || null;
      };

      XMLDOMStringList.prototype.contains = function(str) {
        return this.arr.indexOf(str) !== -1;
      };

      return XMLDOMStringList;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDOMConfiguration = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var XMLDOMErrorHandler$1, XMLDOMStringList$1;

    XMLDOMErrorHandler$1 = XMLDOMErrorHandler;

    XMLDOMStringList$1 = XMLDOMStringList;

    module.exports = (function() {
      function XMLDOMConfiguration() {
        this.defaultParams = {
          'canonical-form': false,
          'cdata-sections': false,
          comments: false,
          'datatype-normalization': false,
          'element-content-whitespace': true,
          entities: true,
          'error-handler': new XMLDOMErrorHandler$1(),
          infoset: true,
          'validate-if-schema': false,
          namespaces: true,
          'namespace-declarations': true,
          'normalize-characters': false,
          'schema-location': '',
          'schema-type': '',
          'split-cdata-sections': true,
          validate: false,
          'well-formed': true
        };
        this.params = Object.create(this.defaultParams);
      }

      Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {
        get: function() {
          return new XMLDOMStringList$1(Object.keys(this.defaultParams));
        }
      });

      XMLDOMConfiguration.prototype.getParameter = function(name) {
        if (this.params.hasOwnProperty(name)) {
          return this.params[name];
        } else {
          return null;
        }
      };

      XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {
        return true;
      };

      XMLDOMConfiguration.prototype.setParameter = function(name, value) {
        if (value != null) {
          return (this.params[name] = value);
        } else {
          return delete this.params[name];
        }
      };

      return XMLDOMConfiguration;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var NodeType = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = {
      Element: 1,
      Attribute: 2,
      Text: 3,
      CData: 4,
      EntityReference: 5,
      EntityDeclaration: 6,
      ProcessingInstruction: 7,
      Comment: 8,
      Document: 9,
      DocType: 10,
      DocumentFragment: 11,
      NotationDeclaration: 12,
      Declaration: 201,
      Raw: 202,
      AttributeDeclaration: 203,
      ElementDeclaration: 204,
      Dummy: 205
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLAttribute = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1;

    NodeType$1 = NodeType;

    module.exports = (function() {
      function XMLAttribute(parent, name, value) {
        this.parent = parent;
        if (this.parent) {
          this.options = this.parent.options;
          this.stringify = this.parent.stringify;
        }
        if (name == null) {
          throw new Error('Missing attribute name. ' + this.debugInfo(name));
        }
        this.name = this.stringify.name(name);
        this.value = this.stringify.attValue(value);
        this.type = NodeType$1.Attribute;
        this.isId = false;
        this.schemaTypeInfo = null;
      }

      Object.defineProperty(XMLAttribute.prototype, 'nodeType', {
        get: function() {
          return this.type;
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {
        get: function() {
          return this.parent;
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'textContent', {
        get: function() {
          return this.value;
        },
        set: function(value) {
          return (this.value = value || '');
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {
        get: function() {
          return '';
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'prefix', {
        get: function() {
          return '';
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'localName', {
        get: function() {
          return this.name;
        }
      });

      Object.defineProperty(XMLAttribute.prototype, 'specified', {
        get: function() {
          return true;
        }
      });

      XMLAttribute.prototype.clone = function() {
        return Object.create(this);
      };

      XMLAttribute.prototype.toString = function(options) {
        return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
      };

      XMLAttribute.prototype.debugInfo = function(name) {
        name = name || this.name;
        if (name == null) {
          return 'parent: <' + this.parent.name + '>';
        } else {
          return 'attribute: {' + name + '}, parent: <' + this.parent.name + '>';
        }
      };

      XMLAttribute.prototype.isEqualNode = function(node) {
        if (node.namespaceURI !== this.namespaceURI) {
          return false;
        }
        if (node.prefix !== this.prefix) {
          return false;
        }
        if (node.localName !== this.localName) {
          return false;
        }
        if (node.value !== this.value) {
          return false;
        }
        return true;
      };

      return XMLAttribute;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLNamedNodeMap = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = (function() {
      function XMLNamedNodeMap(nodes) {
        this.nodes = nodes;
      }

      Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {
        get: function() {
          return Object.keys(this.nodes).length || 0;
        }
      });

      XMLNamedNodeMap.prototype.clone = function() {
        return (this.nodes = null);
      };

      XMLNamedNodeMap.prototype.getNamedItem = function(name) {
        return this.nodes[name];
      };

      XMLNamedNodeMap.prototype.setNamedItem = function(node) {
        var oldNode;
        oldNode = this.nodes[node.nodeName];
        this.nodes[node.nodeName] = node;
        return oldNode || null;
      };

      XMLNamedNodeMap.prototype.removeNamedItem = function(name) {
        var oldNode;
        oldNode = this.nodes[name];
        delete this.nodes[name];
        return oldNode || null;
      };

      XMLNamedNodeMap.prototype.item = function(index) {
        return this.nodes[Object.keys(this.nodes)[index]] || null;
      };

      XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.');
      };

      XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {
        throw new Error('This DOM method is not implemented.');
      };

      XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.');
      };

      return XMLNamedNodeMap;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLElement = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLAttribute$1,
      XMLNamedNodeMap$1,
      XMLNode$1,
      getValue,
      isFunction,
      isObject,
      ref,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    (ref = Utility), (isObject = ref.isObject), (isFunction = ref.isFunction), (getValue = ref.getValue);

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    XMLAttribute$1 = XMLAttribute;

    XMLNamedNodeMap$1 = XMLNamedNodeMap;

    module.exports = (function(superClass) {
      extend(XMLElement, superClass);

      function XMLElement(parent, name, attributes) {
        var child, j, len, ref1;
        XMLElement.__super__.constructor.call(this, parent);
        if (name == null) {
          throw new Error('Missing element name. ' + this.debugInfo());
        }
        this.name = this.stringify.name(name);
        this.type = NodeType$1.Element;
        this.attribs = {};
        this.schemaTypeInfo = null;
        if (attributes != null) {
          this.attribute(attributes);
        }
        if (parent.type === NodeType$1.Document) {
          this.isRoot = true;
          this.documentObject = parent;
          parent.rootObject = this;
          if (parent.children) {
            ref1 = parent.children;
            for (j = 0, len = ref1.length; j < len; j++) {
              child = ref1[j];
              if (child.type === NodeType$1.DocType) {
                child.name = this.name;
                break;
              }
            }
          }
        }
      }

      Object.defineProperty(XMLElement.prototype, 'tagName', {
        get: function() {
          return this.name;
        }
      });

      Object.defineProperty(XMLElement.prototype, 'namespaceURI', {
        get: function() {
          return '';
        }
      });

      Object.defineProperty(XMLElement.prototype, 'prefix', {
        get: function() {
          return '';
        }
      });

      Object.defineProperty(XMLElement.prototype, 'localName', {
        get: function() {
          return this.name;
        }
      });

      Object.defineProperty(XMLElement.prototype, 'id', {
        get: function() {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      Object.defineProperty(XMLElement.prototype, 'className', {
        get: function() {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      Object.defineProperty(XMLElement.prototype, 'classList', {
        get: function() {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      Object.defineProperty(XMLElement.prototype, 'attributes', {
        get: function() {
          if (!this.attributeMap || !this.attributeMap.nodes) {
            this.attributeMap = new XMLNamedNodeMap$1(this.attribs);
          }
          return this.attributeMap;
        }
      });

      XMLElement.prototype.clone = function() {
        var att, attName, clonedSelf, ref1;
        clonedSelf = Object.create(this);
        if (clonedSelf.isRoot) {
          clonedSelf.documentObject = null;
        }
        clonedSelf.attribs = {};
        ref1 = this.attribs;
        for (attName in ref1) {
          if (!hasProp.call(ref1, attName)) continue;
          att = ref1[attName];
          clonedSelf.attribs[attName] = att.clone();
        }
        clonedSelf.children = [];
        this.children.forEach(function(child) {
          var clonedChild;
          clonedChild = child.clone();
          clonedChild.parent = clonedSelf;
          return clonedSelf.children.push(clonedChild);
        });
        return clonedSelf;
      };

      XMLElement.prototype.attribute = function(name, value) {
        var attName, attValue;
        if (name != null) {
          name = getValue(name);
        }
        if (isObject(name)) {
          for (attName in name) {
            if (!hasProp.call(name, attName)) continue;
            attValue = name[attName];
            this.attribute(attName, attValue);
          }
        } else {
          if (isFunction(value)) {
            value = value.apply();
          }
          if (this.options.keepNullAttributes && value == null) {
            this.attribs[name] = new XMLAttribute$1(this, name, '');
          } else if (value != null) {
            this.attribs[name] = new XMLAttribute$1(this, name, value);
          }
        }
        return this;
      };

      XMLElement.prototype.removeAttribute = function(name) {
        var attName, j, len;
        if (name == null) {
          throw new Error('Missing attribute name. ' + this.debugInfo());
        }
        name = getValue(name);
        if (Array.isArray(name)) {
          for (j = 0, len = name.length; j < len; j++) {
            attName = name[j];
            delete this.attribs[attName];
          }
        } else {
          delete this.attribs[name];
        }
        return this;
      };

      XMLElement.prototype.toString = function(options) {
        return this.options.writer.element(this, this.options.writer.filterOptions(options));
      };

      XMLElement.prototype.att = function(name, value) {
        return this.attribute(name, value);
      };

      XMLElement.prototype.a = function(name, value) {
        return this.attribute(name, value);
      };

      XMLElement.prototype.getAttribute = function(name) {
        if (this.attribs.hasOwnProperty(name)) {
          return this.attribs[name].value;
        } else {
          return null;
        }
      };

      XMLElement.prototype.setAttribute = function(name, value) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getAttributeNode = function(name) {
        if (this.attribs.hasOwnProperty(name)) {
          return this.attribs[name];
        } else {
          return null;
        }
      };

      XMLElement.prototype.setAttributeNode = function(newAttr) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.removeAttributeNode = function(oldAttr) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getElementsByTagName = function(name) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.setAttributeNodeNS = function(newAttr) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.hasAttribute = function(name) {
        return this.attribs.hasOwnProperty(name);
      };

      XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.setIdAttribute = function(name, isId) {
        if (this.attribs.hasOwnProperty(name)) {
          return this.attribs[name].isId;
        } else {
          return isId;
        }
      };

      XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getElementsByTagName = function(tagname) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.getElementsByClassName = function(classNames) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLElement.prototype.isEqualNode = function(node) {
        var i, j, ref1;
        if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
          return false;
        }
        if (node.namespaceURI !== this.namespaceURI) {
          return false;
        }
        if (node.prefix !== this.prefix) {
          return false;
        }
        if (node.localName !== this.localName) {
          return false;
        }
        if (node.attribs.length !== this.attribs.length) {
          return false;
        }
        for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
          if (!this.attribs[i].isEqualNode(node.attribs[i])) {
            return false;
          }
        }
        return true;
      };

      return XMLElement;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLCharacterData = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLNode$1 = XMLNode;

    module.exports = (function(superClass) {
      extend(XMLCharacterData, superClass);

      function XMLCharacterData(parent) {
        XMLCharacterData.__super__.constructor.call(this, parent);
        this.value = '';
      }

      Object.defineProperty(XMLCharacterData.prototype, 'data', {
        get: function() {
          return this.value;
        },
        set: function(value) {
          return (this.value = value || '');
        }
      });

      Object.defineProperty(XMLCharacterData.prototype, 'length', {
        get: function() {
          return this.value.length;
        }
      });

      Object.defineProperty(XMLCharacterData.prototype, 'textContent', {
        get: function() {
          return this.value;
        },
        set: function(value) {
          return (this.value = value || '');
        }
      });

      XMLCharacterData.prototype.clone = function() {
        return Object.create(this);
      };

      XMLCharacterData.prototype.substringData = function(offset, count) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLCharacterData.prototype.appendData = function(arg) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLCharacterData.prototype.insertData = function(offset, arg) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLCharacterData.prototype.deleteData = function(offset, count) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLCharacterData.prototype.replaceData = function(offset, count, arg) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLCharacterData.prototype.isEqualNode = function(node) {
        if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
          return false;
        }
        if (node.data !== this.data) {
          return false;
        }
        return true;
      };

      return XMLCharacterData;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLCData = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLCharacterData$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLCharacterData$1 = XMLCharacterData;

    module.exports = (function(superClass) {
      extend(XMLCData, superClass);

      function XMLCData(parent, text) {
        XMLCData.__super__.constructor.call(this, parent);
        if (text == null) {
          throw new Error('Missing CDATA text. ' + this.debugInfo());
        }
        this.name = '#cdata-section';
        this.type = NodeType$1.CData;
        this.value = this.stringify.cdata(text);
      }

      XMLCData.prototype.clone = function() {
        return Object.create(this);
      };

      XMLCData.prototype.toString = function(options) {
        return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
      };

      return XMLCData;
    })(XMLCharacterData$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLComment = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLCharacterData$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLCharacterData$1 = XMLCharacterData;

    module.exports = (function(superClass) {
      extend(XMLComment, superClass);

      function XMLComment(parent, text) {
        XMLComment.__super__.constructor.call(this, parent);
        if (text == null) {
          throw new Error('Missing comment text. ' + this.debugInfo());
        }
        this.name = '#comment';
        this.type = NodeType$1.Comment;
        this.value = this.stringify.comment(text);
      }

      XMLComment.prototype.clone = function() {
        return Object.create(this);
      };

      XMLComment.prototype.toString = function(options) {
        return this.options.writer.comment(this, this.options.writer.filterOptions(options));
      };

      return XMLComment;
    })(XMLCharacterData$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDeclaration = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      isObject,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    isObject = Utility.isObject;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDeclaration, superClass);

      function XMLDeclaration(parent, version, encoding, standalone) {
        var ref;
        XMLDeclaration.__super__.constructor.call(this, parent);
        if (isObject(version)) {
          (ref = version), (version = ref.version), (encoding = ref.encoding), (standalone = ref.standalone);
        }
        if (!version) {
          version = '1.0';
        }
        this.type = NodeType$1.Declaration;
        this.version = this.stringify.xmlVersion(version);
        if (encoding != null) {
          this.encoding = this.stringify.xmlEncoding(encoding);
        }
        if (standalone != null) {
          this.standalone = this.stringify.xmlStandalone(standalone);
        }
      }

      XMLDeclaration.prototype.toString = function(options) {
        return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
      };

      return XMLDeclaration;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDTDAttList = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDTDAttList, superClass);

      function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
        XMLDTDAttList.__super__.constructor.call(this, parent);
        if (elementName == null) {
          throw new Error('Missing DTD element name. ' + this.debugInfo());
        }
        if (attributeName == null) {
          throw new Error('Missing DTD attribute name. ' + this.debugInfo(elementName));
        }
        if (!attributeType) {
          throw new Error('Missing DTD attribute type. ' + this.debugInfo(elementName));
        }
        if (!defaultValueType) {
          throw new Error('Missing DTD attribute default. ' + this.debugInfo(elementName));
        }
        if (defaultValueType.indexOf('#') !== 0) {
          defaultValueType = '#' + defaultValueType;
        }
        if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
          throw new Error(
            'Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. ' +
              this.debugInfo(elementName)
          );
        }
        if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
          throw new Error('Default value only applies to #FIXED or #DEFAULT. ' + this.debugInfo(elementName));
        }
        this.elementName = this.stringify.name(elementName);
        this.type = NodeType$1.AttributeDeclaration;
        this.attributeName = this.stringify.name(attributeName);
        this.attributeType = this.stringify.dtdAttType(attributeType);
        if (defaultValue) {
          this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
        }
        this.defaultValueType = defaultValueType;
      }

      XMLDTDAttList.prototype.toString = function(options) {
        return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
      };

      return XMLDTDAttList;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDTDEntity = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      isObject,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    isObject = Utility.isObject;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDTDEntity, superClass);

      function XMLDTDEntity(parent, pe, name, value) {
        XMLDTDEntity.__super__.constructor.call(this, parent);
        if (name == null) {
          throw new Error('Missing DTD entity name. ' + this.debugInfo(name));
        }
        if (value == null) {
          throw new Error('Missing DTD entity value. ' + this.debugInfo(name));
        }
        this.pe = !!pe;
        this.name = this.stringify.name(name);
        this.type = NodeType$1.EntityDeclaration;
        if (!isObject(value)) {
          this.value = this.stringify.dtdEntityValue(value);
          this.internal = true;
        } else {
          if (!value.pubID && !value.sysID) {
            throw new Error(
              'Public and/or system identifiers are required for an external entity. ' + this.debugInfo(name)
            );
          }
          if (value.pubID && !value.sysID) {
            throw new Error('System identifier is required for a public external entity. ' + this.debugInfo(name));
          }
          this.internal = false;
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
          if (value.nData != null) {
            this.nData = this.stringify.dtdNData(value.nData);
          }
          if (this.pe && this.nData) {
            throw new Error('Notation declaration is not allowed in a parameter entity. ' + this.debugInfo(name));
          }
        }
      }

      Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {
        get: function() {
          return this.pubID;
        }
      });

      Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {
        get: function() {
          return this.sysID;
        }
      });

      Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {
        get: function() {
          return this.nData || null;
        }
      });

      Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {
        get: function() {
          return null;
        }
      });

      XMLDTDEntity.prototype.toString = function(options) {
        return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
      };

      return XMLDTDEntity;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDTDElement = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDTDElement, superClass);

      function XMLDTDElement(parent, name, value) {
        XMLDTDElement.__super__.constructor.call(this, parent);
        if (name == null) {
          throw new Error('Missing DTD element name. ' + this.debugInfo());
        }
        if (!value) {
          value = '(#PCDATA)';
        }
        if (Array.isArray(value)) {
          value = '(' + value.join(',') + ')';
        }
        this.name = this.stringify.name(name);
        this.type = NodeType$1.ElementDeclaration;
        this.value = this.stringify.dtdElementValue(value);
      }

      XMLDTDElement.prototype.toString = function(options) {
        return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
      };

      return XMLDTDElement;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDTDNotation = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDTDNotation, superClass);

      function XMLDTDNotation(parent, name, value) {
        XMLDTDNotation.__super__.constructor.call(this, parent);
        if (name == null) {
          throw new Error('Missing DTD notation name. ' + this.debugInfo(name));
        }
        if (!value.pubID && !value.sysID) {
          throw new Error('Public or system identifiers are required for an external entity. ' + this.debugInfo(name));
        }
        this.name = this.stringify.name(name);
        this.type = NodeType$1.NotationDeclaration;
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
      }

      Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {
        get: function() {
          return this.pubID;
        }
      });

      Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {
        get: function() {
          return this.sysID;
        }
      });

      XMLDTDNotation.prototype.toString = function(options) {
        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
      };

      return XMLDTDNotation;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDocType = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLDTDAttList$1,
      XMLDTDElement$1,
      XMLDTDEntity$1,
      XMLDTDNotation$1,
      XMLNamedNodeMap$1,
      XMLNode$1,
      isObject,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    isObject = Utility.isObject;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    XMLDTDAttList$1 = XMLDTDAttList;

    XMLDTDEntity$1 = XMLDTDEntity;

    XMLDTDElement$1 = XMLDTDElement;

    XMLDTDNotation$1 = XMLDTDNotation;

    XMLNamedNodeMap$1 = XMLNamedNodeMap;

    module.exports = (function(superClass) {
      extend(XMLDocType, superClass);

      function XMLDocType(parent, pubID, sysID) {
        var child, i, len, ref, ref1, ref2;
        XMLDocType.__super__.constructor.call(this, parent);
        this.type = NodeType$1.DocType;
        if (parent.children) {
          ref = parent.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            if (child.type === NodeType$1.Element) {
              this.name = child.name;
              break;
            }
          }
        }
        this.documentObject = parent;
        if (isObject(pubID)) {
          (ref1 = pubID), (pubID = ref1.pubID), (sysID = ref1.sysID);
        }
        if (sysID == null) {
          (ref2 = [pubID, sysID]), (sysID = ref2[0]), (pubID = ref2[1]);
        }
        if (pubID != null) {
          this.pubID = this.stringify.dtdPubID(pubID);
        }
        if (sysID != null) {
          this.sysID = this.stringify.dtdSysID(sysID);
        }
      }

      Object.defineProperty(XMLDocType.prototype, 'entities', {
        get: function() {
          var child, i, len, nodes, ref;
          nodes = {};
          ref = this.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            if (child.type === NodeType$1.EntityDeclaration && !child.pe) {
              nodes[child.name] = child;
            }
          }
          return new XMLNamedNodeMap$1(nodes);
        }
      });

      Object.defineProperty(XMLDocType.prototype, 'notations', {
        get: function() {
          var child, i, len, nodes, ref;
          nodes = {};
          ref = this.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            if (child.type === NodeType$1.NotationDeclaration) {
              nodes[child.name] = child;
            }
          }
          return new XMLNamedNodeMap$1(nodes);
        }
      });

      Object.defineProperty(XMLDocType.prototype, 'publicId', {
        get: function() {
          return this.pubID;
        }
      });

      Object.defineProperty(XMLDocType.prototype, 'systemId', {
        get: function() {
          return this.sysID;
        }
      });

      Object.defineProperty(XMLDocType.prototype, 'internalSubset', {
        get: function() {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      XMLDocType.prototype.element = function(name, value) {
        var child;
        child = new XMLDTDElement$1(this, name, value);
        this.children.push(child);
        return this;
      };

      XMLDocType.prototype.attList = function(
        elementName,
        attributeName,
        attributeType,
        defaultValueType,
        defaultValue
      ) {
        var child;
        child = new XMLDTDAttList$1(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
        this.children.push(child);
        return this;
      };

      XMLDocType.prototype.entity = function(name, value) {
        var child;
        child = new XMLDTDEntity$1(this, false, name, value);
        this.children.push(child);
        return this;
      };

      XMLDocType.prototype.pEntity = function(name, value) {
        var child;
        child = new XMLDTDEntity$1(this, true, name, value);
        this.children.push(child);
        return this;
      };

      XMLDocType.prototype.notation = function(name, value) {
        var child;
        child = new XMLDTDNotation$1(this, name, value);
        this.children.push(child);
        return this;
      };

      XMLDocType.prototype.toString = function(options) {
        return this.options.writer.docType(this, this.options.writer.filterOptions(options));
      };

      XMLDocType.prototype.ele = function(name, value) {
        return this.element(name, value);
      };

      XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
      };

      XMLDocType.prototype.ent = function(name, value) {
        return this.entity(name, value);
      };

      XMLDocType.prototype.pent = function(name, value) {
        return this.pEntity(name, value);
      };

      XMLDocType.prototype.not = function(name, value) {
        return this.notation(name, value);
      };

      XMLDocType.prototype.up = function() {
        return this.root() || this.documentObject;
      };

      XMLDocType.prototype.isEqualNode = function(node) {
        if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
          return false;
        }
        if (node.name !== this.name) {
          return false;
        }
        if (node.publicId !== this.publicId) {
          return false;
        }
        if (node.systemId !== this.systemId) {
          return false;
        }
        return true;
      };

      return XMLDocType;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLRaw = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLNode$1 = XMLNode;

    module.exports = (function(superClass) {
      extend(XMLRaw, superClass);

      function XMLRaw(parent, text) {
        XMLRaw.__super__.constructor.call(this, parent);
        if (text == null) {
          throw new Error('Missing raw text. ' + this.debugInfo());
        }
        this.type = NodeType$1.Raw;
        this.value = this.stringify.raw(text);
      }

      XMLRaw.prototype.clone = function() {
        return Object.create(this);
      };

      XMLRaw.prototype.toString = function(options) {
        return this.options.writer.raw(this, this.options.writer.filterOptions(options));
      };

      return XMLRaw;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLText = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLCharacterData$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLCharacterData$1 = XMLCharacterData;

    module.exports = (function(superClass) {
      extend(XMLText, superClass);

      function XMLText(parent, text) {
        XMLText.__super__.constructor.call(this, parent);
        if (text == null) {
          throw new Error('Missing element text. ' + this.debugInfo());
        }
        this.name = '#text';
        this.type = NodeType$1.Text;
        this.value = this.stringify.text(text);
      }

      Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {
        get: function() {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      Object.defineProperty(XMLText.prototype, 'wholeText', {
        get: function() {
          var next, prev, str;
          str = '';
          prev = this.previousSibling;
          while (prev) {
            str = prev.data + str;
            prev = prev.previousSibling;
          }
          str += this.data;
          next = this.nextSibling;
          while (next) {
            str = str + next.data;
            next = next.nextSibling;
          }
          return str;
        }
      });

      XMLText.prototype.clone = function() {
        return Object.create(this);
      };

      XMLText.prototype.toString = function(options) {
        return this.options.writer.text(this, this.options.writer.filterOptions(options));
      };

      XMLText.prototype.splitText = function(offset) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLText.prototype.replaceWholeText = function(content) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      return XMLText;
    })(XMLCharacterData$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLProcessingInstruction = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLCharacterData$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLCharacterData$1 = XMLCharacterData;

    module.exports = (function(superClass) {
      extend(XMLProcessingInstruction, superClass);

      function XMLProcessingInstruction(parent, target, value) {
        XMLProcessingInstruction.__super__.constructor.call(this, parent);
        if (target == null) {
          throw new Error('Missing instruction target. ' + this.debugInfo());
        }
        this.type = NodeType$1.ProcessingInstruction;
        this.target = this.stringify.insTarget(target);
        this.name = this.target;
        if (value) {
          this.value = this.stringify.insValue(value);
        }
      }

      XMLProcessingInstruction.prototype.clone = function() {
        return Object.create(this);
      };

      XMLProcessingInstruction.prototype.toString = function(options) {
        return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
      };

      XMLProcessingInstruction.prototype.isEqualNode = function(node) {
        if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
          return false;
        }
        if (node.target !== this.target) {
          return false;
        }
        return true;
      };

      return XMLProcessingInstruction;
    })(XMLCharacterData$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDummy = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLNode$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    module.exports = (function(superClass) {
      extend(XMLDummy, superClass);

      function XMLDummy(parent) {
        XMLDummy.__super__.constructor.call(this, parent);
        this.type = NodeType$1.Dummy;
      }

      XMLDummy.prototype.clone = function() {
        return Object.create(this);
      };

      XMLDummy.prototype.toString = function(options) {
        return '';
      };

      return XMLDummy;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLNodeList = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = (function() {
      function XMLNodeList(nodes) {
        this.nodes = nodes;
      }

      Object.defineProperty(XMLNodeList.prototype, 'length', {
        get: function() {
          return this.nodes.length || 0;
        }
      });

      XMLNodeList.prototype.clone = function() {
        return (this.nodes = null);
      };

      XMLNodeList.prototype.item = function(index) {
        return this.nodes[index] || null;
      };

      return XMLNodeList;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var DocumentPosition = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = {
      Disconnected: 1,
      Preceding: 2,
      Following: 4,
      Contains: 8,
      ContainedBy: 16,
      ImplementationSpecific: 32
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLNode = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var DocumentPosition$1,
      NodeType$1,
      XMLCData$1,
      XMLComment$1,
      XMLDeclaration$1,
      XMLDocType$1,
      XMLDummy$1,
      XMLElement$1,
      XMLNodeList$1,
      XMLProcessingInstruction$1,
      XMLRaw$1,
      XMLText$1,
      getValue,
      isEmpty,
      isFunction,
      isObject,
      ref1,
      hasProp = {}.hasOwnProperty;

    (ref1 = Utility),
      (isObject = ref1.isObject),
      (isFunction = ref1.isFunction),
      (isEmpty = ref1.isEmpty),
      (getValue = ref1.getValue);

    XMLElement$1 = null;

    XMLCData$1 = null;

    XMLComment$1 = null;

    XMLDeclaration$1 = null;

    XMLDocType$1 = null;

    XMLRaw$1 = null;

    XMLText$1 = null;

    XMLProcessingInstruction$1 = null;

    XMLDummy$1 = null;

    NodeType$1 = null;

    XMLNodeList$1 = null;

    DocumentPosition$1 = null;

    module.exports = (function() {
      function XMLNode(parent1) {
        this.parent = parent1;
        if (this.parent) {
          this.options = this.parent.options;
          this.stringify = this.parent.stringify;
        }
        this.value = null;
        this.children = [];
        this.baseURI = null;
        if (!XMLElement$1) {
          XMLElement$1 = XMLElement;
          XMLCData$1 = XMLCData;
          XMLComment$1 = XMLComment;
          XMLDeclaration$1 = XMLDeclaration;
          XMLDocType$1 = XMLDocType;
          XMLRaw$1 = XMLRaw;
          XMLText$1 = XMLText;
          XMLProcessingInstruction$1 = XMLProcessingInstruction;
          XMLDummy$1 = XMLDummy;
          NodeType$1 = NodeType;
          XMLNodeList$1 = XMLNodeList;
          DocumentPosition$1 = DocumentPosition;
        }
      }

      Object.defineProperty(XMLNode.prototype, 'nodeName', {
        get: function() {
          return this.name;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'nodeType', {
        get: function() {
          return this.type;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'nodeValue', {
        get: function() {
          return this.value;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'parentNode', {
        get: function() {
          return this.parent;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'childNodes', {
        get: function() {
          if (!this.childNodeList || !this.childNodeList.nodes) {
            this.childNodeList = new XMLNodeList$1(this.children);
          }
          return this.childNodeList;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'firstChild', {
        get: function() {
          return this.children[0] || null;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'lastChild', {
        get: function() {
          return this.children[this.children.length - 1] || null;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'previousSibling', {
        get: function() {
          var i;
          i = this.parent.children.indexOf(this);
          return this.parent.children[i - 1] || null;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'nextSibling', {
        get: function() {
          var i;
          i = this.parent.children.indexOf(this);
          return this.parent.children[i + 1] || null;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'ownerDocument', {
        get: function() {
          return this.document() || null;
        }
      });

      Object.defineProperty(XMLNode.prototype, 'textContent', {
        get: function() {
          var child, j, len, ref2, str;
          if (this.nodeType === NodeType$1.Element || this.nodeType === NodeType$1.DocumentFragment) {
            str = '';
            ref2 = this.children;
            for (j = 0, len = ref2.length; j < len; j++) {
              child = ref2[j];
              if (child.textContent) {
                str += child.textContent;
              }
            }
            return str;
          } else {
            return null;
          }
        },
        set: function(value) {
          throw new Error('This DOM method is not implemented.' + this.debugInfo());
        }
      });

      XMLNode.prototype.setParent = function(parent) {
        var child, j, len, ref2, results;
        this.parent = parent;
        if (parent) {
          this.options = parent.options;
          this.stringify = parent.stringify;
        }
        ref2 = this.children;
        results = [];
        for (j = 0, len = ref2.length; j < len; j++) {
          child = ref2[j];
          results.push(child.setParent(this));
        }
        return results;
      };

      XMLNode.prototype.element = function(name, attributes, text) {
        var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;
        lastChild = null;
        if (attributes === null && text == null) {
          (ref2 = [{}, null]), (attributes = ref2[0]), (text = ref2[1]);
        }
        if (attributes == null) {
          attributes = {};
        }
        attributes = getValue(attributes);
        if (!isObject(attributes)) {
          (ref3 = [attributes, text]), (text = ref3[0]), (attributes = ref3[1]);
        }
        if (name != null) {
          name = getValue(name);
        }
        if (Array.isArray(name)) {
          for (j = 0, len = name.length; j < len; j++) {
            item = name[j];
            lastChild = this.element(item);
          }
        } else if (isFunction(name)) {
          lastChild = this.element(name.apply());
        } else if (isObject(name)) {
          for (key in name) {
            if (!hasProp.call(name, key)) continue;
            val = name[key];
            if (isFunction(val)) {
              val = val.apply();
            }
            if (
              !this.options.ignoreDecorators &&
              this.stringify.convertAttKey &&
              key.indexOf(this.stringify.convertAttKey) === 0
            ) {
              lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
            } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
              lastChild = this.dummy();
            } else if (isObject(val) && isEmpty(val)) {
              lastChild = this.element(key);
            } else if (!this.options.keepNullNodes && val == null) {
              lastChild = this.dummy();
            } else if (!this.options.separateArrayItems && Array.isArray(val)) {
              for (k = 0, len1 = val.length; k < len1; k++) {
                item = val[k];
                childNode = {};
                childNode[key] = item;
                lastChild = this.element(childNode);
              }
            } else if (isObject(val)) {
              if (
                !this.options.ignoreDecorators &&
                this.stringify.convertTextKey &&
                key.indexOf(this.stringify.convertTextKey) === 0
              ) {
                lastChild = this.element(val);
              } else {
                lastChild = this.element(key);
                lastChild.element(val);
              }
            } else {
              lastChild = this.element(key, val);
            }
          }
        } else if (!this.options.keepNullNodes && text === null) {
          lastChild = this.dummy();
        } else {
          if (
            !this.options.ignoreDecorators &&
            this.stringify.convertTextKey &&
            name.indexOf(this.stringify.convertTextKey) === 0
          ) {
            lastChild = this.text(text);
          } else if (
            !this.options.ignoreDecorators &&
            this.stringify.convertCDataKey &&
            name.indexOf(this.stringify.convertCDataKey) === 0
          ) {
            lastChild = this.cdata(text);
          } else if (
            !this.options.ignoreDecorators &&
            this.stringify.convertCommentKey &&
            name.indexOf(this.stringify.convertCommentKey) === 0
          ) {
            lastChild = this.comment(text);
          } else if (
            !this.options.ignoreDecorators &&
            this.stringify.convertRawKey &&
            name.indexOf(this.stringify.convertRawKey) === 0
          ) {
            lastChild = this.raw(text);
          } else if (
            !this.options.ignoreDecorators &&
            this.stringify.convertPIKey &&
            name.indexOf(this.stringify.convertPIKey) === 0
          ) {
            lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
          } else {
            lastChild = this.node(name, attributes, text);
          }
        }
        if (lastChild == null) {
          throw new Error('Could not create any elements with: ' + name + '. ' + this.debugInfo());
        }
        return lastChild;
      };

      XMLNode.prototype.insertBefore = function(name, attributes, text) {
        var child, i, newChild, refChild, removed;
        if (name != null ? name.type : void 0) {
          newChild = name;
          refChild = attributes;
          newChild.setParent(this);
          if (refChild) {
            i = children.indexOf(refChild);
            removed = children.splice(i);
            children.push(newChild);
            Array.prototype.push.apply(children, removed);
          } else {
            children.push(newChild);
          }
          return newChild;
        } else {
          if (this.isRoot) {
            throw new Error('Cannot insert elements at root level. ' + this.debugInfo(name));
          }
          i = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        }
      };

      XMLNode.prototype.insertAfter = function(name, attributes, text) {
        var child, i, removed;
        if (this.isRoot) {
          throw new Error('Cannot insert elements at root level. ' + this.debugInfo(name));
        }
        i = this.parent.children.indexOf(this);
        removed = this.parent.children.splice(i + 1);
        child = this.parent.element(name, attributes, text);
        Array.prototype.push.apply(this.parent.children, removed);
        return child;
      };

      XMLNode.prototype.remove = function() {
        var i, ref2;
        if (this.isRoot) {
          throw new Error('Cannot remove the root element. ' + this.debugInfo());
        }
        i = this.parent.children.indexOf(this);
        [].splice.apply(this.parent.children, [i, i - i + 1].concat((ref2 = []))), ref2;
        return this.parent;
      };

      XMLNode.prototype.node = function(name, attributes, text) {
        var child, ref2;
        if (name != null) {
          name = getValue(name);
        }
        attributes || (attributes = {});
        attributes = getValue(attributes);
        if (!isObject(attributes)) {
          (ref2 = [attributes, text]), (text = ref2[0]), (attributes = ref2[1]);
        }
        child = new XMLElement$1(this, name, attributes);
        if (text != null) {
          child.text(text);
        }
        this.children.push(child);
        return child;
      };

      XMLNode.prototype.text = function(value) {
        var child;
        if (isObject(value)) {
          this.element(value);
        }
        child = new XMLText$1(this, value);
        this.children.push(child);
        return this;
      };

      XMLNode.prototype.cdata = function(value) {
        var child;
        child = new XMLCData$1(this, value);
        this.children.push(child);
        return this;
      };

      XMLNode.prototype.comment = function(value) {
        var child;
        child = new XMLComment$1(this, value);
        this.children.push(child);
        return this;
      };

      XMLNode.prototype.commentBefore = function(value) {
        var i, removed;
        i = this.parent.children.indexOf(this);
        removed = this.parent.children.splice(i);
        this.parent.comment(value);
        Array.prototype.push.apply(this.parent.children, removed);
        return this;
      };

      XMLNode.prototype.commentAfter = function(value) {
        var i, removed;
        i = this.parent.children.indexOf(this);
        removed = this.parent.children.splice(i + 1);
        this.parent.comment(value);
        Array.prototype.push.apply(this.parent.children, removed);
        return this;
      };

      XMLNode.prototype.raw = function(value) {
        var child;
        child = new XMLRaw$1(this, value);
        this.children.push(child);
        return this;
      };

      XMLNode.prototype.dummy = function() {
        var child;
        child = new XMLDummy$1(this);
        return child;
      };

      XMLNode.prototype.instruction = function(target, value) {
        var insTarget, insValue, instruction, j, len;
        if (target != null) {
          target = getValue(target);
        }
        if (value != null) {
          value = getValue(value);
        }
        if (Array.isArray(target)) {
          for (j = 0, len = target.length; j < len; j++) {
            insTarget = target[j];
            this.instruction(insTarget);
          }
        } else if (isObject(target)) {
          for (insTarget in target) {
            if (!hasProp.call(target, insTarget)) continue;
            insValue = target[insTarget];
            this.instruction(insTarget, insValue);
          }
        } else {
          if (isFunction(value)) {
            value = value.apply();
          }
          instruction = new XMLProcessingInstruction$1(this, target, value);
          this.children.push(instruction);
        }
        return this;
      };

      XMLNode.prototype.instructionBefore = function(target, value) {
        var i, removed;
        i = this.parent.children.indexOf(this);
        removed = this.parent.children.splice(i);
        this.parent.instruction(target, value);
        Array.prototype.push.apply(this.parent.children, removed);
        return this;
      };

      XMLNode.prototype.instructionAfter = function(target, value) {
        var i, removed;
        i = this.parent.children.indexOf(this);
        removed = this.parent.children.splice(i + 1);
        this.parent.instruction(target, value);
        Array.prototype.push.apply(this.parent.children, removed);
        return this;
      };

      XMLNode.prototype.declaration = function(version, encoding, standalone) {
        var doc, xmldec;
        doc = this.document();
        xmldec = new XMLDeclaration$1(doc, version, encoding, standalone);
        if (doc.children.length === 0) {
          doc.children.unshift(xmldec);
        } else if (doc.children[0].type === NodeType$1.Declaration) {
          doc.children[0] = xmldec;
        } else {
          doc.children.unshift(xmldec);
        }
        return doc.root() || doc;
      };

      XMLNode.prototype.dtd = function(pubID, sysID) {
        var child, doc, doctype, i, j, k, len, len1, ref2, ref3;
        doc = this.document();
        doctype = new XMLDocType$1(doc, pubID, sysID);
        ref2 = doc.children;
        for (i = j = 0, len = ref2.length; j < len; i = ++j) {
          child = ref2[i];
          if (child.type === NodeType$1.DocType) {
            doc.children[i] = doctype;
            return doctype;
          }
        }
        ref3 = doc.children;
        for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {
          child = ref3[i];
          if (child.isRoot) {
            doc.children.splice(i, 0, doctype);
            return doctype;
          }
        }
        doc.children.push(doctype);
        return doctype;
      };

      XMLNode.prototype.up = function() {
        if (this.isRoot) {
          throw new Error('The root node has no parent. Use doc() if you need to get the document object.');
        }
        return this.parent;
      };

      XMLNode.prototype.root = function() {
        var node;
        node = this;
        while (node) {
          if (node.type === NodeType$1.Document) {
            return node.rootObject;
          } else if (node.isRoot) {
            return node;
          } else {
            node = node.parent;
          }
        }
      };

      XMLNode.prototype.document = function() {
        var node;
        node = this;
        while (node) {
          if (node.type === NodeType$1.Document) {
            return node;
          } else {
            node = node.parent;
          }
        }
      };

      XMLNode.prototype.end = function(options) {
        return this.document().end(options);
      };

      XMLNode.prototype.prev = function() {
        var i;
        i = this.parent.children.indexOf(this);
        if (i < 1) {
          throw new Error('Already at the first node. ' + this.debugInfo());
        }
        return this.parent.children[i - 1];
      };

      XMLNode.prototype.next = function() {
        var i;
        i = this.parent.children.indexOf(this);
        if (i === -1 || i === this.parent.children.length - 1) {
          throw new Error('Already at the last node. ' + this.debugInfo());
        }
        return this.parent.children[i + 1];
      };

      XMLNode.prototype.importDocument = function(doc) {
        var clonedRoot;
        clonedRoot = doc.root().clone();
        clonedRoot.parent = this;
        clonedRoot.isRoot = false;
        this.children.push(clonedRoot);
        return this;
      };

      XMLNode.prototype.debugInfo = function(name) {
        var ref2, ref3;
        name = name || this.name;
        if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
          return '';
        } else if (name == null) {
          return 'parent: <' + this.parent.name + '>';
        } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
          return 'node: <' + name + '>';
        } else {
          return 'node: <' + name + '>, parent: <' + this.parent.name + '>';
        }
      };

      XMLNode.prototype.ele = function(name, attributes, text) {
        return this.element(name, attributes, text);
      };

      XMLNode.prototype.nod = function(name, attributes, text) {
        return this.node(name, attributes, text);
      };

      XMLNode.prototype.txt = function(value) {
        return this.text(value);
      };

      XMLNode.prototype.dat = function(value) {
        return this.cdata(value);
      };

      XMLNode.prototype.com = function(value) {
        return this.comment(value);
      };

      XMLNode.prototype.ins = function(target, value) {
        return this.instruction(target, value);
      };

      XMLNode.prototype.doc = function() {
        return this.document();
      };

      XMLNode.prototype.dec = function(version, encoding, standalone) {
        return this.declaration(version, encoding, standalone);
      };

      XMLNode.prototype.e = function(name, attributes, text) {
        return this.element(name, attributes, text);
      };

      XMLNode.prototype.n = function(name, attributes, text) {
        return this.node(name, attributes, text);
      };

      XMLNode.prototype.t = function(value) {
        return this.text(value);
      };

      XMLNode.prototype.d = function(value) {
        return this.cdata(value);
      };

      XMLNode.prototype.c = function(value) {
        return this.comment(value);
      };

      XMLNode.prototype.r = function(value) {
        return this.raw(value);
      };

      XMLNode.prototype.i = function(target, value) {
        return this.instruction(target, value);
      };

      XMLNode.prototype.u = function() {
        return this.up();
      };

      XMLNode.prototype.importXMLBuilder = function(doc) {
        return this.importDocument(doc);
      };

      XMLNode.prototype.replaceChild = function(newChild, oldChild) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.removeChild = function(oldChild) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.appendChild = function(newChild) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.hasChildNodes = function() {
        return this.children.length !== 0;
      };

      XMLNode.prototype.cloneNode = function(deep) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.normalize = function() {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.isSupported = function(feature, version) {
        return true;
      };

      XMLNode.prototype.hasAttributes = function() {
        return this.attribs.length !== 0;
      };

      XMLNode.prototype.compareDocumentPosition = function(other) {
        var ref, res;
        ref = this;
        if (ref === other) {
          return 0;
        } else if (this.document() !== other.document()) {
          res = DocumentPosition$1.Disconnected | DocumentPosition$1.ImplementationSpecific;
          if (Math.random() < 0.5) {
            res |= DocumentPosition$1.Preceding;
          } else {
            res |= DocumentPosition$1.Following;
          }
          return res;
        } else if (ref.isAncestor(other)) {
          return DocumentPosition$1.Contains | DocumentPosition$1.Preceding;
        } else if (ref.isDescendant(other)) {
          return DocumentPosition$1.Contains | DocumentPosition$1.Following;
        } else if (ref.isPreceding(other)) {
          return DocumentPosition$1.Preceding;
        } else {
          return DocumentPosition$1.Following;
        }
      };

      XMLNode.prototype.isSameNode = function(other) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.lookupPrefix = function(namespaceURI) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.lookupNamespaceURI = function(prefix) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.isEqualNode = function(node) {
        var i, j, ref2;
        if (node.nodeType !== this.nodeType) {
          return false;
        }
        if (node.children.length !== this.children.length) {
          return false;
        }
        for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {
          if (!this.children[i].isEqualNode(node.children[i])) {
            return false;
          }
        }
        return true;
      };

      XMLNode.prototype.getFeature = function(feature, version) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.setUserData = function(key, data, handler) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.getUserData = function(key) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLNode.prototype.contains = function(other) {
        if (!other) {
          return false;
        }
        return other === this || this.isDescendant(other);
      };

      XMLNode.prototype.isDescendant = function(node) {
        var child, isDescendantChild, j, len, ref2;
        ref2 = this.children;
        for (j = 0, len = ref2.length; j < len; j++) {
          child = ref2[j];
          if (node === child) {
            return true;
          }
          isDescendantChild = child.isDescendant(node);
          if (isDescendantChild) {
            return true;
          }
        }
        return false;
      };

      XMLNode.prototype.isAncestor = function(node) {
        return node.isDescendant(this);
      };

      XMLNode.prototype.isPreceding = function(node) {
        var nodePos, thisPos;
        nodePos = this.treePosition(node);
        thisPos = this.treePosition(this);
        if (nodePos === -1 || thisPos === -1) {
          return false;
        } else {
          return nodePos < thisPos;
        }
      };

      XMLNode.prototype.isFollowing = function(node) {
        var nodePos, thisPos;
        nodePos = this.treePosition(node);
        thisPos = this.treePosition(this);
        if (nodePos === -1 || thisPos === -1) {
          return false;
        } else {
          return nodePos > thisPos;
        }
      };

      XMLNode.prototype.treePosition = function(node) {
        var found, pos;
        pos = 0;
        found = false;
        this.foreachTreeNode(this.document(), function(childNode) {
          pos++;
          if (!found && childNode === node) {
            return (found = true);
          }
        });
        if (found) {
          return pos;
        } else {
          return -1;
        }
      };

      XMLNode.prototype.foreachTreeNode = function(node, func) {
        var child, j, len, ref2, res;
        node || (node = this.document());
        ref2 = node.children;
        for (j = 0, len = ref2.length; j < len; j++) {
          child = ref2[j];
          if ((res = func(child))) {
            return res;
          } else {
            res = this.foreachTreeNode(child, func);
            if (res) {
              return res;
            }
          }
        }
      };

      return XMLNode;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLStringifier = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      },
      hasProp = {}.hasOwnProperty;

    module.exports = (function() {
      function XMLStringifier(options) {
        this.assertLegalName = bind(this.assertLegalName, this);
        this.assertLegalChar = bind(this.assertLegalChar, this);
        var key, ref, value;
        options || (options = {});
        this.options = options;
        if (!this.options.version) {
          this.options.version = '1.0';
        }
        ref = options.stringify || {};
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          this[key] = value;
        }
      }

      XMLStringifier.prototype.name = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalName('' + val || '');
      };

      XMLStringifier.prototype.text = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar(this.textEscape('' + val || ''));
      };

      XMLStringifier.prototype.cdata = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        val = '' + val || '';
        val = val.replace(']]>', ']]]]><![CDATA[>');
        return this.assertLegalChar(val);
      };

      XMLStringifier.prototype.comment = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        val = '' + val || '';
        if (val.match(/--/)) {
          throw new Error('Comment text cannot contain double-hypen: ' + val);
        }
        return this.assertLegalChar(val);
      };

      XMLStringifier.prototype.raw = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return '' + val || '';
      };

      XMLStringifier.prototype.attValue = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar(this.attEscape((val = '' + val || '')));
      };

      XMLStringifier.prototype.insTarget = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.insValue = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        val = '' + val || '';
        if (val.match(/\?>/)) {
          throw new Error('Invalid processing instruction value: ' + val);
        }
        return this.assertLegalChar(val);
      };

      XMLStringifier.prototype.xmlVersion = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        val = '' + val || '';
        if (!val.match(/1\.[0-9]+/)) {
          throw new Error('Invalid version number: ' + val);
        }
        return val;
      };

      XMLStringifier.prototype.xmlEncoding = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        val = '' + val || '';
        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
          throw new Error('Invalid encoding: ' + val);
        }
        return this.assertLegalChar(val);
      };

      XMLStringifier.prototype.xmlStandalone = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        if (val) {
          return 'yes';
        } else {
          return 'no';
        }
      };

      XMLStringifier.prototype.dtdPubID = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdSysID = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdElementValue = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdAttType = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdAttDefault = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdEntityValue = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.dtdNData = function(val) {
        if (this.options.noValidation) {
          return val;
        }
        return this.assertLegalChar('' + val || '');
      };

      XMLStringifier.prototype.convertAttKey = '@';

      XMLStringifier.prototype.convertPIKey = '?';

      XMLStringifier.prototype.convertTextKey = '#text';

      XMLStringifier.prototype.convertCDataKey = '#cdata';

      XMLStringifier.prototype.convertCommentKey = '#comment';

      XMLStringifier.prototype.convertRawKey = '#raw';

      XMLStringifier.prototype.assertLegalChar = function(str) {
        var regex, res;
        if (this.options.noValidation) {
          return str;
        }
        regex = '';
        if (this.options.version === '1.0') {
          regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
          if ((res = str.match(regex))) {
            throw new Error('Invalid character in string: ' + str + ' at index ' + res.index);
          }
        } else if (this.options.version === '1.1') {
          regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
          if ((res = str.match(regex))) {
            throw new Error('Invalid character in string: ' + str + ' at index ' + res.index);
          }
        }
        return str;
      };

      XMLStringifier.prototype.assertLegalName = function(str) {
        var regex;
        if (this.options.noValidation) {
          return str;
        }
        this.assertLegalChar(str);
        regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
        if (!str.match(regex)) {
          throw new Error('Invalid character in name');
        }
        return str;
      };

      XMLStringifier.prototype.textEscape = function(str) {
        var ampregex;
        if (this.options.noValidation) {
          return str;
        }
        ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
        return str
          .replace(ampregex, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/\r/g, '&#xD;');
      };

      XMLStringifier.prototype.attEscape = function(str) {
        var ampregex;
        if (this.options.noValidation) {
          return str;
        }
        ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
        return str
          .replace(ampregex, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/"/g, '&quot;')
          .replace(/\t/g, '&#x9;')
          .replace(/\n/g, '&#xA;')
          .replace(/\r/g, '&#xD;');
      };

      return XMLStringifier;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var WriterState = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    module.exports = {
      None: 0,
      OpenTag: 1,
      InsideTag: 2,
      CloseTag: 3
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLWriterBase = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      WriterState$1,
      assign,
      hasProp = {}.hasOwnProperty;

    assign = Utility.assign;

    NodeType$1 = NodeType;

    WriterState$1 = WriterState;

    module.exports = (function() {
      function XMLWriterBase(options) {
        var key, ref, value;
        options || (options = {});
        this.options = options;
        ref = options.writer || {};
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          this['_' + key] = this[key];
          this[key] = value;
        }
      }

      XMLWriterBase.prototype.filterOptions = function(options) {
        var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
        options || (options = {});
        options = assign({}, this.options, options);
        filteredOptions = {
          writer: this
        };
        filteredOptions.pretty = options.pretty || false;
        filteredOptions.allowEmpty = options.allowEmpty || false;
        filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';
        filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\n';
        filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
        filteredOptions.dontPrettyTextNodes =
          (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
        filteredOptions.spaceBeforeSlash =
          (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';
        if (filteredOptions.spaceBeforeSlash === true) {
          filteredOptions.spaceBeforeSlash = ' ';
        }
        filteredOptions.suppressPrettyCount = 0;
        filteredOptions.user = {};
        filteredOptions.state = WriterState$1.None;
        return filteredOptions;
      };

      XMLWriterBase.prototype.indent = function(node, options, level) {
        var indentLevel;
        if (!options.pretty || options.suppressPrettyCount) {
          return '';
        } else if (options.pretty) {
          indentLevel = (level || 0) + options.offset + 1;
          if (indentLevel > 0) {
            return new Array(indentLevel).join(options.indent);
          }
        }
        return '';
      };

      XMLWriterBase.prototype.endline = function(node, options, level) {
        if (!options.pretty || options.suppressPrettyCount) {
          return '';
        } else {
          return options.newline;
        }
      };

      XMLWriterBase.prototype.attribute = function(att, options, level) {
        var r;
        this.openAttribute(att, options, level);
        r = ' ' + att.name + '="' + att.value + '"';
        this.closeAttribute(att, options, level);
        return r;
      };

      XMLWriterBase.prototype.cdata = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<![CDATA[';
        options.state = WriterState$1.InsideTag;
        r += node.value;
        options.state = WriterState$1.CloseTag;
        r += ']]>' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.comment = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<!-- ';
        options.state = WriterState$1.InsideTag;
        r += node.value;
        options.state = WriterState$1.CloseTag;
        r += ' -->' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.declaration = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<?xml';
        options.state = WriterState$1.InsideTag;
        r += ' version="' + node.version + '"';
        if (node.encoding != null) {
          r += ' encoding="' + node.encoding + '"';
        }
        if (node.standalone != null) {
          r += ' standalone="' + node.standalone + '"';
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '?>';
        r += this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.docType = function(node, options, level) {
        var child, i, len, r, ref;
        level || (level = 0);
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level);
        r += '<!DOCTYPE ' + node.root().name;
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        if (node.children.length > 0) {
          r += ' [';
          r += this.endline(node, options, level);
          options.state = WriterState$1.InsideTag;
          ref = node.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            r += this.writeChildNode(child, options, level + 1);
          }
          options.state = WriterState$1.CloseTag;
          r += ']';
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '>';
        r += this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.element = function(node, options, level) {
        var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;
        level || (level = 0);
        prettySuppressed = false;
        r = '';
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r += this.indent(node, options, level) + '<' + node.name;
        ref = node.attribs;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          att = ref[name];
          r += this.attribute(att, options, level);
        }
        childNodeCount = node.children.length;
        firstChildNode = childNodeCount === 0 ? null : node.children[0];
        if (
          childNodeCount === 0 ||
          node.children.every(function(e) {
            return (e.type === NodeType$1.Text || e.type === NodeType$1.Raw) && e.value === '';
          })
        ) {
          if (options.allowEmpty) {
            r += '>';
            options.state = WriterState$1.CloseTag;
            r += '</' + node.name + '>' + this.endline(node, options, level);
          } else {
            options.state = WriterState$1.CloseTag;
            r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);
          }
        } else if (
          options.pretty &&
          childNodeCount === 1 &&
          (firstChildNode.type === NodeType$1.Text || firstChildNode.type === NodeType$1.Raw) &&
          firstChildNode.value != null
        ) {
          r += '>';
          options.state = WriterState$1.InsideTag;
          options.suppressPrettyCount++;
          prettySuppressed = true;
          r += this.writeChildNode(firstChildNode, options, level + 1);
          options.suppressPrettyCount--;
          prettySuppressed = false;
          options.state = WriterState$1.CloseTag;
          r += '</' + node.name + '>' + this.endline(node, options, level);
        } else {
          if (options.dontPrettyTextNodes) {
            ref1 = node.children;
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              if ((child.type === NodeType$1.Text || child.type === NodeType$1.Raw) && child.value != null) {
                options.suppressPrettyCount++;
                prettySuppressed = true;
                break;
              }
            }
          }
          r += '>' + this.endline(node, options, level);
          options.state = WriterState$1.InsideTag;
          ref2 = node.children;
          for (j = 0, len1 = ref2.length; j < len1; j++) {
            child = ref2[j];
            r += this.writeChildNode(child, options, level + 1);
          }
          options.state = WriterState$1.CloseTag;
          r += this.indent(node, options, level) + '</' + node.name + '>';
          if (prettySuppressed) {
            options.suppressPrettyCount--;
          }
          r += this.endline(node, options, level);
          options.state = WriterState$1.None;
        }
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.writeChildNode = function(node, options, level) {
        switch (node.type) {
          case NodeType$1.CData:
            return this.cdata(node, options, level);
          case NodeType$1.Comment:
            return this.comment(node, options, level);
          case NodeType$1.Element:
            return this.element(node, options, level);
          case NodeType$1.Raw:
            return this.raw(node, options, level);
          case NodeType$1.Text:
            return this.text(node, options, level);
          case NodeType$1.ProcessingInstruction:
            return this.processingInstruction(node, options, level);
          case NodeType$1.Dummy:
            return '';
          case NodeType$1.Declaration:
            return this.declaration(node, options, level);
          case NodeType$1.DocType:
            return this.docType(node, options, level);
          case NodeType$1.AttributeDeclaration:
            return this.dtdAttList(node, options, level);
          case NodeType$1.ElementDeclaration:
            return this.dtdElement(node, options, level);
          case NodeType$1.EntityDeclaration:
            return this.dtdEntity(node, options, level);
          case NodeType$1.NotationDeclaration:
            return this.dtdNotation(node, options, level);
          default:
            throw new Error('Unknown XML node type: ' + node.constructor.name);
        }
      };

      XMLWriterBase.prototype.processingInstruction = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<?';
        options.state = WriterState$1.InsideTag;
        r += node.target;
        if (node.value) {
          r += ' ' + node.value;
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '?>';
        r += this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.raw = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level);
        options.state = WriterState$1.InsideTag;
        r += node.value;
        options.state = WriterState$1.CloseTag;
        r += this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.text = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level);
        options.state = WriterState$1.InsideTag;
        r += node.value;
        options.state = WriterState$1.CloseTag;
        r += this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.dtdAttList = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<!ATTLIST';
        options.state = WriterState$1.InsideTag;
        r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;
        if (node.defaultValueType !== '#DEFAULT') {
          r += ' ' + node.defaultValueType;
        }
        if (node.defaultValue) {
          r += ' "' + node.defaultValue + '"';
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.dtdElement = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<!ELEMENT';
        options.state = WriterState$1.InsideTag;
        r += ' ' + node.name + ' ' + node.value;
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.dtdEntity = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<!ENTITY';
        options.state = WriterState$1.InsideTag;
        if (node.pe) {
          r += ' %';
        }
        r += ' ' + node.name;
        if (node.value) {
          r += ' "' + node.value + '"';
        } else {
          if (node.pubID && node.sysID) {
            r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.nData) {
            r += ' NDATA ' + node.nData;
          }
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.dtdNotation = function(node, options, level) {
        var r;
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        r = this.indent(node, options, level) + '<!NOTATION';
        options.state = WriterState$1.InsideTag;
        r += ' ' + node.name;
        if (node.pubID && node.sysID) {
          r += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
        } else if (node.pubID) {
          r += ' PUBLIC "' + node.pubID + '"';
        } else if (node.sysID) {
          r += ' SYSTEM "' + node.sysID + '"';
        }
        options.state = WriterState$1.CloseTag;
        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);
        options.state = WriterState$1.None;
        this.closeNode(node, options, level);
        return r;
      };

      XMLWriterBase.prototype.openNode = function(node, options, level) {};

      XMLWriterBase.prototype.closeNode = function(node, options, level) {};

      XMLWriterBase.prototype.openAttribute = function(att, options, level) {};

      XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};

      return XMLWriterBase;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLStringWriter = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var XMLWriterBase$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    XMLWriterBase$1 = XMLWriterBase;

    module.exports = (function(superClass) {
      extend(XMLStringWriter, superClass);

      function XMLStringWriter(options) {
        XMLStringWriter.__super__.constructor.call(this, options);
      }

      XMLStringWriter.prototype.document = function(doc, options) {
        var child, i, len, r, ref;
        options = this.filterOptions(options);
        r = '';
        ref = doc.children;
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          r += this.writeChildNode(child, options, 0);
        }
        if (options.pretty && r.slice(-options.newline.length) === options.newline) {
          r = r.slice(0, -options.newline.length);
        }
        return r;
      };

      return XMLStringWriter;
    })(XMLWriterBase$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDocument = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      XMLDOMConfiguration$1,
      XMLDOMImplementation$1,
      XMLNode$1,
      XMLStringWriter$1,
      XMLStringifier$1,
      isPlainObject,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    isPlainObject = Utility.isPlainObject;

    XMLDOMImplementation$1 = XMLDOMImplementation;

    XMLDOMConfiguration$1 = XMLDOMConfiguration;

    XMLNode$1 = XMLNode;

    NodeType$1 = NodeType;

    XMLStringifier$1 = XMLStringifier;

    XMLStringWriter$1 = XMLStringWriter;

    module.exports = (function(superClass) {
      extend(XMLDocument, superClass);

      function XMLDocument(options) {
        XMLDocument.__super__.constructor.call(this, null);
        this.name = '#document';
        this.type = NodeType$1.Document;
        this.documentURI = null;
        this.domConfig = new XMLDOMConfiguration$1();
        options || (options = {});
        if (!options.writer) {
          options.writer = new XMLStringWriter$1();
        }
        this.options = options;
        this.stringify = new XMLStringifier$1(options);
      }

      Object.defineProperty(XMLDocument.prototype, 'implementation', {
        value: new XMLDOMImplementation$1()
      });

      Object.defineProperty(XMLDocument.prototype, 'doctype', {
        get: function() {
          var child, i, len, ref;
          ref = this.children;
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            if (child.type === NodeType$1.DocType) {
              return child;
            }
          }
          return null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'documentElement', {
        get: function() {
          return this.rootObject || null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {
        get: function() {
          return false;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {
        get: function() {
          if (this.children.length !== 0 && this.children[0].type === NodeType$1.Declaration) {
            return this.children[0].encoding;
          } else {
            return null;
          }
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {
        get: function() {
          if (this.children.length !== 0 && this.children[0].type === NodeType$1.Declaration) {
            return this.children[0].standalone === 'yes';
          } else {
            return false;
          }
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {
        get: function() {
          if (this.children.length !== 0 && this.children[0].type === NodeType$1.Declaration) {
            return this.children[0].version;
          } else {
            return '1.0';
          }
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'URL', {
        get: function() {
          return this.documentURI;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'origin', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'compatMode', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'characterSet', {
        get: function() {
          return null;
        }
      });

      Object.defineProperty(XMLDocument.prototype, 'contentType', {
        get: function() {
          return null;
        }
      });

      XMLDocument.prototype.end = function(writer) {
        var writerOptions;
        writerOptions = {};
        if (!writer) {
          writer = this.options.writer;
        } else if (isPlainObject(writer)) {
          writerOptions = writer;
          writer = this.options.writer;
        }
        return writer.document(this, writer.filterOptions(writerOptions));
      };

      XMLDocument.prototype.toString = function(options) {
        return this.options.writer.document(this, this.options.writer.filterOptions(options));
      };

      XMLDocument.prototype.createElement = function(tagName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createDocumentFragment = function() {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createTextNode = function(data) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createComment = function(data) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createCDATASection = function(data) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createProcessingInstruction = function(target, data) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createAttribute = function(name) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createEntityReference = function(name) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.getElementsByTagName = function(tagname) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.importNode = function(importedNode, deep) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.getElementById = function(elementId) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.adoptNode = function(source) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.normalizeDocument = function() {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.getElementsByClassName = function(classNames) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createEvent = function(eventInterface) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createRange = function() {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {
        throw new Error('This DOM method is not implemented.' + this.debugInfo());
      };

      return XMLDocument;
    })(XMLNode$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLDocumentCB = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      WriterState$1,
      XMLAttribute$1,
      XMLCData$1,
      XMLComment$1,
      XMLDTDAttList$1,
      XMLDTDElement$1,
      XMLDTDEntity$1,
      XMLDTDNotation$1,
      XMLDeclaration$1,
      XMLDocType$1,
      XMLDocument$1,
      XMLElement$1,
      XMLProcessingInstruction$1,
      XMLRaw$1,
      XMLStringWriter$1,
      XMLStringifier$1,
      XMLText$1,
      getValue,
      isFunction,
      isObject,
      isPlainObject,
      ref,
      hasProp = {}.hasOwnProperty;

    (ref = Utility),
      (isObject = ref.isObject),
      (isFunction = ref.isFunction),
      (isPlainObject = ref.isPlainObject),
      (getValue = ref.getValue);

    NodeType$1 = NodeType;

    XMLDocument$1 = XMLDocument;

    XMLElement$1 = XMLElement;

    XMLCData$1 = XMLCData;

    XMLComment$1 = XMLComment;

    XMLRaw$1 = XMLRaw;

    XMLText$1 = XMLText;

    XMLProcessingInstruction$1 = XMLProcessingInstruction;

    XMLDeclaration$1 = XMLDeclaration;

    XMLDocType$1 = XMLDocType;

    XMLDTDAttList$1 = XMLDTDAttList;

    XMLDTDEntity$1 = XMLDTDEntity;

    XMLDTDElement$1 = XMLDTDElement;

    XMLDTDNotation$1 = XMLDTDNotation;

    XMLAttribute$1 = XMLAttribute;

    XMLStringifier$1 = XMLStringifier;

    XMLStringWriter$1 = XMLStringWriter;

    WriterState$1 = WriterState;

    module.exports = (function() {
      function XMLDocumentCB(options, onData, onEnd) {
        var writerOptions;
        this.name = '?xml';
        this.type = NodeType$1.Document;
        options || (options = {});
        writerOptions = {};
        if (!options.writer) {
          options.writer = new XMLStringWriter$1();
        } else if (isPlainObject(options.writer)) {
          writerOptions = options.writer;
          options.writer = new XMLStringWriter$1();
        }
        this.options = options;
        this.writer = options.writer;
        this.writerOptions = this.writer.filterOptions(writerOptions);
        this.stringify = new XMLStringifier$1(options);
        this.onDataCallback = onData || function() {};
        this.onEndCallback = onEnd || function() {};
        this.currentNode = null;
        this.currentLevel = -1;
        this.openTags = {};
        this.documentStarted = false;
        this.documentCompleted = false;
        this.root = null;
      }

      XMLDocumentCB.prototype.createChildNode = function(node) {
        var att, attName, attributes, child, i, len, ref1, ref2;
        switch (node.type) {
          case NodeType$1.CData:
            this.cdata(node.value);
            break;
          case NodeType$1.Comment:
            this.comment(node.value);
            break;
          case NodeType$1.Element:
            attributes = {};
            ref1 = node.attribs;
            for (attName in ref1) {
              if (!hasProp.call(ref1, attName)) continue;
              att = ref1[attName];
              attributes[attName] = att.value;
            }
            this.node(node.name, attributes);
            break;
          case NodeType$1.Dummy:
            this.dummy();
            break;
          case NodeType$1.Raw:
            this.raw(node.value);
            break;
          case NodeType$1.Text:
            this.text(node.value);
            break;
          case NodeType$1.ProcessingInstruction:
            this.instruction(node.target, node.value);
            break;
          default:
            throw new Error('This XML node type is not supported in a JS object: ' + node.constructor.name);
        }
        ref2 = node.children;
        for (i = 0, len = ref2.length; i < len; i++) {
          child = ref2[i];
          this.createChildNode(child);
          if (child.type === NodeType$1.Element) {
            this.up();
          }
        }
        return this;
      };

      XMLDocumentCB.prototype.dummy = function() {
        return this;
      };

      XMLDocumentCB.prototype.node = function(name, attributes, text) {
        var ref1;
        if (name == null) {
          throw new Error('Missing node name.');
        }
        if (this.root && this.currentLevel === -1) {
          throw new Error('Document can only have one root node. ' + this.debugInfo(name));
        }
        this.openCurrent();
        name = getValue(name);
        if (attributes == null) {
          attributes = {};
        }
        attributes = getValue(attributes);
        if (!isObject(attributes)) {
          (ref1 = [attributes, text]), (text = ref1[0]), (attributes = ref1[1]);
        }
        this.currentNode = new XMLElement$1(this, name, attributes);
        this.currentNode.children = false;
        this.currentLevel++;
        this.openTags[this.currentLevel] = this.currentNode;
        if (text != null) {
          this.text(text);
        }
        return this;
      };

      XMLDocumentCB.prototype.element = function(name, attributes, text) {
        var child, i, len, oldValidationFlag, ref1, root;
        if (this.currentNode && this.currentNode.type === NodeType$1.DocType) {
          this.dtdElement.apply(this, arguments);
        } else {
          if (Array.isArray(name) || isObject(name) || isFunction(name)) {
            oldValidationFlag = this.options.noValidation;
            this.options.noValidation = true;
            root = new XMLDocument$1(this.options).element('TEMP_ROOT');
            root.element(name);
            this.options.noValidation = oldValidationFlag;
            ref1 = root.children;
            for (i = 0, len = ref1.length; i < len; i++) {
              child = ref1[i];
              this.createChildNode(child);
              if (child.type === NodeType$1.Element) {
                this.up();
              }
            }
          } else {
            this.node(name, attributes, text);
          }
        }
        return this;
      };

      XMLDocumentCB.prototype.attribute = function(name, value) {
        var attName, attValue;
        if (!this.currentNode || this.currentNode.children) {
          throw new Error(
            'att() can only be used immediately after an ele() call in callback mode. ' + this.debugInfo(name)
          );
        }
        if (name != null) {
          name = getValue(name);
        }
        if (isObject(name)) {
          for (attName in name) {
            if (!hasProp.call(name, attName)) continue;
            attValue = name[attName];
            this.attribute(attName, attValue);
          }
        } else {
          if (isFunction(value)) {
            value = value.apply();
          }
          if (this.options.keepNullAttributes && value == null) {
            this.currentNode.attribs[name] = new XMLAttribute$1(this, name, '');
          } else if (value != null) {
            this.currentNode.attribs[name] = new XMLAttribute$1(this, name, value);
          }
        }
        return this;
      };

      XMLDocumentCB.prototype.text = function(value) {
        var node;
        this.openCurrent();
        node = new XMLText$1(this, value);
        this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.cdata = function(value) {
        var node;
        this.openCurrent();
        node = new XMLCData$1(this, value);
        this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.comment = function(value) {
        var node;
        this.openCurrent();
        node = new XMLComment$1(this, value);
        this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.raw = function(value) {
        var node;
        this.openCurrent();
        node = new XMLRaw$1(this, value);
        this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.instruction = function(target, value) {
        var i, insTarget, insValue, len, node;
        this.openCurrent();
        if (target != null) {
          target = getValue(target);
        }
        if (value != null) {
          value = getValue(value);
        }
        if (Array.isArray(target)) {
          for (i = 0, len = target.length; i < len; i++) {
            insTarget = target[i];
            this.instruction(insTarget);
          }
        } else if (isObject(target)) {
          for (insTarget in target) {
            if (!hasProp.call(target, insTarget)) continue;
            insValue = target[insTarget];
            this.instruction(insTarget, insValue);
          }
        } else {
          if (isFunction(value)) {
            value = value.apply();
          }
          node = new XMLProcessingInstruction$1(this, target, value);
          this.onData(
            this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1),
            this.currentLevel + 1
          );
        }
        return this;
      };

      XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {
        var node;
        this.openCurrent();
        if (this.documentStarted) {
          throw new Error('declaration() must be the first node.');
        }
        node = new XMLDeclaration$1(this, version, encoding, standalone);
        this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {
        this.openCurrent();
        if (root == null) {
          throw new Error('Missing root node name.');
        }
        if (this.root) {
          throw new Error('dtd() must come before the root node.');
        }
        this.currentNode = new XMLDocType$1(this, pubID, sysID);
        this.currentNode.rootNodeName = root;
        this.currentNode.children = false;
        this.currentLevel++;
        this.openTags[this.currentLevel] = this.currentNode;
        return this;
      };

      XMLDocumentCB.prototype.dtdElement = function(name, value) {
        var node;
        this.openCurrent();
        node = new XMLDTDElement$1(this, name, value);
        this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.attList = function(
        elementName,
        attributeName,
        attributeType,
        defaultValueType,
        defaultValue
      ) {
        var node;
        this.openCurrent();
        node = new XMLDTDAttList$1(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
        this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.entity = function(name, value) {
        var node;
        this.openCurrent();
        node = new XMLDTDEntity$1(this, false, name, value);
        this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.pEntity = function(name, value) {
        var node;
        this.openCurrent();
        node = new XMLDTDEntity$1(this, true, name, value);
        this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.notation = function(name, value) {
        var node;
        this.openCurrent();
        node = new XMLDTDNotation$1(this, name, value);
        this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
        return this;
      };

      XMLDocumentCB.prototype.up = function() {
        if (this.currentLevel < 0) {
          throw new Error('The document node has no parent.');
        }
        if (this.currentNode) {
          if (this.currentNode.children) {
            this.closeNode(this.currentNode);
          } else {
            this.openNode(this.currentNode);
          }
          this.currentNode = null;
        } else {
          this.closeNode(this.openTags[this.currentLevel]);
        }
        delete this.openTags[this.currentLevel];
        this.currentLevel--;
        return this;
      };

      XMLDocumentCB.prototype.end = function() {
        while (this.currentLevel >= 0) {
          this.up();
        }
        return this.onEnd();
      };

      XMLDocumentCB.prototype.openCurrent = function() {
        if (this.currentNode) {
          this.currentNode.children = true;
          return this.openNode(this.currentNode);
        }
      };

      XMLDocumentCB.prototype.openNode = function(node) {
        var att, chunk, name, ref1;
        if (!node.isOpen) {
          if (!this.root && this.currentLevel === 0 && node.type === NodeType$1.Element) {
            this.root = node;
          }
          chunk = '';
          if (node.type === NodeType$1.Element) {
            this.writerOptions.state = WriterState$1.OpenTag;
            chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;
            ref1 = node.attribs;
            for (name in ref1) {
              if (!hasProp.call(ref1, name)) continue;
              att = ref1[name];
              chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
            }
            chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);
            this.writerOptions.state = WriterState$1.InsideTag;
          } else {
            this.writerOptions.state = WriterState$1.OpenTag;
            chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;
            if (node.pubID && node.sysID) {
              chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              chunk += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.children) {
              chunk += ' [';
              this.writerOptions.state = WriterState$1.InsideTag;
            } else {
              this.writerOptions.state = WriterState$1.CloseTag;
              chunk += '>';
            }
            chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
          }
          this.onData(chunk, this.currentLevel);
          return (node.isOpen = true);
        }
      };

      XMLDocumentCB.prototype.closeNode = function(node) {
        var chunk;
        if (!node.isClosed) {
          chunk = '';
          this.writerOptions.state = WriterState$1.CloseTag;
          if (node.type === NodeType$1.Element) {
            chunk =
              this.writer.indent(node, this.writerOptions, this.currentLevel) +
              '</' +
              node.name +
              '>' +
              this.writer.endline(node, this.writerOptions, this.currentLevel);
          } else {
            chunk =
              this.writer.indent(node, this.writerOptions, this.currentLevel) +
              ']>' +
              this.writer.endline(node, this.writerOptions, this.currentLevel);
          }
          this.writerOptions.state = WriterState$1.None;
          this.onData(chunk, this.currentLevel);
          return (node.isClosed = true);
        }
      };

      XMLDocumentCB.prototype.onData = function(chunk, level) {
        this.documentStarted = true;
        return this.onDataCallback(chunk, level + 1);
      };

      XMLDocumentCB.prototype.onEnd = function() {
        this.documentCompleted = true;
        return this.onEndCallback();
      };

      XMLDocumentCB.prototype.debugInfo = function(name) {
        if (name == null) {
          return '';
        } else {
          return 'node: <' + name + '>';
        }
      };

      XMLDocumentCB.prototype.ele = function() {
        return this.element.apply(this, arguments);
      };

      XMLDocumentCB.prototype.nod = function(name, attributes, text) {
        return this.node(name, attributes, text);
      };

      XMLDocumentCB.prototype.txt = function(value) {
        return this.text(value);
      };

      XMLDocumentCB.prototype.dat = function(value) {
        return this.cdata(value);
      };

      XMLDocumentCB.prototype.com = function(value) {
        return this.comment(value);
      };

      XMLDocumentCB.prototype.ins = function(target, value) {
        return this.instruction(target, value);
      };

      XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {
        return this.declaration(version, encoding, standalone);
      };

      XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {
        return this.doctype(root, pubID, sysID);
      };

      XMLDocumentCB.prototype.e = function(name, attributes, text) {
        return this.element(name, attributes, text);
      };

      XMLDocumentCB.prototype.n = function(name, attributes, text) {
        return this.node(name, attributes, text);
      };

      XMLDocumentCB.prototype.t = function(value) {
        return this.text(value);
      };

      XMLDocumentCB.prototype.d = function(value) {
        return this.cdata(value);
      };

      XMLDocumentCB.prototype.c = function(value) {
        return this.comment(value);
      };

      XMLDocumentCB.prototype.r = function(value) {
        return this.raw(value);
      };

      XMLDocumentCB.prototype.i = function(target, value) {
        return this.instruction(target, value);
      };

      XMLDocumentCB.prototype.att = function() {
        if (this.currentNode && this.currentNode.type === NodeType$1.DocType) {
          return this.attList.apply(this, arguments);
        } else {
          return this.attribute.apply(this, arguments);
        }
      };

      XMLDocumentCB.prototype.a = function() {
        if (this.currentNode && this.currentNode.type === NodeType$1.DocType) {
          return this.attList.apply(this, arguments);
        } else {
          return this.attribute.apply(this, arguments);
        }
      };

      XMLDocumentCB.prototype.ent = function(name, value) {
        return this.entity(name, value);
      };

      XMLDocumentCB.prototype.pent = function(name, value) {
        return this.pEntity(name, value);
      };

      XMLDocumentCB.prototype.not = function(name, value) {
        return this.notation(name, value);
      };

      return XMLDocumentCB;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var XMLStreamWriter = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      WriterState$1,
      XMLWriterBase$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    NodeType$1 = NodeType;

    XMLWriterBase$1 = XMLWriterBase;

    WriterState$1 = WriterState;

    module.exports = (function(superClass) {
      extend(XMLStreamWriter, superClass);

      function XMLStreamWriter(stream, options) {
        this.stream = stream;
        XMLStreamWriter.__super__.constructor.call(this, options);
      }

      XMLStreamWriter.prototype.endline = function(node, options, level) {
        if (node.isLastRootNode && options.state === WriterState$1.CloseTag) {
          return '';
        } else {
          return XMLStreamWriter.__super__.endline.call(this, node, options, level);
        }
      };

      XMLStreamWriter.prototype.document = function(doc, options) {
        var child, i, j, k, len, len1, ref, ref1, results;
        ref = doc.children;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          child = ref[i];
          child.isLastRootNode = i === doc.children.length - 1;
        }
        options = this.filterOptions(options);
        ref1 = doc.children;
        results = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          child = ref1[k];
          results.push(this.writeChildNode(child, options, 0));
        }
        return results;
      };

      XMLStreamWriter.prototype.attribute = function(att, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));
      };

      XMLStreamWriter.prototype.cdata = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.comment = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.declaration = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.docType = function(node, options, level) {
        var child, j, len, ref;
        level || (level = 0);
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        this.stream.write(this.indent(node, options, level));
        this.stream.write('<!DOCTYPE ' + node.root().name);
        if (node.pubID && node.sysID) {
          this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
        } else if (node.sysID) {
          this.stream.write(' SYSTEM "' + node.sysID + '"');
        }
        if (node.children.length > 0) {
          this.stream.write(' [');
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState$1.InsideTag;
          ref = node.children;
          for (j = 0, len = ref.length; j < len; j++) {
            child = ref[j];
            this.writeChildNode(child, options, level + 1);
          }
          options.state = WriterState$1.CloseTag;
          this.stream.write(']');
        }
        options.state = WriterState$1.CloseTag;
        this.stream.write(options.spaceBeforeSlash + '>');
        this.stream.write(this.endline(node, options, level));
        options.state = WriterState$1.None;
        return this.closeNode(node, options, level);
      };

      XMLStreamWriter.prototype.element = function(node, options, level) {
        var att, child, childNodeCount, firstChildNode, j, len, name, ref, ref1;
        level || (level = 0);
        this.openNode(node, options, level);
        options.state = WriterState$1.OpenTag;
        this.stream.write(this.indent(node, options, level) + '<' + node.name);
        ref = node.attribs;
        for (name in ref) {
          if (!hasProp.call(ref, name)) continue;
          att = ref[name];
          this.attribute(att, options, level);
        }
        childNodeCount = node.children.length;
        firstChildNode = childNodeCount === 0 ? null : node.children[0];
        if (
          childNodeCount === 0 ||
          node.children.every(function(e) {
            return (e.type === NodeType$1.Text || e.type === NodeType$1.Raw) && e.value === '';
          })
        ) {
          if (options.allowEmpty) {
            this.stream.write('>');
            options.state = WriterState$1.CloseTag;
            this.stream.write('</' + node.name + '>');
          } else {
            options.state = WriterState$1.CloseTag;
            this.stream.write(options.spaceBeforeSlash + '/>');
          }
        } else if (
          options.pretty &&
          childNodeCount === 1 &&
          (firstChildNode.type === NodeType$1.Text || firstChildNode.type === NodeType$1.Raw) &&
          firstChildNode.value != null
        ) {
          this.stream.write('>');
          options.state = WriterState$1.InsideTag;
          options.suppressPrettyCount++;
          this.writeChildNode(firstChildNode, options, level + 1);
          options.suppressPrettyCount--;
          options.state = WriterState$1.CloseTag;
          this.stream.write('</' + node.name + '>');
        } else {
          this.stream.write('>' + this.endline(node, options, level));
          options.state = WriterState$1.InsideTag;
          ref1 = node.children;
          for (j = 0, len = ref1.length; j < len; j++) {
            child = ref1[j];
            this.writeChildNode(child, options, level + 1);
          }
          options.state = WriterState$1.CloseTag;
          this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');
        }
        this.stream.write(this.endline(node, options, level));
        options.state = WriterState$1.None;
        return this.closeNode(node, options, level);
      };

      XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.raw = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.text = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.dtdElement = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));
      };

      XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {
        return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));
      };

      return XMLStreamWriter;
    })(XMLWriterBase$1);
  }.call(_commonjsHelpers.commonjsGlobal));
});

var lib$6 = _commonjsHelpers.createCommonjsModule(function(module) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var NodeType$1,
      WriterState$1,
      XMLDOMImplementation$1,
      XMLDocument$1,
      XMLDocumentCB$1,
      XMLStreamWriter$1,
      XMLStringWriter$1,
      assign,
      isFunction,
      ref;

    (ref = Utility), (assign = ref.assign), (isFunction = ref.isFunction);

    XMLDOMImplementation$1 = XMLDOMImplementation;

    XMLDocument$1 = XMLDocument;

    XMLDocumentCB$1 = XMLDocumentCB;

    XMLStringWriter$1 = XMLStringWriter;

    XMLStreamWriter$1 = XMLStreamWriter;

    NodeType$1 = NodeType;

    WriterState$1 = WriterState;

    module.exports.create = function(name, xmldec, doctype, options) {
      var doc, root;
      if (name == null) {
        throw new Error('Root element needs a name.');
      }
      options = assign({}, xmldec, doctype, options);
      doc = new XMLDocument$1(options);
      root = doc.element(name);
      if (!options.headless) {
        doc.declaration(options);
        if (options.pubID != null || options.sysID != null) {
          doc.dtd(options);
        }
      }
      return root;
    };

    module.exports.begin = function(options, onData, onEnd) {
      var ref1;
      if (isFunction(options)) {
        (ref1 = [options, onData]), (onData = ref1[0]), (onEnd = ref1[1]);
        options = {};
      }
      if (onData) {
        return new XMLDocumentCB$1(options, onData, onEnd);
      } else {
        return new XMLDocument$1(options);
      }
    };

    module.exports.stringWriter = function(options) {
      return new XMLStringWriter$1(options);
    };

    module.exports.streamWriter = function(stream, options) {
      return new XMLStreamWriter$1(stream, options);
    };

    module.exports.implementation = new XMLDOMImplementation$1();

    module.exports.nodeType = NodeType$1;

    module.exports.writerState = WriterState$1;
  }.call(_commonjsHelpers.commonjsGlobal));
});

var builder = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var builder,
      defaults,
      escapeCDATA,
      requiresCDATA,
      wrapCDATA,
      hasProp = {}.hasOwnProperty;

    builder = lib$6;

    defaults = defaults$2.defaults;

    requiresCDATA = function(entry) {
      return (
        typeof entry === 'string' && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0)
      );
    };

    wrapCDATA = function(entry) {
      return '<![CDATA[' + escapeCDATA(entry) + ']]>';
    };

    escapeCDATA = function(entry) {
      return entry.replace(']]>', ']]]]><![CDATA[>');
    };

    exports.Builder = (function() {
      function Builder(opts) {
        var key, ref, value;
        this.options = {};
        ref = defaults['0.2'];
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          this.options[key] = value;
        }
        for (key in opts) {
          if (!hasProp.call(opts, key)) continue;
          value = opts[key];
          this.options[key] = value;
        }
      }

      Builder.prototype.buildObject = function(rootObj) {
        var attrkey, charkey, render, rootElement, rootName;
        attrkey = this.options.attrkey;
        charkey = this.options.charkey;
        if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults['0.2'].rootName) {
          rootName = Object.keys(rootObj)[0];
          rootObj = rootObj[rootName];
        } else {
          rootName = this.options.rootName;
        }
        render = (function(_this) {
          return function(element, obj) {
            var attr, child, entry, index, key, value;
            if (typeof obj !== 'object') {
              if (_this.options.cdata && requiresCDATA(obj)) {
                element.raw(wrapCDATA(obj));
              } else {
                element.txt(obj);
              }
            } else if (Array.isArray(obj)) {
              for (index in obj) {
                if (!hasProp.call(obj, index)) continue;
                child = obj[index];
                for (key in child) {
                  entry = child[key];
                  element = render(element.ele(key), entry).up();
                }
              }
            } else {
              for (key in obj) {
                if (!hasProp.call(obj, key)) continue;
                child = obj[key];
                if (key === attrkey) {
                  if (typeof child === 'object') {
                    for (attr in child) {
                      value = child[attr];
                      element = element.att(attr, value);
                    }
                  }
                } else if (key === charkey) {
                  if (_this.options.cdata && requiresCDATA(child)) {
                    element = element.raw(wrapCDATA(child));
                  } else {
                    element = element.txt(child);
                  }
                } else if (Array.isArray(child)) {
                  for (index in child) {
                    if (!hasProp.call(child, index)) continue;
                    entry = child[index];
                    if (typeof entry === 'string') {
                      if (_this.options.cdata && requiresCDATA(entry)) {
                        element = element
                          .ele(key)
                          .raw(wrapCDATA(entry))
                          .up();
                      } else {
                        element = element.ele(key, entry).up();
                      }
                    } else {
                      element = render(element.ele(key), entry).up();
                    }
                  }
                } else if (typeof child === 'object') {
                  element = render(element.ele(key), child).up();
                } else {
                  if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                    element = element
                      .ele(key)
                      .raw(wrapCDATA(child))
                      .up();
                  } else {
                    if (child == null) {
                      child = '';
                    }
                    element = element.ele(key, child.toString()).up();
                  }
                }
              }
            }
            return element;
          };
        })(this);
        rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
          headless: this.options.headless,
          allowSurrogateChars: this.options.allowSurrogateChars
        });
        return render(rootElement, rootObj).end(this.options.renderOpts);
      };

      return Builder;
    })();
  }.call(_commonjsHelpers.commonjsGlobal));
});

var sax = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  (function(sax) {
    // wrapper for non-node envs
    sax.parser = function(strict, opt) {
      return new SAXParser(strict, opt);
    };
    sax.SAXParser = SAXParser;
    sax.SAXStream = SAXStream;
    sax.createStream = createStream;

    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
    // since that's the earliest that a buffer overrun could occur.  This way, checks are
    // as rare as required, but as often as necessary to ensure never crossing this bound.
    // Furthermore, buffers are only tested at most once per write(), so passing a very
    // large string into write() might have undesirable effects, but this is manageable by
    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
    // edge case, result in creating at most one complete copy of the string passed in.
    // Set to Infinity to have unlimited buffers.
    sax.MAX_BUFFER_LENGTH = 64 * 1024;

    var buffers = [
      'comment',
      'sgmlDecl',
      'textNode',
      'tagName',
      'doctype',
      'procInstName',
      'procInstBody',
      'entity',
      'attribName',
      'attribValue',
      'cdata',
      'script'
    ];

    sax.EVENTS = [
      'text',
      'processinginstruction',
      'sgmldeclaration',
      'doctype',
      'comment',
      'opentagstart',
      'attribute',
      'opentag',
      'closetag',
      'opencdata',
      'cdata',
      'closecdata',
      'error',
      'end',
      'ready',
      'script',
      'opennamespace',
      'closenamespace'
    ];

    function SAXParser(strict, opt) {
      if (!(this instanceof SAXParser)) {
        return new SAXParser(strict, opt);
      }

      var parser = this;
      clearBuffers(parser);
      parser.q = parser.c = '';
      parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
      parser.opt = opt || {};
      parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
      parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
      parser.tags = [];
      parser.closed = parser.closedRoot = parser.sawRoot = false;
      parser.tag = parser.error = null;
      parser.strict = !!strict;
      parser.noscript = !!(strict || parser.opt.noscript);
      parser.state = S.BEGIN;
      parser.strictEntities = parser.opt.strictEntities;
      parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
      parser.attribList = [];

      // namespaces form a prototype chain.
      // it always points at the current tag,
      // which protos to its parent tag.
      if (parser.opt.xmlns) {
        parser.ns = Object.create(rootNS);
      }

      // mostly just for error reporting
      parser.trackPosition = parser.opt.position !== false;
      if (parser.trackPosition) {
        parser.position = parser.line = parser.column = 0;
      }
      emit(parser, 'onready');
    }

    if (!Object.create) {
      Object.create = function(o) {
        function F() {}
        F.prototype = o;
        var newf = new F();
        return newf;
      };
    }

    if (!Object.keys) {
      Object.keys = function(o) {
        var a = [];
        for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
        return a;
      };
    }

    function checkBufferLength(parser) {
      var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
      var maxActual = 0;
      for (var i = 0, l = buffers.length; i < l; i++) {
        var len = parser[buffers[i]].length;
        if (len > maxAllowed) {
          // Text/cdata nodes can get big, and since they're buffered,
          // we can get here under normal conditions.
          // Avoid issues by emitting the text node now,
          // so at least it won't get any bigger.
          switch (buffers[i]) {
            case 'textNode':
              closeText(parser);
              break;

            case 'cdata':
              emitNode(parser, 'oncdata', parser.cdata);
              parser.cdata = '';
              break;

            case 'script':
              emitNode(parser, 'onscript', parser.script);
              parser.script = '';
              break;

            default:
              error(parser, 'Max buffer length exceeded: ' + buffers[i]);
          }
        }
        maxActual = Math.max(maxActual, len);
      }
      // schedule the next check for the earliest possible buffer overrun.
      var m = sax.MAX_BUFFER_LENGTH - maxActual;
      parser.bufferCheckPosition = m + parser.position;
    }

    function clearBuffers(parser) {
      for (var i = 0, l = buffers.length; i < l; i++) {
        parser[buffers[i]] = '';
      }
    }

    function flushBuffers(parser) {
      closeText(parser);
      if (parser.cdata !== '') {
        emitNode(parser, 'oncdata', parser.cdata);
        parser.cdata = '';
      }
      if (parser.script !== '') {
        emitNode(parser, 'onscript', parser.script);
        parser.script = '';
      }
    }

    SAXParser.prototype = {
      end: function() {
        end(this);
      },
      write: write,
      resume: function() {
        this.error = null;
        return this;
      },
      close: function() {
        return this.write(null);
      },
      flush: function() {
        flushBuffers(this);
      }
    };

    var Stream;
    try {
      Stream = Stream__default['default'].Stream;
    } catch (ex) {
      Stream = function() {};
    }

    var streamWraps = sax.EVENTS.filter(function(ev) {
      return ev !== 'error' && ev !== 'end';
    });

    function createStream(strict, opt) {
      return new SAXStream(strict, opt);
    }

    function SAXStream(strict, opt) {
      if (!(this instanceof SAXStream)) {
        return new SAXStream(strict, opt);
      }

      Stream.apply(this);

      this._parser = new SAXParser(strict, opt);
      this.writable = true;
      this.readable = true;

      var me = this;

      this._parser.onend = function() {
        me.emit('end');
      };

      this._parser.onerror = function(er) {
        me.emit('error', er);

        // if didn't throw, then means error was handled.
        // go ahead and clear error, so we can write again.
        me._parser.error = null;
      };

      this._decoder = null;

      streamWraps.forEach(function(ev) {
        Object.defineProperty(me, 'on' + ev, {
          get: function() {
            return me._parser['on' + ev];
          },
          set: function(h) {
            if (!h) {
              me.removeAllListeners(ev);
              me._parser['on' + ev] = h;
              return h;
            }
            me.on(ev, h);
          },
          enumerable: true,
          configurable: false
        });
      });
    }

    SAXStream.prototype = Object.create(Stream.prototype, {
      constructor: {
        value: SAXStream
      }
    });

    SAXStream.prototype.write = function(data) {
      if (typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(data)) {
        if (!this._decoder) {
          var SD = require$$0__default['default'].StringDecoder;
          this._decoder = new SD('utf8');
        }
        data = this._decoder.write(data);
      }

      this._parser.write(data.toString());
      this.emit('data', data);
      return true;
    };

    SAXStream.prototype.end = function(chunk) {
      if (chunk && chunk.length) {
        this.write(chunk);
      }
      this._parser.end();
      return true;
    };

    SAXStream.prototype.on = function(ev, handler) {
      var me = this;
      if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
        me._parser['on' + ev] = function() {
          var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
          args.splice(0, 0, ev);
          me.emit.apply(me, args);
        };
      }

      return Stream.prototype.on.call(me, ev, handler);
    };

    // this really needs to be replaced with character classes.
    // XML allows all manner of ridiculous numbers and digits.
    var CDATA = '[CDATA[';
    var DOCTYPE = 'DOCTYPE';
    var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
    var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
    var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };

    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
    // This implementation works on strings, a single character at a time
    // as such, it cannot ever support astral-plane characters (10000-EFFFF)
    // without a significant breaking change to either this  parser, or the
    // JavaScript language.  Implementation of an emoji-capable xml parser
    // is left as an exercise for the reader.
    var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

    var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

    var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

    function isWhitespace(c) {
      return c === ' ' || c === '\n' || c === '\r' || c === '\t';
    }

    function isQuote(c) {
      return c === '"' || c === "'";
    }

    function isAttribEnd(c) {
      return c === '>' || isWhitespace(c);
    }

    function isMatch(regex, c) {
      return regex.test(c);
    }

    function notMatch(regex, c) {
      return !isMatch(regex, c);
    }

    var S = 0;
    sax.STATE = {
      BEGIN: S++, // leading byte order mark or whitespace
      BEGIN_WHITESPACE: S++, // leading whitespace
      TEXT: S++, // general stuff
      TEXT_ENTITY: S++, // &amp and such.
      OPEN_WAKA: S++, // <
      SGML_DECL: S++, // <!BLARG
      SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
      DOCTYPE: S++, // <!DOCTYPE
      DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
      DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
      DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
      COMMENT_STARTING: S++, // <!-
      COMMENT: S++, // <!--
      COMMENT_ENDING: S++, // <!-- blah -
      COMMENT_ENDED: S++, // <!-- blah --
      CDATA: S++, // <![CDATA[ something
      CDATA_ENDING: S++, // ]
      CDATA_ENDING_2: S++, // ]]
      PROC_INST: S++, // <?hi
      PROC_INST_BODY: S++, // <?hi there
      PROC_INST_ENDING: S++, // <?hi "there" ?
      OPEN_TAG: S++, // <strong
      OPEN_TAG_SLASH: S++, // <strong /
      ATTRIB: S++, // <a
      ATTRIB_NAME: S++, // <a foo
      ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
      ATTRIB_VALUE: S++, // <a foo=
      ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
      ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
      ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
      ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
      ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
      CLOSE_TAG: S++, // </a
      CLOSE_TAG_SAW_WHITE: S++, // </a   >
      SCRIPT: S++, // <script> ...
      SCRIPT_ENDING: S++ // <script> ... <
    };

    sax.XML_ENTITIES = {
      amp: '&',
      gt: '>',
      lt: '<',
      quot: '"',
      apos: "'"
    };

    sax.ENTITIES = {
      amp: '&',
      gt: '>',
      lt: '<',
      quot: '"',
      apos: "'",
      AElig: 198,
      Aacute: 193,
      Acirc: 194,
      Agrave: 192,
      Aring: 197,
      Atilde: 195,
      Auml: 196,
      Ccedil: 199,
      ETH: 208,
      Eacute: 201,
      Ecirc: 202,
      Egrave: 200,
      Euml: 203,
      Iacute: 205,
      Icirc: 206,
      Igrave: 204,
      Iuml: 207,
      Ntilde: 209,
      Oacute: 211,
      Ocirc: 212,
      Ograve: 210,
      Oslash: 216,
      Otilde: 213,
      Ouml: 214,
      THORN: 222,
      Uacute: 218,
      Ucirc: 219,
      Ugrave: 217,
      Uuml: 220,
      Yacute: 221,
      aacute: 225,
      acirc: 226,
      aelig: 230,
      agrave: 224,
      aring: 229,
      atilde: 227,
      auml: 228,
      ccedil: 231,
      eacute: 233,
      ecirc: 234,
      egrave: 232,
      eth: 240,
      euml: 235,
      iacute: 237,
      icirc: 238,
      igrave: 236,
      iuml: 239,
      ntilde: 241,
      oacute: 243,
      ocirc: 244,
      ograve: 242,
      oslash: 248,
      otilde: 245,
      ouml: 246,
      szlig: 223,
      thorn: 254,
      uacute: 250,
      ucirc: 251,
      ugrave: 249,
      uuml: 252,
      yacute: 253,
      yuml: 255,
      copy: 169,
      reg: 174,
      nbsp: 160,
      iexcl: 161,
      cent: 162,
      pound: 163,
      curren: 164,
      yen: 165,
      brvbar: 166,
      sect: 167,
      uml: 168,
      ordf: 170,
      laquo: 171,
      not: 172,
      shy: 173,
      macr: 175,
      deg: 176,
      plusmn: 177,
      sup1: 185,
      sup2: 178,
      sup3: 179,
      acute: 180,
      micro: 181,
      para: 182,
      middot: 183,
      cedil: 184,
      ordm: 186,
      raquo: 187,
      frac14: 188,
      frac12: 189,
      frac34: 190,
      iquest: 191,
      times: 215,
      divide: 247,
      OElig: 338,
      oelig: 339,
      Scaron: 352,
      scaron: 353,
      Yuml: 376,
      fnof: 402,
      circ: 710,
      tilde: 732,
      Alpha: 913,
      Beta: 914,
      Gamma: 915,
      Delta: 916,
      Epsilon: 917,
      Zeta: 918,
      Eta: 919,
      Theta: 920,
      Iota: 921,
      Kappa: 922,
      Lambda: 923,
      Mu: 924,
      Nu: 925,
      Xi: 926,
      Omicron: 927,
      Pi: 928,
      Rho: 929,
      Sigma: 931,
      Tau: 932,
      Upsilon: 933,
      Phi: 934,
      Chi: 935,
      Psi: 936,
      Omega: 937,
      alpha: 945,
      beta: 946,
      gamma: 947,
      delta: 948,
      epsilon: 949,
      zeta: 950,
      eta: 951,
      theta: 952,
      iota: 953,
      kappa: 954,
      lambda: 955,
      mu: 956,
      nu: 957,
      xi: 958,
      omicron: 959,
      pi: 960,
      rho: 961,
      sigmaf: 962,
      sigma: 963,
      tau: 964,
      upsilon: 965,
      phi: 966,
      chi: 967,
      psi: 968,
      omega: 969,
      thetasym: 977,
      upsih: 978,
      piv: 982,
      ensp: 8194,
      emsp: 8195,
      thinsp: 8201,
      zwnj: 8204,
      zwj: 8205,
      lrm: 8206,
      rlm: 8207,
      ndash: 8211,
      mdash: 8212,
      lsquo: 8216,
      rsquo: 8217,
      sbquo: 8218,
      ldquo: 8220,
      rdquo: 8221,
      bdquo: 8222,
      dagger: 8224,
      Dagger: 8225,
      bull: 8226,
      hellip: 8230,
      permil: 8240,
      prime: 8242,
      Prime: 8243,
      lsaquo: 8249,
      rsaquo: 8250,
      oline: 8254,
      frasl: 8260,
      euro: 8364,
      image: 8465,
      weierp: 8472,
      real: 8476,
      trade: 8482,
      alefsym: 8501,
      larr: 8592,
      uarr: 8593,
      rarr: 8594,
      darr: 8595,
      harr: 8596,
      crarr: 8629,
      lArr: 8656,
      uArr: 8657,
      rArr: 8658,
      dArr: 8659,
      hArr: 8660,
      forall: 8704,
      part: 8706,
      exist: 8707,
      empty: 8709,
      nabla: 8711,
      isin: 8712,
      notin: 8713,
      ni: 8715,
      prod: 8719,
      sum: 8721,
      minus: 8722,
      lowast: 8727,
      radic: 8730,
      prop: 8733,
      infin: 8734,
      ang: 8736,
      and: 8743,
      or: 8744,
      cap: 8745,
      cup: 8746,
      int: 8747,
      there4: 8756,
      sim: 8764,
      cong: 8773,
      asymp: 8776,
      ne: 8800,
      equiv: 8801,
      le: 8804,
      ge: 8805,
      sub: 8834,
      sup: 8835,
      nsub: 8836,
      sube: 8838,
      supe: 8839,
      oplus: 8853,
      otimes: 8855,
      perp: 8869,
      sdot: 8901,
      lceil: 8968,
      rceil: 8969,
      lfloor: 8970,
      rfloor: 8971,
      lang: 9001,
      rang: 9002,
      loz: 9674,
      spades: 9824,
      clubs: 9827,
      hearts: 9829,
      diams: 9830
    };

    Object.keys(sax.ENTITIES).forEach(function(key) {
      var e = sax.ENTITIES[key];
      var s = typeof e === 'number' ? String.fromCharCode(e) : e;
      sax.ENTITIES[key] = s;
    });

    for (var s in sax.STATE) {
      sax.STATE[sax.STATE[s]] = s;
    }

    // shorthand
    S = sax.STATE;

    function emit(parser, event, data) {
      parser[event] && parser[event](data);
    }

    function emitNode(parser, nodeType, data) {
      if (parser.textNode) closeText(parser);
      emit(parser, nodeType, data);
    }

    function closeText(parser) {
      parser.textNode = textopts(parser.opt, parser.textNode);
      if (parser.textNode) emit(parser, 'ontext', parser.textNode);
      parser.textNode = '';
    }

    function textopts(opt, text) {
      if (opt.trim) text = text.trim();
      if (opt.normalize) text = text.replace(/\s+/g, ' ');
      return text;
    }

    function error(parser, er) {
      closeText(parser);
      if (parser.trackPosition) {
        er += '\nLine: ' + parser.line + '\nColumn: ' + parser.column + '\nChar: ' + parser.c;
      }
      er = new Error(er);
      parser.error = er;
      emit(parser, 'onerror', er);
      return parser;
    }

    function end(parser) {
      if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
      if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
        error(parser, 'Unexpected end');
      }
      closeText(parser);
      parser.c = '';
      parser.closed = true;
      emit(parser, 'onend');
      SAXParser.call(parser, parser.strict, parser.opt);
      return parser;
    }

    function strictFail(parser, message) {
      if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
        throw new Error('bad call to strictFail');
      }
      if (parser.strict) {
        error(parser, message);
      }
    }

    function newTag(parser) {
      if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
      var parent = parser.tags[parser.tags.length - 1] || parser;
      var tag = (parser.tag = { name: parser.tagName, attributes: {} });

      // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
      if (parser.opt.xmlns) {
        tag.ns = parent.ns;
      }
      parser.attribList.length = 0;
      emitNode(parser, 'onopentagstart', tag);
    }

    function qname(name, attribute) {
      var i = name.indexOf(':');
      var qualName = i < 0 ? ['', name] : name.split(':');
      var prefix = qualName[0];
      var local = qualName[1];

      // <x "xmlns"="http://foo">
      if (attribute && name === 'xmlns') {
        prefix = 'xmlns';
        local = '';
      }

      return { prefix: prefix, local: local };
    }

    function attrib(parser) {
      if (!parser.strict) {
        parser.attribName = parser.attribName[parser.looseCase]();
      }

      if (
        parser.attribList.indexOf(parser.attribName) !== -1 ||
        parser.tag.attributes.hasOwnProperty(parser.attribName)
      ) {
        parser.attribName = parser.attribValue = '';
        return;
      }

      if (parser.opt.xmlns) {
        var qn = qname(parser.attribName, true);
        var prefix = qn.prefix;
        var local = qn.local;

        if (prefix === 'xmlns') {
          // namespace binding attribute. push the binding into scope
          if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
            strictFail(
              parser,
              'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue
            );
          } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
            strictFail(
              parser,
              'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' + 'Actual: ' + parser.attribValue
            );
          } else {
            var tag = parser.tag;
            var parent = parser.tags[parser.tags.length - 1] || parser;
            if (tag.ns === parent.ns) {
              tag.ns = Object.create(parent.ns);
            }
            tag.ns[local] = parser.attribValue;
          }
        }

        // defer onattribute events until all attributes have been seen
        // so any new bindings can take effect. preserve attribute order
        // so deferred events can be emitted in document order
        parser.attribList.push([parser.attribName, parser.attribValue]);
      } else {
        // in non-xmlns mode, we can emit the event right away
        parser.tag.attributes[parser.attribName] = parser.attribValue;
        emitNode(parser, 'onattribute', {
          name: parser.attribName,
          value: parser.attribValue
        });
      }

      parser.attribName = parser.attribValue = '';
    }

    function openTag(parser, selfClosing) {
      if (parser.opt.xmlns) {
        // emit namespace binding events
        var tag = parser.tag;

        // add namespace info to tag
        var qn = qname(parser.tagName);
        tag.prefix = qn.prefix;
        tag.local = qn.local;
        tag.uri = tag.ns[qn.prefix] || '';

        if (tag.prefix && !tag.uri) {
          strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));
          tag.uri = qn.prefix;
        }

        var parent = parser.tags[parser.tags.length - 1] || parser;
        if (tag.ns && parent.ns !== tag.ns) {
          Object.keys(tag.ns).forEach(function(p) {
            emitNode(parser, 'onopennamespace', {
              prefix: p,
              uri: tag.ns[p]
            });
          });
        }

        // handle deferred onattribute events
        // Note: do not apply default ns to attributes:
        //   http://www.w3.org/TR/REC-xml-names/#defaulting
        for (var i = 0, l = parser.attribList.length; i < l; i++) {
          var nv = parser.attribList[i];
          var name = nv[0];
          var value = nv[1];
          var qualName = qname(name, true);
          var prefix = qualName.prefix;
          var local = qualName.local;
          var uri = prefix === '' ? '' : tag.ns[prefix] || '';
          var a = {
            name: name,
            value: value,
            prefix: prefix,
            local: local,
            uri: uri
          };

          // if there's any attributes with an undefined namespace,
          // then fail on them now.
          if (prefix && prefix !== 'xmlns' && !uri) {
            strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));
            a.uri = prefix;
          }
          parser.tag.attributes[name] = a;
          emitNode(parser, 'onattribute', a);
        }
        parser.attribList.length = 0;
      }

      parser.tag.isSelfClosing = !!selfClosing;

      // process the tag
      parser.sawRoot = true;
      parser.tags.push(parser.tag);
      emitNode(parser, 'onopentag', parser.tag);
      if (!selfClosing) {
        // special case for <script> in non-strict mode.
        if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
          parser.state = S.SCRIPT;
        } else {
          parser.state = S.TEXT;
        }
        parser.tag = null;
        parser.tagName = '';
      }
      parser.attribName = parser.attribValue = '';
      parser.attribList.length = 0;
    }

    function closeTag(parser) {
      if (!parser.tagName) {
        strictFail(parser, 'Weird empty close tag.');
        parser.textNode += '</>';
        parser.state = S.TEXT;
        return;
      }

      if (parser.script) {
        if (parser.tagName !== 'script') {
          parser.script += '</' + parser.tagName + '>';
          parser.tagName = '';
          parser.state = S.SCRIPT;
          return;
        }
        emitNode(parser, 'onscript', parser.script);
        parser.script = '';
      }

      // first make sure that the closing tag actually exists.
      // <a><b></c></b></a> will close everything, otherwise.
      var t = parser.tags.length;
      var tagName = parser.tagName;
      if (!parser.strict) {
        tagName = tagName[parser.looseCase]();
      }
      var closeTo = tagName;
      while (t--) {
        var close = parser.tags[t];
        if (close.name !== closeTo) {
          // fail the first time in strict mode
          strictFail(parser, 'Unexpected close tag');
        } else {
          break;
        }
      }

      // didn't find it.  we already failed for strict, so just abort.
      if (t < 0) {
        strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
        parser.textNode += '</' + parser.tagName + '>';
        parser.state = S.TEXT;
        return;
      }
      parser.tagName = tagName;
      var s = parser.tags.length;
      while (s-- > t) {
        var tag = (parser.tag = parser.tags.pop());
        parser.tagName = parser.tag.name;
        emitNode(parser, 'onclosetag', parser.tagName);

        var x = {};
        for (var i in tag.ns) {
          x[i] = tag.ns[i];
        }

        var parent = parser.tags[parser.tags.length - 1] || parser;
        if (parser.opt.xmlns && tag.ns !== parent.ns) {
          // remove namespace bindings introduced by tag
          Object.keys(tag.ns).forEach(function(p) {
            var n = tag.ns[p];
            emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
          });
        }
      }
      if (t === 0) parser.closedRoot = true;
      parser.tagName = parser.attribValue = parser.attribName = '';
      parser.attribList.length = 0;
      parser.state = S.TEXT;
    }

    function parseEntity(parser) {
      var entity = parser.entity;
      var entityLC = entity.toLowerCase();
      var num;
      var numStr = '';

      if (parser.ENTITIES[entity]) {
        return parser.ENTITIES[entity];
      }
      if (parser.ENTITIES[entityLC]) {
        return parser.ENTITIES[entityLC];
      }
      entity = entityLC;
      if (entity.charAt(0) === '#') {
        if (entity.charAt(1) === 'x') {
          entity = entity.slice(2);
          num = parseInt(entity, 16);
          numStr = num.toString(16);
        } else {
          entity = entity.slice(1);
          num = parseInt(entity, 10);
          numStr = num.toString(10);
        }
      }
      entity = entity.replace(/^0+/, '');
      if (isNaN(num) || numStr.toLowerCase() !== entity) {
        strictFail(parser, 'Invalid character entity');
        return '&' + parser.entity + ';';
      }

      return String.fromCodePoint(num);
    }

    function beginWhiteSpace(parser, c) {
      if (c === '<') {
        parser.state = S.OPEN_WAKA;
        parser.startTagPosition = parser.position;
      } else if (!isWhitespace(c)) {
        // have to process this as a text node.
        // weird, but happens.
        strictFail(parser, 'Non-whitespace before first tag.');
        parser.textNode = c;
        parser.state = S.TEXT;
      }
    }

    function charAt(chunk, i) {
      var result = '';
      if (i < chunk.length) {
        result = chunk.charAt(i);
      }
      return result;
    }

    function write(chunk) {
      var parser = this;
      if (this.error) {
        throw this.error;
      }
      if (parser.closed) {
        return error(parser, 'Cannot write after close. Assign an onready handler.');
      }
      if (chunk === null) {
        return end(parser);
      }
      if (typeof chunk === 'object') {
        chunk = chunk.toString();
      }
      var i = 0;
      var c = '';
      while (true) {
        c = charAt(chunk, i++);
        parser.c = c;

        if (!c) {
          break;
        }

        if (parser.trackPosition) {
          parser.position++;
          if (c === '\n') {
            parser.line++;
            parser.column = 0;
          } else {
            parser.column++;
          }
        }

        switch (parser.state) {
          case S.BEGIN:
            parser.state = S.BEGIN_WHITESPACE;
            if (c === '\uFEFF') {
              continue;
            }
            beginWhiteSpace(parser, c);
            continue;

          case S.BEGIN_WHITESPACE:
            beginWhiteSpace(parser, c);
            continue;

          case S.TEXT:
            if (parser.sawRoot && !parser.closedRoot) {
              var starti = i - 1;
              while (c && c !== '<' && c !== '&') {
                c = charAt(chunk, i++);
                if (c && parser.trackPosition) {
                  parser.position++;
                  if (c === '\n') {
                    parser.line++;
                    parser.column = 0;
                  } else {
                    parser.column++;
                  }
                }
              }
              parser.textNode += chunk.substring(starti, i - 1);
            }
            if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
              parser.state = S.OPEN_WAKA;
              parser.startTagPosition = parser.position;
            } else {
              if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                strictFail(parser, 'Text data outside of root node.');
              }
              if (c === '&') {
                parser.state = S.TEXT_ENTITY;
              } else {
                parser.textNode += c;
              }
            }
            continue;

          case S.SCRIPT:
            // only non-strict
            if (c === '<') {
              parser.state = S.SCRIPT_ENDING;
            } else {
              parser.script += c;
            }
            continue;

          case S.SCRIPT_ENDING:
            if (c === '/') {
              parser.state = S.CLOSE_TAG;
            } else {
              parser.script += '<' + c;
              parser.state = S.SCRIPT;
            }
            continue;

          case S.OPEN_WAKA:
            // either a /, ?, !, or text is coming next.
            if (c === '!') {
              parser.state = S.SGML_DECL;
              parser.sgmlDecl = '';
            } else if (isWhitespace(c));
            else if (isMatch(nameStart, c)) {
              parser.state = S.OPEN_TAG;
              parser.tagName = c;
            } else if (c === '/') {
              parser.state = S.CLOSE_TAG;
              parser.tagName = '';
            } else if (c === '?') {
              parser.state = S.PROC_INST;
              parser.procInstName = parser.procInstBody = '';
            } else {
              strictFail(parser, 'Unencoded <');
              // if there was some whitespace, then add that in.
              if (parser.startTagPosition + 1 < parser.position) {
                var pad = parser.position - parser.startTagPosition;
                c = new Array(pad).join(' ') + c;
              }
              parser.textNode += '<' + c;
              parser.state = S.TEXT;
            }
            continue;

          case S.SGML_DECL:
            if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
              emitNode(parser, 'onopencdata');
              parser.state = S.CDATA;
              parser.sgmlDecl = '';
              parser.cdata = '';
            } else if (parser.sgmlDecl + c === '--') {
              parser.state = S.COMMENT;
              parser.comment = '';
              parser.sgmlDecl = '';
            } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
              parser.state = S.DOCTYPE;
              if (parser.doctype || parser.sawRoot) {
                strictFail(parser, 'Inappropriately located doctype declaration');
              }
              parser.doctype = '';
              parser.sgmlDecl = '';
            } else if (c === '>') {
              emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
              parser.sgmlDecl = '';
              parser.state = S.TEXT;
            } else if (isQuote(c)) {
              parser.state = S.SGML_DECL_QUOTED;
              parser.sgmlDecl += c;
            } else {
              parser.sgmlDecl += c;
            }
            continue;

          case S.SGML_DECL_QUOTED:
            if (c === parser.q) {
              parser.state = S.SGML_DECL;
              parser.q = '';
            }
            parser.sgmlDecl += c;
            continue;

          case S.DOCTYPE:
            if (c === '>') {
              parser.state = S.TEXT;
              emitNode(parser, 'ondoctype', parser.doctype);
              parser.doctype = true; // just remember that we saw it.
            } else {
              parser.doctype += c;
              if (c === '[') {
                parser.state = S.DOCTYPE_DTD;
              } else if (isQuote(c)) {
                parser.state = S.DOCTYPE_QUOTED;
                parser.q = c;
              }
            }
            continue;

          case S.DOCTYPE_QUOTED:
            parser.doctype += c;
            if (c === parser.q) {
              parser.q = '';
              parser.state = S.DOCTYPE;
            }
            continue;

          case S.DOCTYPE_DTD:
            parser.doctype += c;
            if (c === ']') {
              parser.state = S.DOCTYPE;
            } else if (isQuote(c)) {
              parser.state = S.DOCTYPE_DTD_QUOTED;
              parser.q = c;
            }
            continue;

          case S.DOCTYPE_DTD_QUOTED:
            parser.doctype += c;
            if (c === parser.q) {
              parser.state = S.DOCTYPE_DTD;
              parser.q = '';
            }
            continue;

          case S.COMMENT:
            if (c === '-') {
              parser.state = S.COMMENT_ENDING;
            } else {
              parser.comment += c;
            }
            continue;

          case S.COMMENT_ENDING:
            if (c === '-') {
              parser.state = S.COMMENT_ENDED;
              parser.comment = textopts(parser.opt, parser.comment);
              if (parser.comment) {
                emitNode(parser, 'oncomment', parser.comment);
              }
              parser.comment = '';
            } else {
              parser.comment += '-' + c;
              parser.state = S.COMMENT;
            }
            continue;

          case S.COMMENT_ENDED:
            if (c !== '>') {
              strictFail(parser, 'Malformed comment');
              // allow <!-- blah -- bloo --> in non-strict mode,
              // which is a comment of " blah -- bloo "
              parser.comment += '--' + c;
              parser.state = S.COMMENT;
            } else {
              parser.state = S.TEXT;
            }
            continue;

          case S.CDATA:
            if (c === ']') {
              parser.state = S.CDATA_ENDING;
            } else {
              parser.cdata += c;
            }
            continue;

          case S.CDATA_ENDING:
            if (c === ']') {
              parser.state = S.CDATA_ENDING_2;
            } else {
              parser.cdata += ']' + c;
              parser.state = S.CDATA;
            }
            continue;

          case S.CDATA_ENDING_2:
            if (c === '>') {
              if (parser.cdata) {
                emitNode(parser, 'oncdata', parser.cdata);
              }
              emitNode(parser, 'onclosecdata');
              parser.cdata = '';
              parser.state = S.TEXT;
            } else if (c === ']') {
              parser.cdata += ']';
            } else {
              parser.cdata += ']]' + c;
              parser.state = S.CDATA;
            }
            continue;

          case S.PROC_INST:
            if (c === '?') {
              parser.state = S.PROC_INST_ENDING;
            } else if (isWhitespace(c)) {
              parser.state = S.PROC_INST_BODY;
            } else {
              parser.procInstName += c;
            }
            continue;

          case S.PROC_INST_BODY:
            if (!parser.procInstBody && isWhitespace(c)) {
              continue;
            } else if (c === '?') {
              parser.state = S.PROC_INST_ENDING;
            } else {
              parser.procInstBody += c;
            }
            continue;

          case S.PROC_INST_ENDING:
            if (c === '>') {
              emitNode(parser, 'onprocessinginstruction', {
                name: parser.procInstName,
                body: parser.procInstBody
              });
              parser.procInstName = parser.procInstBody = '';
              parser.state = S.TEXT;
            } else {
              parser.procInstBody += '?' + c;
              parser.state = S.PROC_INST_BODY;
            }
            continue;

          case S.OPEN_TAG:
            if (isMatch(nameBody, c)) {
              parser.tagName += c;
            } else {
              newTag(parser);
              if (c === '>') {
                openTag(parser);
              } else if (c === '/') {
                parser.state = S.OPEN_TAG_SLASH;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, 'Invalid character in tag name');
                }
                parser.state = S.ATTRIB;
              }
            }
            continue;

          case S.OPEN_TAG_SLASH:
            if (c === '>') {
              openTag(parser, true);
              closeTag(parser);
            } else {
              strictFail(parser, 'Forward-slash in opening tag not followed by >');
              parser.state = S.ATTRIB;
            }
            continue;

          case S.ATTRIB:
            // haven't read the attribute name yet.
            if (isWhitespace(c)) {
              continue;
            } else if (c === '>') {
              openTag(parser);
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH;
            } else if (isMatch(nameStart, c)) {
              parser.attribName = c;
              parser.attribValue = '';
              parser.state = S.ATTRIB_NAME;
            } else {
              strictFail(parser, 'Invalid attribute name');
            }
            continue;

          case S.ATTRIB_NAME:
            if (c === '=') {
              parser.state = S.ATTRIB_VALUE;
            } else if (c === '>') {
              strictFail(parser, 'Attribute without value');
              parser.attribValue = parser.attribName;
              attrib(parser);
              openTag(parser);
            } else if (isWhitespace(c)) {
              parser.state = S.ATTRIB_NAME_SAW_WHITE;
            } else if (isMatch(nameBody, c)) {
              parser.attribName += c;
            } else {
              strictFail(parser, 'Invalid attribute name');
            }
            continue;

          case S.ATTRIB_NAME_SAW_WHITE:
            if (c === '=') {
              parser.state = S.ATTRIB_VALUE;
            } else if (isWhitespace(c)) {
              continue;
            } else {
              strictFail(parser, 'Attribute without value');
              parser.tag.attributes[parser.attribName] = '';
              parser.attribValue = '';
              emitNode(parser, 'onattribute', {
                name: parser.attribName,
                value: ''
              });
              parser.attribName = '';
              if (c === '>') {
                openTag(parser);
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, 'Invalid attribute name');
                parser.state = S.ATTRIB;
              }
            }
            continue;

          case S.ATTRIB_VALUE:
            if (isWhitespace(c)) {
              continue;
            } else if (isQuote(c)) {
              parser.q = c;
              parser.state = S.ATTRIB_VALUE_QUOTED;
            } else {
              strictFail(parser, 'Unquoted attribute value');
              parser.state = S.ATTRIB_VALUE_UNQUOTED;
              parser.attribValue = c;
            }
            continue;

          case S.ATTRIB_VALUE_QUOTED:
            if (c !== parser.q) {
              if (c === '&') {
                parser.state = S.ATTRIB_VALUE_ENTITY_Q;
              } else {
                parser.attribValue += c;
              }
              continue;
            }
            attrib(parser);
            parser.q = '';
            parser.state = S.ATTRIB_VALUE_CLOSED;
            continue;

          case S.ATTRIB_VALUE_CLOSED:
            if (isWhitespace(c)) {
              parser.state = S.ATTRIB;
            } else if (c === '>') {
              openTag(parser);
            } else if (c === '/') {
              parser.state = S.OPEN_TAG_SLASH;
            } else if (isMatch(nameStart, c)) {
              strictFail(parser, 'No whitespace between attributes');
              parser.attribName = c;
              parser.attribValue = '';
              parser.state = S.ATTRIB_NAME;
            } else {
              strictFail(parser, 'Invalid attribute name');
            }
            continue;

          case S.ATTRIB_VALUE_UNQUOTED:
            if (!isAttribEnd(c)) {
              if (c === '&') {
                parser.state = S.ATTRIB_VALUE_ENTITY_U;
              } else {
                parser.attribValue += c;
              }
              continue;
            }
            attrib(parser);
            if (c === '>') {
              openTag(parser);
            } else {
              parser.state = S.ATTRIB;
            }
            continue;

          case S.CLOSE_TAG:
            if (!parser.tagName) {
              if (isWhitespace(c)) {
                continue;
              } else if (notMatch(nameStart, c)) {
                if (parser.script) {
                  parser.script += '</' + c;
                  parser.state = S.SCRIPT;
                } else {
                  strictFail(parser, 'Invalid tagname in closing tag.');
                }
              } else {
                parser.tagName = c;
              }
            } else if (c === '>') {
              closeTag(parser);
            } else if (isMatch(nameBody, c)) {
              parser.tagName += c;
            } else if (parser.script) {
              parser.script += '</' + parser.tagName;
              parser.tagName = '';
              parser.state = S.SCRIPT;
            } else {
              if (!isWhitespace(c)) {
                strictFail(parser, 'Invalid tagname in closing tag');
              }
              parser.state = S.CLOSE_TAG_SAW_WHITE;
            }
            continue;

          case S.CLOSE_TAG_SAW_WHITE:
            if (isWhitespace(c)) {
              continue;
            }
            if (c === '>') {
              closeTag(parser);
            } else {
              strictFail(parser, 'Invalid characters in closing tag');
            }
            continue;

          case S.TEXT_ENTITY:
          case S.ATTRIB_VALUE_ENTITY_Q:
          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState;
            var buffer;
            switch (parser.state) {
              case S.TEXT_ENTITY:
                returnState = S.TEXT;
                buffer = 'textNode';
                break;

              case S.ATTRIB_VALUE_ENTITY_Q:
                returnState = S.ATTRIB_VALUE_QUOTED;
                buffer = 'attribValue';
                break;

              case S.ATTRIB_VALUE_ENTITY_U:
                returnState = S.ATTRIB_VALUE_UNQUOTED;
                buffer = 'attribValue';
                break;
            }

            if (c === ';') {
              parser[buffer] += parseEntity(parser);
              parser.entity = '';
              parser.state = returnState;
            } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
              parser.entity += c;
            } else {
              strictFail(parser, 'Invalid character in entity name');
              parser[buffer] += '&' + parser.entity + c;
              parser.entity = '';
              parser.state = returnState;
            }

            continue;

          default:
            throw new Error(parser, 'Unknown state: ' + parser.state);
        }
      } // while

      if (parser.position >= parser.bufferCheckPosition) {
        checkBufferLength(parser);
      }
      return parser;
    }

    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
    /* istanbul ignore next */
    if (!String.fromCodePoint) {
      (function() {
        var stringFromCharCode = String.fromCharCode;
        var floor = Math.floor;
        var fromCodePoint = function() {
          var MAX_SIZE = 0x4000;
          var codeUnits = [];
          var highSurrogate;
          var lowSurrogate;
          var index = -1;
          var length = arguments.length;
          if (!length) {
            return '';
          }
          var result = '';
          while (++index < length) {
            var codePoint = Number(arguments[index]);
            if (
              !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
              codePoint < 0 || // not a valid Unicode code point
              codePoint > 0x10ffff || // not a valid Unicode code point
              floor(codePoint) !== codePoint // not an integer
            ) {
              throw RangeError('Invalid code point: ' + codePoint);
            }
            if (codePoint <= 0xffff) {
              // BMP code point
              codeUnits.push(codePoint);
            } else {
              // Astral code point; split in surrogate halves
              // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
              codePoint -= 0x10000;
              highSurrogate = (codePoint >> 10) + 0xd800;
              lowSurrogate = (codePoint % 0x400) + 0xdc00;
              codeUnits.push(highSurrogate, lowSurrogate);
            }
            if (index + 1 === length || codeUnits.length > MAX_SIZE) {
              result += stringFromCharCode.apply(null, codeUnits);
              codeUnits.length = 0;
            }
          }
          return result;
        };
        /* istanbul ignore next */
        if (Object.defineProperty) {
          Object.defineProperty(String, 'fromCodePoint', {
            value: fromCodePoint,
            configurable: true,
            writable: true
          });
        } else {
          String.fromCodePoint = fromCodePoint;
        }
      })();
    }
  })(exports);
});

var bom = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    exports.stripBOM = function(str) {
      if (str[0] === '\uFEFF') {
        return str.substring(1);
      } else {
        return str;
      }
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var processors = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var prefixMatch;

    prefixMatch = new RegExp(/(?!xmlns)^.*:/);

    exports.normalize = function(str) {
      return str.toLowerCase();
    };

    exports.firstCharLowerCase = function(str) {
      return str.charAt(0).toLowerCase() + str.slice(1);
    };

    exports.stripPrefix = function(str) {
      return str.replace(prefixMatch, '');
    };

    exports.parseNumbers = function(str) {
      if (!isNaN(str)) {
        str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
      }
      return str;
    };

    exports.parseBooleans = function(str) {
      if (/^(?:true|false)$/i.test(str)) {
        str = str.toLowerCase() === 'true';
      }
      return str;
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var toStr$1 = Object.prototype.toString;

var isArguments = function isArguments(value) {
  var str = toStr$1.call(value);
  var isArgs = str === '[object Arguments]';
  if (!isArgs) {
    isArgs =
      str !== '[object Array]' &&
      value !== null &&
      typeof value === 'object' &&
      typeof value.length === 'number' &&
      value.length >= 0 &&
      toStr$1.call(value.callee) === '[object Function]';
  }
  return isArgs;
};

var keysShim;
if (!Object.keys) {
  // modified from https://github.com/es-shims/es5-shim
  var has$2 = Object.prototype.hasOwnProperty;
  var toStr$2 = Object.prototype.toString;
  var isArgs = isArguments; // eslint-disable-line global-require
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
  var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
  var dontEnums = [
    'toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'
  ];
  var equalsConstructorPrototype = function(o) {
    var ctor = o.constructor;
    return ctor && ctor.prototype === o;
  };
  var excludedKeys = {
    $applicationCache: true,
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $onmozfullscreenchange: true,
    $onmozfullscreenerror: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true
  };
  var hasAutomationEqualityBug = (function() {
    /* global window */
    if (typeof window === 'undefined') {
      return false;
    }
    for (var k in window) {
      try {
        if (!excludedKeys['$' + k] && has$2.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
          try {
            equalsConstructorPrototype(window[k]);
          } catch (e) {
            return true;
          }
        }
      } catch (e) {
        return true;
      }
    }
    return false;
  })();
  var equalsConstructorPrototypeIfNotBuggy = function(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
      return equalsConstructorPrototype(o);
    }
    try {
      return equalsConstructorPrototype(o);
    } catch (e) {
      return false;
    }
  };

  keysShim = function keys(object) {
    var isObject = object !== null && typeof object === 'object';
    var isFunction = toStr$2.call(object) === '[object Function]';
    var isArguments = isArgs(object);
    var isString = isObject && toStr$2.call(object) === '[object String]';
    var theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
      throw new TypeError('Object.keys called on a non-object');
    }

    var skipProto = hasProtoEnumBug && isFunction;
    if (isString && object.length > 0 && !has$2.call(object, 0)) {
      for (var i = 0; i < object.length; ++i) {
        theKeys.push(String(i));
      }
    }

    if (isArguments && object.length > 0) {
      for (var j = 0; j < object.length; ++j) {
        theKeys.push(String(j));
      }
    } else {
      for (var name in object) {
        if (!(skipProto && name === 'prototype') && has$2.call(object, name)) {
          theKeys.push(String(name));
        }
      }
    }

    if (hasDontEnumBug) {
      var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

      for (var k = 0; k < dontEnums.length; ++k) {
        if (!(skipConstructor && dontEnums[k] === 'constructor') && has$2.call(object, dontEnums[k])) {
          theKeys.push(dontEnums[k]);
        }
      }
    }
    return theKeys;
  };
}
var implementation = keysShim;

var slice = Array.prototype.slice;

var origKeys = Object.keys;
var keysShim$1 = origKeys
  ? function keys(o) {
      return origKeys(o);
    }
  : implementation;

var originalKeys = Object.keys;

keysShim$1.shim = function shimObjectKeys() {
  if (Object.keys) {
    var keysWorksWithArguments = (function() {
      // Safari 5.0 bug
      var args = Object.keys(arguments);
      return args && args.length === arguments.length;
    })(1, 2);
    if (!keysWorksWithArguments) {
      Object.keys = function keys(object) {
        // eslint-disable-line func-name-matching
        if (isArguments(object)) {
          return originalKeys(slice.call(object));
        }
        return originalKeys(object);
      };
    }
  } else {
    Object.keys = keysShim$1;
  }
  return Object.keys || keysShim$1;
};

var objectKeys$1 = keysShim$1;

var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr$3 = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction$2 = function(fn) {
  return typeof fn === 'function' && toStr$3.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function() {
  var obj = {};
  try {
    origDefineProperty(obj, 'x', { enumerable: false, value: obj });
    // eslint-disable-next-line no-unused-vars, no-restricted-syntax
    for (var _ in obj) {
      // jscs:ignore disallowUnusedVariables
      return false;
    }
    return obj.x === obj;
  } catch (e) {
    /* this is IE 8. */
    return false;
  }
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty$1 = function(object, name, value, predicate) {
  if (name in object && (!isFunction$2(predicate) || !predicate())) {
    return;
  }
  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = objectKeys$1(map);
  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }
  for (var i = 0; i < props.length; i += 1) {
    defineProperty$1(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

var defineProperties_1 = defineProperties;

/* eslint complexity: [2, 18], max-statements: [2, 33] */
var shams = function hasSymbols() {
  if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
    return false;
  }
  if (typeof Symbol.iterator === 'symbol') {
    return true;
  }

  var obj = {};
  var sym = Symbol('test');
  var symObj = Object(sym);
  if (typeof sym === 'string') {
    return false;
  }

  if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
    return false;
  }
  if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
    return false;
  }

  // temp disabled per https://github.com/ljharb/object.assign/issues/17
  // if (sym instanceof Symbol) { return false; }
  // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  // if (!(symObj instanceof Symbol)) { return false; }

  // if (typeof Symbol.prototype.toString !== 'function') { return false; }
  // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  var symVal = 42;
  obj[sym] = symVal;
  for (sym in obj) {
    return false;
  } // eslint-disable-line no-restricted-syntax
  if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
    return false;
  }

  if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
    return false;
  }

  var syms = Object.getOwnPropertySymbols(obj);
  if (syms.length !== 1 || syms[0] !== sym) {
    return false;
  }

  if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
    return false;
  }

  if (typeof Object.getOwnPropertyDescriptor === 'function') {
    var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
    if (descriptor.value !== symVal || descriptor.enumerable !== true) {
      return false;
    }
  }

  return true;
};

var origSymbol = _commonjsHelpers.commonjsGlobal.Symbol;

var hasSymbols$1 = function hasNativeSymbols() {
  if (typeof origSymbol !== 'function') {
    return false;
  }
  if (typeof Symbol !== 'function') {
    return false;
  }
  if (typeof origSymbol('foo') !== 'symbol') {
    return false;
  }
  if (typeof Symbol('bar') !== 'symbol') {
    return false;
  }

  return shams();
};

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice$1 = Array.prototype.slice;
var toStr$4 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation$1 = function bind(that) {
  var target = this;
  if (typeof target !== 'function' || toStr$4.call(target) !== funcType) {
    throw new TypeError(ERROR_MESSAGE + target);
  }
  var args = slice$1.call(arguments, 1);

  var bound;
  var binder = function() {
    if (this instanceof bound) {
      var result = target.apply(this, args.concat(slice$1.call(arguments)));
      if (Object(result) === result) {
        return result;
      }
      return this;
    } else {
      return target.apply(that, args.concat(slice$1.call(arguments)));
    }
  };

  var boundLength = Math.max(0, target.length - args.length);
  var boundArgs = [];
  for (var i = 0; i < boundLength; i++) {
    boundArgs.push('$' + i);
  }

  bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(
    binder
  );

  if (target.prototype) {
    var Empty = function Empty() {};
    Empty.prototype = target.prototype;
    bound.prototype = new Empty();
    Empty.prototype = null;
  }

  return bound;
};

var functionBind = Function.prototype.bind || implementation$1;

/* globals
	Atomics,
	SharedArrayBuffer,
*/

var undefined$1;

var $TypeError = TypeError;

var $gOPD = Object.getOwnPropertyDescriptor;

var throwTypeError = function() {
  throw new $TypeError();
};
var ThrowTypeError = $gOPD
  ? (function() {
      try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
          return $gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    })()
  : throwTypeError;

var hasSymbols$2 = hasSymbols$1();

var getProto =
  Object.getPrototypeOf ||
  function(x) {
    return x.__proto__;
  }; // eslint-disable-line no-proto
var generatorFunction = undefined$1;
var asyncFunction = undefined$1;
var asyncGenFunction = undefined$1;

var TypedArray = typeof Uint8Array === 'undefined' ? undefined$1 : getProto(Uint8Array);

var INTRINSICS = {
  '$ %Array%': Array,
  '$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  '$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer.prototype,
  '$ %ArrayIteratorPrototype%': hasSymbols$2 ? getProto([][Symbol.iterator]()) : undefined$1,
  '$ %ArrayPrototype%': Array.prototype,
  '$ %ArrayProto_entries%': Array.prototype.entries,
  '$ %ArrayProto_forEach%': Array.prototype.forEach,
  '$ %ArrayProto_keys%': Array.prototype.keys,
  '$ %ArrayProto_values%': Array.prototype.values,
  '$ %AsyncFromSyncIteratorPrototype%': undefined$1,
  '$ %AsyncFunction%': asyncFunction,
  '$ %AsyncFunctionPrototype%': undefined$1,
  '$ %AsyncGenerator%': undefined$1,
  '$ %AsyncGeneratorFunction%': asyncGenFunction,
  '$ %AsyncGeneratorPrototype%': undefined$1,
  '$ %AsyncIteratorPrototype%': undefined$1,
  '$ %Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  '$ %Boolean%': Boolean,
  '$ %BooleanPrototype%': Boolean.prototype,
  '$ %DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  '$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined$1 : DataView.prototype,
  '$ %Date%': Date,
  '$ %DatePrototype%': Date.prototype,
  '$ %decodeURI%': decodeURI,
  '$ %decodeURIComponent%': decodeURIComponent,
  '$ %encodeURI%': encodeURI,
  '$ %encodeURIComponent%': encodeURIComponent,
  '$ %Error%': Error,
  '$ %ErrorPrototype%': Error.prototype,
  '$ %eval%': eval, // eslint-disable-line no-eval
  '$ %EvalError%': EvalError,
  '$ %EvalErrorPrototype%': EvalError.prototype,
  '$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  '$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array.prototype,
  '$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  '$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array.prototype,
  '$ %Function%': Function,
  '$ %FunctionPrototype%': Function.prototype,
  '$ %Generator%': undefined$1,
  '$ %GeneratorFunction%': generatorFunction,
  '$ %GeneratorPrototype%': undefined$1,
  '$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  '$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array.prototype,
  '$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  '$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined$1 : Int8Array.prototype,
  '$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  '$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array.prototype,
  '$ %isFinite%': isFinite,
  '$ %isNaN%': isNaN,
  '$ %IteratorPrototype%': hasSymbols$2 ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  '$ %JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  '$ %JSONParse%': typeof JSON === 'object' ? JSON.parse : undefined$1,
  '$ %Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  '$ %MapIteratorPrototype%':
    typeof Map === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
  '$ %MapPrototype%': typeof Map === 'undefined' ? undefined$1 : Map.prototype,
  '$ %Math%': Math,
  '$ %Number%': Number,
  '$ %NumberPrototype%': Number.prototype,
  '$ %Object%': Object,
  '$ %ObjectPrototype%': Object.prototype,
  '$ %ObjProto_toString%': Object.prototype.toString,
  '$ %ObjProto_valueOf%': Object.prototype.valueOf,
  '$ %parseFloat%': parseFloat,
  '$ %parseInt%': parseInt,
  '$ %Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  '$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype,
  '$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined$1 : Promise.prototype.then,
  '$ %Promise_all%': typeof Promise === 'undefined' ? undefined$1 : Promise.all,
  '$ %Promise_reject%': typeof Promise === 'undefined' ? undefined$1 : Promise.reject,
  '$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined$1 : Promise.resolve,
  '$ %Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  '$ %RangeError%': RangeError,
  '$ %RangeErrorPrototype%': RangeError.prototype,
  '$ %ReferenceError%': ReferenceError,
  '$ %ReferenceErrorPrototype%': ReferenceError.prototype,
  '$ %Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  '$ %RegExp%': RegExp,
  '$ %RegExpPrototype%': RegExp.prototype,
  '$ %Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  '$ %SetIteratorPrototype%':
    typeof Set === 'undefined' || !hasSymbols$2 ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
  '$ %SetPrototype%': typeof Set === 'undefined' ? undefined$1 : Set.prototype,
  '$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  '$ %SharedArrayBufferPrototype%':
    typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer.prototype,
  '$ %String%': String,
  '$ %StringIteratorPrototype%': hasSymbols$2 ? getProto(''[Symbol.iterator]()) : undefined$1,
  '$ %StringPrototype%': String.prototype,
  '$ %Symbol%': hasSymbols$2 ? Symbol : undefined$1,
  '$ %SymbolPrototype%': hasSymbols$2 ? Symbol.prototype : undefined$1,
  '$ %SyntaxError%': SyntaxError,
  '$ %SyntaxErrorPrototype%': SyntaxError.prototype,
  '$ %ThrowTypeError%': ThrowTypeError,
  '$ %TypedArray%': TypedArray,
  '$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined$1,
  '$ %TypeError%': $TypeError,
  '$ %TypeErrorPrototype%': $TypeError.prototype,
  '$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  '$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array.prototype,
  '$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  '$ %Uint8ClampedArrayPrototype%':
    typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray.prototype,
  '$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  '$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array.prototype,
  '$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  '$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array.prototype,
  '$ %URIError%': URIError,
  '$ %URIErrorPrototype%': URIError.prototype,
  '$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  '$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap.prototype,
  '$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,
  '$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet.prototype
};

var $replace = functionBind.call(Function.call, String.prototype.replace);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName$1 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar$1 = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath$1 = function stringToPath(string) {
  var result = [];
  $replace(string, rePropName$1, function(match, number, quote, subString) {
    result[result.length] = quote ? $replace(subString, reEscapeChar$1, '$1') : number || match;
  });
  return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  var key = '$ ' + name;
  if (!(key in INTRINSICS)) {
    throw new SyntaxError('intrinsic ' + name + ' does not exist!');
  }

  // istanbul ignore if // hopefully this is impossible to test :-)
  if (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {
    throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  }

  return INTRINSICS[key];
};

var GetIntrinsic = function GetIntrinsic(name, allowMissing) {
  if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
    throw new TypeError('"allowMissing" argument must be a boolean');
  }

  var parts = stringToPath$1(name);

  if (parts.length === 0) {
    return getBaseIntrinsic(name, allowMissing);
  }

  var value = getBaseIntrinsic('%' + parts[0] + '%', allowMissing);
  for (var i = 1; i < parts.length; i += 1) {
    if (value != null) {
      if ($gOPD && i + 1 >= parts.length) {
        var desc = $gOPD(value, parts[i]);
        value = desc ? desc.get || desc.value : value[parts[i]];
      } else {
        value = value[parts[i]];
      }
    }
  }
  return value;
};

var $Function = GetIntrinsic('%Function%');
var $apply = $Function.apply;
var $call = $Function.call;

var callBind = function callBind() {
  return functionBind.apply($call, arguments);
};

var apply = function applyBind() {
  return functionBind.apply($apply, arguments);
};
callBind.apply = apply;

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

var callBound = function callBoundIntrinsic(name, allowMissing) {
  var intrinsic = GetIntrinsic(name, !!allowMissing);
  if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
    return callBind(intrinsic);
  }
  return intrinsic;
};

var $defineProperty = GetIntrinsic('%Object.defineProperty%');

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

// eslint-disable-next-line max-params
var DefineOwnProperty = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) {
  if (!$defineProperty) {
    if (!IsDataDescriptor(desc)) {
      // ES3 does not support getters/setters
      return false;
    }
    if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) {
      return false;
    }

    // fallback for ES3
    if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) {
      // a non-enumerable existing property
      return false;
    }

    // property does not exist at all, or exists but is enumerable
    var V = desc['[[Value]]'];
    // eslint-disable-next-line no-param-reassign
    O[P] = V; // will use [[Define]]
    return SameValue(O[P], V);
  }
  $defineProperty(O, P, FromPropertyDescriptor(desc));
  return true;
};

var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

var $TypeError$1 = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var predicates = {
  // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
  'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
    if (Type(Desc) !== 'Object') {
      return false;
    }
    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };

    for (var key in Desc) {
      // eslint-disable-line
      if (src(Desc, key) && !allowed[key]) {
        return false;
      }
    }

    var isData = src(Desc, '[[Value]]');
    var IsAccessor = src(Desc, '[[Get]]') || src(Desc, '[[Set]]');
    if (isData && IsAccessor) {
      throw new $TypeError$1('Property Descriptors may not be both accessor and data descriptors');
    }
    return true;
  }
};

var assertRecord = function assertRecord(Type, recordType, argumentName, value) {
  var predicate = predicates[recordType];
  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }
  if (!predicate(Type, value)) {
    throw new $TypeError$1(argumentName + ' must be a ' + recordType);
  }
};

// https://www.ecma-international.org/ecma-262/5.1/#sec-8

var Type = function Type(x) {
  if (x === null) {
    return 'Null';
  }
  if (typeof x === 'undefined') {
    return 'Undefined';
  }
  if (typeof x === 'function' || typeof x === 'object') {
    return 'Object';
  }
  if (typeof x === 'number') {
    return 'Number';
  }
  if (typeof x === 'boolean') {
    return 'Boolean';
  }
  if (typeof x === 'string') {
    return 'String';
  }
};

// https://www.ecma-international.org/ecma-262/6.0/#sec-tostring

var Type$1 = function Type$1(x) {
  if (typeof x === 'symbol') {
    return 'Symbol';
  }
  return Type(x);
};

// https://www.ecma-international.org/ecma-262/6.0/#sec-frompropertydescriptor

var FromPropertyDescriptor = function FromPropertyDescriptor(Desc) {
  if (typeof Desc === 'undefined') {
    return Desc;
  }

  assertRecord(Type$1, 'Property Descriptor', 'Desc', Desc);

  var obj = {};
  if ('[[Value]]' in Desc) {
    obj.value = Desc['[[Value]]'];
  }
  if ('[[Writable]]' in Desc) {
    obj.writable = Desc['[[Writable]]'];
  }
  if ('[[Get]]' in Desc) {
    obj.get = Desc['[[Get]]'];
  }
  if ('[[Set]]' in Desc) {
    obj.set = Desc['[[Set]]'];
  }
  if ('[[Enumerable]]' in Desc) {
    obj.enumerable = Desc['[[Enumerable]]'];
  }
  if ('[[Configurable]]' in Desc) {
    obj.configurable = Desc['[[Configurable]]'];
  }
  return obj;
};

// https://www.ecma-international.org/ecma-262/6.0/#sec-isdatadescriptor

var IsDataDescriptor = function IsDataDescriptor(Desc) {
  if (typeof Desc === 'undefined') {
    return false;
  }

  assertRecord(Type$1, 'Property Descriptor', 'Desc', Desc);

  if (!src(Desc, '[[Value]]') && !src(Desc, '[[Writable]]')) {
    return false;
  }

  return true;
};

var isPrimitive$1 = function isPrimitive(value) {
  return value === null || (typeof value !== 'function' && typeof value !== 'object');
};

var $Object = GetIntrinsic('%Object%');

var $preventExtensions = $Object.preventExtensions;
var $isExtensible = $Object.isExtensible;

// https://www.ecma-international.org/ecma-262/6.0/#sec-isextensible-o

var IsExtensible = $preventExtensions
  ? function IsExtensible(obj) {
      return !isPrimitive$1(obj) && $isExtensible(obj);
    }
  : function IsExtensible(obj) {
      // eslint-disable-line no-unused-vars
      return true;
    };

// https://www.ecma-international.org/ecma-262/6.0/#sec-ispropertykey

var IsPropertyKey = function IsPropertyKey(argument) {
  return typeof argument === 'string' || typeof argument === 'symbol';
};

var _isNaN =
  Number.isNaN ||
  function isNaN(a) {
    return a !== a;
  };

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.12

var SameValue = function SameValue(x, y) {
  if (x === y) {
    // 0 === -0, but they are not identical.
    if (x === 0) {
      return 1 / x === 1 / y;
    }
    return true;
  }
  return _isNaN(x) && _isNaN(y);
};

var $gOPD$1 = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
var $TypeError$2 = GetIntrinsic('%TypeError%');

// https://www.ecma-international.org/ecma-262/6.0/#sec-createdataproperty

var CreateDataProperty = function CreateDataProperty(O, P, V) {
  if (Type$1(O) !== 'Object') {
    throw new $TypeError$2('Assertion failed: Type(O) is not Object');
  }
  if (!IsPropertyKey(P)) {
    throw new $TypeError$2('Assertion failed: IsPropertyKey(P) is not true');
  }
  var oldDesc = $gOPD$1(O, P);
  var extensible = oldDesc || IsExtensible(O);
  var immutable = oldDesc && (!oldDesc.writable || !oldDesc.configurable);
  if (immutable || !extensible) {
    return false;
  }
  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, {
    '[[Configurable]]': true,
    '[[Enumerable]]': true,
    '[[Value]]': V,
    '[[Writable]]': true
  });
};

var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
  try {
    var fnStr = fnToStr.call(value);
    return constructorRegex.test(fnStr);
  } catch (e) {
    return false; // not a function
  }
};

var tryFunctionObject = function tryFunctionToStr(value) {
  try {
    if (isES6ClassFn(value)) {
      return false;
    }
    fnToStr.call(value);
    return true;
  } catch (e) {
    return false;
  }
};
var toStr$5 = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

var isCallable = function isCallable(value) {
  if (!value) {
    return false;
  }
  if (typeof value !== 'function' && typeof value !== 'object') {
    return false;
  }
  if (typeof value === 'function' && !value.prototype) {
    return true;
  }
  if (hasToStringTag) {
    return tryFunctionObject(value);
  }
  if (isES6ClassFn(value)) {
    return false;
  }
  var strClass = toStr$5.call(value);
  return strClass === fnClass || strClass === genClass;
};

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.11

var IsCallable = isCallable;

var $TypeError$3 = GetIntrinsic('%TypeError%');

// http://www.ecma-international.org/ecma-262/5.1/#sec-9.10

var CheckObjectCoercible = function CheckObjectCoercible(value, optMessage) {
  if (value == null) {
    throw new $TypeError$3(optMessage || 'Cannot call method on ' + value);
  }
  return value;
};

var RequireObjectCoercible = CheckObjectCoercible;

var $Object$1 = GetIntrinsic('%Object%');

// https://www.ecma-international.org/ecma-262/6.0/#sec-toobject

var ToObject = function ToObject(value) {
  RequireObjectCoercible(value);
  return $Object$1(value);
};

var $gOPD$2 = Object.getOwnPropertyDescriptor;
var $getOwnNames = Object.getOwnPropertyNames;
var $getSymbols = Object.getOwnPropertySymbols;
var $concat = callBound('Array.prototype.concat');
var $reduce = callBound('Array.prototype.reduce');
var getAll = $getSymbols
  ? function(obj) {
      return $concat($getOwnNames(obj), $getSymbols(obj));
    }
  : $getOwnNames;

var isES5 = IsCallable($gOPD$2) && IsCallable($getOwnNames);

var implementation$2 = function getOwnPropertyDescriptors(value) {
  RequireObjectCoercible(value);
  if (!isES5) {
    throw new TypeError('getOwnPropertyDescriptors requires Object.getOwnPropertyDescriptor');
  }

  var O = ToObject(value);
  return $reduce(
    getAll(O),
    function(acc, key) {
      var descriptor = $gOPD$2(O, key);
      if (typeof descriptor !== 'undefined') {
        CreateDataProperty(acc, key, descriptor);
      }
      return acc;
    },
    {}
  );
};

var polyfill = function getPolyfill() {
  return typeof Object.getOwnPropertyDescriptors === 'function' ? Object.getOwnPropertyDescriptors : implementation$2;
};

var shim = function shimGetOwnPropertyDescriptors() {
  var polyfill$1 = polyfill();
  defineProperties_1(
    Object,
    { getOwnPropertyDescriptors: polyfill$1 },
    {
      getOwnPropertyDescriptors: function() {
        return Object.getOwnPropertyDescriptors !== polyfill$1;
      }
    }
  );
  return polyfill$1;
};

defineProperties_1(implementation$2, {
  getPolyfill: polyfill,
  implementation: implementation$2,
  shim: shim
});

var object_getownpropertydescriptors = implementation$2;

var isES5$1 =
  typeof Object.defineProperty === 'function' &&
  typeof Object.defineProperties === 'function' &&
  typeof Object.getPrototypeOf === 'function' &&
  typeof Object.setPrototypeOf === 'function';

if (!isES5$1) {
  throw new TypeError('util.promisify requires a true ES5 environment');
}

if (typeof Promise !== 'function') {
  throw new TypeError('`Promise` must be globally available for util.promisify to work.');
}

var slice$2 = Function.call.bind(Array.prototype.slice);
var concat$1 = Function.call.bind(Array.prototype.concat);
var forEach = Function.call.bind(Array.prototype.forEach);

var hasSymbols$3 = typeof Symbol === 'function' && typeof Symbol('') === 'symbol';

var kCustomPromisifiedSymbol = hasSymbols$3 ? Symbol('util.promisify.custom') : null;
var kCustomPromisifyArgsSymbol = hasSymbols$3 ? Symbol('customPromisifyArgs') : null;

var implementation$3 = function promisify(orig) {
  if (typeof orig !== 'function') {
    var error = new TypeError('The "original" argument must be of type function');
    error.name = 'TypeError [ERR_INVALID_ARG_TYPE]';
    error.code = 'ERR_INVALID_ARG_TYPE';
    throw error;
  }

  if (hasSymbols$3 && orig[kCustomPromisifiedSymbol]) {
    var customFunction = orig[kCustomPromisifiedSymbol];
    if (typeof customFunction !== 'function') {
      throw new TypeError('The [util.promisify.custom] property must be a function');
    }
    Object.defineProperty(customFunction, kCustomPromisifiedSymbol, {
      configurable: true,
      enumerable: false,
      value: customFunction,
      writable: false
    });
    return customFunction;
  }

  // Names to create an object from in case the callback receives multiple
  // arguments, e.g. ['stdout', 'stderr'] for child_process.exec.
  var argumentNames = orig[kCustomPromisifyArgsSymbol];

  var promisified = function fn() {
    var args = slice$2(arguments);
    var self = this; // eslint-disable-line no-invalid-this
    return new Promise(function(resolve, reject) {
      orig.apply(
        self,
        concat$1(args, function(err) {
          var values = arguments.length > 1 ? slice$2(arguments, 1) : [];
          if (err) {
            reject(err);
          } else if (typeof argumentNames !== 'undefined' && values.length > 1) {
            var obj = {};
            forEach(argumentNames, function(name, index) {
              obj[name] = values[index];
            });
            resolve(obj);
          } else {
            resolve(values[0]);
          }
        })
      );
    });
  };

  Object.setPrototypeOf(promisified, Object.getPrototypeOf(orig));

  Object.defineProperty(promisified, kCustomPromisifiedSymbol, {
    configurable: true,
    enumerable: false,
    value: promisified,
    writable: false
  });
  return Object.defineProperties(promisified, object_getownpropertydescriptors(orig));
};

var custom$1 = kCustomPromisifiedSymbol;
var customPromisifyArgs = kCustomPromisifyArgsSymbol;
implementation$3.custom = custom$1;
implementation$3.customPromisifyArgs = customPromisifyArgs;

var polyfill$1 = function getPolyfill() {
  if (typeof util__default['default'].promisify === 'function') {
    return util__default['default'].promisify;
  }
  return implementation$3;
};

var shim$1 = function shimUtilPromisify() {
  var polyfill = polyfill$1();
  if (polyfill !== util__default['default'].promisify) {
    util__default['default'].promisify = polyfill;
    Object.defineProperty(util__default['default'], 'promisify', { value: polyfill });
  }
  return polyfill;
};

var polyfill$2 = polyfill$1();

/* eslint-disable no-unused-vars */
var boundPromisify = function promisify(orig) {
  /* eslint-enable no-unused-vars */
  return polyfill$2.apply(util__default['default'], arguments);
};
defineProperties_1(boundPromisify, {
  custom: polyfill$2.custom,
  customPromisifyArgs: polyfill$2.customPromisifyArgs,
  getPolyfill: polyfill$1,
  implementation: implementation$3,
  shim: shim$1
});

var util_promisify = boundPromisify;

var parser$1 = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var bom$1,
      defaults,
      events,
      isEmpty,
      processItem,
      processors$1,
      promisify,
      sax$1,
      setImmediate,
      bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      },
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    sax$1 = sax;

    events = events__default['default'];

    bom$1 = bom;

    processors$1 = processors;

    setImmediate = require$$4__default['default'].setImmediate;

    defaults = defaults$2.defaults;

    promisify = util_promisify;

    isEmpty = function(thing) {
      return typeof thing === 'object' && thing != null && Object.keys(thing).length === 0;
    };

    processItem = function(processors, item, key) {
      var i, len, process;
      for (i = 0, len = processors.length; i < len; i++) {
        process = processors[i];
        item = process(item, key);
      }
      return item;
    };

    exports.Parser = (function(superClass) {
      extend(Parser, superClass);

      function Parser(opts) {
        this.parseStringPromise = bind(this.parseStringPromise, this);
        this.parseString = bind(this.parseString, this);
        this.reset = bind(this.reset, this);
        this.assignOrPush = bind(this.assignOrPush, this);
        this.processAsync = bind(this.processAsync, this);
        var key, ref, value;
        if (!(this instanceof exports.Parser)) {
          return new exports.Parser(opts);
        }
        this.options = {};
        ref = defaults['0.2'];
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          this.options[key] = value;
        }
        for (key in opts) {
          if (!hasProp.call(opts, key)) continue;
          value = opts[key];
          this.options[key] = value;
        }
        if (this.options.xmlns) {
          this.options.xmlnskey = this.options.attrkey + 'ns';
        }
        if (this.options.normalizeTags) {
          if (!this.options.tagNameProcessors) {
            this.options.tagNameProcessors = [];
          }
          this.options.tagNameProcessors.unshift(processors$1.normalize);
        }
        this.reset();
      }

      Parser.prototype.processAsync = function() {
        var chunk, err;
        try {
          if (this.remaining.length <= this.options.chunkSize) {
            chunk = this.remaining;
            this.remaining = '';
            this.saxParser = this.saxParser.write(chunk);
            return this.saxParser.close();
          } else {
            chunk = this.remaining.substr(0, this.options.chunkSize);
            this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
            this.saxParser = this.saxParser.write(chunk);
            return setImmediate(this.processAsync);
          }
        } catch (error1) {
          err = error1;
          if (!this.saxParser.errThrown) {
            this.saxParser.errThrown = true;
            return this.emit(err);
          }
        }
      };

      Parser.prototype.assignOrPush = function(obj, key, newValue) {
        if (!(key in obj)) {
          if (!this.options.explicitArray) {
            return (obj[key] = newValue);
          } else {
            return (obj[key] = [newValue]);
          }
        } else {
          if (!(obj[key] instanceof Array)) {
            obj[key] = [obj[key]];
          }
          return obj[key].push(newValue);
        }
      };

      Parser.prototype.reset = function() {
        var attrkey, charkey, ontext, stack;
        this.removeAllListeners();
        this.saxParser = sax$1.parser(this.options.strict, {
          trim: false,
          normalize: false,
          xmlns: this.options.xmlns
        });
        this.saxParser.errThrown = false;
        this.saxParser.onerror = (function(_this) {
          return function(error) {
            _this.saxParser.resume();
            if (!_this.saxParser.errThrown) {
              _this.saxParser.errThrown = true;
              return _this.emit('error', error);
            }
          };
        })(this);
        this.saxParser.onend = (function(_this) {
          return function() {
            if (!_this.saxParser.ended) {
              _this.saxParser.ended = true;
              return _this.emit('end', _this.resultObject);
            }
          };
        })(this);
        this.saxParser.ended = false;
        this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
        this.resultObject = null;
        stack = [];
        attrkey = this.options.attrkey;
        charkey = this.options.charkey;
        this.saxParser.onopentag = (function(_this) {
          return function(node) {
            var key, newValue, obj, processedKey, ref;
            obj = {};
            obj[charkey] = '';
            if (!_this.options.ignoreAttrs) {
              ref = node.attributes;
              for (key in ref) {
                if (!hasProp.call(ref, key)) continue;
                if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                  obj[attrkey] = {};
                }
                newValue = _this.options.attrValueProcessors
                  ? processItem(_this.options.attrValueProcessors, node.attributes[key], key)
                  : node.attributes[key];
                processedKey = _this.options.attrNameProcessors
                  ? processItem(_this.options.attrNameProcessors, key)
                  : key;
                if (_this.options.mergeAttrs) {
                  _this.assignOrPush(obj, processedKey, newValue);
                } else {
                  obj[attrkey][processedKey] = newValue;
                }
              }
            }
            obj['#name'] = _this.options.tagNameProcessors
              ? processItem(_this.options.tagNameProcessors, node.name)
              : node.name;
            if (_this.options.xmlns) {
              obj[_this.options.xmlnskey] = {
                uri: node.uri,
                local: node.local
              };
            }
            return stack.push(obj);
          };
        })(this);
        this.saxParser.onclosetag = (function(_this) {
          return function() {
            var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;
            obj = stack.pop();
            nodeName = obj['#name'];
            if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
              delete obj['#name'];
            }
            if (obj.cdata === true) {
              cdata = obj.cdata;
              delete obj.cdata;
            }
            s = stack[stack.length - 1];
            if (obj[charkey].match(/^\s*$/) && !cdata) {
              emptyStr = obj[charkey];
              delete obj[charkey];
            } else {
              if (_this.options.trim) {
                obj[charkey] = obj[charkey].trim();
              }
              if (_this.options.normalize) {
                obj[charkey] = obj[charkey].replace(/\s{2,}/g, ' ').trim();
              }
              obj[charkey] = _this.options.valueProcessors
                ? processItem(_this.options.valueProcessors, obj[charkey], nodeName)
                : obj[charkey];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
            if (isEmpty(obj)) {
              obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
            }
            if (_this.options.validator != null) {
              xpath =
                '/' +
                (function() {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = stack.length; i < len; i++) {
                    node = stack[i];
                    results.push(node['#name']);
                  }
                  return results;
                })()
                  .concat(nodeName)
                  .join('/');
              (function() {
                var err;
                try {
                  return (obj = _this.options.validator(xpath, s && s[nodeName], obj));
                } catch (error1) {
                  err = error1;
                  return _this.emit('error', err);
                }
              })();
            }
            if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
              if (!_this.options.preserveChildrenOrder) {
                node = {};
                if (_this.options.attrkey in obj) {
                  node[_this.options.attrkey] = obj[_this.options.attrkey];
                  delete obj[_this.options.attrkey];
                }
                if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                  node[_this.options.charkey] = obj[_this.options.charkey];
                  delete obj[_this.options.charkey];
                }
                if (Object.getOwnPropertyNames(obj).length > 0) {
                  node[_this.options.childkey] = obj;
                }
                obj = node;
              } else if (s) {
                s[_this.options.childkey] = s[_this.options.childkey] || [];
                objClone = {};
                for (key in obj) {
                  if (!hasProp.call(obj, key)) continue;
                  objClone[key] = obj[key];
                }
                s[_this.options.childkey].push(objClone);
                delete obj['#name'];
                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                  obj = obj[charkey];
                }
              }
            }
            if (stack.length > 0) {
              return _this.assignOrPush(s, nodeName, obj);
            } else {
              if (_this.options.explicitRoot) {
                old = obj;
                obj = {};
                obj[nodeName] = old;
              }
              _this.resultObject = obj;
              _this.saxParser.ended = true;
              return _this.emit('end', _this.resultObject);
            }
          };
        })(this);
        ontext = (function(_this) {
          return function(text) {
            var charChild, s;
            s = stack[stack.length - 1];
            if (s) {
              s[charkey] += text;
              if (
                _this.options.explicitChildren &&
                _this.options.preserveChildrenOrder &&
                _this.options.charsAsChildren &&
                (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')
              ) {
                s[_this.options.childkey] = s[_this.options.childkey] || [];
                charChild = {
                  '#name': '__text__'
                };
                charChild[charkey] = text;
                if (_this.options.normalize) {
                  charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, ' ').trim();
                }
                s[_this.options.childkey].push(charChild);
              }
              return s;
            }
          };
        })(this);
        this.saxParser.ontext = ontext;
        return (this.saxParser.oncdata = (function(_this) {
          return function(text) {
            var s;
            s = ontext(text);
            if (s) {
              return (s.cdata = true);
            }
          };
        })());
      };

      Parser.prototype.parseString = function(str, cb) {
        var err;
        if (cb != null && typeof cb === 'function') {
          this.on('end', function(result) {
            this.reset();
            return cb(null, result);
          });
          this.on('error', function(err) {
            this.reset();
            return cb(err);
          });
        }
        try {
          str = str.toString();
          if (str.trim() === '') {
            this.emit('end', null);
            return true;
          }
          str = bom$1.stripBOM(str);
          if (this.options.async) {
            this.remaining = str;
            setImmediate(this.processAsync);
            return this.saxParser;
          }
          return this.saxParser.write(str).close();
        } catch (error1) {
          err = error1;
          if (!(this.saxParser.errThrown || this.saxParser.ended)) {
            this.emit('error', err);
            return (this.saxParser.errThrown = true);
          } else if (this.saxParser.ended) {
            throw err;
          }
        }
      };

      Parser.prototype.parseStringPromise = function(str) {
        return promisify(this.parseString)(str);
      };

      return Parser;
    })(events);

    exports.parseString = function(str, a, b) {
      var cb, options, parser;
      if (b != null) {
        if (typeof b === 'function') {
          cb = b;
        }
        if (typeof a === 'object') {
          options = a;
        }
      } else {
        if (typeof a === 'function') {
          cb = a;
        }
        options = {};
      }
      parser = new exports.Parser(options);
      return parser.parseString(str, cb);
    };

    exports.parseStringPromise = function(str, a) {
      var options, parser;
      if (typeof a === 'object') {
        options = a;
      }
      parser = new exports.Parser(options);
      return parser.parseStringPromise(str);
    };
  }.call(_commonjsHelpers.commonjsGlobal));
});

var xml2js = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  // Generated by CoffeeScript 1.12.7
  (function() {
    var builder$1,
      defaults,
      parser,
      processors$1,
      extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      },
      hasProp = {}.hasOwnProperty;

    defaults = defaults$2;

    builder$1 = builder;

    parser = parser$1;

    processors$1 = processors;

    exports.defaults = defaults.defaults;

    exports.processors = processors$1;

    exports.ValidationError = (function(superClass) {
      extend(ValidationError, superClass);

      function ValidationError(message) {
        this.message = message;
      }

      return ValidationError;
    })(Error);

    exports.Builder = builder$1.Builder;

    exports.Parser = parser.Parser;

    exports.parseString = parser.parseString;

    exports.parseStringPromise = parser.parseStringPromise;
  }.call(_commonjsHelpers.commonjsGlobal));
});

/**
 * HTTP based API class with authorization hook
 *
 * @constructor
 * @extends events.EventEmitter
 * @param {Connection} conn - Connection object
 * @param {Object} [options] - Http API Options
 * @param {String} [options.responseType] - Overriding content mime-type in response
 * @param {Transport} [options.transport] - Transport for http api
 * @param {Object} [options.noContentResponse] - Alternative response when no content returned in response (= HTTP 204)
 */
var HttpApi = function(conn, options) {
  options = options || {};
  this._conn = conn;
  this.on('resume', function(err) {
    conn.emit('resume', err);
  });
  this._responseType = options.responseType;
  this._transport = options.transport || conn._transport;
  this._noContentResponse = options.noContentResponse;
};

inherits(HttpApi, events__default['default'].EventEmitter);

/**
 * Callout to API endpoint using http
 *
 * @param {Object} request - Http Request object
 * @param {String} request.url - Endpoint URL to request
 * @param {String} request.method - Http method for request
 * @param {Object} [request.headers] - Http request headers in hash object
 * @param {Callback.<Object>} callback - Callback function
 * @returns {Promise.<Object>} -
 */
HttpApi.prototype.request = function(request, callback) {
  var self = this;
  var conn = this._conn;
  var logger = conn._logger;
  var refreshDelegate = this.getRefreshDelegate();
  // remember previous instance url in case it changes after a refresh
  var lastInstanceUrl = conn.instanceUrl;

  var deferred = promise.defer();

  var onResume = function(err) {
    if (err) {
      deferred.reject(err);
      return;
    }
    // check to see if the token refresh has changed the instance url
    if (lastInstanceUrl !== conn.instanceUrl) {
      // if the instance url has changed
      // then replace the current request urls instance url fragment
      // with the updated instance url
      request.url = request.url.replace(lastInstanceUrl, conn.instanceUrl);
    }

    self.request(request).then(
      function(response) {
        deferred.resolve(response);
      },
      function(err) {
        deferred.reject(err);
      }
    );
  };

  if (refreshDelegate && refreshDelegate._refreshing) {
    refreshDelegate.once('resume', onResume);
    return deferred.promise.thenCall(callback);
  }

  // hook before sending
  self.beforeSend(request);

  self.emit('request', request);
  logger.debug('<request> method=' + request.method + ', url=' + request.url);
  var requestTime = Date.now();

  return this._transport
    .httpRequest(request)
    .then(
      function(response) {
        var responseTime = Date.now();
        logger.debug('elappsed time : ' + (responseTime - requestTime) + 'msec');
        logger.debug('<response> status=' + response.statusCode + ', url=' + request.url);

        self.emit('response', response);
        // Refresh token if session has been expired and requires authentication
        // when session refresh delegate is available
        if (self.isSessionExpired(response) && refreshDelegate) {
          refreshDelegate.refresh(requestTime, onResume);
          return deferred.promise;
        }
        if (self.isErrorResponse(response)) {
          var err = self.getError(response);
          throw err;
        }
        return self.getResponseBody(response);
      },
      function(err) {
        var responseTime = Date.now();
        logger.debug('elappsed time : ' + (responseTime - requestTime) + 'msec');
        logger.error(err);
        throw err;
      }
    )
    .thenCall(callback);
};

/**
 * @protected
 */
HttpApi.prototype.getRefreshDelegate = function() {
  return this._conn._refreshDelegate;
};

/**
 *
 * @protected
 */
HttpApi.prototype.beforeSend = function(request) {
  request.headers = request.headers || {};
  if (this._conn.accessToken) {
    request.headers.Authorization = 'Bearer ' + this._conn.accessToken;
  }
  if (this._conn.callOptions) {
    var callOptions = [];
    for (var name in this._conn.callOptions) {
      callOptions.push(name + '=' + this._conn.callOptions[name]);
    }
    request.headers['Sforce-Call-Options'] = callOptions.join(', ');
  }
};

/**
 * Detect response content mime-type
 * @protected
 */
HttpApi.prototype.getResponseContentType = function(response) {
  return this._responseType || (response.headers && response.headers['content-type']);
};

/**
 *
 */
HttpApi.prototype.parseResponseBody = function(response) {
  var contentType = this.getResponseContentType(response);
  var parseBody = /^(text|application)\/xml(;|$)/.test(contentType)
    ? parseXML
    : /^application\/json(;|$)/.test(contentType)
    ? parseJSON
    : /^text\/csv(;|$)/.test(contentType)
    ? parseCSV$1
    : parseText;
  try {
    return parseBody(response.body);
  } catch (e) {
    return response.body;
  }
};

/**
 * Get response body
 * @protected
 */
HttpApi.prototype.getResponseBody = function(response) {
  if (response.statusCode === 204) {
    // No Content
    return this._noContentResponse;
  }
  var body = this.parseResponseBody(response);
  var err;
  if (this.hasErrorInResponseBody(body)) {
    err = this.getError(response, body);
    throw err;
  }
  if (response.statusCode === 300) {
    // Multiple Choices
    err = new Error('Multiple records found');
    err.name = 'MULTIPLE_CHOICES';
    err.content = body;
    throw err;
  }
  return body;
};

/** @private */
function parseJSON(str) {
  return JSON.parse(str);
}

/** @private */
function parseXML(str) {
  var ret = {};
  xml2js.parseString(str, { explicitArray: false }, function(err, result) {
    ret = { error: err, result: result };
  });
  if (ret.error) {
    throw ret.error;
  }
  return ret.result;
}

/** @private */
function parseCSV$1(str) {
  return csv.parseCSV(str);
}

/** @private */
function parseText(str) {
  return str;
}

/**
 * Detect session expiry
 * @protected
 */
HttpApi.prototype.isSessionExpired = function(response) {
  return response.statusCode === 401;
};

/**
 * Detect error response
 * @protected
 */
HttpApi.prototype.isErrorResponse = function(response) {
  return response.statusCode >= 400;
};

/**
 * Detect error in response body
 * @protected
 */
HttpApi.prototype.hasErrorInResponseBody = function(body) {
  return false;
};

/**
 * Parsing error message in response
 * @protected
 */
HttpApi.prototype.parseError = function(body) {
  var errors = body;
  return core.isArray(errors) ? errors[0] : errors;
};

/**
 * Get error message in response
 * @protected
 */
HttpApi.prototype.getError = function(response, body) {
  var error;
  try {
    error = this.parseError(body || this.parseResponseBody(response));
  } catch (e) {}
  error =
    core.isObject(error) && core.isString(error.message)
      ? error
      : {
          errorCode: 'ERROR_HTTP_' + response.statusCode,
          message: response.body
        };
  var err = new Error(error.message);
  err.name = error.errorCode;
  for (var key in error) {
    err[key] = error[key];
  }
  return err;
};

/*-------------------------------------------------------------------------*/

/**
 * @protected
 */
var SessionRefreshDelegate = function(conn, refreshFn) {
  this._conn = conn;
  this._refreshFn = refreshFn;
  this._refreshing = false;
};

inherits(SessionRefreshDelegate, events__default['default'].EventEmitter);

/**
 * Refresh access token
 * @private
 */
SessionRefreshDelegate.prototype.refresh = function(since, callback) {
  // Callback immediately When refreshed after designated time
  if (this._lastRefreshedAt > since) {
    return callback();
  }
  var self = this;
  var conn = this._conn;
  var logger = conn._logger;
  self.once('resume', callback);
  if (self._refreshing) {
    return;
  }
  logger.debug('<refresh token>');
  self._refreshing = true;
  return self._refreshFn(conn, function(err, accessToken, res) {
    if (!err) {
      logger.debug('Connection refresh completed.');
      conn.accessToken = accessToken;
      conn.emit('refresh', accessToken, res);
    }
    self._lastRefreshedAt = Date.now();
    self._refreshing = false;
    self.emit('resume', err);
  });
};

/**
 *
 */
HttpApi.SessionRefreshDelegate = SessionRefreshDelegate;
var httpApi = HttpApi;

/**
 * @file Process class to manage/run workflow rule and approval process
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var process$1 = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * A class which manages process rules and approval processes
   *
   * @class
   * @param {Connection} conn - Connection object
   */
  module.exports = function(conn) {
    /**
     * Object which mangages process rules
     * @member {Process~ProcessRule} Process#rule
     */
    this.rule = new ProcessRule(conn);
    /**
     * Object which mangages approval process
     * @member {Process~ApprovalProcess} Process#approval
     */
    this.approval = new ApprovalProcess(conn);
  };

  /**
   * A class which manages process (workflow) rules
   *
   * @class Process~ProcessRule
   * @param {Connection} conn - Connection object
   */
  var ProcessRule = function(conn) {
    this._conn = conn;
  };

  /**
   * @typedef {Object} Process~ProcessRuleDefinition
   * @prop {String} id - Id of approval process definition
   * @prop {String} name - Name of process rule definition
   * @prop {String} object - SObject name which process rule is defined
   */

  /**
   * Get all process rule definitions registered to sobjects
   *
   * @method Process~ProcessRule#list
   * @param {Callback.<Map.<String, Array.<Process~ProcessRuleDefinition>>>} [callback] - Callback function
   * @returns {Promise.<Map.<String, Array.<Process~ProcessRuleDefinition>>>}
   */
  ProcessRule.prototype.list = function(callback) {
    return this._conn
      .request('/process/rules')
      .then(function(res) {
        return res.rules;
      })
      .thenCall(callback);
  };

  /**
   * @typedef {Object} Process~ProcessRuleTriggerResult
   * @prop {Boolean} success - Is process rule trigger succeeded or not
   * @prop {Array.<Object>} errors - Array of errors returned if the request failed
   */

  /**
   * Trigger process rule for given entities
   *
   * @method Process~ProcessRule#trigger
   * @param {String|Array.<String>} contextIds - Entity ID(s) to trigger workflow process
   * @param {Callback.<Process~ProcessRuleTriggerResult>} [callback] - Callback function
   * @returns {Promise.<Process~ProcessRuleTriggerResult>}
   */
  ProcessRule.prototype.trigger = function(contextIds, callback) {
    contextIds = core.isArray(contextIds) ? contextIds : [contextIds];
    return this._conn
      .request({
        method: 'POST',
        url: '/process/rules/',
        body: JSON.stringify({
          contextIds: contextIds
        }),
        headers: {
          'content-type': 'application/json'
        }
      })
      .thenCall(callback);
  };

  /**
   * A class which manages approval processes
   *
   * @class Process~ApprovalProcess
   * @param {Connection} conn - Connection object
   */
  var ApprovalProcess = function(conn) {
    this._conn = conn;
  };

  /**
   * @typedef {Object} Process~ApprovalProcessDefinition
   * @prop {String} id - Id of approval process definition
   * @prop {String} name - Name of approval process definition
   * @prop {String} object - SObject name which approval process is defined
   * @prop {Number} sortOrder - Processing order of approval in SObject
   */
  /**
   * Get all approval process definitions registered to sobjects
   *
   * @method Process~ApprovalProcess#list
   * @param {Callback.<Map.<String, Array.<ApprovalProcessDefinition>>>} [callback] - Callback function
   * @returns {Promise.<Map.<String, Array.<ApprovalProcessDefinition>>>}
   */
  ApprovalProcess.prototype.list = function(callback) {
    return this._conn
      .request('/process/approvals')
      .then(function(res) {
        return res.approvals;
      })
      .thenCall(callback);
  };

  /**
   * @typedef {Object} Process~ApprovalProcessRequestResult
   * @prop {Boolean} success - True if processing or approval completed successfully
   * @prop {Array.<Object>} errors - The set of errors returned if the request failed
   * @prop {Array.<String>} actorIds - IDs of the users who are currently assigned to this approval step
   * @prop {String} entityId - Object being processed
   * @prop {String} instanceId - ID of the ProcessInstance associated with the object submitted for processing
   * @prop {String} instanceStatus - Status of the current process instance (not an individual object but the entire process instance)
   * @prop {Array.<String>} newWorkItemIds - Case-insensitive IDs that point to ProcessInstanceWorkitem items (the set of pending approval requests)
   */

  /**
   * Send bulk requests for approval process
   *
   * @method Process~ApprovalProcess#request
   * @param {Array.<ApprovalProcessRequest>} requests - Array of approval process request to send
   * @param {Callback.<Array.<ApprovalProcessRequestResult>>} - Callback function
   * @param {Promise.<Array.<ApprovalProcessRequestResult>>}
   */
  ApprovalProcess.prototype.request = function(requests, callback) {
    requests = requests.map(function(req) {
      return req._request ? req._request : req;
    });
    return this._conn
      .request({
        method: 'POST',
        url: '/process/approvals',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ requests: requests })
      })
      .thenCall(callback);
  };

  /**
   * Create approval process request
   *
   * @private
   */
  ApprovalProcess.prototype._createRequest = function(actionType, contextId, comments, options, callback) {
    if (typeof comments === 'function') {
      callback = comments;
      options = null;
      comments = null;
    }
    if (typeof options === 'function') {
      callback = options;
      options = null;
    }
    options = options || {};
    var request = {
      actionType: actionType,
      contextId: contextId,
      comments: comments
    };
    core.extend(request, options);
    return new ApprovalProcessRequest(this, request).thenCall(callback);
  };

  /**
   * Submit approval request for an item
   *
   * @method Process~ApprovalProcess#submit
   * @param {String} contextId - ID of the item that is being acted upon
   * @param {String} [comments] - Comment to add to the history step associated with this request
   * @param {Object} [options] - Request parameters
   * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
   * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
   * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
   * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
   * @returns {ApprovalProcessRequest}
   */
  ApprovalProcess.prototype.submit = function(contextId, comments, options, callback) {
    return this._createRequest('Submit', contextId, comments, options, callback);
  };

  /**
   * Approve approval request for an item
   *
   * @method Process~ApprovalProcess#approve
   * @param {String} workitemId - ID of the item that is being acted upon
   * @param {String} [comments] - Comment to add to the history step associated with this request
   * @param {Object} [options] - Request parameters
   * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
   * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
   * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
   * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
   * @returns {ApprovalProcessRequest}
   */
  ApprovalProcess.prototype.approve = function(workitemId, comments, options, callback) {
    return this._createRequest('Approve', workitemId, comments, options, callback);
  };

  /**
   * Reject approval request for an item
   *
   * @method Process~ApprovalProcess#reject
   * @param {String} workitemId - ID of the item that is being acted upon
   * @param {String} [comments] - Comment to add to the history step associated with this request
   * @param {Object} [options] - Request parameters
   * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
   * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
   * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
   * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
   * @returns {ApprovalProcessRequest}
   */
  ApprovalProcess.prototype.reject = function(workitemId, comments, options, callback) {
    return this._createRequest('Reject', workitemId, comments, options, callback);
  };

  /**
   * A class representing approval process request
   *
   * @protected
   * @class Process~ApprovalProcessRequest
   * @implements {Promise.<Process~ApprovalProcessRequestResult>}
   * @param {Process~ApprovalProcess} process - ApprovalProcess
   * @param {Object} request - Request parameters
   * @param {String} request.actionType - Represents the kind of action to take: Submit, Approve, or Reject
   * @param {String} request.contextId - ID of the item that is being acted upon
   * @param {String} request.comments - Comment to add to the history step associated with this request
   * @param {Array.<String>} [request.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
   * @param {String} [request.processDefinitionNameOrId] - Developer name or ID of the process definition
   * @param {Boolean} [request.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
   */
  var ApprovalProcessRequest = function(process, request) {
    this._process = process;
    this._request = request;
  };

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * @method Process~ApprovalProcessRequest#then
   */
  ApprovalProcessRequest.prototype.then = function(onResolve, onReject) {
    if (!this._promise) {
      this._promise = this._process.request([this]).then(function(rets) {
        return rets[0];
      });
    }
    this._promise.then(onResolve, onReject);
  };

  /**
   * Promise/A+ extension
   * Call "then" using given node-style callback function
   *
   * @method Process~ApprovalProcessRequest#thenCall
   */
  ApprovalProcessRequest.prototype.thenCall = function(callback) {
    return callback
      ? this.then(
          function(res) {
            callback(null, res);
          },
          function(err) {
            callback(err);
          }
        )
      : this;
  };
});

/*global Buffer */

var connection = _commonjsHelpers.createCommonjsModule(function(module) {
  var defaults = {
    loginUrl: 'https://login.salesforce.com',
    instanceUrl: '',
    version: '42.0'
  };

  /*
   * Constant of maximum records num in DML operation (update/delete)
   */
  var MAX_DML_COUNT = 200;

  /**
   * Connection class to keep the API session information and manage requests
   *
   * @constructor
   * @extends events.EventEmitter
   * @param {Object} [options] - Connection options
   * @param {OAuth2|Object} [options.oauth2] - OAuth2 instance or options to be passed to OAuth2 constructor
   * @param {String} [options.logLevel] - Output logging level (DEBUG|INFO|WARN|ERROR|FATAL)
   * @param {String} [options.version] - Salesforce API Version (without "v" prefix)
   * @param {Number} [options.maxRequest] - Max number of requests allowed in parallel call
   * @param {String} [options.loginUrl] - Salesforce Login Server URL (e.g. https://login.salesforce.com/)
   * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)
   * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)
   * @param {String} [options.accessToken] - Salesforce OAuth2 access token
   * @param {String} [options.sessionId] - Salesforce session ID
   * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token
   * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)
   * @param {String} [options.proxyUrl] - Cross-domain proxy server URL, used in browser client, non Visualforce app.
   * @param {String} [options.httpProxy] - URL of HTTP proxy server, used in server client.
   * @param {Object} [options.callOptions] - Call options used in each SOAP/REST API request. See manual.
   */
  var Connection = (module.exports = function(options) {
    options = options || {};

    this._logger = new logger(options.logLevel);

    var oauth2$1 = options.oauth2 || {
      loginUrl: options.loginUrl,
      clientId: options.clientId,
      clientSecret: options.clientSecret,
      redirectUri: options.redirectUri,
      proxyUrl: options.proxyUrl,
      httpProxy: options.httpProxy
    };

    /**
     * OAuth2 object
     * @member {OAuth2} Connection#oauth2
     */
    this.oauth2 = oauth2$1 = oauth2$1 instanceof oauth2 ? oauth2$1 : new oauth2(oauth2$1);

    this.loginUrl = options.loginUrl || oauth2$1.loginUrl || defaults.loginUrl;
    this.version = options.version || defaults.version;
    this.maxRequest = options.maxRequest || this.maxRequest || 10;

    /** @private */
    if (options.proxyUrl) {
      this._transport = new transport.ProxyTransport(options.proxyUrl);
    } else if (options.httpProxy) {
      this._transport = new transport.HttpProxyTransport(options.httpProxy);
    } else {
      this._transport = new transport();
    }

    this.callOptions = options.callOptions;

    /*
     * Fire connection:new event to notify jsforce plugin modules
     */
    var jsforce = core$2;
    jsforce.emit('connection:new', this);

    /**
     * Streaming API object
     * @member {Streaming} Connection#streaming
     */
    // this.streaming = new Streaming(this);
    /**
     * Bulk API object
     * @member {Bulk} Connection#bulk
     */
    // this.bulk = new Bulk(this);
    /**
     * Tooling API object
     * @member {Tooling} Connection#tooling
     */
    // this.tooling = new Tooling(this);
    /**
     * Analytics API object
     * @member {Analytics} Connection#analytics
     */
    // this.analytics = new Analytics(this);
    /**
     * Chatter API object
     * @member {Chatter} Connection#chatter
     */
    // this.chatter = new Chatter(this);
    /**
     * Metadata API object
     * @member {Metadata} Connection#metadata
     */
    // this.metadata = new Metadata(this);

    /**
     * SOAP API object
     * @member {SoapApi} Connection#soap
     */
    // this.soap = new SoapApi(this);

    /**
     * Apex REST API object
     * @member {Apex} Connection#apex
     */
    // this.apex = new Apex(this);

    /**
     * @member {Process} Connection#process
     */
    this.process = new process$1(this);

    /**
     * Cache object for result
     * @member {Cache} Connection#cache
     */
    this.cache = new cache$2();
    var refreshFn = options.refreshFn;
    if (!refreshFn && this.oauth2.clientId) {
      refreshFn = oauthRefreshFn;
    }
    if (refreshFn) {
      this._refreshDelegate = new httpApi.SessionRefreshDelegate(this, refreshFn);
    }

    var cacheOptions = {
      key: function(type) {
        return type ? 'describe.' + type : 'describe';
      }
    };
    this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);
    this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);
    this.describeSObject$ = this.describe$;
    this.describeSObject = this.describe;

    cacheOptions = { key: 'describeGlobal' };
    this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);
    this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);

    this.initialize(options);
  });

  inherits(Connection, events__default['default'].EventEmitter);

  /**
   * Initialize connection.
   *
   * @protected
   * @param {Object} options - Initialization options
   * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)
   * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)
   * @param {String} [options.accessToken] - Salesforce OAuth2 access token
   * @param {String} [options.sessionId] - Salesforce session ID
   * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token
   * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)
   * @param {UserInfo} [options.userInfo] - Logged in user information
   */
  Connection.prototype.initialize = function(options) {
    if (!options.instanceUrl && options.serverUrl) {
      options.instanceUrl = options.serverUrl
        .split('/')
        .slice(0, 3)
        .join('/');
    }
    this.instanceUrl = options.instanceUrl || options.serverUrl || this.instanceUrl || defaults.instanceUrl;

    this.accessToken = options.sessionId || options.accessToken || this.accessToken;
    this.refreshToken = options.refreshToken || this.refreshToken;
    if (this.refreshToken && !this._refreshDelegate) {
      throw new Error('Refresh token is specified without oauth2 client information or refresh function');
    }

    this.signedRequest = options.signedRequest && parseSignedRequest(options.signedRequest);
    if (this.signedRequest) {
      this.accessToken = this.signedRequest.client.oauthToken;
      if (transport.CanvasTransport.supported) {
        this._transport = new transport.CanvasTransport(this.signedRequest);
      }
    }

    if (options.userInfo) {
      this.userInfo = options.userInfo;
    }

    this.limitInfo = {};

    this.sobjects = {};
    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on(
      'value',
      core.bind(function(res) {
        if (res.result) {
          var types = core.map(res.result.sobjects, function(so) {
            return so.name;
          });
          types.forEach(this.sobject, this);
        }
      }, this)
    );

    if (this.tooling) {
      this.tooling.initialize();
    }

    this._sessionType = options.sessionId ? 'soap' : 'oauth2';
  };

  /** @private **/
  function oauthRefreshFn(conn, callback) {
    conn.oauth2.refreshToken(conn.refreshToken, function(err, res) {
      if (err) {
        return callback(err);
      }
      var userInfo = parseIdUrl(res.id);
      conn.initialize({
        instanceUrl: res.instance_url,
        accessToken: res.access_token,
        userInfo: userInfo
      });
      callback(null, res.access_token, res);
    });
  }

  /** @private **/
  function parseSignedRequest(sr) {
    if (core.isString(sr)) {
      if (sr[0] === '{') {
        // might be JSON
        return JSON.parse(sr);
      } else {
        // might be original base64-encoded signed request
        var msg = sr.split('.').pop(); // retrieve latter part
        var json = Buffer.from(msg, 'base64').toString('utf-8');
        return JSON.parse(json);
      }
    }
    return sr;
  }

  /** @private **/
  Connection.prototype._baseUrl = function() {
    return [this.instanceUrl, 'services/data', 'v' + this.version].join('/');
  };

  /**
   * Convert path to absolute url
   * @private
   */
  Connection.prototype._normalizeUrl = function(url) {
    if (url[0] === '/') {
      if (url.indexOf('/services/') === 0) {
        return this.instanceUrl + url;
      } else {
        return this._baseUrl() + url;
      }
    } else {
      return url;
    }
  };

  /**
   * Send REST API request with given HTTP request info, with connected session information.
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String|Object} request - HTTP request object or URL to GET request
   * @param {String} request.method - HTTP method URL to send HTTP request
   * @param {String} request.url - URL to send HTTP request
   * @param {Object} [request.headers] - HTTP request headers in hash object (key-value)
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.request = function(request, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = null;
    }
    options = options || {};
    var self = this;

    // if request is simple string, regard it as url in GET method
    if (core.isString(request)) {
      request = { method: 'GET', url: request };
    }
    // if url is given in relative path, prepend base url or instance url before.
    request.url = this._normalizeUrl(request.url);

    var httpApi$1 = new httpApi(this, options);

    // log api usage and its quota
    httpApi$1.on('response', function(response) {
      if (response.headers && response.headers['sforce-limit-info']) {
        var apiUsage = response.headers['sforce-limit-info'].match(/api\-usage=(\d+)\/(\d+)/);
        if (apiUsage) {
          self.limitInfo = {
            apiUsage: {
              used: parseInt(apiUsage[1], 10),
              limit: parseInt(apiUsage[2], 10)
            }
          };
        }
      }
    });
    return httpApi$1.request(request).thenCall(callback);
  };

  /**
   * Send HTTP GET request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String} url - Endpoint URL to request HTTP GET
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.requestGet = function(url, options, callback) {
    var request = {
      method: 'GET',
      url: url
    };
    return this.request(request, options, callback);
  };

  /**
   * Send HTTP POST request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String} url - Endpoint URL to request HTTP POST
   * @param {Object} body - Any JS object which can be serialized to JSON
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.requestPost = function(url, body, options, callback) {
    var request = {
      method: 'POST',
      url: url,
      body: JSON.stringify(body),
      headers: { 'content-type': 'application/json' }
    };
    return this.request(request, options, callback);
  };

  /**
   * Send HTTP PUT request with JSON body, with connected session information
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String} url - Endpoint URL to request HTTP PUT
   * @param {Object} body - Any JS object which can be serialized to JSON
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.requestPut = function(url, body, options, callback) {
    var request = {
      method: 'PUT',
      url: url,
      body: JSON.stringify(body),
      headers: { 'content-type': 'application/json' }
    };
    return this.request(request, options, callback);
  };

  /**
   * Send HTTP PATCH request with JSON body
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String} url - Endpoint URL to request HTTP PATCH
   * @param {Object} body - Any JS object which can be serialized to JSON
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.requestPatch = function(url, body, options, callback) {
    var request = {
      method: 'PATCH',
      url: url,
      body: JSON.stringify(body),
      headers: { 'content-type': 'application/json' }
    };
    return this.request(request, options, callback);
  };

  /**
   * Send HTTP DELETE request
   *
   * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
   * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
   * , or relative path from version root ('/sobjects/Account/describe').
   *
   * @param {String} url - Endpoint URL to request HTTP DELETE
   * @param {Object} [options] - HTTP API request options
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  Connection.prototype.requestDelete = function(url, options, callback) {
    var request = {
      method: 'DELETE',
      url: url
    };
    return this.request(request, options, callback);
  };

  /** @private */
  function formatDate(date) {
    function pad(number) {
      if (number < 10) {
        return '0' + number;
      }
      return number;
    }

    return (
      date.getUTCFullYear() +
      '-' +
      pad(date.getUTCMonth() + 1) +
      '-' +
      pad(date.getUTCDate()) +
      'T' +
      pad(date.getUTCHours()) +
      ':' +
      pad(date.getUTCMinutes()) +
      ':' +
      pad(date.getUTCSeconds()) +
      '+00:00'
    );
  }

  /** @private **/
  function parseIdUrl(idUrl) {
    var idUrls = idUrl.split('/');
    var userId = idUrls.pop(),
      orgId = idUrls.pop();
    return {
      id: userId,
      organizationId: orgId,
      url: idUrl
    };
  }

  /**
   * @callback Callback
   * @type {Function}
   * @param {Error} err - Callback error
   * @param {T} response - Callback response
   * @template T
   */

  /**
   * @typedef {Object} QueryResult
   * @prop {Boolean} done - Flag if the query is fetched all records or not
   * @prop {String} [nextRecordsUrl] - URL locator for next record set, (available when done = false)
   * @prop {Number} totalSize - Total size for query
   * @prop {Array.<Record>} [records] - Array of records fetched
   */

  /**
   * Execute query by using SOQL
   *
   * @param {String} soql - SOQL string
   * @param {Object} [options] - Query options
   * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
   * @param {Callback.<QueryResult>} [callback] - Callback function
   * @returns {Query.<QueryResult>}
   */
  Connection.prototype.query = function(soql, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    var query = new query$1(this, soql, options);
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /**
   * Execute query by using SOQL, including deleted records
   *
   * @param {String} soql - SOQL string
   * @param {Object} [options] - Query options
   * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
   * @param {Callback.<QueryResult>} [callback] - Callback function
   * @returns {Query.<QueryResult>}
   */
  Connection.prototype.queryAll = function(soql, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    var query = new query$1(this, soql, options);
    query.scanAll(true);
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /**
   * Query next record set by using query locator
   *
   * @param {String} locator - Next record set locator
   * @param {Object} [options] - Query options
   * @param {Object} [options.headers] - Additional HTTP request headers sent in query request
   * @param {Callback.<QueryResult>} [callback] - Callback function
   * @returns {Query.<QueryResult>}
   */
  Connection.prototype.queryMore = function(locator, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    var query = new query$1(this, { locator: locator }, options);
    if (callback) {
      query.run(callback);
    }
    return query;
  };

  /** @private */
  Connection.prototype._ensureVersion = function(majorVersion) {
    var versions = this.version.split('.');
    return parseInt(versions[0], 10) >= majorVersion;
  };

  /** @private */
  Connection.prototype._supports = function(feature) {
    switch (feature) {
      case 'sobject-collection':
        return this._ensureVersion(42);
      default:
        return false;
    }
  };

  /**
   * Retrieve specified records
   *
   * @param {String} type - SObject Type
   * @param {String|Array.<String>} ids - A record ID or array of record IDs
   * @param {Object} [options] - Options for rest api.
   * @param {Array.<String>} [options.fields] - Fetching field names in retrieving record
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
   * @returns {Promise.<Record|Array.<Record>>}
   */
  Connection.prototype.retrieve = function(type, ids, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    return (core.isArray(ids)
      ? this._supports('sobject-collection') // check whether SObject collection API is supported
        ? this._retrieveMany(type, ids, options)
        : this._retrieveParallel(type, ids, options)
      : this._retrieveSingle(type, ids, options)
    ).thenCall(callback);
  };

  /** @private */
  Connection.prototype._retrieveSingle = function(type, id, options) {
    if (!id) {
      return promise.reject(new Error('Invalid record ID. Specify valid record ID value'));
    }
    var url = [this._baseUrl(), 'sobjects', type, id].join('/');
    if (options.fields) {
      url += '?fields=' + options.fields.join(',');
    }
    return this.request({
      method: 'GET',
      url: url,
      headers: options.headers
    });
  };

  /** @private */
  Connection.prototype._retrieveParallel = function(type, ids, options) {
    if (ids.length > this.maxRequest) {
      return promise.reject(new Error('Exceeded max limit of concurrent call'));
    }
    var self = this;
    return promise.all(
      ids.map(function(id) {
        return self._retrieveSingle(type, id, options).catch(function(err) {
          if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {
            throw err;
          }
          return null;
        });
      })
    );
  };

  /** @private */
  Connection.prototype._retrieveMany = function(type, ids, options) {
    if (ids.length === 0) {
      return promise.resolve([]);
    }
    var url = [this._baseUrl(), 'composite', 'sobjects', type].join('/');
    var self = this;
    return (options.fields
      ? promise.resolve(options.fields)
      : new promise(function(resolve, reject) {
          self.describe$(type, function(err, so) {
            if (err) {
              reject(err);
            } else {
              var fields = so.fields.map(function(field) {
                return field.name;
              });
              resolve(fields);
            }
          });
        })
    ).then(function(fields) {
      return self.request({
        method: 'POST',
        url: url,
        body: JSON.stringify({
          ids: ids,
          fields: fields
        }),
        headers: core.defaults(options.headers || {}, {
          'Content-Type': 'application/json'
        })
      });
    });
  };

  /**
   * @typedef RecordResult
   * @prop {Boolean} success - The result is succeessful or not
   * @prop {String} [id] - Record ID
   * @prop {Array.<Object>} [errors] - Errors (available when success = false)
   */

  /** @private */
  Connection.prototype._toRecordResult = function(id, err) {
    var error = {
      statusCode: err.errorCode,
      message: err.message
    };
    if (err.content) {
      error.content = err.content;
    } // preserve External id duplication message
    if (err.fields) {
      error.fields = err.fields;
    } // preserve DML exception occurred fields
    var result = {
      success: false,
      errors: [error]
    };
    if (id) {
      result.id = id;
    }
    return result;
  };

  /**
   * Synonym of Connection#create()
   *
   * @method Connection#insert
   * @param {String} type - SObject Type
   * @param {Object|Array.<Object>} records - A record or array of records to create
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Create records
   *
   * @method Connection#create
   * @param {String} type - SObject Type
   * @param {Record|Array.<Record>} records - A record or array of records to create
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  Connection.prototype.insert = Connection.prototype.create = function(type, records, options, callback) {
    if (!core.isString(type)) {
      // reverse order
      callback = options;
      options = records;
      records = type;
      type = null;
    }
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    return (core.isArray(records)
      ? this._supports('sobject-collection') // check whether SObject collection API is supported
        ? this._createMany(type, records, options)
        : this._createParallel(type, records, options)
      : this._createSingle(type, records, options)
    ).thenCall(callback);
  };

  /** @private */
  Connection.prototype._createSingle = function(type, record, options) {
    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
    if (!sobjectType) {
      return promise.reject(new Error('No SObject Type defined in record'));
    }
    record = core.clone(record);
    delete record.Id;
    delete record.type;
    delete record.attributes;
    var url = [this._baseUrl(), 'sobjects', sobjectType].join('/');
    return this.request({
      method: 'POST',
      url: url,
      body: JSON.stringify(record),
      headers: core.defaults(options.headers || {}, {
        'Content-Type': 'application/json'
      })
    });
  };

  /** @private */
  Connection.prototype._createParallel = function(type, records, options) {
    if (records.length > this.maxRequest) {
      return promise.reject(new Error('Exceeded max limit of concurrent call'));
    }
    var self = this;
    return promise.all(
      records.map(function(record) {
        return self._createSingle(type, record, options).catch(function(err) {
          // be aware that allOrNone in parallel mode will not revert the other successful requests
          // it only raises error when met at least one failed request.
          if (options.allOrNone || !err.errorCode) {
            throw err;
          }
          return this._toRecordResult(null, err);
        });
      })
    );
  };

  /** @private */
  Connection.prototype._createMany = function(type, records, options) {
    if (records.length === 0) {
      return promise.resolve([]);
    }
    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      var self = this;
      return self._createMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {
        return self._createMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {
          return rets1.concat(rets2);
        });
      });
    }
    records = core.map(records, function(record) {
      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
      if (!sobjectType) {
        return promise.reject(new Error('No SObject Type defined in record'));
      }
      record = core.clone(record);
      delete record.Id;
      delete record.type;
      record.attributes = { type: sobjectType };
      return record;
    });
    var url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'POST',
      url: url,
      body: JSON.stringify({
        allOrNone: options.allOrNone || false,
        records: records
      }),
      headers: core.defaults(options.headers || {}, {
        'Content-Type': 'application/json'
      })
    });
  };

  /**
   * Update records
   *
   * @param {String} type - SObject Type
   * @param {Record|Array.<Record>} records - A record or array of records to update
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  Connection.prototype.update = function(type, records, options, callback) {
    if (!core.isString(type)) {
      // reverse order
      callback = options;
      options = records;
      records = type;
      type = null;
    }
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    return (core.isArray(records)
      ? this._supports('sobject-collection') // check whether SObject collection API is supported
        ? this._updateMany(type, records, options)
        : this._updateParallel(type, records, options)
      : this._updateSingle(type, records, options)
    ).thenCall(callback);
  };

  /** @private */
  Connection.prototype._updateSingle = function(type, record, options) {
    var id = record.Id;
    if (!id) {
      return promise.reject(new Error('Record id is not found in record.'));
    }
    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
    if (!sobjectType) {
      return promise.reject(new Error('No SObject Type defined in record'));
    }
    record = core.clone(record);
    delete record.Id;
    delete record.type;
    delete record.attributes;
    var url = [this._baseUrl(), 'sobjects', sobjectType, id].join('/');
    return this.request(
      {
        method: 'PATCH',
        url: url,
        body: JSON.stringify(record),
        headers: core.defaults(options.headers || {}, {
          'Content-Type': 'application/json'
        })
      },
      {
        noContentResponse: { id: id, success: true, errors: [] }
      }
    );
  };

  /** @private */
  Connection.prototype._updateParallel = function(type, records, options) {
    if (records.length > this.maxRequest) {
      return promise.reject(new Error('Exceeded max limit of concurrent call'));
    }
    var self = this;
    return promise.all(
      records.map(function(record) {
        return self._updateSingle(type, record, options).catch(function(err) {
          // be aware that allOrNone in parallel mode will not revert the other successful requests
          // it only raises error when met at least one failed request.
          if (options.allOrNone || !err.errorCode) {
            throw err;
          }
          return this._toRecordResult(record.Id, err);
        });
      })
    );
  };

  /** @private */
  Connection.prototype._updateMany = function(type, records, options) {
    if (records.length === 0) {
      return promise.resolve([]);
    }
    if (records.length > MAX_DML_COUNT && options.allowRecursive) {
      var self = this;
      return self._updateMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {
        return self._updateMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {
          return rets1.concat(rets2);
        });
      });
    }
    records = core.map(records, function(record) {
      var id = record.Id;
      if (!id) {
        throw new Error('Record id is not found in record.');
      }
      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }
      record = core.clone(record);
      delete record.Id;
      record.id = id;
      delete record.type;
      record.attributes = { type: sobjectType };
      return record;
    });
    var url = [this._baseUrl(), 'composite', 'sobjects'].join('/');
    return this.request({
      method: 'PATCH',
      url: url,
      body: JSON.stringify({
        allOrNone: options.allOrNone || false,
        records: records
      }),
      headers: core.defaults(options.headers || {}, {
        'Content-Type': 'application/json'
      })
    });
  };

  /**
   * Upsert records
   *
   * @param {String} type - SObject Type
   * @param {Record|Array.<Record>} records - Record or array of records to upsert
   * @param {String} extIdField - External ID field name
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  Connection.prototype.upsert = function(type, records, extIdField, options, callback) {
    // You can omit "type" argument, when the record includes type information.
    if (!core.isString(type)) {
      // reverse order
      callback = options;
      options = extIdField;
      extIdField = records;
      records = type;
      type = null;
    }
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    var self = this;
    var isArray = core.isArray(records);
    records = isArray ? records : [records];
    if (records.length > this.maxRequest) {
      return promise.reject(new Error('Exceeded max limit of concurrent call')).thenCall(callback);
    }
    return promise
      .all(
        core.map(records, function(record) {
          var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
          var extId = record[extIdField];
          record = core.clone(record);
          delete record[extIdField];
          delete record.type;
          delete record.attributes;

          var url = [self._baseUrl(), 'sobjects', sobjectType, extIdField, extId].join('/');
          return self
            .request(
              {
                method: 'PATCH',
                url: url,
                body: JSON.stringify(record),
                headers: core.defaults(options.headers || {}, {
                  'Content-Type': 'application/json'
                })
              },
              {
                noContentResponse: { success: true, errors: [] }
              }
            )
            .catch(function(err) {
              // be aware that `allOrNone` option in upsert method will not revert the other successful requests
              // it only raises error when met at least one failed request.
              if (!isArray || options.allOrNone || !err.errorCode) {
                throw err;
              }
              return self._toRecordResult(null, err);
            });
        })
      )
      .then(function(results) {
        return !isArray && core.isArray(results) ? results[0] : results;
      })
      .thenCall(callback);
  };

  /**
   * Synonym of Connection#destroy()
   *
   * @method Connection#delete
   * @param {String} type - SObject Type
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Synonym of Connection#destroy()
   *
   * @method Connection#del
   * @param {String} type - SObject Type
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  /**
   * Delete records
   *
   * @method Connection#destroy
   * @param {String} type - SObject Type
   * @param {String|Array.<String>} ids - A ID or array of IDs to delete
   * @param {Object} [options] - Options for rest api.
   * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back
   * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.
   * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request
   * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
   * @returns {Promise.<RecordResult|Array.<RecordResult>>}
   */
  Connection.prototype['delete'] = Connection.prototype.del = Connection.prototype.destroy = function(
    type,
    ids,
    options,
    callback
  ) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    return (core.isArray(ids)
      ? this._supports('sobject-collection') // check whether SObject collection API is supported
        ? this._destroyMany(type, ids, options)
        : this._destroyParallel(type, ids, options)
      : this._destroySingle(type, ids, options)
    ).thenCall(callback);
  };

  /** @private */
  Connection.prototype._destroySingle = function(type, id, options) {
    var url = [this._baseUrl(), 'sobjects', type, id].join('/');
    return this.request(
      {
        method: 'DELETE',
        url: url,
        headers: options.headers || null
      },
      {
        noContentResponse: { id: id, success: true, errors: [] }
      }
    );
  };

  /** @private */
  Connection.prototype._destroyParallel = function(type, ids, options) {
    if (ids.length > this.maxRequest) {
      return promise.reject(new Error('Exceeded max limit of concurrent call'));
    }
    var self = this;
    return promise.all(
      ids.map(function(id) {
        return self._destroySingle(type, id, options).catch(function(err) {
          // be aware that `allOrNone` option in parallel mode will not revert the other successful requests
          // it only raises error when met at least one failed request.
          if (options.allOrNone || !err.errorCode) {
            throw err;
          }
          return this._toRecordResult(id, err);
        });
      })
    );
  };

  /** @private */
  Connection.prototype._destroyMany = function(type, ids, options) {
    if (ids.length === 0) {
      return promise.resolve([]);
    }
    if (ids.length > MAX_DML_COUNT && options.allowRecursive) {
      var self = this;
      return self._destroyMany(type, ids.slice(0, MAX_DML_COUNT), options).then(function(rets1) {
        return self._destroyMany(type, ids.slice(MAX_DML_COUNT), options).then(function(rets2) {
          return rets1.concat(rets2);
        });
      });
    }
    var url = [this._baseUrl(), 'composite', 'sobjects?ids='].join('/') + ids.join(',');
    if (options.allOrNone) {
      url += '&allOrNone=true';
    }
    return this.request({
      method: 'DELETE',
      url: url,
      headers: options.headers || null
    });
  };

  /**
   * Execute search by SOSL
   *
   * @param {String} sosl - SOSL string
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  Connection.prototype.search = function(sosl, callback) {
    var url = this._baseUrl() + '/search?q=' + encodeURIComponent(sosl);
    return this.request(url).thenCall(callback);
  };

  /**
   * Result returned by describeSObject call
   *
   * @typedef {Object} DescribeSObjectResult
   */
  /**
   * Synonym of Connection#describe()
   *
   * @method Connection#describeSObject
   * @param {String} type - SObject Type
   * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
   * @returns {Promise.<DescribeSObjectResult>}
   */
  /**
   * Describe SObject metadata
   *
   * @method Connection#describe
   * @param {String} type - SObject Type
   * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
   * @returns {Promise.<DescribeSObjectResult>}
   */
  Connection.prototype.describe = Connection.prototype.describeSObject = function(type, callback) {
    var url = [this._baseUrl(), 'sobjects', type, 'describe'].join('/');
    return this.request(url).thenCall(callback);
  };

  /**
   * Result returned by describeGlobal call
   *
   * @typedef {Object} DescribeGlobalResult
   */
  /**
   * Describe global SObjects
   *
   * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function
   * @returns {Promise.<DescribeGlobalResult>}
   */
  Connection.prototype.describeGlobal = function(callback) {
    var url = this._baseUrl() + '/sobjects';
    return this.request(url).thenCall(callback);
  };

  /**
   * Get SObject instance
   *
   * @param {String} type - SObject Type
   * @returns {SObject}
   */
  Connection.prototype.sobject = function(type) {
    this.sobjects = this.sobjects || {};
    var sobject$1 = (this.sobjects[type] = this.sobjects[type] || new sobject(this, type));
    return sobject$1;
  };

  /**
   * Get identity information of current user
   *
   * @param {Object} [options] - Identity call options
   * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request
   * @param {Callback.<IdentityInfo>} [callback] - Callback function
   * @returns {Promise.<IdentityInfo>}
   */
  Connection.prototype.identity = function(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    options = options || {};
    var self = this;
    var idUrl = this.userInfo && this.userInfo.url;
    return promise
      .resolve(
        idUrl ? { identity: idUrl } : this.request({ method: 'GET', url: this._baseUrl(), headers: options.headers })
      )
      .then(function(res) {
        var url = res.identity;
        return self.request({ method: 'GET', url: url });
      })
      .then(function(res) {
        self.userInfo = {
          id: res.user_id,
          organizationId: res.organization_id,
          url: res.id
        };
        return res;
      })
      .thenCall(callback);
  };

  /**
   * @typedef UserInfo
   * @prop {String} id - User ID
   * @prop {String} organizationId - Organization ID
   * @prop {String} url - Identity URL of the user
   */

  /**
   * Authorize (using oauth2 web server flow)
   *
   * @param {String} code - Authorization code
   * @param {Object} [params] - Optional parameters to send in token retrieval
   * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)
   * @param {Callback.<UserInfo>} [callback] - Callback function
   * @returns {Promise.<UserInfo>}
   */
  Connection.prototype.authorize = function(code, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = {};
    }
    var self = this;
    var logger = this._logger;

    return this.oauth2
      .requestToken(code, params)
      .then(function(res) {
        var userInfo = parseIdUrl(res.id);
        self.initialize({
          instanceUrl: res.instance_url,
          accessToken: res.access_token,
          refreshToken: res.refresh_token,
          userInfo: userInfo
        });
        logger.debug('<login> completed. user id = ' + userInfo.id + ', org id = ' + userInfo.organizationId);
        return userInfo;
      })
      .thenCall(callback);
  };

  /**
   * Login to Salesforce
   *
   * @param {String} username - Salesforce username
   * @param {String} password - Salesforce password (and security token, if required)
   * @param {Callback.<UserInfo>} [callback] - Callback function
   * @returns {Promise.<UserInfo>}
   */
  Connection.prototype.login = function(username, password, callback) {
    // register refreshDelegate for session expiration
    this._refreshDelegate = new httpApi.SessionRefreshDelegate(
      this,
      createUsernamePasswordRefreshFn(username, password)
    );
    if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {
      return this.loginByOAuth2(username, password, callback);
    } else {
      return this.loginBySoap(username, password, callback);
    }
  };

  /** @private **/
  function createUsernamePasswordRefreshFn(username, password) {
    return function(conn, callback) {
      conn.login(username, password, function(err) {
        if (err) {
          return callback(err);
        }
        callback(null, conn.accessToken);
      });
    };
  }

  /**
   * Login by OAuth2 username & password flow
   *
   * @param {String} username - Salesforce username
   * @param {String} password - Salesforce password (and security token, if required)
   * @param {Callback.<UserInfo>} [callback] - Callback function
   * @returns {Promise.<UserInfo>}
   */
  Connection.prototype.loginByOAuth2 = function(username, password, callback) {
    var self = this;
    var logger = this._logger;
    return this.oauth2
      .authenticate(username, password)
      .then(function(res) {
        var userInfo = parseIdUrl(res.id);
        self.initialize({
          instanceUrl: res.instance_url,
          accessToken: res.access_token,
          userInfo: userInfo
        });
        logger.debug('<login> completed. user id = ' + userInfo.id + ', org id = ' + userInfo.organizationId);
        return userInfo;
      })
      .thenCall(callback);
  };

  /**
   * @private
   */
  function esc(str) {
    return (
      str &&
      String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
    );
  }

  /**
   * Login by SOAP web service API
   *
   * @param {String} username - Salesforce username
   * @param {String} password - Salesforce password (and security token, if required)
   * @param {Callback.<UserInfo>} [callback] - Callback function
   * @returns {Promise.<UserInfo>}
   */
  Connection.prototype.loginBySoap = function(username, password, callback) {
    var self = this;
    var logger = this._logger;
    var body = [
      '<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">',
      '<se:Header/>',
      '<se:Body>',
      '<login xmlns="urn:partner.soap.sforce.com">',
      '<username>' + esc(username) + '</username>',
      '<password>' + esc(password) + '</password>',
      '</login>',
      '</se:Body>',
      '</se:Envelope>'
    ].join('');

    var soapLoginEndpoint = [this.loginUrl, 'services/Soap/u', this.version].join('/');

    return this._transport
      .httpRequest({
        method: 'POST',
        url: soapLoginEndpoint,
        body: body,
        headers: {
          'Content-Type': 'text/xml',
          SOAPAction: '""'
        }
      })
      .then(function(response) {
        var m;
        if (response.statusCode >= 400) {
          m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
          var faultstring = m && m[1];
          throw new Error(faultstring || response.body);
        }
        logger.debug('SOAP response = ' + response.body);
        m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
        var serverUrl = m && m[1];
        m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
        var sessionId = m && m[1];
        m = response.body.match(/<userId>([^<]+)<\/userId>/);
        var userId = m && m[1];
        m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
        var orgId = m && m[1];
        var idUrl = soapLoginEndpoint
          .split('/')
          .slice(0, 3)
          .join('/');
        idUrl += '/id/' + orgId + '/' + userId;
        var userInfo = {
          id: userId,
          organizationId: orgId,
          url: idUrl
        };
        self.initialize({
          serverUrl: serverUrl
            .split('/')
            .slice(0, 3)
            .join('/'),
          sessionId: sessionId,
          userInfo: userInfo
        });
        logger.debug('<login> completed. user id = ' + userId + ', org id = ' + orgId);
        return userInfo;
      })
      .thenCall(callback);
  };

  /**
   * Logout the current session
   *
   * @param {Boolean} [revoke] - Revokes API Access if set to true
   * @param {Callback.<undefined>} [callback] - Callback function
   * @returns {Promise.<undefined>}
   */
  Connection.prototype.logout = function(revoke, callback) {
    if (typeof revoke === 'function') {
      callback = revoke;
      revoke = false;
    }

    if (this._sessionType === 'oauth2') {
      return this.logoutByOAuth2(revoke, callback);
    } else {
      return this.logoutBySoap(revoke, callback);
    }
  };

  /**
   * Logout the current session by revoking access token via OAuth2 session revoke
   *
   * @param {Boolean} [revoke] - Revokes API Access if set to true
   * @param {Callback.<undefined>} [callback] - Callback function
   * @returns {Promise.<undefined>}
   */
  Connection.prototype.logoutByOAuth2 = function(revoke, callback) {
    if (typeof revoke === 'function') {
      callback = revoke;
      revoke = false;
    }
    var self = this;
    this._logger;

    return this.oauth2
      .revokeToken(revoke ? this.refreshToken : this.accessToken)
      .then(function() {
        // Destroy the session bound to this connection
        self.accessToken = null;
        self.userInfo = null;
        self.refreshToken = null;
        self.instanceUrl = null;
        self.cache.clear();

        // nothing useful returned by logout API, just return
        return undefined;
      })
      .thenCall(callback);
  };

  /**
   * Logout the session by using SOAP web service API
   *
   * @param {Boolean} [revoke] - Revokes API Access if set to true
   * @param {Callback.<undefined>} [callback] - Callback function
   * @returns {Promise.<undefined>}
   */
  Connection.prototype.logoutBySoap = function(revoke, callback) {
    if (typeof revoke === 'function') {
      callback = revoke;
      revoke = false;
    }
    var self = this;
    var logger = this._logger;

    var body = [
      '<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">',
      '<se:Header>',
      '<SessionHeader xmlns="urn:partner.soap.sforce.com">',
      '<sessionId>' + esc(revoke ? this.refreshToken : this.accessToken) + '</sessionId>',
      '</SessionHeader>',
      '</se:Header>',
      '<se:Body>',
      '<logout xmlns="urn:partner.soap.sforce.com"/>',
      '</se:Body>',
      '</se:Envelope>'
    ].join('');

    return this._transport
      .httpRequest({
        method: 'POST',
        url: [this.instanceUrl, 'services/Soap/u', this.version].join('/'),
        body: body,
        headers: {
          'Content-Type': 'text/xml',
          SOAPAction: '""'
        }
      })
      .then(function(response) {
        logger.debug('SOAP statusCode = ' + response.statusCode + ', response = ' + response.body);
        if (response.statusCode >= 400) {
          var m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
          var faultstring = m && m[1];
          throw new Error(faultstring || response.body);
        }

        // Destroy the session bound to this connection
        self.accessToken = null;
        self.userInfo = null;
        self.refreshToken = null;
        self.instanceUrl = null;
        self.cache.clear();

        // nothing useful returned by logout API, just return
        return undefined;
      })
      .thenCall(callback);
  };

  /**
   * List recently viewed records
   *
   * @param {String} [type] - SObject type
   * @param {Number} [limit] - Limit num to fetch
   * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<RecordResult>>}
   */
  Connection.prototype.recent = function(type, limit, callback) {
    if (!core.isString(type)) {
      callback = limit;
      limit = type;
      type = undefined;
    }
    if (!core.isNumber(limit)) {
      callback = limit;
      limit = undefined;
    }
    var url;
    if (type) {
      url = [this._baseUrl(), 'sobjects', type].join('/');
      return this.request(url)
        .then(function(res) {
          return limit ? res.recentItems.slice(0, limit) : res.recentItems;
        })
        .thenCall(callback);
    } else {
      url = this._baseUrl() + '/recent';
      if (limit) {
        url += '?limit=' + limit;
      }
      return this.request(url).thenCall(callback);
    }
  };

  /**
   * @typedef {Object} UpdatedRecordsInfo
   * @prop {String} latestDateCovered - The timestamp of the last date covered.
   * @prop {Array.<String>} ids - Updated record IDs.
   */

  /**
   * Retrieve updated records
   *
   * @param {String} type - SObject Type
   * @param {String|Date} start - start date or string representing the start of the interval
   * @param {String|Date} end - start date or string representing the end of the interval must be > start
   * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function
   * @returns {Promise.<UpdatedRecordsInfo>}
   */
  Connection.prototype.updated = function(type, start, end, callback) {
    var url = [this._baseUrl(), 'sobjects', type, 'updated'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    if (start instanceof Date) {
      start = formatDate(start);
    }

    if (start) {
      url += '?start=' + encodeURIComponent(start);
    }

    if (typeof end === 'string') {
      end = new Date(end);
    }

    if (end instanceof Date) {
      end = formatDate(end);
    }

    if (end) {
      url += '&end=' + encodeURIComponent(end);
    }

    return this.request(url).thenCall(callback);
  };

  /**
   * @typedef {Object} DeletedRecordsInfo
   * @prop {String} earliestDateAvailable - The timestamp of the earliest date available
   * @prop {String} latestDateCovered - The timestamp of the last date covered
   * @prop {Array.<Object>} deletedRecords - Updated records
   * @prop {String} deletedRecords.id - Record ID
   * @prop {String} deletedRecords.deletedDate - The timestamp when this record was deleted
   */

  /**
   * Retrieve deleted records
   *
   * @param {String} type - SObject Type
   * @param {String|Date} start - start date or string representing the start of the interval
   * @param {String|Date} end - start date or string representing the end of the interval
   * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function
   * @returns {Promise.<DeletedRecordsInfo>}
   */
  Connection.prototype.deleted = function(type, start, end, callback) {
    var url = [this._baseUrl(), 'sobjects', type, 'deleted'].join('/');

    if (typeof start === 'string') {
      start = new Date(start);
    }

    if (start instanceof Date) {
      start = formatDate(start);
    }

    if (start) {
      url += '?start=' + encodeURIComponent(start);
    }

    if (typeof end === 'string') {
      end = new Date(end);
    }

    if (end instanceof Date) {
      end = formatDate(end);
    }

    if (end) {
      url += '&end=' + encodeURIComponent(end);
    }

    return this.request(url).thenCall(callback);
  };

  /**
   * @typedef {Object} TabsInfo - See the API document for detail structure
   */

  /**
   * Returns a list of all tabs
   *
   * @param {Callback.<TabsInfo>} [callback] - Callback function
   * @returns {Promise.<TabsInfo>}
   */
  Connection.prototype.tabs = function(callback) {
    var url = [this._baseUrl(), 'tabs'].join('/');
    return this.request(url).thenCall(callback);
  };

  /**
   * @typedef {Object} LimitsInfo - See the API document for detail structure
   */

  /**
   * Returns curren system limit in the organization
   *
   * @param {Callback.<LimitsInfo>} [callback] - Callback function
   * @returns {Promise.<LimitsInfo>}
   */
  Connection.prototype.limits = function(callback) {
    var url = [this._baseUrl(), 'limits'].join('/');
    return this.request(url).thenCall(callback);
  };

  /**
   * @typedef {Object} ThemeInfo - See the API document for detail structure
   */

  /**
   * Returns a theme info
   *
   * @param {Callback.<ThemeInfo>} [callback] - Callback function
   * @returns {Promise.<ThemeInfo>}
   */
  Connection.prototype.theme = function(callback) {
    var url = [this._baseUrl(), 'theme'].join('/');
    return this.request(url).thenCall(callback);
  };

  /**
   * Returns all registered global quick actions
   *
   * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
   * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
   */
  Connection.prototype.quickActions = function(callback) {
    return this.request('/quickActions').thenCall(callback);
  };

  /**
   * Get reference for specified global quick aciton
   *
   * @param {String} actionName - Name of the global quick action
   * @returns {QuickAction}
   */
  Connection.prototype.quickAction = function(actionName) {
    return new quickAction(this, '/quickActions/' + actionName);
  };
});

var multistream = MultiStream;

var stream$2 = readable;

inherits(MultiStream, stream$2.Readable);

function MultiStream(streams, opts) {
  var self = this;
  if (!(self instanceof MultiStream)) return new MultiStream(streams, opts);
  stream$2.Readable.call(self, opts);

  self.destroyed = false;

  self._drained = false;
  self._forwarding = false;
  self._current = null;
  self._toStreams2 = opts && opts.objectMode ? toStreams2Obj : toStreams2Buf;

  if (typeof streams === 'function') {
    self._queue = streams;
  } else {
    self._queue = streams.map(self._toStreams2);
    self._queue.forEach(function(stream) {
      if (typeof stream !== 'function') self._attachErrorListener(stream);
    });
  }

  self._next();
}

MultiStream.obj = function(streams) {
  return new MultiStream(streams, { objectMode: true, highWaterMark: 16 });
};

MultiStream.prototype._read = function() {
  this._drained = true;
  this._forward();
};

MultiStream.prototype._forward = function() {
  if (this._forwarding || !this._drained || !this._current) return;
  this._forwarding = true;

  var chunk;
  while ((chunk = this._current.read()) !== null) {
    this._drained = this.push(chunk);
  }

  this._forwarding = false;
};

MultiStream.prototype.destroy = function(err) {
  if (this.destroyed) return;
  this.destroyed = true;

  if (this._current && this._current.destroy) this._current.destroy();
  if (typeof this._queue !== 'function') {
    this._queue.forEach(function(stream) {
      if (stream.destroy) stream.destroy();
    });
  }

  if (err) this.emit('error', err);
  this.emit('close');
};

MultiStream.prototype._next = function() {
  var self = this;
  self._current = null;

  if (typeof self._queue === 'function') {
    self._queue(function(err, stream) {
      if (err) return self.destroy(err);
      stream = self._toStreams2(stream);
      self._attachErrorListener(stream);
      self._gotNextStream(stream);
    });
  } else {
    var stream = self._queue.shift();
    if (typeof stream === 'function') {
      stream = self._toStreams2(stream());
      self._attachErrorListener(stream);
    }
    self._gotNextStream(stream);
  }
};

MultiStream.prototype._gotNextStream = function(stream) {
  var self = this;

  if (!stream) {
    self.push(null);
    self.destroy();
    return;
  }

  self._current = stream;
  self._forward();

  stream.on('readable', onReadable);
  stream.once('end', onEnd);
  stream.once('close', onClose);

  function onReadable() {
    self._forward();
  }

  function onClose() {
    if (!stream._readableState.ended) {
      self.destroy();
    }
  }

  function onEnd() {
    self._current = null;
    stream.removeListener('readable', onReadable);
    stream.removeListener('end', onEnd);
    stream.removeListener('close', onClose);
    self._next();
  }
};

MultiStream.prototype._attachErrorListener = function(stream) {
  var self = this;
  if (!stream) return;

  stream.once('error', onError);

  function onError(err) {
    stream.removeListener('error', onError);
    self.destroy(err);
  }
};

function toStreams2Obj(s) {
  return toStreams2(s, { objectMode: true, highWaterMark: 16 });
}

function toStreams2Buf(s) {
  return toStreams2(s);
}

function toStreams2(s, opts) {
  if (!s || typeof s === 'function' || s._readableState) return s;

  var wrap = new stream$2.Readable(opts).wrap(s);
  if (s.destroy) {
    wrap.destroy = s.destroy.bind(s);
  }
  return wrap;
}

/**
 * @file Manages method call to SOAP endpoint
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var soap = _commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * Class for SOAP endpoint of Salesforce
   *
   * @protected
   * @class
   * @constructor
   * @param {Connection} conn - Connection instance
   * @param {Object} options - SOAP endpoint setting options
   * @param {String} options.endpointUrl - SOAP endpoint URL
   * @param {String} [options.xmlns] - XML namespace for method call (default is "urn:partner.soap.sforce.com")
   */
  var SOAP = (module.exports = function(conn, options) {
    SOAP.super_.apply(this, arguments);
    this._endpointUrl = options.endpointUrl;
    this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';
  });

  inherits(SOAP, httpApi);

  /**
   * Invoke SOAP call using method and arguments
   *
   * @param {String} method - Method name
   * @param {Object} args - Arguments for the method call
   * @param {Object} [schema] - Schema definition of response message
   * @param {Callback.<Object>} [callback] - Callback function
   * @returns {Promise.<Object>}
   */
  SOAP.prototype.invoke = function(method, args, schema, callback) {
    if (typeof schema === 'function') {
      callback = schema;
      schema = null;
    }
    var message = {};
    message[method] = args;
    return this.request({
      method: 'POST',
      url: this._endpointUrl,
      headers: {
        'Content-Type': 'text/xml',
        SOAPAction: '""'
      },
      message: message
    })
      .then(function(res) {
        return schema ? convertType(res, schema) : res;
      })
      .thenCall(callback);
  };

  /* @private */
  function convertType(value, schema) {
    if (core.isArray(value)) {
      return value.map(function(v) {
        return convertType(v, schema && schema[0]);
      });
    } else if (core.isObject(value)) {
      if (value.$ && value.$['xsi:nil'] === 'true') {
        return null;
      } else if (core.isArray(schema)) {
        return [convertType(value, schema[0])];
      } else {
        var o = {};
        for (var key in value) {
          o[key] = convertType(value[key], schema && schema[key]);
        }
        return o;
      }
    } else {
      if (core.isArray(schema)) {
        return [convertType(value, schema[0])];
      } else if (core.isObject(schema)) {
        return {};
      } else {
        switch (schema) {
          case 'string':
            return String(value);
          case 'number':
            return Number(value);
          case 'boolean':
            return value === 'true';
          default:
            return value;
        }
      }
    }
  }

  /** @override **/
  SOAP.prototype.beforeSend = function(request) {
    request.body = this._createEnvelope(request.message);
  };

  /** @override **/
  SOAP.prototype.isSessionExpired = function(response) {
    return response.statusCode === 500 && /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\/faultcode>/.test(response.body);
  };

  /** @override **/
  SOAP.prototype.parseError = function(body) {
    var error = lookupValue(body, [/:Envelope$/, /:Body$/, /:Fault$/]);
    return {
      errorCode: error.faultcode,
      message: error.faultstring
    };
  };

  /** @override **/
  SOAP.prototype.getResponseBody = function(response) {
    var body = SOAP.super_.prototype.getResponseBody.call(this, response);
    return lookupValue(body, [/:Envelope$/, /:Body$/, /.+/]);
  };

  /**
   * @private
   */
  function lookupValue(obj, propRegExps) {
    var regexp = propRegExps.shift();
    if (!regexp) {
      return obj;
    } else {
      for (var prop in obj) {
        if (regexp.test(prop)) {
          return lookupValue(obj[prop], propRegExps);
        }
      }
      return null;
    }
  }

  /**
   * @private
   */
  function toXML(name, value) {
    if (core.isObject(name)) {
      value = name;
      name = null;
    }
    if (core.isArray(value)) {
      return core
        .map(value, function(v) {
          return toXML(name, v);
        })
        .join('');
    } else {
      var attrs = [];
      var elems = [];
      if (core.isObject(value)) {
        for (var k in value) {
          var v = value[k];
          if (k[0] === '@') {
            k = k.substring(1);
            attrs.push(k + '="' + v + '"');
          } else {
            elems.push(toXML(k, v));
          }
        }
        value = elems.join('');
      } else {
        value = String(value)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&apos;');
      }
      var startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';
      var endTag = name ? '</' + name + '>' : '';
      return startTag + value + endTag;
    }
  }

  /**
   * @private
   */
  SOAP.prototype._createEnvelope = function(message) {
    var header = {};
    var conn = this._conn;
    if (conn.accessToken) {
      header.SessionHeader = { sessionId: this._conn.accessToken };
    }
    if (conn.callOptions) {
      header.CallOptions = conn.callOptions;
    }
    return [
      '<?xml version="1.0" encoding="UTF-8"?>',
      '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"',
      ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"',
      ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">',
      '<soapenv:Header xmlns="' + this._xmlns + '">',
      toXML(header),
      '</soapenv:Header>',
      '<soapenv:Body xmlns="' + this._xmlns + '">',
      toXML(message),
      '</soapenv:Body>',
      '</soapenv:Envelope>'
    ].join('');
  };
});

var _required = {
  inherits: inherits,
  util: util__default['default'],
  events: events__default['default'],
  'lodash/core': core,
  'readable-stream': readable,
  multistream: multistream,
  './VERSION': VERSION,
  './cache': cache$2,
  './connection': connection,
  './core': core$2,
  './csv': csv,
  './date': date$1,
  './http-api': httpApi,
  './logger': logger,
  './oauth2': oauth2,
  './process': process$1,
  './promise': promise,
  './query': query$1,
  './quick-action': quickAction,
  './record-stream': recordStream,
  './record': record,
  './soap': soap,
  './sobject': sobject,
  './soql-builder': soqlBuilder,
  './transport': transport
};

var require$1 = function(name) {
  if (name === './jsforce' || name === 'jsforce') {
    name = './core';
  }
  var m = _required[name];
  if (typeof m === 'undefined') {
    throw new Error("Cannot find module '" + name + "'");
  }
  return m;
};

/**
 * @file JSforce Core
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var core$2 = _commonjsHelpers.createCommonjsModule(function(module) {
  var EventEmitter = events__default['default'].EventEmitter;

  var jsforce = (module.exports = new EventEmitter());
  jsforce.VERSION = VERSION;
  jsforce.Connection = connection;
  jsforce.OAuth2 = oauth2;
  jsforce.Date = jsforce.SfDate = date$1;
  jsforce.RecordStream = recordStream;
  jsforce.Promise = promise;
  jsforce.require = require$1;
});

/**
 * @file Manages Salesforce Analytics API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * Report instance to retrieving asynchronously executed result
 *
 * @protected
 * @class Analytics~ReportInstance
 * @param {Analytics~Report} report - Report
 * @param {String} id - Report instance id
 */
var ReportInstance = function(report, id) {
  this._report = report;
  this._conn = report._conn;
  this.id = id;
};

/**
 * Retrieve report result asynchronously executed
 *
 * @method Analytics~ReportInstance#retrieve
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
ReportInstance.prototype.retrieve = function(callback) {
  var conn = this._conn,
    report = this._report;
  var url = [conn._baseUrl(), 'analytics', 'reports', report.id, 'instances', this.id].join('/');
  return conn.request(url).thenCall(callback);
};

/**
 * Report object in Analytics API
 *
 * @protected
 * @class Analytics~Report
 * @param {Connection} conn Connection
 */
var Report = function(conn, id) {
  this._conn = conn;
  this.id = id;
};

/**
 * Describe report metadata
 *
 * @method Analytics~Report#describe
 * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportMetadata>}
 */
Report.prototype.describe = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'describe'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Synonym of Analytics~Report#destroy()
 *
 * @method Analytics~Report#delete
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
/**
 * Synonym of Analytics~Report#destroy()
 *
 * @method Analytics~Report#del
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
/**
 * Destroy a report
 *
 * @method Analytics~Report#destroy
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
Report.prototype['delete'] = Report.prototype.del = Report.prototype.destroy = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
  return this._conn.request({ method: 'DELETE', url: url }).thenCall(callback);
};

/**
 * Clones a given report
 *
 * @method Analytics~Report#clone
 * @param {String} name - The name of the new report
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
Report.prototype.clone = function(name, callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
  url += '?cloneId=' + this.id;
  var data = { reportMetadata: { name: name } };
  var params = {
    method: 'POST',
    url: url,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  };

  return this._conn.request(params).thenCall(callback);
};

/**
 * Explain plan for executing report
 *
 * @method Analytics~Report#explain
 * @param {Callback.<ExplainInfo>} [callback] - Callback function
 * @returns {Promise.<ExplainInfo>}
 */
Report.prototype.explain = function(callback) {
  var url = '/query/?explain=' + this.id;
  return this._conn.request(url).thenCall(callback);
};

/**
 * Run report synchronously
 *
 * @method Analytics~Report#execute
 * @param {Object} [options] - Options
 * @param {Boolean} options.details - Flag if include detail in result
 * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
Report.prototype.run = Report.prototype.exec = Report.prototype.execute = function(options, callback) {
  options = options || {};
  if (core.isFunction(options)) {
    callback = options;
    options = {};
  }
  var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
  url += '?includeDetails=' + (options.details ? 'true' : 'false');
  var params = { method: options.metadata ? 'POST' : 'GET', url: url };
  if (options.metadata) {
    params.headers = { 'Content-Type': 'application/json' };
    params.body = JSON.stringify(options.metadata);
  }
  return this._conn.request(params).thenCall(callback);
};

/**
 * Run report asynchronously
 *
 * @method Analytics~Report#executeAsync
 * @param {Object} [options] - Options
 * @param {Boolean} options.details - Flag if include detail in result
 * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata
 * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportInstanceAttrs>}
 */
Report.prototype.executeAsync = function(options, callback) {
  options = options || {};
  if (core.isFunction(options)) {
    callback = options;
    options = {};
  }
  var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
  if (options.details) {
    url += '?includeDetails=true';
  }
  var params = { method: 'POST', url: url, body: '' };
  if (options.metadata) {
    params.headers = { 'Content-Type': 'application/json' };
    params.body = JSON.stringify(options.metadata);
  }
  return this._conn.request(params).thenCall(callback);
};

/**
 * Get report instance for specified instance ID
 *
 * @method Analytics~Report#instance
 * @param {String} id - Report instance ID
 * @returns {Analytics~ReportInstance}
 */
Report.prototype.instance = function(id) {
  return new ReportInstance(this, id);
};

/**
 * List report instances which had been executed asynchronously
 *
 * @method Analytics~Report#instances
 * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function
 * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}
 */
Report.prototype.instances = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Dashboard object in the Analytics API
 *
 * @protected
 * @class Analytics-Dashboard
 * @param {Connection} conn Connection
 * @param {String} id - The Id
 */

var Dashboard = function(conn, id) {
  this._conn = conn;
  this.id = id;
};

/**
 * Describe dashboard metadata
 *
 * @method Analytics~Dashboard#describe
 * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics-DashboardMetadata>}
 */
Dashboard.prototype.describe = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'describe'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Get details about dashboard components
 *
 * @method Analytics~Dashboard#components
 * @param {Callback.<Analytics-DashboardComponentMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics-DashboardComponentMetadata>}
 */
Dashboard.prototype.components = function(componentIds, callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
  var data = {};
  if (core.isFunction(componentIds)) {
    callback = componentIds;
  } else if (core.isArray(componentIds)) {
    data.componentIds = componentIds;
  } else if (core.isString(componentIds)) {
    data.componentIds = [componentIds];
  }
  var params = {
    method: 'POST',
    url: url,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  };
  return this._conn.request(params).thenCall(callback);
};

/**
 * Get dashboard status
 *
 * @method Analytics~Dashboard#status
 * @param {Callback.<Analytics-DashboardStatusMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics-DashboardStatusMetadata>}
 */
Dashboard.prototype.status = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'status'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Refresh a dashboard
 *
 * @method Analytics~Dashboard#refresh
 * @param {Callback.<Analytics-DashboardStatusUrl>} [callback] - Callback function
 * @returns {Promise.<Analytics-DashboardStatusUrl>}
 */
Dashboard.prototype.refresh = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
  var params = { method: 'PUT', url: url, body: '' };
  return this._conn.request(params).thenCall(callback);
};

/**
 * Clone a dashboard
 *
 * @method Analytics~Dashboard#clone
 * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics-DashboardMetadata>}
 */
Dashboard.prototype.clone = function(name, folderid, callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
  url += '?cloneId=' + this.id;
  var data = {};

  if (core.isObject(name)) {
    data = name;
    callback = folderid;
  } else {
    data.name = name;
    data.folderId = folderid;
  }
  var params = {
    method: 'POST',
    url: url,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  };

  return this._conn.request(params).thenCall(callback);
};

/**
 * Synonym of Analytics~Dashboard#destroy()
 *
 * @method Analytics~Dashboard#delete
 * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~DashboardResult>}
 */
/**
 * Synonym of Analytics~Dashboard#destroy()
 *
 * @method Analytics~Dashboard#del
 * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~DashboardResult>}
 */
/**
 * Destroy a dashboard
 *
 * @method Analytics~Dashboard#destroy
 * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~DashboardResult>}
 */
Dashboard.prototype['delete'] = Dashboard.prototype.del = Dashboard.prototype.destroy = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
  return this._conn.request({ method: 'DELETE', url: url }).thenCall(callback);
};

/**
 * API class for Analytics API
 *
 * @class
 * @param {Connection} conn Connection
 */
var Analytics = function(conn) {
  this._conn = conn;
};

/**
 * Get report object of Analytics API
 *
 * @param {String} id - Report Id
 * @returns {Analytics~Report}
 */
Analytics.prototype.report = function(id) {
  return new Report(this._conn, id);
};

/**
 * Get recent report list
 *
 * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Analytics~ReportInfo>>}
 */
Analytics.prototype.reports = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Get dashboard object of Analytics API
 *
 * @param {String} id - Dashboard Id
 * @returns {Analytics~Dashboard}
 */
Analytics.prototype.dashboard = function(id) {
  return new Dashboard(this._conn, id);
};

/**
 * Get recent dashboard list
 *
 * @param {Callback.<Array.<Analytics~DashboardInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Analytics~DashboardInfo>>}
 */
Analytics.prototype.dashboards = function(callback) {
  var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
  return this._conn.request(url).thenCall(callback);
};

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
core$2.on('connection:new', function(conn) {
  conn.analytics = new Analytics(conn);
});

/**
 * @file Manages Salesforce Apex REST endpoint calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * API class for Apex REST endpoint call
 *
 * @class
 * @param {Connection} conn Connection
 */
var Apex = function(conn) {
  this._conn = conn;
};

/**
 * @private
 */
Apex.prototype._baseUrl = function() {
  return this._conn.instanceUrl + '/services/apexrest';
};

/**
 * @private
 */
Apex.prototype._createRequestParams = function(method, path, body, options) {
  var params = {
      method: method,
      url: this._baseUrl() + path
    },
    _headers = {};
  if (options && 'object' === typeof options['headers']) {
    _headers = options['headers'];
  }
  if (!/^(GET|DELETE)$/i.test(method)) {
    _headers['Content-Type'] = 'application/json';
  }
  params.headers = _headers;
  if (body) {
    params.body = JSON.stringify(body);
  }
  return params;
};

/**
 * Call Apex REST service in GET request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} options - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.get = function(path, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);
};

/**
 * Call Apex REST service in POST request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} options - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.post = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('POST', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Call Apex REST service in PUT request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.put = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('PUT', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Call Apex REST service in PATCH request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.patch = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('PATCH', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Synonym of Apex#delete()
 *
 * @method Apex#del
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
/**
 * Call Apex REST service in DELETE request
 *
 * @method Apex#delete
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.del = Apex.prototype['delete'] = function(path, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);
};

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
core$2.on('connection:new', function(conn) {
  conn.apex = new Apex(conn);
});

/*global process*/

var Duplex$4 = readable.Duplex;

/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 *
 * @protected
 * @class Bulk~Job
 * @extends events.EventEmitter
 *
 * @param {Bulk} bulk - Bulk API object
 * @param {String} [type] - SObject type
 * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
 * @param {Object} [options] - Options for bulk loading operation
 * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
 * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.
 * @param {String} [jobId] - Job ID (if already available)
 */
var Job = function(bulk, type, operation, options, jobId) {
  this._bulk = bulk;
  this.type = type;
  this.operation = operation;
  this.options = options || {};
  this.id = jobId;
  this.state = this.id ? 'Open' : 'Unknown';
  this._batches = {};
};

inherits(Job, events__default['default'].EventEmitter);

/**
 * @typedef {Object} Bulk~JobInfo
 * @prop {String} id - Job ID
 * @prop {String} object - Object type name
 * @prop {String} operation - Operation type of the job
 * @prop {String} state - Job status
 */

/**
 * Return latest jobInfo from cache
 *
 * @method Bulk~Job#info
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.info = function(callback) {
  // if cache is not available, check the latest
  if (!this._jobInfo) {
    this._jobInfo = this.check();
  }
  return this._jobInfo.thenCall(callback);
};

/**
 * Open new job and get jobinfo
 *
 * @method Bulk~Job#open
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.open = function(callback) {
  var self = this;
  var bulk = this._bulk;
  bulk._logger;

  // if not requested opening job
  if (!this._jobInfo) {
    var operation = this.operation.toLowerCase();
    if (operation === 'harddelete') {
      operation = 'hardDelete';
    }
    var body = [
      '<?xml version="1.0" encoding="UTF-8"?>',
      '<jobInfo  xmlns="http://www.force.com/2009/06/asyncapi/dataload">',
      '<operation>' + operation + '</operation>',
      '<object>' + this.type + '</object>',
      this.options.extIdField ? '<externalIdFieldName>' + this.options.extIdField + '</externalIdFieldName>' : '',
      this.options.concurrencyMode ? '<concurrencyMode>' + this.options.concurrencyMode + '</concurrencyMode>' : '',
      this.options.assignmentRuleId ? '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' : '',
      '<contentType>CSV</contentType>',
      '</jobInfo>'
    ].join('');

    this._jobInfo = bulk
      ._request({
        method: 'POST',
        path: '/job',
        body: body,
        headers: {
          'Content-Type': 'application/xml; charset=utf-8'
        },
        responseType: 'application/xml'
      })
      .then(
        function(res) {
          self.emit('open', res.jobInfo);
          self.id = res.jobInfo.id;
          self.state = res.jobInfo.state;
          return res.jobInfo;
        },
        function(err) {
          self.emit('error', err);
          throw err;
        }
      );
  }
  return this._jobInfo.thenCall(callback);
};

/**
 * Create a new batch instance in the job
 *
 * @method Bulk~Job#createBatch
 * @returns {Bulk~Batch}
 */
Job.prototype.createBatch = function() {
  var batch = new Batch(this);
  var self = this;
  batch.on('queue', function() {
    self._batches[batch.id] = batch;
  });
  return batch;
};

/**
 * Get a batch instance specified by given batch ID
 *
 * @method Bulk~Job#batch
 * @param {String} batchId - Batch ID
 * @returns {Bulk~Batch}
 */
Job.prototype.batch = function(batchId) {
  var batch = this._batches[batchId];
  if (!batch) {
    batch = new Batch(this, batchId);
    this._batches[batchId] = batch;
  }
  return batch;
};

/**
 * Check the latest job status from server
 *
 * @method Bulk~Job#check
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.check = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  this._jobInfo = this._waitAssign()
    .then(function() {
      return bulk._request({
        method: 'GET',
        path: '/job/' + self.id,
        responseType: 'application/xml'
      });
    })
    .then(function(res) {
      logger.debug(res.jobInfo);
      self.id = res.jobInfo.id;
      self.type = res.jobInfo.object;
      self.operation = res.jobInfo.operation;
      self.state = res.jobInfo.state;
      return res.jobInfo;
    });
  return this._jobInfo.thenCall(callback);
};

/**
 * Wait till the job is assigned to server
 *
 * @method Bulk~Job#info
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype._waitAssign = function(callback) {
  return (this.id ? promise.resolve({ id: this.id }) : this.open()).thenCall(callback);
};

/**
 * List all registered batch info in job
 *
 * @method Bulk~Job#list
 * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Bulk~BatchInfo>>}
 */
Job.prototype.list = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  return this._waitAssign()
    .then(function() {
      return bulk._request({
        method: 'GET',
        path: '/job/' + self.id + '/batch',
        responseType: 'application/xml'
      });
    })
    .then(function(res) {
      logger.debug(res.batchInfoList.batchInfo);
      var batchInfoList = res.batchInfoList;
      batchInfoList = core.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [batchInfoList.batchInfo];
      return batchInfoList;
    })
    .thenCall(callback);
};

/**
 * Close opened job
 *
 * @method Bulk~Job#close
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.close = function() {
  var self = this;
  return this._changeState('Closed').then(
    function(jobInfo) {
      self.id = null;
      self.emit('close', jobInfo);
      return jobInfo;
    },
    function(err) {
      self.emit('error', err);
      throw err;
    }
  );
};

/**
 * Set the status to abort
 *
 * @method Bulk~Job#abort
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.abort = function() {
  var self = this;
  return this._changeState('Aborted').then(
    function(jobInfo) {
      self.id = null;
      self.emit('abort', jobInfo);
      return jobInfo;
    },
    function(err) {
      self.emit('error', err);
      throw err;
    }
  );
};

/**
 * @private
 */
Job.prototype._changeState = function(state, callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  this._jobInfo = this._waitAssign()
    .then(function() {
      var body = [
        '<?xml version="1.0" encoding="UTF-8"?>',
        '<jobInfo xmlns="http://www.force.com/2009/06/asyncapi/dataload">',
        '<state>' + state + '</state>',
        '</jobInfo>'
      ].join('');
      return bulk._request({
        method: 'POST',
        path: '/job/' + self.id,
        body: body,
        headers: {
          'Content-Type': 'application/xml; charset=utf-8'
        },
        responseType: 'application/xml'
      });
    })
    .then(function(res) {
      logger.debug(res.jobInfo);
      self.state = res.jobInfo.state;
      return res.jobInfo;
    });
  return this._jobInfo.thenCall(callback);
};

/*--------------------------------------------*/

/**
 * Batch (extends RecordStream)
 *
 * @protected
 * @class Bulk~Batch
 * @extends {stream.Writable}
 * @implements {Promise.<Array.<RecordResult>>}
 * @param {Bulk~Job} job - Bulk job object
 * @param {String} [batchId] - Batch ID (if already available)
 */
var Batch = function(job, batchId) {
  Batch.super_.call(this, { objectMode: true });
  this.job = job;
  this.id = batchId;
  this._bulk = job._bulk;
  this._deferred = promise.defer();
  this._setupDataStreams();
};

inherits(Batch, readable.Writable);

/**
 * @private
 */
Batch.prototype._setupDataStreams = function() {
  var batch = this;
  var converterOptions = { nullValue: '#N/A' };
  this._uploadStream = new recordStream.Serializable();
  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);
  this._downloadStream = new recordStream.Parsable();
  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);

  this.on('finish', function() {
    batch._uploadStream.end();
  });
  this._uploadDataStream.once('readable', function() {
    batch.job.open().then(function() {
      // pipe upload data to batch API request stream
      batch._uploadDataStream.pipe(batch._createRequestStream());
    });
  });

  // duplex data stream, opened access to API programmers by Batch#stream()
  var dataStream = (this._dataStream = new Duplex$4());
  dataStream._write = function(data, enc, cb) {
    batch._uploadDataStream.write(data, enc, cb);
  };
  dataStream.on('finish', function() {
    batch._uploadDataStream.end();
  });

  this._downloadDataStream.on('readable', function() {
    dataStream.read(0);
  });
  this._downloadDataStream.on('end', function() {
    dataStream.push(null);
  });
  dataStream._read = function(size) {
    var chunk;
    while ((chunk = batch._downloadDataStream.read()) !== null) {
      dataStream.push(chunk);
    }
  };
};

/**
 * Connect batch API and create stream instance of request/response
 *
 * @private
 * @returns {stream.Duplex}
 */
Batch.prototype._createRequestStream = function() {
  var batch = this;
  var bulk = batch._bulk;
  var logger = bulk._logger;

  return bulk
    ._request(
      {
        method: 'POST',
        path: '/job/' + batch.job.id + '/batch',
        headers: {
          'Content-Type': 'text/csv'
        },
        responseType: 'application/xml'
      },
      function(err, res) {
        if (err) {
          batch.emit('error', err);
        } else {
          logger.debug(res.batchInfo);
          batch.id = res.batchInfo.id;
          batch.emit('queue', res.batchInfo);
        }
      }
    )
    .stream();
};

/**
 * Implementation of Writable
 *
 * @override
 * @private
 */
Batch.prototype._write = function(record, enc, cb) {
  record = core.clone(record);
  if (this.job.operation === 'insert') {
    delete record.Id;
  } else if (this.job.operation === 'delete') {
    record = { Id: record.Id };
  }
  delete record.type;
  delete record.attributes;
  this._uploadStream.write(record, enc, cb);
};

/**
 * Returns duplex stream which accepts CSV data input and batch result output
 *
 * @returns {stream.Duplex}
 */
Batch.prototype.stream = function() {
  return this._dataStream;
};

/**
 * Execute batch operation
 *
 * @method Bulk~Batch#execute
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.
 * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
Batch.prototype.run = Batch.prototype.exec = Batch.prototype.execute = function(input, callback) {
  var self = this;

  if (typeof input === 'function') {
    // if input argument is omitted
    callback = input;
    input = null;
  }

  // if batch is already executed
  if (this._result) {
    throw new Error('Batch already executed.');
  }

  var rdeferred = promise.defer();
  this._result = rdeferred.promise;
  this._result.then(
    function(res) {
      self._deferred.resolve(res);
    },
    function(err) {
      self._deferred.reject(err);
    }
  );
  this.once('response', function(res) {
    rdeferred.resolve(res);
  });
  this.once('error', function(err) {
    rdeferred.reject(err);
  });

  if (core.isObject(input) && core.isFunction(input.pipe)) {
    // if input has stream.Readable interface
    input.pipe(this._dataStream);
  } else {
    var data;
    if (core.isArray(input)) {
      core.forEach(input, function(record) {
        Object.keys(record).forEach(function(key) {
          if (typeof record[key] === 'boolean') {
            record[key] = String(record[key]);
          }
        });
        self.write(record);
      });
      self.end();
    } else if (core.isString(input)) {
      data = input;
      this._dataStream.write(data, 'utf8');
      this._dataStream.end();
    }
  }

  // return Batch instance for chaining
  return this.thenCall(callback);
};

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * Delegate to deferred promise, return promise instance for batch result
 *
 * @method Bulk~Batch#then
 */
Batch.prototype.then = function(onResolved, onReject, onProgress) {
  return this._deferred.promise.then(onResolved, onReject, onProgress);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @method Bulk~Batch#thenCall
 */
Batch.prototype.thenCall = function(callback) {
  if (core.isFunction(callback)) {
    this.then(
      function(res) {
        process.nextTick(function() {
          callback(null, res);
        });
      },
      function(err) {
        process.nextTick(function() {
          callback(err);
        });
      }
    );
  }
  return this;
};

/**
 * @typedef {Object} Bulk~BatchInfo
 * @prop {String} id - Batch ID
 * @prop {String} jobId - Job ID
 * @prop {String} state - Batch state
 * @prop {String} stateMessage - Batch state message
 */

/**
 * Check the latest batch status in server
 *
 * @method Bulk~Batch#check
 * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~BatchInfo>}
 */
Batch.prototype.check = function(callback) {
  var bulk = this._bulk;
  var logger = bulk._logger;
  var jobId = this.job.id;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error('Batch not started.');
  }
  return bulk
    ._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId,
      responseType: 'application/xml'
    })
    .then(function(res) {
      logger.debug(res.batchInfo);
      return res.batchInfo;
    })
    .thenCall(callback);
};

/**
 * Polling the batch result and retrieve
 *
 * @method Bulk~Batch#poll
 * @param {Number} interval - Polling interval in milliseconds
 * @param {Number} timeout - Polling timeout in milliseconds
 */
Batch.prototype.poll = function(interval, timeout) {
  var self = this;
  var jobId = this.job.id;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error('Batch not started.');
  }
  var startTime = new Date().getTime();
  var poll = function() {
    var now = new Date().getTime();
    if (startTime + timeout < now) {
      var err = new Error('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId);
      err.name = 'PollingTimeout';
      err.jobId = jobId;
      err.batchId = batchId;
      self.emit('error', err);
      return;
    }
    self.check(function(err, res) {
      if (err) {
        self.emit('error', err);
      } else {
        if (res.state === 'Failed') {
          if (parseInt(res.numberRecordsProcessed, 10) > 0) {
            self.retrieve();
          } else {
            self.emit('error', new Error(res.stateMessage));
          }
        } else if (res.state === 'Completed') {
          self.retrieve();
        } else {
          self.emit('progress', res);
          setTimeout(poll, interval);
        }
      }
    });
  };
  setTimeout(poll, interval);
};

/**
 * @typedef {Object} Bulk~BatchResultInfo
 * @prop {String} id - Batch result ID
 * @prop {String} batchId - Batch ID which includes this batch result.
 * @prop {String} jobId - Job ID which includes this batch result.
 */

/**
 * Retrieve batch result
 *
 * @method Bulk~Batch#retrieve
 * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}
 */
Batch.prototype.retrieve = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var jobId = this.job.id;
  var job = this.job;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error('Batch not started.');
  }

  return job
    .info()
    .then(function(jobInfo) {
      return bulk._request({
        method: 'GET',
        path: '/job/' + jobId + '/batch/' + batchId + '/result'
      });
    })
    .then(function(res) {
      var results;
      if (job.operation === 'query') {
        bulk._conn;
        res['result-list'].result;
        results = res['result-list'].result;
        results = core.map(core.isArray(results) ? results : [results], function(id) {
          return {
            id: id,
            batchId: batchId,
            jobId: jobId
          };
        });
      } else {
        results = core.map(res, function(ret) {
          return {
            id: ret.Id || null,
            success: ret.Success === 'true',
            errors: ret.Error ? [ret.Error] : []
          };
        });
      }
      self.emit('response', results);
      return results;
    })
    .fail(function(err) {
      self.emit('error', err);
      throw err;
    })
    .thenCall(callback);
};

/**
 * Fetch query result as a record stream
 * @param {String} resultId - Result id
 * @returns {RecordStream} - Record stream, convertible to CSV data stream
 */
Batch.prototype.result = function(resultId) {
  var jobId = this.job.id;
  var batchId = this.id;
  if (!jobId || !batchId) {
    throw new Error('Batch not started.');
  }
  var resultStream = new recordStream.Parsable();
  var resultDataStream = resultStream.stream('csv');
  this._bulk
    ._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
      responseType: 'application/octet-stream'
    })
    .stream()
    .pipe(resultDataStream);
  return resultStream;
};

/*--------------------------------------------*/
/**
 * @private
 */
var BulkApi = function() {
  BulkApi.super_.apply(this, arguments);
};

inherits(BulkApi, httpApi);

BulkApi.prototype.beforeSend = function(request) {
  request.headers = request.headers || {};
  request.headers['X-SFDC-SESSION'] = this._conn.accessToken;
};

BulkApi.prototype.isSessionExpired = function(response) {
  return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
};

BulkApi.prototype.hasErrorInResponseBody = function(body) {
  return !!body.error;
};

BulkApi.prototype.parseError = function(body) {
  return {
    errorCode: body.error.exceptionCode,
    message: body.error.exceptionMessage
  };
};

/*--------------------------------------------*/

/**
 * Class for Bulk API
 *
 * @class
 * @param {Connection} conn - Connection object
 */
var Bulk = function(conn) {
  this._conn = conn;
  this._logger = conn._logger;
};

/**
 * Polling interval in milliseconds
 * @type {Number}
 */
Bulk.prototype.pollInterval = 1000;

/**
 * Polling timeout in milliseconds
 * @type {Number}
 */
Bulk.prototype.pollTimeout = 10000;

/** @private **/
Bulk.prototype._request = function(request, callback) {
  var conn = this._conn;
  request = core.clone(request);
  var baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');
  request.url = baseUrl + request.path;
  var options = { responseType: request.responseType };
  delete request.path;
  delete request.responseType;
  return new BulkApi(this._conn, options).request(request).thenCall(callback);
};

/**
 * Create and start bulkload job and batch
 *
 * @param {String} type - SObject type
 * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
 * @param {Object} [options] - Options for bulk loading operation
 * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
 * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.
 * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
Bulk.prototype.load = function(type, operation, options, input, callback) {
  var self = this;
  if (!type || !operation) {
    throw new Error("Insufficient arguments. At least, 'type' and 'operation' are required.");
  }
  if (!core.isObject(options) || options.constructor !== Object) {
    // when options is not plain hash object, it is omitted
    callback = input;
    input = options;
    options = null;
  }
  var job = this.createJob(type, operation, options);
  job.once('error', function(error) {
    if (batch) {
      batch.emit('error', error); // pass job error to batch
    }
  });
  var batch = job.createBatch();
  var cleanup = function() {
    batch = null;
    job.close();
  };
  var cleanupOnError = function(err) {
    if (err.name !== 'PollingTimeout') {
      cleanup();
    }
  };
  batch.on('response', cleanup);
  batch.on('error', cleanupOnError);
  batch.on('queue', function() {
    batch.poll(self.pollInterval, self.pollTimeout);
  });
  return batch.execute(input, callback);
};

/**
 * Execute bulk query and get record stream
 *
 * @param {String} soql - SOQL to execute in bulk job
 * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream
 */
Bulk.prototype.query = function(soql) {
  var m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
  if (!m) {
    throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
  }
  var type = m[1];
  var self = this;
  var recordStream$1 = new recordStream.Parsable();
  var dataStream = recordStream$1.stream('csv');
  this.load(type, 'query', soql)
    .then(function(results) {
      var streams = results.map(function(result) {
        return self
          .job(result.jobId)
          .batch(result.batchId)
          .result(result.id)
          .stream();
      });

      multistream(streams).pipe(dataStream);
    })
    .fail(function(err) {
      recordStream$1.emit('error', err);
    });
  return recordStream$1;
};

/**
 * Create a new job instance
 *
 * @param {String} type - SObject type
 * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')
 * @param {Object} [options] - Options for bulk loading operation
 * @returns {Bulk~Job}
 */
Bulk.prototype.createJob = function(type, operation, options) {
  return new Job(this, type, operation, options);
};

/**
 * Get a job instance specified by given job ID
 *
 * @param {String} jobId - Job ID
 * @returns {Bulk~Job}
 */
Bulk.prototype.job = function(jobId) {
  return new Job(this, null, null, null, jobId);
};

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
core$2.on('connection:new', function(conn) {
  conn.bulk = new Bulk(conn);
});

/**
 * @file Manages Salesforce Chatter REST API calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

_commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * API class for Chatter REST API call
   *
   * @class
   * @param {Connection} conn Connection
   */
  var Chatter = (module.exports = function(conn) {
    this._conn = conn;
  });

  /**
   * Sending request to API endpoint
   * @private
   */
  Chatter.prototype._request = function(params, callback) {
    if (/^(put|post|patch)$/i.test(params.method)) {
      if (core.isObject(params.body)) {
        params.headers = {
          'Content-Type': 'application/json'
        };
        params.body = JSON.stringify(params.body);
      }
    }
    params.url = this._normalizeUrl(params.url);
    return this._conn.request(params, callback);
  };

  /**
   * Convert path to site root relative url
   * @private
   */
  Chatter.prototype._normalizeUrl = function(url) {
    if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {
      return '/services/data/v' + this._conn.version + url;
    } else if (/^\/v[\d]+\.[\d]+\//.test(url)) {
      return '/services/data' + url;
    } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {
      return '/services/data/v' + this._conn.version + '/chatter' + url;
    } else {
      return url;
    }
  };

  /**
   * @typedef {Object} Chatter~RequestParams
   * @prop {String} method - HTTP method
   * @prop {String} url - Resource URL
   * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)
   */

  /**
   * @typedef {Object} Chatter~RequestResult
   */

  /**
   * Make a request for chatter API resource
   *
   * @param {Chatter~RequestParams} params - Paramters representing HTTP request
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func
   * @returns {Chatter~Request}
   */
  Chatter.prototype.request = function(params, callback) {
    return new Request(this, params).thenCall(callback);
  };

  /**
   * Make a resource request to chatter API
   *
   * @param {String} url - Resource URL
   * @param {Object} [queryParams] - Query parameters (in hash object)
   * @returns {Chatter~Resource}
   */
  Chatter.prototype.resource = function(url, queryParams) {
    return new Resource(this, url, queryParams);
  };

  /**
   * @typedef {Object} Chatter~BatchRequestResult
   * @prop {Boolean} hasError - Flag if the batch has one or more errors
   * @prop {Array.<Object>} results - Batch request results in array
   * @prop {Number} results.statusCode - HTTP response status code
   * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body
   */

  /**
   * Make a batch request to chatter API
   *
   * @params {Array.<Chatter~Request>} requests - Chatter API requests
   * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func
   * @returns {Promise.<Chatter~BatchRequestResult>}
   */
  Chatter.prototype.batch = function(requests, callback) {
    var batchRequests = [],
      batchDeferreds = [];
    core.forEach(requests, function(request) {
      var deferred = promise.defer();
      request._promise = deferred.promise;
      batchRequests.push(request.batchParams());
      batchDeferreds.push(deferred);
    });
    var params = {
      method: 'POST',
      url: this._normalizeUrl('/connect/batch'),
      body: {
        batchRequests: batchRequests
      }
    };
    return this.request(params)
      .then(function(res) {
        core.forEach(res.results, function(result, i) {
          var deferred = batchDeferreds[i];
          if (result.statusCode >= 400) {
            deferred.reject(result.result);
          } else {
            deferred.resolve(result.result);
          }
        });
        return res;
      })
      .thenCall(callback);
  };

  /*--------------------------------------------*/
  /**
   * A class representing chatter API request
   *
   * @protected
   * @class Chatter~Request
   * @implements {Promise.<Chatter~RequestResult>}
   * @param {Chatter} chatter - Chatter API object
   * @param {Chatter~RequestParams} params - Paramters representing HTTP request
   */
  var Request = function(chatter, params) {
    this._chatter = chatter;
    this._params = params;
    this._promise = null;
  };

  /**
   * @typedef {Object} Chatter~BatchRequestParams
   * @prop {String} method - HTTP method
   * @prop {String} url - Resource URL
   * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)
   */

  /**
   * Retrieve parameters in batch request form
   *
   * @method Chatter~Request#batchParams
   * @returns {Chatter~BatchRequestParams}
   */
  Request.prototype.batchParams = function() {
    var params = this._params;
    var batchParams = {
      method: params.method,
      url: this._chatter._normalizeUrl(params.url)
    };
    if (this._params.body) {
      batchParams.richInput = this._params.body;
    }
    return batchParams;
  };

  /**
   * Retrieve parameters in batch request form
   *
   * @method Chatter~Request#promise
   * @returns {Promise.<Chatter~RequestResult>}
   */
  Request.prototype.promise = function() {
    return this._promise || this._chatter._request(this._params);
  };

  /**
   * Returns Node.js Stream object for request
   *
   * @method Chatter~Request#stream
   * @returns {stream.Stream}
   */
  Request.prototype.stream = function() {
    return this._chatter._request(this._params).stream();
  };

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for batch result
   *
   * @method Chatter~Request#then
   */
  Request.prototype.then = function(onResolve, onReject) {
    return this.promise().then(onResolve, onReject);
  };

  /**
   * Promise/A+ extension
   * Call "then" using given node-style callback function
   *
   * @method Chatter~Request#thenCall
   */
  Request.prototype.thenCall = function(callback) {
    return core.isFunction(callback) ? this.promise().thenCall(callback) : this;
  };

  /*--------------------------------------------*/
  /**
   * A class representing chatter API resource
   *
   * @protected
   * @class Chatter~Resource
   * @extends Chatter~Request
   * @param {Chatter} chatter - Chatter API object
   * @param {String} url - Resource URL
   * @param {Object} [queryParams] - Query parameters (in hash object)
   */
  var Resource = function(chatter, url, queryParams) {
    if (queryParams) {
      var qstring = core
        .map(core.keys(queryParams), function(name) {
          return name + '=' + encodeURIComponent(queryParams[name]);
        })
        .join('&');
      url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;
    }
    Resource.super_.call(this, chatter, { method: 'GET', url: url });
    this._url = url;
  };

  inherits(Resource, Request);

  /**
   * Create a new resource
   *
   * @method Chatter~Resource#create
   * @param {Object} data - Data to newly post
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
   * @returns {Chatter~Request}
   */
  Resource.prototype.create = function(data, callback) {
    return this._chatter
      .request({
        method: 'POST',
        url: this._url,
        body: data
      })
      .thenCall(callback);
  };

  /**
   * Retrieve resource content
   *
   * @method Chatter~Resource#retrieve
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
   * @returns {Chatter~Request}
   */
  Resource.prototype.retrieve = function(callback) {
    return this.thenCall(callback);
  };

  /**
   * Update specified resource
   *
   * @method Chatter~Resource#update
   * @param {Obejct} data - Data to update
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
   * @returns {Chatter~Request}
   */
  Resource.prototype.update = function(data, callback) {
    return this._chatter
      .request({
        method: 'POST',
        url: this._url,
        body: data
      })
      .thenCall(callback);
  };

  /**
   * Synonym of Resource#delete()
   *
   * @method Chatter~Resource#del
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
   * @returns {Chatter~Request}
   */
  /**
   * Delete specified resource
   *
   * @method Chatter~Resource#delete
   * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
   * @returns {Chatter~Request}
   */
  Resource.prototype.del = Resource.prototype['delete'] = function(callback) {
    return this._chatter
      .request({
        method: 'DELETE',
        url: this._url
      })
      .thenCall(callback);
  };

  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  core$2.on('connection:new', function(conn) {
    conn.chatter = new Chatter(conn);
  });
});

/*global process, Buffer */

_commonjsHelpers.createCommonjsModule(function(module) {
  /*--------------------------------------------*/
  /**
   * Class for Salesforce Metadata API
   *
   * @class
   * @param {Connection} conn - Connection object
   */
  var Metadata = (module.exports = function(conn) {
    this._conn = conn;
  });

  /**
   * Polling interval in milliseconds
   * @type {Number}
   */
  Metadata.prototype.pollInterval = 1000;

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */
  Metadata.prototype.pollTimeout = 10000;

  /**
   * Call Metadata API SOAP endpoint
   *
   * @private
   */
  Metadata.prototype._invoke = function(method, message, callback) {
    var soapEndpoint = new soap(this._conn, {
      xmlns: 'http://soap.sforce.com/2006/04/metadata',
      endpointUrl: this._conn.instanceUrl + '/services/Soap/m/' + this._conn.version
    });
    return soapEndpoint
      .invoke(method, message)
      .then(function(res) {
        return res.result;
      })
      .thenCall(callback);
  };

  /**
   * @typedef {Object} Metadata~MetadataInfo
   * @prop {String} fullName - The name of the component
   */

  /**
   * Asynchronously adds one or more new metadata components to the organization.
   *
   * @param {String} type - The type of metadata to create
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Metadata~AsyncResultLocator}
   */
  Metadata.prototype.createAsync = function(type, metadata, callback) {
    if (Number(this._conn.version) > 30) {
      throw new Error('Async metadata CRUD calls are not supported on ver 31.0 or later.');
    }
    var convert = function(md) {
      md['@xsi:type'] = type;
      return md;
    };
    var isArray = core.isArray(metadata);
    metadata = isArray ? core.map(metadata, convert) : convert(metadata);
    var res = this._invoke('create', { metadata: metadata });
    return new AsyncResultLocator(this, res, isArray).thenCall(callback);
  };

  /**
   * @typedef {Object} Metadata~SaveResult
   * @prop {Boolean} success - True if metadata is successfully saved
   * @prop {String} fullName - Full name of metadata object
   */

  /**
   * @private
   */
  function convertToSaveResult(result) {
    var saveResult = core.clone(result);
    saveResult.success = saveResult.success === 'true';
    return saveResult;
  }

  /**
   * @typedef {Object} Metadata~UpsertResult
   * @prop {Boolean} success - True if metadata is successfully saved
   * @prop {String} fullName - Full name of metadata object
   * @prop {Boolean} created - True if metadata is newly created
   */

  /**
   * @private
   */
  function convertToUpsertResult(result) {
    var upsertResult = convertToSaveResult(result);
    upsertResult.created = upsertResult.created === 'true';
    return upsertResult;
  }

  /**
   * Synonym of Metadata#create().
   *
   * @method Metadata#createSync
   * @param {String} type - The type of metadata to create
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */
  /**
   * Synchronously adds one or more new metadata components to the organization.
   *
   * @method Metadata#create
   * @param {String} type - The type of metadata to create
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */
  Metadata.prototype.createSync = Metadata.prototype.create = function(type, metadata, callback) {
    var convert = function(md) {
      md['@xsi:type'] = type;
      return md;
    };
    var isArray = core.isArray(metadata);
    metadata = isArray ? core.map(metadata, convert) : convert(metadata);
    return this._invoke('createMetadata', { metadata: metadata })
      .then(function(results) {
        return core.isArray(results) ? core.map(results, convertToSaveResult) : convertToSaveResult(results);
      })
      .thenCall(callback);
  };

  /**
   * @private
   */
  function convertToMetadataInfo(rec) {
    var metadataInfo = core.clone(rec);
    delete metadataInfo.$;
    return metadataInfo;
  }

  /**
   * Synonym of Metadata#read()
   *
   * @method Metadata#readSync
   * @param {String} type - The type of metadata to read
   * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read
   * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function
   * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}
   */
  /**
   * Synchronously read specified metadata components in the organization.
   *
   * @method Metadata#read
   * @param {String} type - The type of metadata to read
   * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read
   * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function
   * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}
   */
  Metadata.prototype.readSync = Metadata.prototype.read = function(type, fullNames, callback) {
    return this._invoke('readMetadata', { type: type, fullNames: fullNames })
      .then(function(res) {
        return core.isArray(res.records)
          ? core.map(res.records, convertToMetadataInfo)
          : convertToMetadataInfo(res.records);
      })
      .thenCall(callback);
  };

  /**
   * @typedef {Object} Metadata~UpdateMetadataInfo
   * @prop {String} currentName - The API name of the component or field before the update
   * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update
   */

  /**
   * Asynchronously updates one or more metadata components in the organization.
   *
   * @param {String} type - The type of metadata to update
   * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Metadata~AsyncResultLocator}
   */
  Metadata.prototype.updateAsync = function(type, updateMetadata, callback) {
    if (Number(this._conn.version) > 30) {
      throw new Error('Async metadata CRUD calls are not supported on ver 31.0 or later.');
    }
    var convert = function(umd) {
      umd.metadata['@xsi:type'] = type;
      return umd;
    };
    var isArray = core.isArray(updateMetadata);
    updateMetadata = isArray ? core.map(updateMetadata, convert) : convert(updateMetadata);
    var res = this._invoke('update', { updateMetadata: updateMetadata });
    return new AsyncResultLocator(this, res, isArray).thenCall(callback);
  };

  /**
   * Synonym of Metadata#update().
   *
   * @method Metadata#updateSync
   * @param {String} type - The type of metadata to update
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */
  /**
   * Synchronously updates one or more metadata components in the organization.
   *
   * @method Metadata#update
   * @param {String} type - The type of metadata to update
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */
  Metadata.prototype.updateSync = Metadata.prototype.update = function(type, metadata, callback) {
    var convert = function(md) {
      md['@xsi:type'] = type;
      return md;
    };
    var isArray = core.isArray(metadata);
    metadata = isArray ? core.map(metadata, convert) : convert(metadata);
    return this._invoke('updateMetadata', { metadata: metadata })
      .then(function(results) {
        return core.isArray(results) ? core.map(results, convertToSaveResult) : convertToSaveResult(results);
      })
      .thenCall(callback);
  };

  /**
   * Synonym of Metadata#upsert().
   *
   * @method Metadata#upsertSync
   * @param {String} type - The type of metadata to upsert
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata
   * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}
   */
  /**
   * Upserts one or more components in your organization's data.
   *
   * @method Metadata#upsert
   * @param {String} type - The type of metadata to upsert
   * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata
   * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}
   */
  Metadata.prototype.upsertSync = Metadata.prototype.upsert = function(type, metadata, callback) {
    var convert = function(md) {
      md['@xsi:type'] = type;
      return md;
    };
    var isArray = core.isArray(metadata);
    metadata = isArray ? core.map(metadata, convert) : convert(metadata);
    return this._invoke('upsertMetadata', { metadata: metadata })
      .then(function(results) {
        return core.isArray(results) ? core.map(results, convertToUpsertResult) : convertToUpsertResult(results);
      })
      .thenCall(callback);
  };

  /**
   * Asynchronously deletes specified metadata components in the organization.
   *
   * @param {String} type - The type of metadata to delete
   * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Metadata~AsyncResultLocator}
   */
  Metadata.prototype.deleteAsync = function(type, metadata, callback) {
    if (Number(this._conn.version) > 30) {
      throw new Error('Async metadata CRUD calls are not supported on ver 31.0 or later.');
    }
    var convert = function(md) {
      if (core.isString(md)) {
        md = { fullName: md };
      }
      md['@xsi:type'] = type;
      return md;
    };
    var isArray = core.isArray(metadata);
    metadata = isArray ? core.map(metadata, convert) : convert(metadata);
    var res = this._invoke('delete', { metadata: metadata });
    return new AsyncResultLocator(this, res, isArray).thenCall(callback);
  };

  /**
   * Synonym of Metadata#delete().
   *
   * @deprecated
   * @method Metadata#del
   * @param {String} [type] - The type of metadata to delete
   * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Metadata~AsyncResultLocator}
   */
  /**
   * Synonym of Metadata#delete().
   *
   * @method Metadata#deleteSync
   * @param {String} type - The type of metadata to delete
   * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */

  /**
   * Synchronously deletes specified metadata components in the organization.
   *
   * @method Metadata#delete
   * @param {String} type - The type of metadata to delete
   * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.
   * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
   */
  Metadata.prototype.del = Metadata.prototype.deleteSync = Metadata.prototype['delete'] = function(
    type,
    fullNames,
    callback
  ) {
    return this._invoke('deleteMetadata', { type: type, fullNames: fullNames })
      .then(function(results) {
        return core.isArray(results) ? core.map(results, convertToSaveResult) : convertToSaveResult(results);
      })
      .thenCall(callback);
  };

  /**
   * Rename fullname of a metadata component in the organization
   *
   * @param {String} type - The type of metadata to delete
   * @param {String} oldFullName - The original fullName of metadata
   * @param {String} newFullName - The new fullName of metadata
   * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~SaveResult>}
   */
  Metadata.prototype.rename = function(type, oldFullName, newFullName, callback) {
    return this._invoke('renameMetadata', { type: type, oldFullName: oldFullName, newFullName: newFullName })
      .then(function(result) {
        return convertToSaveResult(result);
      })
      .thenCall(callback);
  };

  /**
   * Checks the status of asynchronous metadata calls
   *
   * @param {String|Array.<String>} ids - The asynchronous process ID(s)
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Metadata~AsyncResultLocator}
   */
  Metadata.prototype.checkStatus = function(ids, callback) {
    var isArray = core.isArray(ids);
    var res = this._invoke('checkStatus', { asyncProcessId: ids });
    return new AsyncResultLocator(this, res, isArray).thenCall(callback);
  };

  /**
   * @typedef {Object} Metadata~DescribeMetadataResult
   * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes
   * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component
   * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component
   * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not
   * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file
   * @prop {String} metadataObjects.suffix - The file suffix for this component
   * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component
   * @prop {String} organizationNamespace - The namespace of the organization
   * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not
   * @prop {Boolean} testRequired - Indicates whether tests are required or not
   */

  /**
   * Retrieves the metadata which describes your organization, including Apex classes and triggers,
   * custom objects, custom fields on standard objects, tab sets that define an app,
   * and many other components.
   *
   * @param {String} [version] - The API version for which you want metadata; for example, 29.0
   * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~DescribeMetadataResult>}
   */
  Metadata.prototype.describe = function(version, callback) {
    if (!core.isString(version)) {
      callback = version;
      version = this._conn.version;
    }
    return this._invoke('describeMetadata', { asOfVersion: version })
      .then(function(res) {
        res.metadataObjects = core.isArray(res.metadataObjects) ? res.metadataObjects : [res.metadataObjects];
        res.metadataObjects = core.map(res.metadataObjects, function(mo) {
          if (mo.childXmlNames) {
            mo.childXmlNames = core.isArray(mo.childXmlNames) ? mo.childXmlNames : [mo.childXmlNames];
          }
          mo.inFolder = mo.inFolder === 'true';
          mo.metaFile = mo.metaFile === 'true';
          return mo;
        });
        res.partialSaveAllowed = res.partialSaveAllowed === 'true';
        res.testRequired = res.testRequired === 'true';
        return res;
      })
      .thenCall(callback);
  };

  /**
   * @typedef {Object} Metadata~ListMetadataQuery
   * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass
   * @prop {String} [folder] - The folder associated with the component.
   */

  /**
   * @typedef {Object} Metadata~FileProperties
   * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass
   * @prop {String} createdById - ID of the user who created the file
   * @prop {String} createdByName - Name of the user who created the file
   * @prop {String} createdDate - Date and time when the file was created
   * @prop {String} fileName - Name of the file
   * @prop {String} fullName - The file developer name used as a unique identifier for API access
   * @prop {String} id - ID of the file
   * @prop {String} lastModifiedById - ID of the user who last modified the file
   * @prop {String} lastModifiedByName - Name of the user who last modified the file
   * @prop {String} lastModifiedDate - Date and time that the file was last modified
   * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package
   * @prop {String} [namespacePrefix] - The namespace prefix of the component
   */

  /**
   * Retrieves property information about metadata components in your organization
   *
   * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list
   * @param {String} [version] - The API version for which you want metadata; for example, 29.0
   * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function
   * @returns {Promise.<Array.<Metadata~FileProperties>>}
   */
  Metadata.prototype.list = function(queries, version, callback) {
    if (!core.isString(version)) {
      callback = version;
      version = this._conn.version;
    }
    if (!core.isArray(queries)) {
      queries = [queries];
    }
    return this._invoke('listMetadata', { queries: queries, asOfVersion: version }, callback);
  };

  /**
   * @typedef {Object} Metadata~RetrieveRequest
   */

  /**
   * Retrieves XML file representations of components in an organization
   *
   * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved
   * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function
   * @returns {Metadata~RetrieveResultLocator}
   */
  Metadata.prototype.retrieve = function(request, callback) {
    var res = this._invoke('retrieve', { request: request });
    return new RetrieveResultLocator(this, res).thenCall(callback);
  };

  /**
   * Checks the status of declarative metadata call retrieve() and returns the zip file contents
   *
   * @param {String} id - Async process id returned from previous retrieve request
   * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~RetrieveResult>}
   */
  Metadata.prototype.checkRetrieveStatus = function(id, callback) {
    return this._invoke('checkRetrieveStatus', { asyncProcessId: id }, callback);
  };

  /**
   * Deploy components into an organization using zipped file representations
   *
   * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string
   * @param {Object} [options] - Options used in deployment
   * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.
   * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.
   * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).
   * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.
   * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).
   * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.
   * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).
   * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.
   * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.
   * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).
   * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function
   * @returns {Metadata~DeployResultLocator}
   */
  Metadata.prototype.deploy = function(zipInput, options, callback) {
    if (!options || core.isFunction(options)) {
      callback = options;
      options = {};
    }
    var deferred = promise.defer();
    if (core.isObject(zipInput) && core.isFunction(zipInput.pipe)) {
      var bufs = [];
      zipInput.on('data', function(d) {
        bufs.push(d);
      });
      zipInput.on('end', function() {
        deferred.resolve(Buffer.concat(bufs).toString('base64'));
      });
      // zipInput.resume();
    } else if (zipInput instanceof Buffer) {
      deferred.resolve(zipInput.toString('base64'));
    } else if (zipInput instanceof String || typeof zipInput === 'string') {
      deferred.resolve(zipInput);
    } else {
      throw 'Unexpected zipInput type';
    }

    var self = this;
    var res = deferred.promise.then(function(zipContentB64) {
      return self._invoke(
        'deploy',
        {
          ZipFile: zipContentB64,
          DeployOptions: options
        },
        callback
      );
    });
    return new DeployResultLocator(this, res).thenCall(callback);
  };

  /**
   * Checks the status of declarative metadata call deploy()
   *
   * @param {String} id - Async process id returned from previous deploy request
   * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)
   * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~DeployResult>}
   */
  Metadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {
    if (core.isObject(includeDetails) || core.isBoolean(includeDetails)) {
      includeDetails = !!includeDetails;
    } else {
      callback = includeDetails;
      includeDetails = false;
    }
    return this._invoke('checkDeployStatus', {
      asyncProcessId: id,
      includeDetails: includeDetails
    })
      .then(function(res) {
        res.done = res.done === 'true';
        res.success = res.success === 'true';
        res.checkOnly = res.checkOnly === 'true';
        res.runTestsEnabled = res.runTestsEnabled === 'true';
        if (res.ignoreWarnings) {
          res.ignoreWarnings = res.ignoreWarnings === 'true';
        }
        if (res.rollbackOnError) {
          res.rollbackOnError = res.rollbackOnError === 'true';
        }
        res.numberComponentErrors = Number(res.numberComponentErrors);
        res.numberComponentsDeployed = Number(res.numberComponentsDeployed);
        res.numberComponentsTotal = Number(res.numberComponentsTotal);
        res.numberTestErrors = Number(res.numberTestErrors);
        res.numberTestsCompleted = Number(res.numberTestsCompleted);
        res.numberTestsTotal = Number(res.numberTestsTotal);

        return res;
      })
      .thenCall(callback);
  };

  /*--------------------------------------------*/

  /**
   * @typedef {Object} Metadata~AsyncResult
   * @prop {Boolean} done - Indicates whether the call has completed or not
   * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved
   * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.
   * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned
   * @prop {String} [message] - Message corresponding to the statusCode field returned
   */

  /**
   * The locator class for Metadata API asynchronous call result
   *
   * @protected
   * @class Metadata~AsyncResultLocator
   * @extends events.EventEmitter
   * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>
   * @param {Metadata} meta - Metadata API object
   * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info
   * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object
   */
  var AsyncResultLocator = function(meta, results, isArray) {
    this._meta = meta;
    this._results = results;
    this._isArray = isArray;
  };

  inherits(AsyncResultLocator, events__default['default'].EventEmitter);

  /**
   * Promise/A+ interface
   * http://promises-aplus.github.io/promises-spec/
   *
   * Delegate to deferred promise, return promise instance for batch result
   *
   * @method Metadata~AsyncResultLocator#then
   */
  AsyncResultLocator.prototype.then = function(onResolve, onReject) {
    var self = this;
    return this._results.then(function(results) {
      var convertType = function(res) {
        if (res.$ && res.$['xsi:nil'] === 'true') {
          return null;
        }
        res.done = res.done === 'true';
        return res;
      };
      results = core.isArray(results) ? core.map(results, convertType) : convertType(results);
      if (self._isArray && !core.isArray(results)) {
        results = [results];
      }
      return onResolve(results);
    }, onReject);
  };

  /**
   * Promise/A+ extension
   * Call "then" using given node-style callback function
   *
   * @method Metadata~AsyncResultLocator#thenCall
   */
  AsyncResultLocator.prototype.thenCall = function(callback) {
    return core.isFunction(callback)
      ? this.then(
          function(res) {
            process.nextTick(function() {
              callback(null, res);
            });
          },
          function(err) {
            process.nextTick(function() {
              callback(err);
            });
          }
        )
      : this;
  };

  /**
   * Check the status of async request
   *
   * @method Metadata~AsyncResultLocator#check
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}
   */
  AsyncResultLocator.prototype.check = function(callback) {
    var self = this;
    var meta = this._meta;
    return this.then(function(results) {
      var ids = core.isArray(results)
        ? core.map(results, function(res) {
            return res.id;
          })
        : results.id;
      self._ids = ids;
      return meta.checkStatus(ids);
    }).thenCall(callback);
  };

  /**
   * Polling until async call status becomes complete or error
   *
   * @method Metadata~AsyncResultLocator#poll
   * @param {Number} interval - Polling interval in milliseconds
   * @param {Number} timeout - Polling timeout in milliseconds
   */
  AsyncResultLocator.prototype.poll = function(interval, timeout) {
    var self = this;
    var startTime = new Date().getTime();
    var poll = function() {
      var now = new Date().getTime();
      if (startTime + timeout < now) {
        var errMsg = 'Polling time out.';
        if (self._ids) {
          errMsg += ' Process Id = ' + self._ids;
        }
        self.emit('error', new Error(errMsg));
        return;
      }
      self.check().then(
        function(results) {
          var done = true;
          var resultArr = core.isArray(results) ? results : [results];
          for (var i = 0, len = resultArr.length; i < len; i++) {
            var result = resultArr[i];
            if (result && !result.done) {
              self.emit('progress', result);
              done = false;
            }
          }
          if (done) {
            self.emit('complete', results);
          } else {
            setTimeout(poll, interval);
          }
        },
        function(err) {
          self.emit('error', err);
        }
      );
    };
    setTimeout(poll, interval);
  };

  /**
   * Check and wait until the async requests become in completed status
   *
   * @method Metadata~AsyncResultLocator#complete
   * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
   * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}
   */
  AsyncResultLocator.prototype.complete = function(callback) {
    var deferred = promise.defer();
    this.on('complete', function(results) {
      deferred.resolve(results);
    });
    this.on('error', function(err) {
      deferred.reject(err);
    });
    var meta = this._meta;
    this.poll(meta.pollInterval, meta.pollTimeout);
    return deferred.promise.thenCall(callback);
  };

  /*--------------------------------------------*/
  /**
   * The locator class to track retreive() Metadata API call result
   *
   * @protected
   * @class Metadata~RetrieveResultLocator
   * @extends Metadata~AsyncResultLocator
   * @param {Metadata} meta - Metadata API object
   * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()
   */
  var RetrieveResultLocator = function(meta, result) {
    RetrieveResultLocator.super_.call(this, meta, result);
  };

  inherits(RetrieveResultLocator, AsyncResultLocator);

  /**
   * @typedef {Object} Metadata~RetrieveResult
   * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml
   * @prop {String} id - ID of the component being retrieved
   * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call
   * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data
   */

  /**
   * Check and wait until the async request becomes in completed status,
   * and retrieve the result data.
   *
   * @memthod Metadata~RetrieveResultLocator#complete
   * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~RetrieveResult>}
   */
  RetrieveResultLocator.prototype.complete = function(callback) {
    var meta = this._meta;
    return RetrieveResultLocator.super_.prototype.complete
      .call(this)
      .then(function(result) {
        return meta.checkRetrieveStatus(result.id);
      })
      .thenCall(callback);
  };

  /**
   * Change the retrieved result to Node.js readable stream
   *
   * @method Metadata~RetrieveResultLocator#stream
   * @returns {stream.Readable}
   */
  RetrieveResultLocator.prototype.stream = function() {
    var self = this;
    var resultStream = new readable.Readable();
    var reading = false;
    resultStream._read = function() {
      if (reading) {
        return;
      }
      reading = true;
      self.complete(function(err, result) {
        if (err) {
          resultStream.emit('error', err);
        } else {
          resultStream.push(new Buffer(result.zipFile, 'base64'));
          resultStream.push(null);
        }
      });
    };
    return resultStream;
  };

  /*--------------------------------------------*/
  /**
   * The locator class to track deploy() Metadata API call result
   *
   * @protected
   * @class Metadata~DeployResultLocator
   * @extends Metadata~AsyncResultLocator
   * @param {Metadata} meta - Metadata API object
   * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
   */
  var DeployResultLocator = function(meta, result) {
    DeployResultLocator.super_.call(this, meta, result);
  };

  inherits(DeployResultLocator, AsyncResultLocator);

  /**
   * @typedef {Object} Metadata~DeployResult
   * @prop {String} id - ID of the component being deployed
   * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not
   * @prop {String} completedDate - Timestamp for when the deployment process ended
   * @prop {String} createdDate - Timestamp for when the deploy() call was received
   * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call
   * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id
   * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field
   * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield
   * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings
   * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process
   * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment
   * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process
   * @prop {Number} numberComponentsTotal - The total number of components in the deployment
   * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment
   * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment
   * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment
   * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.
   * @prop {String} startDate - Timestamp for when the deployment process began
   * @prop {String} status - Indicates the current state of the deployment
   * @prop {Boolean} success - Indicates whether the deployment was successful or not
   */

  /**
   * Check and wait until the async request becomes in completed status,
   * and retrieve the result data.
   *
   * @method Metadata~DeployResultLocator#complete
   * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function
   * @returns {Promise.<Metadata~DeployResult>}
   */
  DeployResultLocator.prototype.complete = function(includeDetails, callback) {
    if (core.isFunction(includeDetails)) {
      callback = includeDetails;
      includeDetails = false;
    }
    var meta = this._meta;
    return DeployResultLocator.super_.prototype.complete
      .call(this)
      .then(function(result) {
        return meta.checkDeployStatus(result.id, includeDetails);
      })
      .thenCall(callback);
  };

  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  core$2.on('connection:new', function(conn) {
    conn.metadata = new Metadata(conn);
  });
});

/**
 * @file Salesforce SOAP API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

_commonjsHelpers.createCommonjsModule(function(module) {
  /**
   * API class for Partner SOAP call
   *
   * @class
   * @param {Connection} conn - Connection
   */
  var SoapApi = (module.exports = function(conn) {
    this._conn = conn;
  });

  /**
   * Call SOAP Api (Partner) endpoint
   * @private
   */
  SoapApi.prototype._invoke = function(method, message, schema, callback) {
    var soapEndpoint = new soap(this._conn, {
      xmlns: 'urn:partner.soap.sforce.com',
      endpointUrl: this._conn.instanceUrl + '/services/Soap/u/' + this._conn.version
    });
    return soapEndpoint
      .invoke(method, message, { result: schema })
      .then(function(res) {
        return res.result;
      })
      .thenCall(callback);
  };

  /* */
  var Schemas = {};

  /**
   * @typedef SoapApi~LeadConvert
   * @prop {String} convertedStatus - Status of converted lead
   * @prop {String} leadId - Lead record Id to convert
   * @prop {String} [accountId] - Account record Id to assign the converted record
   * @prop {String} [contactId] - Contact record Id to assign the converted record
   * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity
   * @prop {String} [opportunityName] - Name of opportunity to create
   * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source
   * @prop {String} [ownerId] - Owner Id
   * @prop {Boolean} [sendNotificationEmail] - True if send notification email
   */
  /**
   * @typedef SoapApi~LeadConvertResult
   * @prop {String} leadId - Lead record Id to convert
   * @prop {String} [accountId] - Account record Id of converted lead
   * @prop {String} [contactId] - Contact record Id of converted lead
   * @prop {String} [opportunityId] - Opportunity record Id created in conversion
   * @prop {Boolean} success - True if successfully converted
   * @prop {Array.<Object>} errors - Error
   */
  /**
   * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.
   *
   * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts
   * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function
   * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}
   */
  SoapApi.prototype.convertLead = function(leadConverts, callback) {
    var schema = core.isArray(leadConverts) ? [Schemas.LeadConvertResult] : Schemas.LeadConvertResult;
    return this._invoke('convertLead', { leadConverts: leadConverts }, schema, callback);
  };
  Schemas.LeadConvertResult = {
    success: 'boolean',
    errors: [],
    leadId: 'string',
    accountId: 'string',
    contactId: 'string',
    opportunityId: 'string'
  };

  /**
   * @typedef SoapApi~MergeRequest
   * @prop {Object} masterRecord - The merge destination record
   * @prop {Array.<String>} recordToMergeIds - Ids of records to merge
   */
  /**
   * @typedef SoapApi~MergeResult
   * @prop {Boolean} success - True if successfully merged
   * @prop {Array.<Object>} errors - Error
   * @prop {String} id - ID of the master record
   * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record
   * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge
   */

  /**
   * Merge up to three records into one
   *
   * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests
   * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function
   * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}
   */
  SoapApi.prototype.merge = function(mergeRequests, callback) {
    var schema = core.isArray(mergeRequests) ? [Schemas.MergeResult] : Schemas.MergeResult;
    return this._invoke('merge', { mergeRequests: mergeRequests }, schema, callback);
  };
  Schemas.MergeResult = {
    success: 'boolean',
    errors: [],
    id: 'string',
    mergedRecordIds: ['string'],
    updatedRelatedIds: ['string']
  };

  /**
   * @typedef SoapApi~EmptyRecycleBinResult
   * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin
   * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record
   * @prop {Array.<Object>} errors - Errors
   */
  /**
   * Delete records from the recycle bin immediately
   *
   * @param {Array.<String>} ids - Record ids to empty from recycle bin
   * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}
   */
  SoapApi.prototype.emptyRecycleBin = function(ids, callback) {
    return this._invoke('emptyRecycleBin', { ids: ids }, [Schemas.EmptyRecycleBinResult], callback);
  };
  Schemas.EmptyRecycleBinResult = {
    id: 'string',
    success: 'boolean',
    errors: []
  };

  /**
   * @typedef SoapApi~DescribeTabSetResult
   * @prop {String} label - The display label for this standard or custom app
   * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app
   * @prop {String} namespace - Namespace of application package
   * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app
   * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app
   */
  /**
   * @typedef SoapApi~DescribeTab
   * @prop {Array.<Object>} colors - Array of color information used for a tab
   * @prop {Boolean} custom - true if this is a custom tab
   * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab
   * @prop {Array.<Object>} icons - Array of icon information used for a tab
   * @prop {String} label - The display label for this tab
   * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab
   * @prop {String} name - The API name of the tab
   * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab
   * @prop {String} url - A fully qualified URL for viewing this tab
   */
  /**
   * Returns information about the standard and custom apps available to the logged-in user
   *
   * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function
   * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}
   */
  SoapApi.prototype.describeTabs = function(callback) {
    return this._invoke('describeTabs', {}, [Schemas.DescribeTabSetResult], callback);
  };
  Schemas.DescribeTabSetResult = {
    label: 'string',
    logoUrl: 'string',
    namespace: 'string',
    selected: 'boolean',
    tabs: [
      {
        colors: [
          {
            theme: 'string',
            color: 'string',
            context: 'string'
          }
        ],
        iconUrl: 'string',
        icons: [
          {
            theme: 'string',
            height: 'number',
            width: 'number',
            url: 'string',
            contentType: 'string'
          }
        ],
        label: 'string',
        custom: 'boolean',
        miniIconUrl: 'string',
        name: 'string',
        sobjectName: 'string',
        url: 'string'
      }
    ]
  };

  /**
   * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API
   *
   * @typedef SoapApi~ServerTimestampResult
   * @prop {String} timestamp - Timestamp
   */
  /**
   * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~ServerTimestampResult>}
   */
  SoapApi.prototype.getServerTimestamp = function(callback) {
    return this._invoke('getServerTimestamp', {}, Schemas.GetServerTimestampResult, callback);
  };
  Schemas.GetServerTimestampResult = {
    timestamp: 'string'
  };

  /**
   * @typedef SoapApi~UserInfoResult
   * @prop {Boolean} accessibilityMode
   * @prop {String} currencySymbol
   * @prop {Number} orgAttachmentFileSizeLimit
   * @prop {String} orgDefaultCurrencyIsoCode
   * @prop {String} orgDisallowHtmlAttachments
   * @prop {Boolean} orgHasPersonAccounts
   * @prop {String} organizationId
   * @prop {Boolean} organizationMultiCurrency
   * @prop {String} organizationName
   * @prop {String} profileId
   * @prop {String} roleId
   * @prop {Number} sessionSecondsValid
   * @prop {String} userDefaultCurrencyIsoCode
   * @prop {String} userEmail
   * @prop {String} userFullName
   * @prop {String} userId
   * @prop {String} userLanguage
   * @prop {String} userLocale
   * @prop {String} userName
   * @prop {String} userTimeZone
   * @prop {String} userType
   * @prop {String} userUiSkin
   */
  /**
   * Retrieves personal information for the user associated with the current session
   *
   * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~UserInfoResult>}
   */
  SoapApi.prototype.getUserInfo = function(callback) {
    return this._invoke('getUserInfo', {}, Schemas.GetUserInfoResult, callback);
  };
  Schemas.GetUserInfoResult = {
    accessibilityMode: 'boolean',
    currencySymbol: 'string',
    orgAttachmentFileSizeLimit: 'number',
    orgDefaultCurrencyIsoCode: 'string',
    orgDisallowHtmlAttachments: 'boolean',
    orgHasPersonAccounts: 'boolean',
    organizationId: 'string',
    organizationMultiCurrency: 'boolean',
    organizationName: 'string',
    profileId: 'string',
    roleId: 'string',
    sessionSecondsValid: 'number',
    userDefaultCurrencyIsoCode: 'string',
    userEmail: 'string',
    userFullName: 'string',
    userId: 'string',
    userLanguage: 'string',
    userLocale: 'string',
    userName: 'string',
    userTimeZone: 'string',
    userType: 'string',
    userUiSkin: 'string'
  };

  /**
   * Sets the specified user’s password to the specified value
   *
   * @param {String} userId - User Id to set password
   * @param {String} password - New password
   * @param {Callback.<String>} [callback] - Callback function
   * @returns {Promise.<String>}
   */
  SoapApi.prototype.setPassword = function(userId, password, callback) {
    return this._invoke('setPassword', { userId: userId, password: password }, callback);
  };

  /**
   * @typedef SoapApi~ResetPasswordResult
   * @prop {String} password
   */
  /**
   * Resets the specified user’s password
   *
   * @param {String} userId - User Id to set password
   * @param {String} password - New password
   * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~ResetPasswordResult>}
   */
  SoapApi.prototype.resetPassword = function(userId, callback) {
    return this._invoke('resetPassword', { userId: userId }, callback);
  };

  /**
   * Adds one or more new records to your organization’s data
   *
   * @param {Array.<Object>} sObjects - Records to insert
   * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~SaveResult>}
   */
  SoapApi.prototype.create = function(sObjects, callback) {
    var schema = core.isArray(sObjects) ? [Schemas.SaveResult] : Schemas.SaveResult;
    var args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:sObjects': sObjects
    };
    return this._invoke('create', args, schema, callback);
  };

  /**
   * Updates one or more existing records in your organization’s data.
   *
   * @param {Array.<Object>} sObjects - Records to update
   * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~SaveResult>}
   */
  SoapApi.prototype.update = function(sObjects, callback) {
    var schema = core.isArray(sObjects) ? [Schemas.SaveResult] : Schemas.SaveResult;
    var args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:sObjects': sObjects
    };
    return this._invoke('update', args, schema, callback);
  };

  Schemas.SaveResult = {
    success: 'boolean',
    errors: [],
    id: 'string'
  };

  /**
   * Creates new records and updates existing records in your organization’s data.
   *
   * @param {Array.<Object>} sObjects - Records to upsert
   * @param {Callback.<SoapApi~UpsertResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~UpsertResult>}
   */
  SoapApi.prototype.upsert = function(externalIdFieldName, sObjects, callback) {
    var schema = core.isArray(sObjects) ? [Schemas.UpsertResult] : Schemas.UpsertResult;
    var args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:externalIDFieldName': externalIdFieldName,
      'ns1:sObjects': sObjects
    };
    return this._invoke('upsert', args, schema, callback);
  };

  Schemas.UpsertResult = {
    created: 'boolean',
    success: 'boolean',
    errors: [],
    id: 'string'
  };

  /**
   * Deletes one or more records from your organization’s data
   *
   * @param {Array.<Object>} ids - Id of records to delete
   * @param {Callback.<SoapApi~DeleteResult>} [callback] - Callback function
   * @returns {Promise.<SoapApi~DeleteResult>}
   */
  SoapApi.prototype.delete = function(ids, callback) {
    var schema = core.isArray(ids) ? [Schemas.DeleteResult] : Schemas.DeleteResult;
    var args = {
      '@xmlns': 'urn:partner.soap.sforce.com',
      '@xmlns:ns1': 'sobject.partner.soap.sforce.com',
      'ns1:ids': ids
    };
    return this._invoke('delete', args, schema, callback);
  };

  Schemas.DeleteResult = {
    success: 'boolean',
    errors: [],
    id: 'string'
  };

  /*--------------------------------------------*/
  /*
   * Register hook in connection instantiation for dynamically adding this API module features
   */
  core$2.on('connection:new', function(conn) {
    conn.soap = new SoapApi(conn);
  });

  module.exports = SoapApi;
});

var constants = {
  VERSION: '1.2.4',

  BAYEUX_VERSION: '1.0',
  ID_LENGTH: 160,
  JSONP_CALLBACK: 'jsonpcallback',
  CONNECTION_TYPES: [
    'long-polling',
    'cross-origin-long-polling',
    'callback-polling',
    'websocket',
    'eventsource',
    'in-process'
  ],

  MANDATORY_CONNECTION_TYPES: ['long-polling', 'callback-polling', 'in-process']
};

// http://assanka.net/content/tech/2009/09/02/json2-js-vs-prototype/

var to_json = function(object) {
  return JSON.stringify(object, function(key, value) {
    return this[key] instanceof Array ? this[key] : value;
  });
};

var Logging = {
  LOG_LEVELS: {
    fatal: 4,
    error: 3,
    warn: 2,
    info: 1,
    debug: 0
  },

  writeLog: function(messageArgs, level) {
    var logger = Logging.logger || (Logging.wrapper || Logging).logger;
    if (!logger) return;

    var args = Array.prototype.slice.apply(messageArgs),
      banner = '[Faye',
      klass = this.className,
      message = args.shift().replace(/\?/g, function() {
        try {
          return to_json(args.shift());
        } catch (error) {
          return '[Object]';
        }
      });

    if (klass) banner += '.' + klass;
    banner += '] ';

    if (typeof logger[level] === 'function') logger[level](banner + message);
    else if (typeof logger === 'function') logger(banner + message);
  }
};

for (var key$2 in Logging.LOG_LEVELS)
  (function(level) {
    Logging[level] = function() {
      this.writeLog(arguments, level);
    };
  })(key$2);

var logging = Logging;

var extend$1 = function(dest, source, overwrite) {
  if (!source) return dest;
  for (var key in source) {
    if (!source.hasOwnProperty(key)) continue;
    if (dest.hasOwnProperty(key) && overwrite === false) continue;
    if (dest[key] !== source[key]) dest[key] = source[key];
  }
  return dest;
};

var _class = function(parent, methods) {
  if (typeof parent !== 'function') {
    methods = parent;
    parent = Object;
  }

  var klass = function() {
    if (!this.initialize) return this;
    return this.initialize.apply(this, arguments) || this;
  };

  var bridge = function() {};
  bridge.prototype = parent.prototype;

  klass.prototype = new bridge();
  extend$1(klass.prototype, methods);

  return klass;
};

var PENDING = 0,
  FULFILLED = 1,
  REJECTED = 2;

var RETURN = function(x) {
    return x;
  },
  THROW = function(x) {
    throw x;
  };

var Promise$2 = function(task) {
  this._state = PENDING;
  this._onFulfilled = [];
  this._onRejected = [];

  if (typeof task !== 'function') return;
  var self = this;

  task(
    function(value) {
      resolve$2(self, value);
    },
    function(reason) {
      reject$1(self, reason);
    }
  );
};

Promise$2.prototype.then = function(onFulfilled, onRejected) {
  var next = new Promise$2();
  registerOnFulfilled(this, onFulfilled, next);
  registerOnRejected(this, onRejected, next);
  return next;
};

Promise$2.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

var registerOnFulfilled = function(promise, onFulfilled, next) {
  if (typeof onFulfilled !== 'function') onFulfilled = RETURN;
  var handler = function(value) {
    invoke(onFulfilled, value, next);
  };

  if (promise._state === PENDING) {
    promise._onFulfilled.push(handler);
  } else if (promise._state === FULFILLED) {
    handler(promise._value);
  }
};

var registerOnRejected = function(promise, onRejected, next) {
  if (typeof onRejected !== 'function') onRejected = THROW;
  var handler = function(reason) {
    invoke(onRejected, reason, next);
  };

  if (promise._state === PENDING) {
    promise._onRejected.push(handler);
  } else if (promise._state === REJECTED) {
    handler(promise._reason);
  }
};

var invoke = function(fn, value, next) {
  driver.asap_1(function() {
    _invoke(fn, value, next);
  });
};

var _invoke = function(fn, value, next) {
  var outcome;

  try {
    outcome = fn(value);
  } catch (error) {
    return reject$1(next, error);
  }

  if (outcome === next) {
    reject$1(next, new TypeError('Recursive promise chain detected'));
  } else {
    resolve$2(next, outcome);
  }
};

var resolve$2 = function(promise, value) {
  var called = false,
    type,
    then;

  try {
    type = typeof value;
    then = value !== null && (type === 'function' || type === 'object') && value.then;

    if (typeof then !== 'function') return fulfill(promise, value);

    then.call(
      value,
      function(v) {
        if (!(called ^ (called = true))) return;
        resolve$2(promise, v);
      },
      function(r) {
        if (!(called ^ (called = true))) return;
        reject$1(promise, r);
      }
    );
  } catch (error) {
    if (!(called ^ (called = true))) return;
    reject$1(promise, error);
  }
};

var fulfill = function(promise, value) {
  if (promise._state !== PENDING) return;

  promise._state = FULFILLED;
  promise._value = value;
  promise._onRejected = [];

  var onFulfilled = promise._onFulfilled,
    fn;
  while ((fn = onFulfilled.shift())) fn(value);
};

var reject$1 = function(promise, reason) {
  if (promise._state !== PENDING) return;

  promise._state = REJECTED;
  promise._reason = reason;
  promise._onFulfilled = [];

  var onRejected = promise._onRejected,
    fn;
  while ((fn = onRejected.shift())) fn(reason);
};

Promise$2.resolve = function(value) {
  return new Promise$2(function(resolve, reject) {
    resolve(value);
  });
};

Promise$2.reject = function(reason) {
  return new Promise$2(function(resolve, reject) {
    reject(reason);
  });
};

Promise$2.all = function(promises) {
  return new Promise$2(function(resolve, reject) {
    var list = [],
      n = promises.length,
      i;

    if (n === 0) return resolve(list);

    for (i = 0; i < n; i++)
      (function(promise, i) {
        Promise$2.resolve(promise).then(function(value) {
          list[i] = value;
          if (--n === 0) resolve(list);
        }, reject);
      })(promises[i], i);
  });
};

Promise$2.race = function(promises) {
  return new Promise$2(function(resolve, reject) {
    for (var i = 0, n = promises.length; i < n; i++) Promise$2.resolve(promises[i]).then(resolve, reject);
  });
};

Promise$2.deferred = Promise$2.pending = function() {
  var tuple = {};

  tuple.promise = new Promise$2(function(resolve, reject) {
    tuple.resolve = resolve;
    tuple.reject = reject;
  });
  return tuple;
};

var promise$2 = Promise$2;

var uri$1 = {
  isURI: function(uri) {
    return uri && uri.protocol && uri.host && uri.path;
  },

  isSameOrigin: function(uri) {
    return uri.protocol === location.protocol && uri.hostname === location.hostname && uri.port === location.port;
  },

  parse: function(url) {
    if (typeof url !== 'string') return url;
    var uri = {},
      parts,
      query,
      pairs,
      i,
      n,
      data;

    var consume = function(name, pattern) {
      url = url.replace(pattern, function(match) {
        uri[name] = match;
        return '';
      });
      uri[name] = uri[name] || '';
    };

    consume('protocol', /^[a-z]+\:/i);
    consume('host', /^\/\/[^\/\?#]+/);

    if (!/^\//.test(url) && !uri.host) url = location.pathname.replace(/[^\/]*$/, '') + url;

    consume('pathname', /^[^\?#]*/);
    consume('search', /^\?[^#]*/);
    consume('hash', /^#.*/);

    uri.protocol = uri.protocol || location.protocol;

    if (uri.host) {
      uri.host = uri.host.substr(2);
      parts = uri.host.split(':');
      uri.hostname = parts[0];
      uri.port = parts[1] || '';
    } else {
      uri.host = location.host;
      uri.hostname = location.hostname;
      uri.port = location.port;
    }

    uri.pathname = uri.pathname || '/';
    uri.path = uri.pathname + uri.search;

    query = uri.search.replace(/^\?/, '');
    pairs = query ? query.split('&') : [];
    data = {};

    for (i = 0, n = pairs.length; i < n; i++) {
      parts = pairs[i].split('=');
      data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');
    }

    uri.query = data;

    uri.href = this.stringify(uri);
    return uri;
  },

  stringify: function(uri) {
    var string = uri.protocol + '//' + uri.hostname;
    if (uri.port) string += ':' + uri.port;
    string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');
    return string;
  },

  queryString: function(query) {
    var pairs = [];
    for (var key in query) {
      if (!query.hasOwnProperty(key)) continue;
      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));
    }
    if (pairs.length === 0) return '';
    return '?' + pairs.join('&');
  }
};

var array = {
  commonElement: function(lista, listb) {
    for (var i = 0, n = lista.length; i < n; i++) {
      if (this.indexOf(listb, lista[i]) !== -1) return lista[i];
    }
    return null;
  },

  indexOf: function(list, needle) {
    if (list.indexOf) return list.indexOf(needle);

    for (var i = 0, n = list.length; i < n; i++) {
      if (list[i] === needle) return i;
    }
    return -1;
  },

  map: function(object, callback, context) {
    if (object.map) return object.map(callback, context);
    var result = [];

    if (object instanceof Array) {
      for (var i = 0, n = object.length; i < n; i++) {
        result.push(callback.call(context || null, object[i], i));
      }
    } else {
      for (var key in object) {
        if (!object.hasOwnProperty(key)) continue;
        result.push(callback.call(context || null, key, object[key]));
      }
    }
    return result;
  },

  filter: function(array, callback, context) {
    if (array.filter) return array.filter(callback, context);
    var result = [];
    for (var i = 0, n = array.length; i < n; i++) {
      if (callback.call(context || null, array[i], i)) result.push(array[i]);
    }
    return result;
  },

  asyncEach: function(list, iterator, callback, context) {
    var n = list.length,
      i = -1,
      calls = 0,
      looping = false;

    var iterate = function() {
      calls -= 1;
      i += 1;
      if (i === n) return callback && callback.call(context);
      iterator(list[i], resume);
    };

    var loop = function() {
      if (looping) return;
      looping = true;
      while (calls > 0) iterate();
      looping = false;
    };

    var resume = function() {
      calls += 1;
      loop();
    };
    resume();
  }
};

var validate_options = function(options, validKeys) {
  for (var key in options) {
    if (array.indexOf(validKeys, key) < 0) throw new Error('Unrecognized option: ' + key);
  }
};

var deferrable = {
  then: function(callback, errback) {
    var self = this;
    if (!this._promise)
      this._promise = new promise$2(function(resolve, reject) {
        self._resolve = resolve;
        self._reject = reject;
      });

    if (arguments.length === 0) return this._promise;
    else return this._promise.then(callback, errback);
  },

  callback: function(callback, context) {
    return this.then(function(value) {
      callback.call(context, value);
    });
  },

  errback: function(callback, context) {
    return this.then(null, function(reason) {
      callback.call(context, reason);
    });
  },

  timeout: function(seconds, message) {
    this.then();
    var self = this;
    this._timer = _commonjsHelpers.commonjsGlobal.setTimeout(function() {
      self._reject(message);
    }, seconds * 1000);
  },

  setDeferredStatus: function(status, value) {
    if (this._timer) _commonjsHelpers.commonjsGlobal.clearTimeout(this._timer);

    this.then();

    if (status === 'succeeded') this._resolve(value);
    else if (status === 'failed') this._reject(value);
    else delete this._promise;
  }
};

/*
Copyright Joyent, Inc. and other Node contributors. All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
var isArray$5 =
  typeof Array.isArray === 'function'
    ? Array.isArray
    : function(xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
      };
function indexOf$1(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);
  for (var i = 0; i < xs.length; i++) {
    if (x === xs[i]) return i;
  }
  return -1;
}

function EventEmitter() {}
var event_emitter = EventEmitter;

EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error || (isArray$5(this._events.error) && !this._events.error.length)) {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;
  } else if (isArray$5(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;
  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray$5(this._events[type])) {
    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray$5(list)) {
    var i = indexOf$1(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0) delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray$5(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

var Publisher = {
  countListeners: function(eventType) {
    return this.listeners(eventType).length;
  },

  bind: function(eventType, listener, context) {
    var slice = Array.prototype.slice,
      handler = function() {
        listener.apply(context, slice.call(arguments));
      };

    this._listeners = this._listeners || [];
    this._listeners.push([eventType, listener, context, handler]);
    return this.on(eventType, handler);
  },

  unbind: function(eventType, listener, context) {
    this._listeners = this._listeners || [];
    var n = this._listeners.length,
      tuple;

    while (n--) {
      tuple = this._listeners[n];
      if (tuple[0] !== eventType) continue;
      if (listener && (tuple[1] !== listener || tuple[2] !== context)) continue;
      this._listeners.splice(n, 1);
      this.removeListener(eventType, tuple[3]);
    }
  }
};

extend$1(Publisher, event_emitter.prototype);
Publisher.trigger = Publisher.emit;

var publisher = Publisher;

var grammar = {
  CHANNEL_NAME: /^\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*$/,
  CHANNEL_PATTERN: /^(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*\/\*{1,2}$/,
  ERROR: /^([0-9][0-9][0-9]:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*(,(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)*:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*|[0-9][0-9][0-9]::(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)$/,
  VERSION: /^([0-9])+(\.(([a-z]|[A-Z])|[0-9])(((([a-z]|[A-Z])|[0-9])|\-|\_))*)*$/
};

var Channel = _class({
  initialize: function(name) {
    this.id = this.name = name;
  },

  push: function(message) {
    this.trigger('message', message);
  },

  isUnused: function() {
    return this.countListeners('message') === 0;
  }
});

extend$1(Channel.prototype, publisher);

extend$1(Channel, {
  HANDSHAKE: '/meta/handshake',
  CONNECT: '/meta/connect',
  SUBSCRIBE: '/meta/subscribe',
  UNSUBSCRIBE: '/meta/unsubscribe',
  DISCONNECT: '/meta/disconnect',

  META: 'meta',
  SERVICE: 'service',

  expand: function(name) {
    var segments = this.parse(name),
      channels = ['/**', name];

    var copy = segments.slice();
    copy[copy.length - 1] = '*';
    channels.push(this.unparse(copy));

    for (var i = 1, n = segments.length; i < n; i++) {
      copy = segments.slice(0, i);
      copy.push('**');
      channels.push(this.unparse(copy));
    }

    return channels;
  },

  isValid: function(name) {
    return grammar.CHANNEL_NAME.test(name) || grammar.CHANNEL_PATTERN.test(name);
  },

  parse: function(name) {
    if (!this.isValid(name)) return null;
    return name.split('/').slice(1);
  },

  unparse: function(segments) {
    return '/' + segments.join('/');
  },

  isMeta: function(name) {
    var segments = this.parse(name);
    return segments ? segments[0] === this.META : null;
  },

  isService: function(name) {
    var segments = this.parse(name);
    return segments ? segments[0] === this.SERVICE : null;
  },

  isSubscribable: function(name) {
    if (!this.isValid(name)) return null;
    return !this.isMeta(name) && !this.isService(name);
  },

  Set: _class({
    initialize: function() {
      this._channels = {};
    },

    getKeys: function() {
      var keys = [];
      for (var key in this._channels) keys.push(key);
      return keys;
    },

    remove: function(name) {
      delete this._channels[name];
    },

    hasSubscription: function(name) {
      return this._channels.hasOwnProperty(name);
    },

    subscribe: function(names, subscription) {
      var name;
      for (var i = 0, n = names.length; i < n; i++) {
        name = names[i];
        var channel = (this._channels[name] = this._channels[name] || new Channel(name));
        channel.bind('message', subscription);
      }
    },

    unsubscribe: function(name, subscription) {
      var channel = this._channels[name];
      if (!channel) return false;
      channel.unbind('message', subscription);

      if (channel.isUnused()) {
        this.remove(name);
        return true;
      } else {
        return false;
      }
    },

    distributeMessage: function(message) {
      var channels = Channel.expand(message.channel);

      for (var i = 0, n = channels.length; i < n; i++) {
        var channel = this._channels[channels[i]];
        if (channel) channel.trigger('message', message);
      }
    }
  })
});

var channel = Channel;

var ipRegex = _commonjsHelpers.createCommonjsModule(function(module) {
  const v4 =
    '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';

  const v6seg = '[0-9a-fA-F]{1,4}';
  const v6 = `
(
(?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1
`
    .replace(/\s*\/\/.*$/gm, '')
    .replace(/\n/g, '')
    .trim();

  const ip = (module.exports = opts =>
    opts && opts.exact ? new RegExp(`(?:^${v4}$)|(?:^${v6}$)`) : new RegExp(`(?:${v4})|(?:${v6})`, 'g'));

  ip.v4 = opts => (opts && opts.exact ? new RegExp(`^${v4}$`) : new RegExp(v4, 'g'));
  ip.v6 = opts => (opts && opts.exact ? new RegExp(`^${v6}$`) : new RegExp(v6, 'g'));
});

var require$$0$3 = [
  'ac',
  'com.ac',
  'edu.ac',
  'gov.ac',
  'net.ac',
  'mil.ac',
  'org.ac',
  'ad',
  'nom.ad',
  'ae',
  'co.ae',
  'net.ae',
  'org.ae',
  'sch.ae',
  'ac.ae',
  'gov.ae',
  'mil.ae',
  'aero',
  'accident-investigation.aero',
  'accident-prevention.aero',
  'aerobatic.aero',
  'aeroclub.aero',
  'aerodrome.aero',
  'agents.aero',
  'aircraft.aero',
  'airline.aero',
  'airport.aero',
  'air-surveillance.aero',
  'airtraffic.aero',
  'air-traffic-control.aero',
  'ambulance.aero',
  'amusement.aero',
  'association.aero',
  'author.aero',
  'ballooning.aero',
  'broker.aero',
  'caa.aero',
  'cargo.aero',
  'catering.aero',
  'certification.aero',
  'championship.aero',
  'charter.aero',
  'civilaviation.aero',
  'club.aero',
  'conference.aero',
  'consultant.aero',
  'consulting.aero',
  'control.aero',
  'council.aero',
  'crew.aero',
  'design.aero',
  'dgca.aero',
  'educator.aero',
  'emergency.aero',
  'engine.aero',
  'engineer.aero',
  'entertainment.aero',
  'equipment.aero',
  'exchange.aero',
  'express.aero',
  'federation.aero',
  'flight.aero',
  'freight.aero',
  'fuel.aero',
  'gliding.aero',
  'government.aero',
  'groundhandling.aero',
  'group.aero',
  'hanggliding.aero',
  'homebuilt.aero',
  'insurance.aero',
  'journal.aero',
  'journalist.aero',
  'leasing.aero',
  'logistics.aero',
  'magazine.aero',
  'maintenance.aero',
  'media.aero',
  'microlight.aero',
  'modelling.aero',
  'navigation.aero',
  'parachuting.aero',
  'paragliding.aero',
  'passenger-association.aero',
  'pilot.aero',
  'press.aero',
  'production.aero',
  'recreation.aero',
  'repbody.aero',
  'res.aero',
  'research.aero',
  'rotorcraft.aero',
  'safety.aero',
  'scientist.aero',
  'services.aero',
  'show.aero',
  'skydiving.aero',
  'software.aero',
  'student.aero',
  'trader.aero',
  'trading.aero',
  'trainer.aero',
  'union.aero',
  'workinggroup.aero',
  'works.aero',
  'af',
  'gov.af',
  'com.af',
  'org.af',
  'net.af',
  'edu.af',
  'ag',
  'com.ag',
  'org.ag',
  'net.ag',
  'co.ag',
  'nom.ag',
  'ai',
  'off.ai',
  'com.ai',
  'net.ai',
  'org.ai',
  'al',
  'com.al',
  'edu.al',
  'gov.al',
  'mil.al',
  'net.al',
  'org.al',
  'am',
  'co.am',
  'com.am',
  'commune.am',
  'net.am',
  'org.am',
  'ao',
  'ed.ao',
  'gv.ao',
  'og.ao',
  'co.ao',
  'pb.ao',
  'it.ao',
  'aq',
  'ar',
  'com.ar',
  'edu.ar',
  'gob.ar',
  'gov.ar',
  'int.ar',
  'mil.ar',
  'musica.ar',
  'net.ar',
  'org.ar',
  'tur.ar',
  'arpa',
  'e164.arpa',
  'in-addr.arpa',
  'ip6.arpa',
  'iris.arpa',
  'uri.arpa',
  'urn.arpa',
  'as',
  'gov.as',
  'asia',
  'at',
  'ac.at',
  'co.at',
  'gv.at',
  'or.at',
  'au',
  'com.au',
  'net.au',
  'org.au',
  'edu.au',
  'gov.au',
  'asn.au',
  'id.au',
  'info.au',
  'conf.au',
  'oz.au',
  'act.au',
  'nsw.au',
  'nt.au',
  'qld.au',
  'sa.au',
  'tas.au',
  'vic.au',
  'wa.au',
  'act.edu.au',
  'catholic.edu.au',
  'eq.edu.au',
  'nsw.edu.au',
  'nt.edu.au',
  'qld.edu.au',
  'sa.edu.au',
  'tas.edu.au',
  'vic.edu.au',
  'wa.edu.au',
  'qld.gov.au',
  'sa.gov.au',
  'tas.gov.au',
  'vic.gov.au',
  'wa.gov.au',
  'education.tas.edu.au',
  'schools.nsw.edu.au',
  'aw',
  'com.aw',
  'ax',
  'az',
  'com.az',
  'net.az',
  'int.az',
  'gov.az',
  'org.az',
  'edu.az',
  'info.az',
  'pp.az',
  'mil.az',
  'name.az',
  'pro.az',
  'biz.az',
  'ba',
  'com.ba',
  'edu.ba',
  'gov.ba',
  'mil.ba',
  'net.ba',
  'org.ba',
  'bb',
  'biz.bb',
  'co.bb',
  'com.bb',
  'edu.bb',
  'gov.bb',
  'info.bb',
  'net.bb',
  'org.bb',
  'store.bb',
  'tv.bb',
  '*.bd',
  'be',
  'ac.be',
  'bf',
  'gov.bf',
  'bg',
  'a.bg',
  'b.bg',
  'c.bg',
  'd.bg',
  'e.bg',
  'f.bg',
  'g.bg',
  'h.bg',
  'i.bg',
  'j.bg',
  'k.bg',
  'l.bg',
  'm.bg',
  'n.bg',
  'o.bg',
  'p.bg',
  'q.bg',
  'r.bg',
  's.bg',
  't.bg',
  'u.bg',
  'v.bg',
  'w.bg',
  'x.bg',
  'y.bg',
  'z.bg',
  '0.bg',
  '1.bg',
  '2.bg',
  '3.bg',
  '4.bg',
  '5.bg',
  '6.bg',
  '7.bg',
  '8.bg',
  '9.bg',
  'bh',
  'com.bh',
  'edu.bh',
  'net.bh',
  'org.bh',
  'gov.bh',
  'bi',
  'co.bi',
  'com.bi',
  'edu.bi',
  'or.bi',
  'org.bi',
  'biz',
  'bj',
  'asso.bj',
  'barreau.bj',
  'gouv.bj',
  'bm',
  'com.bm',
  'edu.bm',
  'gov.bm',
  'net.bm',
  'org.bm',
  'bn',
  'com.bn',
  'edu.bn',
  'gov.bn',
  'net.bn',
  'org.bn',
  'bo',
  'com.bo',
  'edu.bo',
  'gob.bo',
  'int.bo',
  'org.bo',
  'net.bo',
  'mil.bo',
  'tv.bo',
  'web.bo',
  'academia.bo',
  'agro.bo',
  'arte.bo',
  'blog.bo',
  'bolivia.bo',
  'ciencia.bo',
  'cooperativa.bo',
  'democracia.bo',
  'deporte.bo',
  'ecologia.bo',
  'economia.bo',
  'empresa.bo',
  'indigena.bo',
  'industria.bo',
  'info.bo',
  'medicina.bo',
  'movimiento.bo',
  'musica.bo',
  'natural.bo',
  'nombre.bo',
  'noticias.bo',
  'patria.bo',
  'politica.bo',
  'profesional.bo',
  'plurinacional.bo',
  'pueblo.bo',
  'revista.bo',
  'salud.bo',
  'tecnologia.bo',
  'tksat.bo',
  'transporte.bo',
  'wiki.bo',
  'br',
  '9guacu.br',
  'abc.br',
  'adm.br',
  'adv.br',
  'agr.br',
  'aju.br',
  'am.br',
  'anani.br',
  'aparecida.br',
  'arq.br',
  'art.br',
  'ato.br',
  'b.br',
  'barueri.br',
  'belem.br',
  'bhz.br',
  'bio.br',
  'blog.br',
  'bmd.br',
  'boavista.br',
  'bsb.br',
  'campinagrande.br',
  'campinas.br',
  'caxias.br',
  'cim.br',
  'cng.br',
  'cnt.br',
  'com.br',
  'contagem.br',
  'coop.br',
  'cri.br',
  'cuiaba.br',
  'curitiba.br',
  'def.br',
  'ecn.br',
  'eco.br',
  'edu.br',
  'emp.br',
  'eng.br',
  'esp.br',
  'etc.br',
  'eti.br',
  'far.br',
  'feira.br',
  'flog.br',
  'floripa.br',
  'fm.br',
  'fnd.br',
  'fortal.br',
  'fot.br',
  'foz.br',
  'fst.br',
  'g12.br',
  'ggf.br',
  'goiania.br',
  'gov.br',
  'ac.gov.br',
  'al.gov.br',
  'am.gov.br',
  'ap.gov.br',
  'ba.gov.br',
  'ce.gov.br',
  'df.gov.br',
  'es.gov.br',
  'go.gov.br',
  'ma.gov.br',
  'mg.gov.br',
  'ms.gov.br',
  'mt.gov.br',
  'pa.gov.br',
  'pb.gov.br',
  'pe.gov.br',
  'pi.gov.br',
  'pr.gov.br',
  'rj.gov.br',
  'rn.gov.br',
  'ro.gov.br',
  'rr.gov.br',
  'rs.gov.br',
  'sc.gov.br',
  'se.gov.br',
  'sp.gov.br',
  'to.gov.br',
  'gru.br',
  'imb.br',
  'ind.br',
  'inf.br',
  'jab.br',
  'jampa.br',
  'jdf.br',
  'joinville.br',
  'jor.br',
  'jus.br',
  'leg.br',
  'lel.br',
  'londrina.br',
  'macapa.br',
  'maceio.br',
  'manaus.br',
  'maringa.br',
  'mat.br',
  'med.br',
  'mil.br',
  'morena.br',
  'mp.br',
  'mus.br',
  'natal.br',
  'net.br',
  'niteroi.br',
  '*.nom.br',
  'not.br',
  'ntr.br',
  'odo.br',
  'ong.br',
  'org.br',
  'osasco.br',
  'palmas.br',
  'poa.br',
  'ppg.br',
  'pro.br',
  'psc.br',
  'psi.br',
  'pvh.br',
  'qsl.br',
  'radio.br',
  'rec.br',
  'recife.br',
  'ribeirao.br',
  'rio.br',
  'riobranco.br',
  'riopreto.br',
  'salvador.br',
  'sampa.br',
  'santamaria.br',
  'santoandre.br',
  'saobernardo.br',
  'saogonca.br',
  'sjc.br',
  'slg.br',
  'slz.br',
  'sorocaba.br',
  'srv.br',
  'taxi.br',
  'tc.br',
  'teo.br',
  'the.br',
  'tmp.br',
  'trd.br',
  'tur.br',
  'tv.br',
  'udi.br',
  'vet.br',
  'vix.br',
  'vlog.br',
  'wiki.br',
  'zlg.br',
  'bs',
  'com.bs',
  'net.bs',
  'org.bs',
  'edu.bs',
  'gov.bs',
  'bt',
  'com.bt',
  'edu.bt',
  'gov.bt',
  'net.bt',
  'org.bt',
  'bv',
  'bw',
  'co.bw',
  'org.bw',
  'by',
  'gov.by',
  'mil.by',
  'com.by',
  'of.by',
  'bz',
  'com.bz',
  'net.bz',
  'org.bz',
  'edu.bz',
  'gov.bz',
  'ca',
  'ab.ca',
  'bc.ca',
  'mb.ca',
  'nb.ca',
  'nf.ca',
  'nl.ca',
  'ns.ca',
  'nt.ca',
  'nu.ca',
  'on.ca',
  'pe.ca',
  'qc.ca',
  'sk.ca',
  'yk.ca',
  'gc.ca',
  'cat',
  'cc',
  'cd',
  'gov.cd',
  'cf',
  'cg',
  'ch',
  'ci',
  'org.ci',
  'or.ci',
  'com.ci',
  'co.ci',
  'edu.ci',
  'ed.ci',
  'ac.ci',
  'net.ci',
  'go.ci',
  'asso.ci',
  'aéroport.ci',
  'int.ci',
  'presse.ci',
  'md.ci',
  'gouv.ci',
  '*.ck',
  '!www.ck',
  'cl',
  'gov.cl',
  'gob.cl',
  'co.cl',
  'mil.cl',
  'cm',
  'co.cm',
  'com.cm',
  'gov.cm',
  'net.cm',
  'cn',
  'ac.cn',
  'com.cn',
  'edu.cn',
  'gov.cn',
  'net.cn',
  'org.cn',
  'mil.cn',
  '公司.cn',
  '网络.cn',
  '網絡.cn',
  'ah.cn',
  'bj.cn',
  'cq.cn',
  'fj.cn',
  'gd.cn',
  'gs.cn',
  'gz.cn',
  'gx.cn',
  'ha.cn',
  'hb.cn',
  'he.cn',
  'hi.cn',
  'hl.cn',
  'hn.cn',
  'jl.cn',
  'js.cn',
  'jx.cn',
  'ln.cn',
  'nm.cn',
  'nx.cn',
  'qh.cn',
  'sc.cn',
  'sd.cn',
  'sh.cn',
  'sn.cn',
  'sx.cn',
  'tj.cn',
  'xj.cn',
  'xz.cn',
  'yn.cn',
  'zj.cn',
  'hk.cn',
  'mo.cn',
  'tw.cn',
  'co',
  'arts.co',
  'com.co',
  'edu.co',
  'firm.co',
  'gov.co',
  'info.co',
  'int.co',
  'mil.co',
  'net.co',
  'nom.co',
  'org.co',
  'rec.co',
  'web.co',
  'com',
  'coop',
  'cr',
  'ac.cr',
  'co.cr',
  'ed.cr',
  'fi.cr',
  'go.cr',
  'or.cr',
  'sa.cr',
  'cu',
  'com.cu',
  'edu.cu',
  'org.cu',
  'net.cu',
  'gov.cu',
  'inf.cu',
  'cv',
  'cw',
  'com.cw',
  'edu.cw',
  'net.cw',
  'org.cw',
  'cx',
  'gov.cx',
  'cy',
  'ac.cy',
  'biz.cy',
  'com.cy',
  'ekloges.cy',
  'gov.cy',
  'ltd.cy',
  'name.cy',
  'net.cy',
  'org.cy',
  'parliament.cy',
  'press.cy',
  'pro.cy',
  'tm.cy',
  'cz',
  'de',
  'dj',
  'dk',
  'dm',
  'com.dm',
  'net.dm',
  'org.dm',
  'edu.dm',
  'gov.dm',
  'do',
  'art.do',
  'com.do',
  'edu.do',
  'gob.do',
  'gov.do',
  'mil.do',
  'net.do',
  'org.do',
  'sld.do',
  'web.do',
  'dz',
  'com.dz',
  'org.dz',
  'net.dz',
  'gov.dz',
  'edu.dz',
  'asso.dz',
  'pol.dz',
  'art.dz',
  'ec',
  'com.ec',
  'info.ec',
  'net.ec',
  'fin.ec',
  'k12.ec',
  'med.ec',
  'pro.ec',
  'org.ec',
  'edu.ec',
  'gov.ec',
  'gob.ec',
  'mil.ec',
  'edu',
  'ee',
  'edu.ee',
  'gov.ee',
  'riik.ee',
  'lib.ee',
  'med.ee',
  'com.ee',
  'pri.ee',
  'aip.ee',
  'org.ee',
  'fie.ee',
  'eg',
  'com.eg',
  'edu.eg',
  'eun.eg',
  'gov.eg',
  'mil.eg',
  'name.eg',
  'net.eg',
  'org.eg',
  'sci.eg',
  '*.er',
  'es',
  'com.es',
  'nom.es',
  'org.es',
  'gob.es',
  'edu.es',
  'et',
  'com.et',
  'gov.et',
  'org.et',
  'edu.et',
  'biz.et',
  'name.et',
  'info.et',
  'net.et',
  'eu',
  'fi',
  'aland.fi',
  '*.fj',
  '*.fk',
  'fm',
  'fo',
  'fr',
  'asso.fr',
  'com.fr',
  'gouv.fr',
  'nom.fr',
  'prd.fr',
  'tm.fr',
  'aeroport.fr',
  'avocat.fr',
  'avoues.fr',
  'cci.fr',
  'chambagri.fr',
  'chirurgiens-dentistes.fr',
  'experts-comptables.fr',
  'geometre-expert.fr',
  'greta.fr',
  'huissier-justice.fr',
  'medecin.fr',
  'notaires.fr',
  'pharmacien.fr',
  'port.fr',
  'veterinaire.fr',
  'ga',
  'gb',
  'gd',
  'ge',
  'com.ge',
  'edu.ge',
  'gov.ge',
  'org.ge',
  'mil.ge',
  'net.ge',
  'pvt.ge',
  'gf',
  'gg',
  'co.gg',
  'net.gg',
  'org.gg',
  'gh',
  'com.gh',
  'edu.gh',
  'gov.gh',
  'org.gh',
  'mil.gh',
  'gi',
  'com.gi',
  'ltd.gi',
  'gov.gi',
  'mod.gi',
  'edu.gi',
  'org.gi',
  'gl',
  'co.gl',
  'com.gl',
  'edu.gl',
  'net.gl',
  'org.gl',
  'gm',
  'gn',
  'ac.gn',
  'com.gn',
  'edu.gn',
  'gov.gn',
  'org.gn',
  'net.gn',
  'gov',
  'gp',
  'com.gp',
  'net.gp',
  'mobi.gp',
  'edu.gp',
  'org.gp',
  'asso.gp',
  'gq',
  'gr',
  'com.gr',
  'edu.gr',
  'net.gr',
  'org.gr',
  'gov.gr',
  'gs',
  'gt',
  'com.gt',
  'edu.gt',
  'gob.gt',
  'ind.gt',
  'mil.gt',
  'net.gt',
  'org.gt',
  'gu',
  'com.gu',
  'edu.gu',
  'gov.gu',
  'guam.gu',
  'info.gu',
  'net.gu',
  'org.gu',
  'web.gu',
  'gw',
  'gy',
  'co.gy',
  'com.gy',
  'edu.gy',
  'gov.gy',
  'net.gy',
  'org.gy',
  'hk',
  'com.hk',
  'edu.hk',
  'gov.hk',
  'idv.hk',
  'net.hk',
  'org.hk',
  '公司.hk',
  '教育.hk',
  '敎育.hk',
  '政府.hk',
  '個人.hk',
  '个人.hk',
  '箇人.hk',
  '網络.hk',
  '网络.hk',
  '组織.hk',
  '網絡.hk',
  '网絡.hk',
  '组织.hk',
  '組織.hk',
  '組织.hk',
  'hm',
  'hn',
  'com.hn',
  'edu.hn',
  'org.hn',
  'net.hn',
  'mil.hn',
  'gob.hn',
  'hr',
  'iz.hr',
  'from.hr',
  'name.hr',
  'com.hr',
  'ht',
  'com.ht',
  'shop.ht',
  'firm.ht',
  'info.ht',
  'adult.ht',
  'net.ht',
  'pro.ht',
  'org.ht',
  'med.ht',
  'art.ht',
  'coop.ht',
  'pol.ht',
  'asso.ht',
  'edu.ht',
  'rel.ht',
  'gouv.ht',
  'perso.ht',
  'hu',
  'co.hu',
  'info.hu',
  'org.hu',
  'priv.hu',
  'sport.hu',
  'tm.hu',
  '2000.hu',
  'agrar.hu',
  'bolt.hu',
  'casino.hu',
  'city.hu',
  'erotica.hu',
  'erotika.hu',
  'film.hu',
  'forum.hu',
  'games.hu',
  'hotel.hu',
  'ingatlan.hu',
  'jogasz.hu',
  'konyvelo.hu',
  'lakas.hu',
  'media.hu',
  'news.hu',
  'reklam.hu',
  'sex.hu',
  'shop.hu',
  'suli.hu',
  'szex.hu',
  'tozsde.hu',
  'utazas.hu',
  'video.hu',
  'id',
  'ac.id',
  'biz.id',
  'co.id',
  'desa.id',
  'go.id',
  'mil.id',
  'my.id',
  'net.id',
  'or.id',
  'ponpes.id',
  'sch.id',
  'web.id',
  'ie',
  'gov.ie',
  'il',
  'ac.il',
  'co.il',
  'gov.il',
  'idf.il',
  'k12.il',
  'muni.il',
  'net.il',
  'org.il',
  'im',
  'ac.im',
  'co.im',
  'com.im',
  'ltd.co.im',
  'net.im',
  'org.im',
  'plc.co.im',
  'tt.im',
  'tv.im',
  'in',
  'co.in',
  'firm.in',
  'net.in',
  'org.in',
  'gen.in',
  'ind.in',
  'nic.in',
  'ac.in',
  'edu.in',
  'res.in',
  'gov.in',
  'mil.in',
  'info',
  'int',
  'eu.int',
  'io',
  'com.io',
  'iq',
  'gov.iq',
  'edu.iq',
  'mil.iq',
  'com.iq',
  'org.iq',
  'net.iq',
  'ir',
  'ac.ir',
  'co.ir',
  'gov.ir',
  'id.ir',
  'net.ir',
  'org.ir',
  'sch.ir',
  'ایران.ir',
  'ايران.ir',
  'is',
  'net.is',
  'com.is',
  'edu.is',
  'gov.is',
  'org.is',
  'int.is',
  'it',
  'gov.it',
  'edu.it',
  'abr.it',
  'abruzzo.it',
  'aosta-valley.it',
  'aostavalley.it',
  'bas.it',
  'basilicata.it',
  'cal.it',
  'calabria.it',
  'cam.it',
  'campania.it',
  'emilia-romagna.it',
  'emiliaromagna.it',
  'emr.it',
  'friuli-v-giulia.it',
  'friuli-ve-giulia.it',
  'friuli-vegiulia.it',
  'friuli-venezia-giulia.it',
  'friuli-veneziagiulia.it',
  'friuli-vgiulia.it',
  'friuliv-giulia.it',
  'friulive-giulia.it',
  'friulivegiulia.it',
  'friulivenezia-giulia.it',
  'friuliveneziagiulia.it',
  'friulivgiulia.it',
  'fvg.it',
  'laz.it',
  'lazio.it',
  'lig.it',
  'liguria.it',
  'lom.it',
  'lombardia.it',
  'lombardy.it',
  'lucania.it',
  'mar.it',
  'marche.it',
  'mol.it',
  'molise.it',
  'piedmont.it',
  'piemonte.it',
  'pmn.it',
  'pug.it',
  'puglia.it',
  'sar.it',
  'sardegna.it',
  'sardinia.it',
  'sic.it',
  'sicilia.it',
  'sicily.it',
  'taa.it',
  'tos.it',
  'toscana.it',
  'trentin-sud-tirol.it',
  'trentin-süd-tirol.it',
  'trentin-sudtirol.it',
  'trentin-südtirol.it',
  'trentin-sued-tirol.it',
  'trentin-suedtirol.it',
  'trentino-a-adige.it',
  'trentino-aadige.it',
  'trentino-alto-adige.it',
  'trentino-altoadige.it',
  'trentino-s-tirol.it',
  'trentino-stirol.it',
  'trentino-sud-tirol.it',
  'trentino-süd-tirol.it',
  'trentino-sudtirol.it',
  'trentino-südtirol.it',
  'trentino-sued-tirol.it',
  'trentino-suedtirol.it',
  'trentino.it',
  'trentinoa-adige.it',
  'trentinoaadige.it',
  'trentinoalto-adige.it',
  'trentinoaltoadige.it',
  'trentinos-tirol.it',
  'trentinostirol.it',
  'trentinosud-tirol.it',
  'trentinosüd-tirol.it',
  'trentinosudtirol.it',
  'trentinosüdtirol.it',
  'trentinosued-tirol.it',
  'trentinosuedtirol.it',
  'trentinsud-tirol.it',
  'trentinsüd-tirol.it',
  'trentinsudtirol.it',
  'trentinsüdtirol.it',
  'trentinsued-tirol.it',
  'trentinsuedtirol.it',
  'tuscany.it',
  'umb.it',
  'umbria.it',
  'val-d-aosta.it',
  'val-daosta.it',
  'vald-aosta.it',
  'valdaosta.it',
  'valle-aosta.it',
  'valle-d-aosta.it',
  'valle-daosta.it',
  'valleaosta.it',
  'valled-aosta.it',
  'valledaosta.it',
  'vallee-aoste.it',
  'vallée-aoste.it',
  'vallee-d-aoste.it',
  'vallée-d-aoste.it',
  'valleeaoste.it',
  'valléeaoste.it',
  'valleedaoste.it',
  'valléedaoste.it',
  'vao.it',
  'vda.it',
  'ven.it',
  'veneto.it',
  'ag.it',
  'agrigento.it',
  'al.it',
  'alessandria.it',
  'alto-adige.it',
  'altoadige.it',
  'an.it',
  'ancona.it',
  'andria-barletta-trani.it',
  'andria-trani-barletta.it',
  'andriabarlettatrani.it',
  'andriatranibarletta.it',
  'ao.it',
  'aosta.it',
  'aoste.it',
  'ap.it',
  'aq.it',
  'aquila.it',
  'ar.it',
  'arezzo.it',
  'ascoli-piceno.it',
  'ascolipiceno.it',
  'asti.it',
  'at.it',
  'av.it',
  'avellino.it',
  'ba.it',
  'balsan-sudtirol.it',
  'balsan-südtirol.it',
  'balsan-suedtirol.it',
  'balsan.it',
  'bari.it',
  'barletta-trani-andria.it',
  'barlettatraniandria.it',
  'belluno.it',
  'benevento.it',
  'bergamo.it',
  'bg.it',
  'bi.it',
  'biella.it',
  'bl.it',
  'bn.it',
  'bo.it',
  'bologna.it',
  'bolzano-altoadige.it',
  'bolzano.it',
  'bozen-sudtirol.it',
  'bozen-südtirol.it',
  'bozen-suedtirol.it',
  'bozen.it',
  'br.it',
  'brescia.it',
  'brindisi.it',
  'bs.it',
  'bt.it',
  'bulsan-sudtirol.it',
  'bulsan-südtirol.it',
  'bulsan-suedtirol.it',
  'bulsan.it',
  'bz.it',
  'ca.it',
  'cagliari.it',
  'caltanissetta.it',
  'campidano-medio.it',
  'campidanomedio.it',
  'campobasso.it',
  'carbonia-iglesias.it',
  'carboniaiglesias.it',
  'carrara-massa.it',
  'carraramassa.it',
  'caserta.it',
  'catania.it',
  'catanzaro.it',
  'cb.it',
  'ce.it',
  'cesena-forli.it',
  'cesena-forlì.it',
  'cesenaforli.it',
  'cesenaforlì.it',
  'ch.it',
  'chieti.it',
  'ci.it',
  'cl.it',
  'cn.it',
  'co.it',
  'como.it',
  'cosenza.it',
  'cr.it',
  'cremona.it',
  'crotone.it',
  'cs.it',
  'ct.it',
  'cuneo.it',
  'cz.it',
  'dell-ogliastra.it',
  'dellogliastra.it',
  'en.it',
  'enna.it',
  'fc.it',
  'fe.it',
  'fermo.it',
  'ferrara.it',
  'fg.it',
  'fi.it',
  'firenze.it',
  'florence.it',
  'fm.it',
  'foggia.it',
  'forli-cesena.it',
  'forlì-cesena.it',
  'forlicesena.it',
  'forlìcesena.it',
  'fr.it',
  'frosinone.it',
  'ge.it',
  'genoa.it',
  'genova.it',
  'go.it',
  'gorizia.it',
  'gr.it',
  'grosseto.it',
  'iglesias-carbonia.it',
  'iglesiascarbonia.it',
  'im.it',
  'imperia.it',
  'is.it',
  'isernia.it',
  'kr.it',
  'la-spezia.it',
  'laquila.it',
  'laspezia.it',
  'latina.it',
  'lc.it',
  'le.it',
  'lecce.it',
  'lecco.it',
  'li.it',
  'livorno.it',
  'lo.it',
  'lodi.it',
  'lt.it',
  'lu.it',
  'lucca.it',
  'macerata.it',
  'mantova.it',
  'massa-carrara.it',
  'massacarrara.it',
  'matera.it',
  'mb.it',
  'mc.it',
  'me.it',
  'medio-campidano.it',
  'mediocampidano.it',
  'messina.it',
  'mi.it',
  'milan.it',
  'milano.it',
  'mn.it',
  'mo.it',
  'modena.it',
  'monza-brianza.it',
  'monza-e-della-brianza.it',
  'monza.it',
  'monzabrianza.it',
  'monzaebrianza.it',
  'monzaedellabrianza.it',
  'ms.it',
  'mt.it',
  'na.it',
  'naples.it',
  'napoli.it',
  'no.it',
  'novara.it',
  'nu.it',
  'nuoro.it',
  'og.it',
  'ogliastra.it',
  'olbia-tempio.it',
  'olbiatempio.it',
  'or.it',
  'oristano.it',
  'ot.it',
  'pa.it',
  'padova.it',
  'padua.it',
  'palermo.it',
  'parma.it',
  'pavia.it',
  'pc.it',
  'pd.it',
  'pe.it',
  'perugia.it',
  'pesaro-urbino.it',
  'pesarourbino.it',
  'pescara.it',
  'pg.it',
  'pi.it',
  'piacenza.it',
  'pisa.it',
  'pistoia.it',
  'pn.it',
  'po.it',
  'pordenone.it',
  'potenza.it',
  'pr.it',
  'prato.it',
  'pt.it',
  'pu.it',
  'pv.it',
  'pz.it',
  'ra.it',
  'ragusa.it',
  'ravenna.it',
  'rc.it',
  're.it',
  'reggio-calabria.it',
  'reggio-emilia.it',
  'reggiocalabria.it',
  'reggioemilia.it',
  'rg.it',
  'ri.it',
  'rieti.it',
  'rimini.it',
  'rm.it',
  'rn.it',
  'ro.it',
  'roma.it',
  'rome.it',
  'rovigo.it',
  'sa.it',
  'salerno.it',
  'sassari.it',
  'savona.it',
  'si.it',
  'siena.it',
  'siracusa.it',
  'so.it',
  'sondrio.it',
  'sp.it',
  'sr.it',
  'ss.it',
  'suedtirol.it',
  'südtirol.it',
  'sv.it',
  'ta.it',
  'taranto.it',
  'te.it',
  'tempio-olbia.it',
  'tempioolbia.it',
  'teramo.it',
  'terni.it',
  'tn.it',
  'to.it',
  'torino.it',
  'tp.it',
  'tr.it',
  'trani-andria-barletta.it',
  'trani-barletta-andria.it',
  'traniandriabarletta.it',
  'tranibarlettaandria.it',
  'trapani.it',
  'trento.it',
  'treviso.it',
  'trieste.it',
  'ts.it',
  'turin.it',
  'tv.it',
  'ud.it',
  'udine.it',
  'urbino-pesaro.it',
  'urbinopesaro.it',
  'va.it',
  'varese.it',
  'vb.it',
  'vc.it',
  've.it',
  'venezia.it',
  'venice.it',
  'verbania.it',
  'vercelli.it',
  'verona.it',
  'vi.it',
  'vibo-valentia.it',
  'vibovalentia.it',
  'vicenza.it',
  'viterbo.it',
  'vr.it',
  'vs.it',
  'vt.it',
  'vv.it',
  'je',
  'co.je',
  'net.je',
  'org.je',
  '*.jm',
  'jo',
  'com.jo',
  'org.jo',
  'net.jo',
  'edu.jo',
  'sch.jo',
  'gov.jo',
  'mil.jo',
  'name.jo',
  'jobs',
  'jp',
  'ac.jp',
  'ad.jp',
  'co.jp',
  'ed.jp',
  'go.jp',
  'gr.jp',
  'lg.jp',
  'ne.jp',
  'or.jp',
  'aichi.jp',
  'akita.jp',
  'aomori.jp',
  'chiba.jp',
  'ehime.jp',
  'fukui.jp',
  'fukuoka.jp',
  'fukushima.jp',
  'gifu.jp',
  'gunma.jp',
  'hiroshima.jp',
  'hokkaido.jp',
  'hyogo.jp',
  'ibaraki.jp',
  'ishikawa.jp',
  'iwate.jp',
  'kagawa.jp',
  'kagoshima.jp',
  'kanagawa.jp',
  'kochi.jp',
  'kumamoto.jp',
  'kyoto.jp',
  'mie.jp',
  'miyagi.jp',
  'miyazaki.jp',
  'nagano.jp',
  'nagasaki.jp',
  'nara.jp',
  'niigata.jp',
  'oita.jp',
  'okayama.jp',
  'okinawa.jp',
  'osaka.jp',
  'saga.jp',
  'saitama.jp',
  'shiga.jp',
  'shimane.jp',
  'shizuoka.jp',
  'tochigi.jp',
  'tokushima.jp',
  'tokyo.jp',
  'tottori.jp',
  'toyama.jp',
  'wakayama.jp',
  'yamagata.jp',
  'yamaguchi.jp',
  'yamanashi.jp',
  '栃木.jp',
  '愛知.jp',
  '愛媛.jp',
  '兵庫.jp',
  '熊本.jp',
  '茨城.jp',
  '北海道.jp',
  '千葉.jp',
  '和歌山.jp',
  '長崎.jp',
  '長野.jp',
  '新潟.jp',
  '青森.jp',
  '静岡.jp',
  '東京.jp',
  '石川.jp',
  '埼玉.jp',
  '三重.jp',
  '京都.jp',
  '佐賀.jp',
  '大分.jp',
  '大阪.jp',
  '奈良.jp',
  '宮城.jp',
  '宮崎.jp',
  '富山.jp',
  '山口.jp',
  '山形.jp',
  '山梨.jp',
  '岩手.jp',
  '岐阜.jp',
  '岡山.jp',
  '島根.jp',
  '広島.jp',
  '徳島.jp',
  '沖縄.jp',
  '滋賀.jp',
  '神奈川.jp',
  '福井.jp',
  '福岡.jp',
  '福島.jp',
  '秋田.jp',
  '群馬.jp',
  '香川.jp',
  '高知.jp',
  '鳥取.jp',
  '鹿児島.jp',
  '*.kawasaki.jp',
  '*.kitakyushu.jp',
  '*.kobe.jp',
  '*.nagoya.jp',
  '*.sapporo.jp',
  '*.sendai.jp',
  '*.yokohama.jp',
  '!city.kawasaki.jp',
  '!city.kitakyushu.jp',
  '!city.kobe.jp',
  '!city.nagoya.jp',
  '!city.sapporo.jp',
  '!city.sendai.jp',
  '!city.yokohama.jp',
  'aisai.aichi.jp',
  'ama.aichi.jp',
  'anjo.aichi.jp',
  'asuke.aichi.jp',
  'chiryu.aichi.jp',
  'chita.aichi.jp',
  'fuso.aichi.jp',
  'gamagori.aichi.jp',
  'handa.aichi.jp',
  'hazu.aichi.jp',
  'hekinan.aichi.jp',
  'higashiura.aichi.jp',
  'ichinomiya.aichi.jp',
  'inazawa.aichi.jp',
  'inuyama.aichi.jp',
  'isshiki.aichi.jp',
  'iwakura.aichi.jp',
  'kanie.aichi.jp',
  'kariya.aichi.jp',
  'kasugai.aichi.jp',
  'kira.aichi.jp',
  'kiyosu.aichi.jp',
  'komaki.aichi.jp',
  'konan.aichi.jp',
  'kota.aichi.jp',
  'mihama.aichi.jp',
  'miyoshi.aichi.jp',
  'nishio.aichi.jp',
  'nisshin.aichi.jp',
  'obu.aichi.jp',
  'oguchi.aichi.jp',
  'oharu.aichi.jp',
  'okazaki.aichi.jp',
  'owariasahi.aichi.jp',
  'seto.aichi.jp',
  'shikatsu.aichi.jp',
  'shinshiro.aichi.jp',
  'shitara.aichi.jp',
  'tahara.aichi.jp',
  'takahama.aichi.jp',
  'tobishima.aichi.jp',
  'toei.aichi.jp',
  'togo.aichi.jp',
  'tokai.aichi.jp',
  'tokoname.aichi.jp',
  'toyoake.aichi.jp',
  'toyohashi.aichi.jp',
  'toyokawa.aichi.jp',
  'toyone.aichi.jp',
  'toyota.aichi.jp',
  'tsushima.aichi.jp',
  'yatomi.aichi.jp',
  'akita.akita.jp',
  'daisen.akita.jp',
  'fujisato.akita.jp',
  'gojome.akita.jp',
  'hachirogata.akita.jp',
  'happou.akita.jp',
  'higashinaruse.akita.jp',
  'honjo.akita.jp',
  'honjyo.akita.jp',
  'ikawa.akita.jp',
  'kamikoani.akita.jp',
  'kamioka.akita.jp',
  'katagami.akita.jp',
  'kazuno.akita.jp',
  'kitaakita.akita.jp',
  'kosaka.akita.jp',
  'kyowa.akita.jp',
  'misato.akita.jp',
  'mitane.akita.jp',
  'moriyoshi.akita.jp',
  'nikaho.akita.jp',
  'noshiro.akita.jp',
  'odate.akita.jp',
  'oga.akita.jp',
  'ogata.akita.jp',
  'semboku.akita.jp',
  'yokote.akita.jp',
  'yurihonjo.akita.jp',
  'aomori.aomori.jp',
  'gonohe.aomori.jp',
  'hachinohe.aomori.jp',
  'hashikami.aomori.jp',
  'hiranai.aomori.jp',
  'hirosaki.aomori.jp',
  'itayanagi.aomori.jp',
  'kuroishi.aomori.jp',
  'misawa.aomori.jp',
  'mutsu.aomori.jp',
  'nakadomari.aomori.jp',
  'noheji.aomori.jp',
  'oirase.aomori.jp',
  'owani.aomori.jp',
  'rokunohe.aomori.jp',
  'sannohe.aomori.jp',
  'shichinohe.aomori.jp',
  'shingo.aomori.jp',
  'takko.aomori.jp',
  'towada.aomori.jp',
  'tsugaru.aomori.jp',
  'tsuruta.aomori.jp',
  'abiko.chiba.jp',
  'asahi.chiba.jp',
  'chonan.chiba.jp',
  'chosei.chiba.jp',
  'choshi.chiba.jp',
  'chuo.chiba.jp',
  'funabashi.chiba.jp',
  'futtsu.chiba.jp',
  'hanamigawa.chiba.jp',
  'ichihara.chiba.jp',
  'ichikawa.chiba.jp',
  'ichinomiya.chiba.jp',
  'inzai.chiba.jp',
  'isumi.chiba.jp',
  'kamagaya.chiba.jp',
  'kamogawa.chiba.jp',
  'kashiwa.chiba.jp',
  'katori.chiba.jp',
  'katsuura.chiba.jp',
  'kimitsu.chiba.jp',
  'kisarazu.chiba.jp',
  'kozaki.chiba.jp',
  'kujukuri.chiba.jp',
  'kyonan.chiba.jp',
  'matsudo.chiba.jp',
  'midori.chiba.jp',
  'mihama.chiba.jp',
  'minamiboso.chiba.jp',
  'mobara.chiba.jp',
  'mutsuzawa.chiba.jp',
  'nagara.chiba.jp',
  'nagareyama.chiba.jp',
  'narashino.chiba.jp',
  'narita.chiba.jp',
  'noda.chiba.jp',
  'oamishirasato.chiba.jp',
  'omigawa.chiba.jp',
  'onjuku.chiba.jp',
  'otaki.chiba.jp',
  'sakae.chiba.jp',
  'sakura.chiba.jp',
  'shimofusa.chiba.jp',
  'shirako.chiba.jp',
  'shiroi.chiba.jp',
  'shisui.chiba.jp',
  'sodegaura.chiba.jp',
  'sosa.chiba.jp',
  'tako.chiba.jp',
  'tateyama.chiba.jp',
  'togane.chiba.jp',
  'tohnosho.chiba.jp',
  'tomisato.chiba.jp',
  'urayasu.chiba.jp',
  'yachimata.chiba.jp',
  'yachiyo.chiba.jp',
  'yokaichiba.chiba.jp',
  'yokoshibahikari.chiba.jp',
  'yotsukaido.chiba.jp',
  'ainan.ehime.jp',
  'honai.ehime.jp',
  'ikata.ehime.jp',
  'imabari.ehime.jp',
  'iyo.ehime.jp',
  'kamijima.ehime.jp',
  'kihoku.ehime.jp',
  'kumakogen.ehime.jp',
  'masaki.ehime.jp',
  'matsuno.ehime.jp',
  'matsuyama.ehime.jp',
  'namikata.ehime.jp',
  'niihama.ehime.jp',
  'ozu.ehime.jp',
  'saijo.ehime.jp',
  'seiyo.ehime.jp',
  'shikokuchuo.ehime.jp',
  'tobe.ehime.jp',
  'toon.ehime.jp',
  'uchiko.ehime.jp',
  'uwajima.ehime.jp',
  'yawatahama.ehime.jp',
  'echizen.fukui.jp',
  'eiheiji.fukui.jp',
  'fukui.fukui.jp',
  'ikeda.fukui.jp',
  'katsuyama.fukui.jp',
  'mihama.fukui.jp',
  'minamiechizen.fukui.jp',
  'obama.fukui.jp',
  'ohi.fukui.jp',
  'ono.fukui.jp',
  'sabae.fukui.jp',
  'sakai.fukui.jp',
  'takahama.fukui.jp',
  'tsuruga.fukui.jp',
  'wakasa.fukui.jp',
  'ashiya.fukuoka.jp',
  'buzen.fukuoka.jp',
  'chikugo.fukuoka.jp',
  'chikuho.fukuoka.jp',
  'chikujo.fukuoka.jp',
  'chikushino.fukuoka.jp',
  'chikuzen.fukuoka.jp',
  'chuo.fukuoka.jp',
  'dazaifu.fukuoka.jp',
  'fukuchi.fukuoka.jp',
  'hakata.fukuoka.jp',
  'higashi.fukuoka.jp',
  'hirokawa.fukuoka.jp',
  'hisayama.fukuoka.jp',
  'iizuka.fukuoka.jp',
  'inatsuki.fukuoka.jp',
  'kaho.fukuoka.jp',
  'kasuga.fukuoka.jp',
  'kasuya.fukuoka.jp',
  'kawara.fukuoka.jp',
  'keisen.fukuoka.jp',
  'koga.fukuoka.jp',
  'kurate.fukuoka.jp',
  'kurogi.fukuoka.jp',
  'kurume.fukuoka.jp',
  'minami.fukuoka.jp',
  'miyako.fukuoka.jp',
  'miyama.fukuoka.jp',
  'miyawaka.fukuoka.jp',
  'mizumaki.fukuoka.jp',
  'munakata.fukuoka.jp',
  'nakagawa.fukuoka.jp',
  'nakama.fukuoka.jp',
  'nishi.fukuoka.jp',
  'nogata.fukuoka.jp',
  'ogori.fukuoka.jp',
  'okagaki.fukuoka.jp',
  'okawa.fukuoka.jp',
  'oki.fukuoka.jp',
  'omuta.fukuoka.jp',
  'onga.fukuoka.jp',
  'onojo.fukuoka.jp',
  'oto.fukuoka.jp',
  'saigawa.fukuoka.jp',
  'sasaguri.fukuoka.jp',
  'shingu.fukuoka.jp',
  'shinyoshitomi.fukuoka.jp',
  'shonai.fukuoka.jp',
  'soeda.fukuoka.jp',
  'sue.fukuoka.jp',
  'tachiarai.fukuoka.jp',
  'tagawa.fukuoka.jp',
  'takata.fukuoka.jp',
  'toho.fukuoka.jp',
  'toyotsu.fukuoka.jp',
  'tsuiki.fukuoka.jp',
  'ukiha.fukuoka.jp',
  'umi.fukuoka.jp',
  'usui.fukuoka.jp',
  'yamada.fukuoka.jp',
  'yame.fukuoka.jp',
  'yanagawa.fukuoka.jp',
  'yukuhashi.fukuoka.jp',
  'aizubange.fukushima.jp',
  'aizumisato.fukushima.jp',
  'aizuwakamatsu.fukushima.jp',
  'asakawa.fukushima.jp',
  'bandai.fukushima.jp',
  'date.fukushima.jp',
  'fukushima.fukushima.jp',
  'furudono.fukushima.jp',
  'futaba.fukushima.jp',
  'hanawa.fukushima.jp',
  'higashi.fukushima.jp',
  'hirata.fukushima.jp',
  'hirono.fukushima.jp',
  'iitate.fukushima.jp',
  'inawashiro.fukushima.jp',
  'ishikawa.fukushima.jp',
  'iwaki.fukushima.jp',
  'izumizaki.fukushima.jp',
  'kagamiishi.fukushima.jp',
  'kaneyama.fukushima.jp',
  'kawamata.fukushima.jp',
  'kitakata.fukushima.jp',
  'kitashiobara.fukushima.jp',
  'koori.fukushima.jp',
  'koriyama.fukushima.jp',
  'kunimi.fukushima.jp',
  'miharu.fukushima.jp',
  'mishima.fukushima.jp',
  'namie.fukushima.jp',
  'nango.fukushima.jp',
  'nishiaizu.fukushima.jp',
  'nishigo.fukushima.jp',
  'okuma.fukushima.jp',
  'omotego.fukushima.jp',
  'ono.fukushima.jp',
  'otama.fukushima.jp',
  'samegawa.fukushima.jp',
  'shimogo.fukushima.jp',
  'shirakawa.fukushima.jp',
  'showa.fukushima.jp',
  'soma.fukushima.jp',
  'sukagawa.fukushima.jp',
  'taishin.fukushima.jp',
  'tamakawa.fukushima.jp',
  'tanagura.fukushima.jp',
  'tenei.fukushima.jp',
  'yabuki.fukushima.jp',
  'yamato.fukushima.jp',
  'yamatsuri.fukushima.jp',
  'yanaizu.fukushima.jp',
  'yugawa.fukushima.jp',
  'anpachi.gifu.jp',
  'ena.gifu.jp',
  'gifu.gifu.jp',
  'ginan.gifu.jp',
  'godo.gifu.jp',
  'gujo.gifu.jp',
  'hashima.gifu.jp',
  'hichiso.gifu.jp',
  'hida.gifu.jp',
  'higashishirakawa.gifu.jp',
  'ibigawa.gifu.jp',
  'ikeda.gifu.jp',
  'kakamigahara.gifu.jp',
  'kani.gifu.jp',
  'kasahara.gifu.jp',
  'kasamatsu.gifu.jp',
  'kawaue.gifu.jp',
  'kitagata.gifu.jp',
  'mino.gifu.jp',
  'minokamo.gifu.jp',
  'mitake.gifu.jp',
  'mizunami.gifu.jp',
  'motosu.gifu.jp',
  'nakatsugawa.gifu.jp',
  'ogaki.gifu.jp',
  'sakahogi.gifu.jp',
  'seki.gifu.jp',
  'sekigahara.gifu.jp',
  'shirakawa.gifu.jp',
  'tajimi.gifu.jp',
  'takayama.gifu.jp',
  'tarui.gifu.jp',
  'toki.gifu.jp',
  'tomika.gifu.jp',
  'wanouchi.gifu.jp',
  'yamagata.gifu.jp',
  'yaotsu.gifu.jp',
  'yoro.gifu.jp',
  'annaka.gunma.jp',
  'chiyoda.gunma.jp',
  'fujioka.gunma.jp',
  'higashiagatsuma.gunma.jp',
  'isesaki.gunma.jp',
  'itakura.gunma.jp',
  'kanna.gunma.jp',
  'kanra.gunma.jp',
  'katashina.gunma.jp',
  'kawaba.gunma.jp',
  'kiryu.gunma.jp',
  'kusatsu.gunma.jp',
  'maebashi.gunma.jp',
  'meiwa.gunma.jp',
  'midori.gunma.jp',
  'minakami.gunma.jp',
  'naganohara.gunma.jp',
  'nakanojo.gunma.jp',
  'nanmoku.gunma.jp',
  'numata.gunma.jp',
  'oizumi.gunma.jp',
  'ora.gunma.jp',
  'ota.gunma.jp',
  'shibukawa.gunma.jp',
  'shimonita.gunma.jp',
  'shinto.gunma.jp',
  'showa.gunma.jp',
  'takasaki.gunma.jp',
  'takayama.gunma.jp',
  'tamamura.gunma.jp',
  'tatebayashi.gunma.jp',
  'tomioka.gunma.jp',
  'tsukiyono.gunma.jp',
  'tsumagoi.gunma.jp',
  'ueno.gunma.jp',
  'yoshioka.gunma.jp',
  'asaminami.hiroshima.jp',
  'daiwa.hiroshima.jp',
  'etajima.hiroshima.jp',
  'fuchu.hiroshima.jp',
  'fukuyama.hiroshima.jp',
  'hatsukaichi.hiroshima.jp',
  'higashihiroshima.hiroshima.jp',
  'hongo.hiroshima.jp',
  'jinsekikogen.hiroshima.jp',
  'kaita.hiroshima.jp',
  'kui.hiroshima.jp',
  'kumano.hiroshima.jp',
  'kure.hiroshima.jp',
  'mihara.hiroshima.jp',
  'miyoshi.hiroshima.jp',
  'naka.hiroshima.jp',
  'onomichi.hiroshima.jp',
  'osakikamijima.hiroshima.jp',
  'otake.hiroshima.jp',
  'saka.hiroshima.jp',
  'sera.hiroshima.jp',
  'seranishi.hiroshima.jp',
  'shinichi.hiroshima.jp',
  'shobara.hiroshima.jp',
  'takehara.hiroshima.jp',
  'abashiri.hokkaido.jp',
  'abira.hokkaido.jp',
  'aibetsu.hokkaido.jp',
  'akabira.hokkaido.jp',
  'akkeshi.hokkaido.jp',
  'asahikawa.hokkaido.jp',
  'ashibetsu.hokkaido.jp',
  'ashoro.hokkaido.jp',
  'assabu.hokkaido.jp',
  'atsuma.hokkaido.jp',
  'bibai.hokkaido.jp',
  'biei.hokkaido.jp',
  'bifuka.hokkaido.jp',
  'bihoro.hokkaido.jp',
  'biratori.hokkaido.jp',
  'chippubetsu.hokkaido.jp',
  'chitose.hokkaido.jp',
  'date.hokkaido.jp',
  'ebetsu.hokkaido.jp',
  'embetsu.hokkaido.jp',
  'eniwa.hokkaido.jp',
  'erimo.hokkaido.jp',
  'esan.hokkaido.jp',
  'esashi.hokkaido.jp',
  'fukagawa.hokkaido.jp',
  'fukushima.hokkaido.jp',
  'furano.hokkaido.jp',
  'furubira.hokkaido.jp',
  'haboro.hokkaido.jp',
  'hakodate.hokkaido.jp',
  'hamatonbetsu.hokkaido.jp',
  'hidaka.hokkaido.jp',
  'higashikagura.hokkaido.jp',
  'higashikawa.hokkaido.jp',
  'hiroo.hokkaido.jp',
  'hokuryu.hokkaido.jp',
  'hokuto.hokkaido.jp',
  'honbetsu.hokkaido.jp',
  'horokanai.hokkaido.jp',
  'horonobe.hokkaido.jp',
  'ikeda.hokkaido.jp',
  'imakane.hokkaido.jp',
  'ishikari.hokkaido.jp',
  'iwamizawa.hokkaido.jp',
  'iwanai.hokkaido.jp',
  'kamifurano.hokkaido.jp',
  'kamikawa.hokkaido.jp',
  'kamishihoro.hokkaido.jp',
  'kamisunagawa.hokkaido.jp',
  'kamoenai.hokkaido.jp',
  'kayabe.hokkaido.jp',
  'kembuchi.hokkaido.jp',
  'kikonai.hokkaido.jp',
  'kimobetsu.hokkaido.jp',
  'kitahiroshima.hokkaido.jp',
  'kitami.hokkaido.jp',
  'kiyosato.hokkaido.jp',
  'koshimizu.hokkaido.jp',
  'kunneppu.hokkaido.jp',
  'kuriyama.hokkaido.jp',
  'kuromatsunai.hokkaido.jp',
  'kushiro.hokkaido.jp',
  'kutchan.hokkaido.jp',
  'kyowa.hokkaido.jp',
  'mashike.hokkaido.jp',
  'matsumae.hokkaido.jp',
  'mikasa.hokkaido.jp',
  'minamifurano.hokkaido.jp',
  'mombetsu.hokkaido.jp',
  'moseushi.hokkaido.jp',
  'mukawa.hokkaido.jp',
  'muroran.hokkaido.jp',
  'naie.hokkaido.jp',
  'nakagawa.hokkaido.jp',
  'nakasatsunai.hokkaido.jp',
  'nakatombetsu.hokkaido.jp',
  'nanae.hokkaido.jp',
  'nanporo.hokkaido.jp',
  'nayoro.hokkaido.jp',
  'nemuro.hokkaido.jp',
  'niikappu.hokkaido.jp',
  'niki.hokkaido.jp',
  'nishiokoppe.hokkaido.jp',
  'noboribetsu.hokkaido.jp',
  'numata.hokkaido.jp',
  'obihiro.hokkaido.jp',
  'obira.hokkaido.jp',
  'oketo.hokkaido.jp',
  'okoppe.hokkaido.jp',
  'otaru.hokkaido.jp',
  'otobe.hokkaido.jp',
  'otofuke.hokkaido.jp',
  'otoineppu.hokkaido.jp',
  'oumu.hokkaido.jp',
  'ozora.hokkaido.jp',
  'pippu.hokkaido.jp',
  'rankoshi.hokkaido.jp',
  'rebun.hokkaido.jp',
  'rikubetsu.hokkaido.jp',
  'rishiri.hokkaido.jp',
  'rishirifuji.hokkaido.jp',
  'saroma.hokkaido.jp',
  'sarufutsu.hokkaido.jp',
  'shakotan.hokkaido.jp',
  'shari.hokkaido.jp',
  'shibecha.hokkaido.jp',
  'shibetsu.hokkaido.jp',
  'shikabe.hokkaido.jp',
  'shikaoi.hokkaido.jp',
  'shimamaki.hokkaido.jp',
  'shimizu.hokkaido.jp',
  'shimokawa.hokkaido.jp',
  'shinshinotsu.hokkaido.jp',
  'shintoku.hokkaido.jp',
  'shiranuka.hokkaido.jp',
  'shiraoi.hokkaido.jp',
  'shiriuchi.hokkaido.jp',
  'sobetsu.hokkaido.jp',
  'sunagawa.hokkaido.jp',
  'taiki.hokkaido.jp',
  'takasu.hokkaido.jp',
  'takikawa.hokkaido.jp',
  'takinoue.hokkaido.jp',
  'teshikaga.hokkaido.jp',
  'tobetsu.hokkaido.jp',
  'tohma.hokkaido.jp',
  'tomakomai.hokkaido.jp',
  'tomari.hokkaido.jp',
  'toya.hokkaido.jp',
  'toyako.hokkaido.jp',
  'toyotomi.hokkaido.jp',
  'toyoura.hokkaido.jp',
  'tsubetsu.hokkaido.jp',
  'tsukigata.hokkaido.jp',
  'urakawa.hokkaido.jp',
  'urausu.hokkaido.jp',
  'uryu.hokkaido.jp',
  'utashinai.hokkaido.jp',
  'wakkanai.hokkaido.jp',
  'wassamu.hokkaido.jp',
  'yakumo.hokkaido.jp',
  'yoichi.hokkaido.jp',
  'aioi.hyogo.jp',
  'akashi.hyogo.jp',
  'ako.hyogo.jp',
  'amagasaki.hyogo.jp',
  'aogaki.hyogo.jp',
  'asago.hyogo.jp',
  'ashiya.hyogo.jp',
  'awaji.hyogo.jp',
  'fukusaki.hyogo.jp',
  'goshiki.hyogo.jp',
  'harima.hyogo.jp',
  'himeji.hyogo.jp',
  'ichikawa.hyogo.jp',
  'inagawa.hyogo.jp',
  'itami.hyogo.jp',
  'kakogawa.hyogo.jp',
  'kamigori.hyogo.jp',
  'kamikawa.hyogo.jp',
  'kasai.hyogo.jp',
  'kasuga.hyogo.jp',
  'kawanishi.hyogo.jp',
  'miki.hyogo.jp',
  'minamiawaji.hyogo.jp',
  'nishinomiya.hyogo.jp',
  'nishiwaki.hyogo.jp',
  'ono.hyogo.jp',
  'sanda.hyogo.jp',
  'sannan.hyogo.jp',
  'sasayama.hyogo.jp',
  'sayo.hyogo.jp',
  'shingu.hyogo.jp',
  'shinonsen.hyogo.jp',
  'shiso.hyogo.jp',
  'sumoto.hyogo.jp',
  'taishi.hyogo.jp',
  'taka.hyogo.jp',
  'takarazuka.hyogo.jp',
  'takasago.hyogo.jp',
  'takino.hyogo.jp',
  'tamba.hyogo.jp',
  'tatsuno.hyogo.jp',
  'toyooka.hyogo.jp',
  'yabu.hyogo.jp',
  'yashiro.hyogo.jp',
  'yoka.hyogo.jp',
  'yokawa.hyogo.jp',
  'ami.ibaraki.jp',
  'asahi.ibaraki.jp',
  'bando.ibaraki.jp',
  'chikusei.ibaraki.jp',
  'daigo.ibaraki.jp',
  'fujishiro.ibaraki.jp',
  'hitachi.ibaraki.jp',
  'hitachinaka.ibaraki.jp',
  'hitachiomiya.ibaraki.jp',
  'hitachiota.ibaraki.jp',
  'ibaraki.ibaraki.jp',
  'ina.ibaraki.jp',
  'inashiki.ibaraki.jp',
  'itako.ibaraki.jp',
  'iwama.ibaraki.jp',
  'joso.ibaraki.jp',
  'kamisu.ibaraki.jp',
  'kasama.ibaraki.jp',
  'kashima.ibaraki.jp',
  'kasumigaura.ibaraki.jp',
  'koga.ibaraki.jp',
  'miho.ibaraki.jp',
  'mito.ibaraki.jp',
  'moriya.ibaraki.jp',
  'naka.ibaraki.jp',
  'namegata.ibaraki.jp',
  'oarai.ibaraki.jp',
  'ogawa.ibaraki.jp',
  'omitama.ibaraki.jp',
  'ryugasaki.ibaraki.jp',
  'sakai.ibaraki.jp',
  'sakuragawa.ibaraki.jp',
  'shimodate.ibaraki.jp',
  'shimotsuma.ibaraki.jp',
  'shirosato.ibaraki.jp',
  'sowa.ibaraki.jp',
  'suifu.ibaraki.jp',
  'takahagi.ibaraki.jp',
  'tamatsukuri.ibaraki.jp',
  'tokai.ibaraki.jp',
  'tomobe.ibaraki.jp',
  'tone.ibaraki.jp',
  'toride.ibaraki.jp',
  'tsuchiura.ibaraki.jp',
  'tsukuba.ibaraki.jp',
  'uchihara.ibaraki.jp',
  'ushiku.ibaraki.jp',
  'yachiyo.ibaraki.jp',
  'yamagata.ibaraki.jp',
  'yawara.ibaraki.jp',
  'yuki.ibaraki.jp',
  'anamizu.ishikawa.jp',
  'hakui.ishikawa.jp',
  'hakusan.ishikawa.jp',
  'kaga.ishikawa.jp',
  'kahoku.ishikawa.jp',
  'kanazawa.ishikawa.jp',
  'kawakita.ishikawa.jp',
  'komatsu.ishikawa.jp',
  'nakanoto.ishikawa.jp',
  'nanao.ishikawa.jp',
  'nomi.ishikawa.jp',
  'nonoichi.ishikawa.jp',
  'noto.ishikawa.jp',
  'shika.ishikawa.jp',
  'suzu.ishikawa.jp',
  'tsubata.ishikawa.jp',
  'tsurugi.ishikawa.jp',
  'uchinada.ishikawa.jp',
  'wajima.ishikawa.jp',
  'fudai.iwate.jp',
  'fujisawa.iwate.jp',
  'hanamaki.iwate.jp',
  'hiraizumi.iwate.jp',
  'hirono.iwate.jp',
  'ichinohe.iwate.jp',
  'ichinoseki.iwate.jp',
  'iwaizumi.iwate.jp',
  'iwate.iwate.jp',
  'joboji.iwate.jp',
  'kamaishi.iwate.jp',
  'kanegasaki.iwate.jp',
  'karumai.iwate.jp',
  'kawai.iwate.jp',
  'kitakami.iwate.jp',
  'kuji.iwate.jp',
  'kunohe.iwate.jp',
  'kuzumaki.iwate.jp',
  'miyako.iwate.jp',
  'mizusawa.iwate.jp',
  'morioka.iwate.jp',
  'ninohe.iwate.jp',
  'noda.iwate.jp',
  'ofunato.iwate.jp',
  'oshu.iwate.jp',
  'otsuchi.iwate.jp',
  'rikuzentakata.iwate.jp',
  'shiwa.iwate.jp',
  'shizukuishi.iwate.jp',
  'sumita.iwate.jp',
  'tanohata.iwate.jp',
  'tono.iwate.jp',
  'yahaba.iwate.jp',
  'yamada.iwate.jp',
  'ayagawa.kagawa.jp',
  'higashikagawa.kagawa.jp',
  'kanonji.kagawa.jp',
  'kotohira.kagawa.jp',
  'manno.kagawa.jp',
  'marugame.kagawa.jp',
  'mitoyo.kagawa.jp',
  'naoshima.kagawa.jp',
  'sanuki.kagawa.jp',
  'tadotsu.kagawa.jp',
  'takamatsu.kagawa.jp',
  'tonosho.kagawa.jp',
  'uchinomi.kagawa.jp',
  'utazu.kagawa.jp',
  'zentsuji.kagawa.jp',
  'akune.kagoshima.jp',
  'amami.kagoshima.jp',
  'hioki.kagoshima.jp',
  'isa.kagoshima.jp',
  'isen.kagoshima.jp',
  'izumi.kagoshima.jp',
  'kagoshima.kagoshima.jp',
  'kanoya.kagoshima.jp',
  'kawanabe.kagoshima.jp',
  'kinko.kagoshima.jp',
  'kouyama.kagoshima.jp',
  'makurazaki.kagoshima.jp',
  'matsumoto.kagoshima.jp',
  'minamitane.kagoshima.jp',
  'nakatane.kagoshima.jp',
  'nishinoomote.kagoshima.jp',
  'satsumasendai.kagoshima.jp',
  'soo.kagoshima.jp',
  'tarumizu.kagoshima.jp',
  'yusui.kagoshima.jp',
  'aikawa.kanagawa.jp',
  'atsugi.kanagawa.jp',
  'ayase.kanagawa.jp',
  'chigasaki.kanagawa.jp',
  'ebina.kanagawa.jp',
  'fujisawa.kanagawa.jp',
  'hadano.kanagawa.jp',
  'hakone.kanagawa.jp',
  'hiratsuka.kanagawa.jp',
  'isehara.kanagawa.jp',
  'kaisei.kanagawa.jp',
  'kamakura.kanagawa.jp',
  'kiyokawa.kanagawa.jp',
  'matsuda.kanagawa.jp',
  'minamiashigara.kanagawa.jp',
  'miura.kanagawa.jp',
  'nakai.kanagawa.jp',
  'ninomiya.kanagawa.jp',
  'odawara.kanagawa.jp',
  'oi.kanagawa.jp',
  'oiso.kanagawa.jp',
  'sagamihara.kanagawa.jp',
  'samukawa.kanagawa.jp',
  'tsukui.kanagawa.jp',
  'yamakita.kanagawa.jp',
  'yamato.kanagawa.jp',
  'yokosuka.kanagawa.jp',
  'yugawara.kanagawa.jp',
  'zama.kanagawa.jp',
  'zushi.kanagawa.jp',
  'aki.kochi.jp',
  'geisei.kochi.jp',
  'hidaka.kochi.jp',
  'higashitsuno.kochi.jp',
  'ino.kochi.jp',
  'kagami.kochi.jp',
  'kami.kochi.jp',
  'kitagawa.kochi.jp',
  'kochi.kochi.jp',
  'mihara.kochi.jp',
  'motoyama.kochi.jp',
  'muroto.kochi.jp',
  'nahari.kochi.jp',
  'nakamura.kochi.jp',
  'nankoku.kochi.jp',
  'nishitosa.kochi.jp',
  'niyodogawa.kochi.jp',
  'ochi.kochi.jp',
  'okawa.kochi.jp',
  'otoyo.kochi.jp',
  'otsuki.kochi.jp',
  'sakawa.kochi.jp',
  'sukumo.kochi.jp',
  'susaki.kochi.jp',
  'tosa.kochi.jp',
  'tosashimizu.kochi.jp',
  'toyo.kochi.jp',
  'tsuno.kochi.jp',
  'umaji.kochi.jp',
  'yasuda.kochi.jp',
  'yusuhara.kochi.jp',
  'amakusa.kumamoto.jp',
  'arao.kumamoto.jp',
  'aso.kumamoto.jp',
  'choyo.kumamoto.jp',
  'gyokuto.kumamoto.jp',
  'kamiamakusa.kumamoto.jp',
  'kikuchi.kumamoto.jp',
  'kumamoto.kumamoto.jp',
  'mashiki.kumamoto.jp',
  'mifune.kumamoto.jp',
  'minamata.kumamoto.jp',
  'minamioguni.kumamoto.jp',
  'nagasu.kumamoto.jp',
  'nishihara.kumamoto.jp',
  'oguni.kumamoto.jp',
  'ozu.kumamoto.jp',
  'sumoto.kumamoto.jp',
  'takamori.kumamoto.jp',
  'uki.kumamoto.jp',
  'uto.kumamoto.jp',
  'yamaga.kumamoto.jp',
  'yamato.kumamoto.jp',
  'yatsushiro.kumamoto.jp',
  'ayabe.kyoto.jp',
  'fukuchiyama.kyoto.jp',
  'higashiyama.kyoto.jp',
  'ide.kyoto.jp',
  'ine.kyoto.jp',
  'joyo.kyoto.jp',
  'kameoka.kyoto.jp',
  'kamo.kyoto.jp',
  'kita.kyoto.jp',
  'kizu.kyoto.jp',
  'kumiyama.kyoto.jp',
  'kyotamba.kyoto.jp',
  'kyotanabe.kyoto.jp',
  'kyotango.kyoto.jp',
  'maizuru.kyoto.jp',
  'minami.kyoto.jp',
  'minamiyamashiro.kyoto.jp',
  'miyazu.kyoto.jp',
  'muko.kyoto.jp',
  'nagaokakyo.kyoto.jp',
  'nakagyo.kyoto.jp',
  'nantan.kyoto.jp',
  'oyamazaki.kyoto.jp',
  'sakyo.kyoto.jp',
  'seika.kyoto.jp',
  'tanabe.kyoto.jp',
  'uji.kyoto.jp',
  'ujitawara.kyoto.jp',
  'wazuka.kyoto.jp',
  'yamashina.kyoto.jp',
  'yawata.kyoto.jp',
  'asahi.mie.jp',
  'inabe.mie.jp',
  'ise.mie.jp',
  'kameyama.mie.jp',
  'kawagoe.mie.jp',
  'kiho.mie.jp',
  'kisosaki.mie.jp',
  'kiwa.mie.jp',
  'komono.mie.jp',
  'kumano.mie.jp',
  'kuwana.mie.jp',
  'matsusaka.mie.jp',
  'meiwa.mie.jp',
  'mihama.mie.jp',
  'minamiise.mie.jp',
  'misugi.mie.jp',
  'miyama.mie.jp',
  'nabari.mie.jp',
  'shima.mie.jp',
  'suzuka.mie.jp',
  'tado.mie.jp',
  'taiki.mie.jp',
  'taki.mie.jp',
  'tamaki.mie.jp',
  'toba.mie.jp',
  'tsu.mie.jp',
  'udono.mie.jp',
  'ureshino.mie.jp',
  'watarai.mie.jp',
  'yokkaichi.mie.jp',
  'furukawa.miyagi.jp',
  'higashimatsushima.miyagi.jp',
  'ishinomaki.miyagi.jp',
  'iwanuma.miyagi.jp',
  'kakuda.miyagi.jp',
  'kami.miyagi.jp',
  'kawasaki.miyagi.jp',
  'marumori.miyagi.jp',
  'matsushima.miyagi.jp',
  'minamisanriku.miyagi.jp',
  'misato.miyagi.jp',
  'murata.miyagi.jp',
  'natori.miyagi.jp',
  'ogawara.miyagi.jp',
  'ohira.miyagi.jp',
  'onagawa.miyagi.jp',
  'osaki.miyagi.jp',
  'rifu.miyagi.jp',
  'semine.miyagi.jp',
  'shibata.miyagi.jp',
  'shichikashuku.miyagi.jp',
  'shikama.miyagi.jp',
  'shiogama.miyagi.jp',
  'shiroishi.miyagi.jp',
  'tagajo.miyagi.jp',
  'taiwa.miyagi.jp',
  'tome.miyagi.jp',
  'tomiya.miyagi.jp',
  'wakuya.miyagi.jp',
  'watari.miyagi.jp',
  'yamamoto.miyagi.jp',
  'zao.miyagi.jp',
  'aya.miyazaki.jp',
  'ebino.miyazaki.jp',
  'gokase.miyazaki.jp',
  'hyuga.miyazaki.jp',
  'kadogawa.miyazaki.jp',
  'kawaminami.miyazaki.jp',
  'kijo.miyazaki.jp',
  'kitagawa.miyazaki.jp',
  'kitakata.miyazaki.jp',
  'kitaura.miyazaki.jp',
  'kobayashi.miyazaki.jp',
  'kunitomi.miyazaki.jp',
  'kushima.miyazaki.jp',
  'mimata.miyazaki.jp',
  'miyakonojo.miyazaki.jp',
  'miyazaki.miyazaki.jp',
  'morotsuka.miyazaki.jp',
  'nichinan.miyazaki.jp',
  'nishimera.miyazaki.jp',
  'nobeoka.miyazaki.jp',
  'saito.miyazaki.jp',
  'shiiba.miyazaki.jp',
  'shintomi.miyazaki.jp',
  'takaharu.miyazaki.jp',
  'takanabe.miyazaki.jp',
  'takazaki.miyazaki.jp',
  'tsuno.miyazaki.jp',
  'achi.nagano.jp',
  'agematsu.nagano.jp',
  'anan.nagano.jp',
  'aoki.nagano.jp',
  'asahi.nagano.jp',
  'azumino.nagano.jp',
  'chikuhoku.nagano.jp',
  'chikuma.nagano.jp',
  'chino.nagano.jp',
  'fujimi.nagano.jp',
  'hakuba.nagano.jp',
  'hara.nagano.jp',
  'hiraya.nagano.jp',
  'iida.nagano.jp',
  'iijima.nagano.jp',
  'iiyama.nagano.jp',
  'iizuna.nagano.jp',
  'ikeda.nagano.jp',
  'ikusaka.nagano.jp',
  'ina.nagano.jp',
  'karuizawa.nagano.jp',
  'kawakami.nagano.jp',
  'kiso.nagano.jp',
  'kisofukushima.nagano.jp',
  'kitaaiki.nagano.jp',
  'komagane.nagano.jp',
  'komoro.nagano.jp',
  'matsukawa.nagano.jp',
  'matsumoto.nagano.jp',
  'miasa.nagano.jp',
  'minamiaiki.nagano.jp',
  'minamimaki.nagano.jp',
  'minamiminowa.nagano.jp',
  'minowa.nagano.jp',
  'miyada.nagano.jp',
  'miyota.nagano.jp',
  'mochizuki.nagano.jp',
  'nagano.nagano.jp',
  'nagawa.nagano.jp',
  'nagiso.nagano.jp',
  'nakagawa.nagano.jp',
  'nakano.nagano.jp',
  'nozawaonsen.nagano.jp',
  'obuse.nagano.jp',
  'ogawa.nagano.jp',
  'okaya.nagano.jp',
  'omachi.nagano.jp',
  'omi.nagano.jp',
  'ookuwa.nagano.jp',
  'ooshika.nagano.jp',
  'otaki.nagano.jp',
  'otari.nagano.jp',
  'sakae.nagano.jp',
  'sakaki.nagano.jp',
  'saku.nagano.jp',
  'sakuho.nagano.jp',
  'shimosuwa.nagano.jp',
  'shinanomachi.nagano.jp',
  'shiojiri.nagano.jp',
  'suwa.nagano.jp',
  'suzaka.nagano.jp',
  'takagi.nagano.jp',
  'takamori.nagano.jp',
  'takayama.nagano.jp',
  'tateshina.nagano.jp',
  'tatsuno.nagano.jp',
  'togakushi.nagano.jp',
  'togura.nagano.jp',
  'tomi.nagano.jp',
  'ueda.nagano.jp',
  'wada.nagano.jp',
  'yamagata.nagano.jp',
  'yamanouchi.nagano.jp',
  'yasaka.nagano.jp',
  'yasuoka.nagano.jp',
  'chijiwa.nagasaki.jp',
  'futsu.nagasaki.jp',
  'goto.nagasaki.jp',
  'hasami.nagasaki.jp',
  'hirado.nagasaki.jp',
  'iki.nagasaki.jp',
  'isahaya.nagasaki.jp',
  'kawatana.nagasaki.jp',
  'kuchinotsu.nagasaki.jp',
  'matsuura.nagasaki.jp',
  'nagasaki.nagasaki.jp',
  'obama.nagasaki.jp',
  'omura.nagasaki.jp',
  'oseto.nagasaki.jp',
  'saikai.nagasaki.jp',
  'sasebo.nagasaki.jp',
  'seihi.nagasaki.jp',
  'shimabara.nagasaki.jp',
  'shinkamigoto.nagasaki.jp',
  'togitsu.nagasaki.jp',
  'tsushima.nagasaki.jp',
  'unzen.nagasaki.jp',
  'ando.nara.jp',
  'gose.nara.jp',
  'heguri.nara.jp',
  'higashiyoshino.nara.jp',
  'ikaruga.nara.jp',
  'ikoma.nara.jp',
  'kamikitayama.nara.jp',
  'kanmaki.nara.jp',
  'kashiba.nara.jp',
  'kashihara.nara.jp',
  'katsuragi.nara.jp',
  'kawai.nara.jp',
  'kawakami.nara.jp',
  'kawanishi.nara.jp',
  'koryo.nara.jp',
  'kurotaki.nara.jp',
  'mitsue.nara.jp',
  'miyake.nara.jp',
  'nara.nara.jp',
  'nosegawa.nara.jp',
  'oji.nara.jp',
  'ouda.nara.jp',
  'oyodo.nara.jp',
  'sakurai.nara.jp',
  'sango.nara.jp',
  'shimoichi.nara.jp',
  'shimokitayama.nara.jp',
  'shinjo.nara.jp',
  'soni.nara.jp',
  'takatori.nara.jp',
  'tawaramoto.nara.jp',
  'tenkawa.nara.jp',
  'tenri.nara.jp',
  'uda.nara.jp',
  'yamatokoriyama.nara.jp',
  'yamatotakada.nara.jp',
  'yamazoe.nara.jp',
  'yoshino.nara.jp',
  'aga.niigata.jp',
  'agano.niigata.jp',
  'gosen.niigata.jp',
  'itoigawa.niigata.jp',
  'izumozaki.niigata.jp',
  'joetsu.niigata.jp',
  'kamo.niigata.jp',
  'kariwa.niigata.jp',
  'kashiwazaki.niigata.jp',
  'minamiuonuma.niigata.jp',
  'mitsuke.niigata.jp',
  'muika.niigata.jp',
  'murakami.niigata.jp',
  'myoko.niigata.jp',
  'nagaoka.niigata.jp',
  'niigata.niigata.jp',
  'ojiya.niigata.jp',
  'omi.niigata.jp',
  'sado.niigata.jp',
  'sanjo.niigata.jp',
  'seiro.niigata.jp',
  'seirou.niigata.jp',
  'sekikawa.niigata.jp',
  'shibata.niigata.jp',
  'tagami.niigata.jp',
  'tainai.niigata.jp',
  'tochio.niigata.jp',
  'tokamachi.niigata.jp',
  'tsubame.niigata.jp',
  'tsunan.niigata.jp',
  'uonuma.niigata.jp',
  'yahiko.niigata.jp',
  'yoita.niigata.jp',
  'yuzawa.niigata.jp',
  'beppu.oita.jp',
  'bungoono.oita.jp',
  'bungotakada.oita.jp',
  'hasama.oita.jp',
  'hiji.oita.jp',
  'himeshima.oita.jp',
  'hita.oita.jp',
  'kamitsue.oita.jp',
  'kokonoe.oita.jp',
  'kuju.oita.jp',
  'kunisaki.oita.jp',
  'kusu.oita.jp',
  'oita.oita.jp',
  'saiki.oita.jp',
  'taketa.oita.jp',
  'tsukumi.oita.jp',
  'usa.oita.jp',
  'usuki.oita.jp',
  'yufu.oita.jp',
  'akaiwa.okayama.jp',
  'asakuchi.okayama.jp',
  'bizen.okayama.jp',
  'hayashima.okayama.jp',
  'ibara.okayama.jp',
  'kagamino.okayama.jp',
  'kasaoka.okayama.jp',
  'kibichuo.okayama.jp',
  'kumenan.okayama.jp',
  'kurashiki.okayama.jp',
  'maniwa.okayama.jp',
  'misaki.okayama.jp',
  'nagi.okayama.jp',
  'niimi.okayama.jp',
  'nishiawakura.okayama.jp',
  'okayama.okayama.jp',
  'satosho.okayama.jp',
  'setouchi.okayama.jp',
  'shinjo.okayama.jp',
  'shoo.okayama.jp',
  'soja.okayama.jp',
  'takahashi.okayama.jp',
  'tamano.okayama.jp',
  'tsuyama.okayama.jp',
  'wake.okayama.jp',
  'yakage.okayama.jp',
  'aguni.okinawa.jp',
  'ginowan.okinawa.jp',
  'ginoza.okinawa.jp',
  'gushikami.okinawa.jp',
  'haebaru.okinawa.jp',
  'higashi.okinawa.jp',
  'hirara.okinawa.jp',
  'iheya.okinawa.jp',
  'ishigaki.okinawa.jp',
  'ishikawa.okinawa.jp',
  'itoman.okinawa.jp',
  'izena.okinawa.jp',
  'kadena.okinawa.jp',
  'kin.okinawa.jp',
  'kitadaito.okinawa.jp',
  'kitanakagusuku.okinawa.jp',
  'kumejima.okinawa.jp',
  'kunigami.okinawa.jp',
  'minamidaito.okinawa.jp',
  'motobu.okinawa.jp',
  'nago.okinawa.jp',
  'naha.okinawa.jp',
  'nakagusuku.okinawa.jp',
  'nakijin.okinawa.jp',
  'nanjo.okinawa.jp',
  'nishihara.okinawa.jp',
  'ogimi.okinawa.jp',
  'okinawa.okinawa.jp',
  'onna.okinawa.jp',
  'shimoji.okinawa.jp',
  'taketomi.okinawa.jp',
  'tarama.okinawa.jp',
  'tokashiki.okinawa.jp',
  'tomigusuku.okinawa.jp',
  'tonaki.okinawa.jp',
  'urasoe.okinawa.jp',
  'uruma.okinawa.jp',
  'yaese.okinawa.jp',
  'yomitan.okinawa.jp',
  'yonabaru.okinawa.jp',
  'yonaguni.okinawa.jp',
  'zamami.okinawa.jp',
  'abeno.osaka.jp',
  'chihayaakasaka.osaka.jp',
  'chuo.osaka.jp',
  'daito.osaka.jp',
  'fujiidera.osaka.jp',
  'habikino.osaka.jp',
  'hannan.osaka.jp',
  'higashiosaka.osaka.jp',
  'higashisumiyoshi.osaka.jp',
  'higashiyodogawa.osaka.jp',
  'hirakata.osaka.jp',
  'ibaraki.osaka.jp',
  'ikeda.osaka.jp',
  'izumi.osaka.jp',
  'izumiotsu.osaka.jp',
  'izumisano.osaka.jp',
  'kadoma.osaka.jp',
  'kaizuka.osaka.jp',
  'kanan.osaka.jp',
  'kashiwara.osaka.jp',
  'katano.osaka.jp',
  'kawachinagano.osaka.jp',
  'kishiwada.osaka.jp',
  'kita.osaka.jp',
  'kumatori.osaka.jp',
  'matsubara.osaka.jp',
  'minato.osaka.jp',
  'minoh.osaka.jp',
  'misaki.osaka.jp',
  'moriguchi.osaka.jp',
  'neyagawa.osaka.jp',
  'nishi.osaka.jp',
  'nose.osaka.jp',
  'osakasayama.osaka.jp',
  'sakai.osaka.jp',
  'sayama.osaka.jp',
  'sennan.osaka.jp',
  'settsu.osaka.jp',
  'shijonawate.osaka.jp',
  'shimamoto.osaka.jp',
  'suita.osaka.jp',
  'tadaoka.osaka.jp',
  'taishi.osaka.jp',
  'tajiri.osaka.jp',
  'takaishi.osaka.jp',
  'takatsuki.osaka.jp',
  'tondabayashi.osaka.jp',
  'toyonaka.osaka.jp',
  'toyono.osaka.jp',
  'yao.osaka.jp',
  'ariake.saga.jp',
  'arita.saga.jp',
  'fukudomi.saga.jp',
  'genkai.saga.jp',
  'hamatama.saga.jp',
  'hizen.saga.jp',
  'imari.saga.jp',
  'kamimine.saga.jp',
  'kanzaki.saga.jp',
  'karatsu.saga.jp',
  'kashima.saga.jp',
  'kitagata.saga.jp',
  'kitahata.saga.jp',
  'kiyama.saga.jp',
  'kouhoku.saga.jp',
  'kyuragi.saga.jp',
  'nishiarita.saga.jp',
  'ogi.saga.jp',
  'omachi.saga.jp',
  'ouchi.saga.jp',
  'saga.saga.jp',
  'shiroishi.saga.jp',
  'taku.saga.jp',
  'tara.saga.jp',
  'tosu.saga.jp',
  'yoshinogari.saga.jp',
  'arakawa.saitama.jp',
  'asaka.saitama.jp',
  'chichibu.saitama.jp',
  'fujimi.saitama.jp',
  'fujimino.saitama.jp',
  'fukaya.saitama.jp',
  'hanno.saitama.jp',
  'hanyu.saitama.jp',
  'hasuda.saitama.jp',
  'hatogaya.saitama.jp',
  'hatoyama.saitama.jp',
  'hidaka.saitama.jp',
  'higashichichibu.saitama.jp',
  'higashimatsuyama.saitama.jp',
  'honjo.saitama.jp',
  'ina.saitama.jp',
  'iruma.saitama.jp',
  'iwatsuki.saitama.jp',
  'kamiizumi.saitama.jp',
  'kamikawa.saitama.jp',
  'kamisato.saitama.jp',
  'kasukabe.saitama.jp',
  'kawagoe.saitama.jp',
  'kawaguchi.saitama.jp',
  'kawajima.saitama.jp',
  'kazo.saitama.jp',
  'kitamoto.saitama.jp',
  'koshigaya.saitama.jp',
  'kounosu.saitama.jp',
  'kuki.saitama.jp',
  'kumagaya.saitama.jp',
  'matsubushi.saitama.jp',
  'minano.saitama.jp',
  'misato.saitama.jp',
  'miyashiro.saitama.jp',
  'miyoshi.saitama.jp',
  'moroyama.saitama.jp',
  'nagatoro.saitama.jp',
  'namegawa.saitama.jp',
  'niiza.saitama.jp',
  'ogano.saitama.jp',
  'ogawa.saitama.jp',
  'ogose.saitama.jp',
  'okegawa.saitama.jp',
  'omiya.saitama.jp',
  'otaki.saitama.jp',
  'ranzan.saitama.jp',
  'ryokami.saitama.jp',
  'saitama.saitama.jp',
  'sakado.saitama.jp',
  'satte.saitama.jp',
  'sayama.saitama.jp',
  'shiki.saitama.jp',
  'shiraoka.saitama.jp',
  'soka.saitama.jp',
  'sugito.saitama.jp',
  'toda.saitama.jp',
  'tokigawa.saitama.jp',
  'tokorozawa.saitama.jp',
  'tsurugashima.saitama.jp',
  'urawa.saitama.jp',
  'warabi.saitama.jp',
  'yashio.saitama.jp',
  'yokoze.saitama.jp',
  'yono.saitama.jp',
  'yorii.saitama.jp',
  'yoshida.saitama.jp',
  'yoshikawa.saitama.jp',
  'yoshimi.saitama.jp',
  'aisho.shiga.jp',
  'gamo.shiga.jp',
  'higashiomi.shiga.jp',
  'hikone.shiga.jp',
  'koka.shiga.jp',
  'konan.shiga.jp',
  'kosei.shiga.jp',
  'koto.shiga.jp',
  'kusatsu.shiga.jp',
  'maibara.shiga.jp',
  'moriyama.shiga.jp',
  'nagahama.shiga.jp',
  'nishiazai.shiga.jp',
  'notogawa.shiga.jp',
  'omihachiman.shiga.jp',
  'otsu.shiga.jp',
  'ritto.shiga.jp',
  'ryuoh.shiga.jp',
  'takashima.shiga.jp',
  'takatsuki.shiga.jp',
  'torahime.shiga.jp',
  'toyosato.shiga.jp',
  'yasu.shiga.jp',
  'akagi.shimane.jp',
  'ama.shimane.jp',
  'gotsu.shimane.jp',
  'hamada.shimane.jp',
  'higashiizumo.shimane.jp',
  'hikawa.shimane.jp',
  'hikimi.shimane.jp',
  'izumo.shimane.jp',
  'kakinoki.shimane.jp',
  'masuda.shimane.jp',
  'matsue.shimane.jp',
  'misato.shimane.jp',
  'nishinoshima.shimane.jp',
  'ohda.shimane.jp',
  'okinoshima.shimane.jp',
  'okuizumo.shimane.jp',
  'shimane.shimane.jp',
  'tamayu.shimane.jp',
  'tsuwano.shimane.jp',
  'unnan.shimane.jp',
  'yakumo.shimane.jp',
  'yasugi.shimane.jp',
  'yatsuka.shimane.jp',
  'arai.shizuoka.jp',
  'atami.shizuoka.jp',
  'fuji.shizuoka.jp',
  'fujieda.shizuoka.jp',
  'fujikawa.shizuoka.jp',
  'fujinomiya.shizuoka.jp',
  'fukuroi.shizuoka.jp',
  'gotemba.shizuoka.jp',
  'haibara.shizuoka.jp',
  'hamamatsu.shizuoka.jp',
  'higashiizu.shizuoka.jp',
  'ito.shizuoka.jp',
  'iwata.shizuoka.jp',
  'izu.shizuoka.jp',
  'izunokuni.shizuoka.jp',
  'kakegawa.shizuoka.jp',
  'kannami.shizuoka.jp',
  'kawanehon.shizuoka.jp',
  'kawazu.shizuoka.jp',
  'kikugawa.shizuoka.jp',
  'kosai.shizuoka.jp',
  'makinohara.shizuoka.jp',
  'matsuzaki.shizuoka.jp',
  'minamiizu.shizuoka.jp',
  'mishima.shizuoka.jp',
  'morimachi.shizuoka.jp',
  'nishiizu.shizuoka.jp',
  'numazu.shizuoka.jp',
  'omaezaki.shizuoka.jp',
  'shimada.shizuoka.jp',
  'shimizu.shizuoka.jp',
  'shimoda.shizuoka.jp',
  'shizuoka.shizuoka.jp',
  'susono.shizuoka.jp',
  'yaizu.shizuoka.jp',
  'yoshida.shizuoka.jp',
  'ashikaga.tochigi.jp',
  'bato.tochigi.jp',
  'haga.tochigi.jp',
  'ichikai.tochigi.jp',
  'iwafune.tochigi.jp',
  'kaminokawa.tochigi.jp',
  'kanuma.tochigi.jp',
  'karasuyama.tochigi.jp',
  'kuroiso.tochigi.jp',
  'mashiko.tochigi.jp',
  'mibu.tochigi.jp',
  'moka.tochigi.jp',
  'motegi.tochigi.jp',
  'nasu.tochigi.jp',
  'nasushiobara.tochigi.jp',
  'nikko.tochigi.jp',
  'nishikata.tochigi.jp',
  'nogi.tochigi.jp',
  'ohira.tochigi.jp',
  'ohtawara.tochigi.jp',
  'oyama.tochigi.jp',
  'sakura.tochigi.jp',
  'sano.tochigi.jp',
  'shimotsuke.tochigi.jp',
  'shioya.tochigi.jp',
  'takanezawa.tochigi.jp',
  'tochigi.tochigi.jp',
  'tsuga.tochigi.jp',
  'ujiie.tochigi.jp',
  'utsunomiya.tochigi.jp',
  'yaita.tochigi.jp',
  'aizumi.tokushima.jp',
  'anan.tokushima.jp',
  'ichiba.tokushima.jp',
  'itano.tokushima.jp',
  'kainan.tokushima.jp',
  'komatsushima.tokushima.jp',
  'matsushige.tokushima.jp',
  'mima.tokushima.jp',
  'minami.tokushima.jp',
  'miyoshi.tokushima.jp',
  'mugi.tokushima.jp',
  'nakagawa.tokushima.jp',
  'naruto.tokushima.jp',
  'sanagochi.tokushima.jp',
  'shishikui.tokushima.jp',
  'tokushima.tokushima.jp',
  'wajiki.tokushima.jp',
  'adachi.tokyo.jp',
  'akiruno.tokyo.jp',
  'akishima.tokyo.jp',
  'aogashima.tokyo.jp',
  'arakawa.tokyo.jp',
  'bunkyo.tokyo.jp',
  'chiyoda.tokyo.jp',
  'chofu.tokyo.jp',
  'chuo.tokyo.jp',
  'edogawa.tokyo.jp',
  'fuchu.tokyo.jp',
  'fussa.tokyo.jp',
  'hachijo.tokyo.jp',
  'hachioji.tokyo.jp',
  'hamura.tokyo.jp',
  'higashikurume.tokyo.jp',
  'higashimurayama.tokyo.jp',
  'higashiyamato.tokyo.jp',
  'hino.tokyo.jp',
  'hinode.tokyo.jp',
  'hinohara.tokyo.jp',
  'inagi.tokyo.jp',
  'itabashi.tokyo.jp',
  'katsushika.tokyo.jp',
  'kita.tokyo.jp',
  'kiyose.tokyo.jp',
  'kodaira.tokyo.jp',
  'koganei.tokyo.jp',
  'kokubunji.tokyo.jp',
  'komae.tokyo.jp',
  'koto.tokyo.jp',
  'kouzushima.tokyo.jp',
  'kunitachi.tokyo.jp',
  'machida.tokyo.jp',
  'meguro.tokyo.jp',
  'minato.tokyo.jp',
  'mitaka.tokyo.jp',
  'mizuho.tokyo.jp',
  'musashimurayama.tokyo.jp',
  'musashino.tokyo.jp',
  'nakano.tokyo.jp',
  'nerima.tokyo.jp',
  'ogasawara.tokyo.jp',
  'okutama.tokyo.jp',
  'ome.tokyo.jp',
  'oshima.tokyo.jp',
  'ota.tokyo.jp',
  'setagaya.tokyo.jp',
  'shibuya.tokyo.jp',
  'shinagawa.tokyo.jp',
  'shinjuku.tokyo.jp',
  'suginami.tokyo.jp',
  'sumida.tokyo.jp',
  'tachikawa.tokyo.jp',
  'taito.tokyo.jp',
  'tama.tokyo.jp',
  'toshima.tokyo.jp',
  'chizu.tottori.jp',
  'hino.tottori.jp',
  'kawahara.tottori.jp',
  'koge.tottori.jp',
  'kotoura.tottori.jp',
  'misasa.tottori.jp',
  'nanbu.tottori.jp',
  'nichinan.tottori.jp',
  'sakaiminato.tottori.jp',
  'tottori.tottori.jp',
  'wakasa.tottori.jp',
  'yazu.tottori.jp',
  'yonago.tottori.jp',
  'asahi.toyama.jp',
  'fuchu.toyama.jp',
  'fukumitsu.toyama.jp',
  'funahashi.toyama.jp',
  'himi.toyama.jp',
  'imizu.toyama.jp',
  'inami.toyama.jp',
  'johana.toyama.jp',
  'kamiichi.toyama.jp',
  'kurobe.toyama.jp',
  'nakaniikawa.toyama.jp',
  'namerikawa.toyama.jp',
  'nanto.toyama.jp',
  'nyuzen.toyama.jp',
  'oyabe.toyama.jp',
  'taira.toyama.jp',
  'takaoka.toyama.jp',
  'tateyama.toyama.jp',
  'toga.toyama.jp',
  'tonami.toyama.jp',
  'toyama.toyama.jp',
  'unazuki.toyama.jp',
  'uozu.toyama.jp',
  'yamada.toyama.jp',
  'arida.wakayama.jp',
  'aridagawa.wakayama.jp',
  'gobo.wakayama.jp',
  'hashimoto.wakayama.jp',
  'hidaka.wakayama.jp',
  'hirogawa.wakayama.jp',
  'inami.wakayama.jp',
  'iwade.wakayama.jp',
  'kainan.wakayama.jp',
  'kamitonda.wakayama.jp',
  'katsuragi.wakayama.jp',
  'kimino.wakayama.jp',
  'kinokawa.wakayama.jp',
  'kitayama.wakayama.jp',
  'koya.wakayama.jp',
  'koza.wakayama.jp',
  'kozagawa.wakayama.jp',
  'kudoyama.wakayama.jp',
  'kushimoto.wakayama.jp',
  'mihama.wakayama.jp',
  'misato.wakayama.jp',
  'nachikatsuura.wakayama.jp',
  'shingu.wakayama.jp',
  'shirahama.wakayama.jp',
  'taiji.wakayama.jp',
  'tanabe.wakayama.jp',
  'wakayama.wakayama.jp',
  'yuasa.wakayama.jp',
  'yura.wakayama.jp',
  'asahi.yamagata.jp',
  'funagata.yamagata.jp',
  'higashine.yamagata.jp',
  'iide.yamagata.jp',
  'kahoku.yamagata.jp',
  'kaminoyama.yamagata.jp',
  'kaneyama.yamagata.jp',
  'kawanishi.yamagata.jp',
  'mamurogawa.yamagata.jp',
  'mikawa.yamagata.jp',
  'murayama.yamagata.jp',
  'nagai.yamagata.jp',
  'nakayama.yamagata.jp',
  'nanyo.yamagata.jp',
  'nishikawa.yamagata.jp',
  'obanazawa.yamagata.jp',
  'oe.yamagata.jp',
  'oguni.yamagata.jp',
  'ohkura.yamagata.jp',
  'oishida.yamagata.jp',
  'sagae.yamagata.jp',
  'sakata.yamagata.jp',
  'sakegawa.yamagata.jp',
  'shinjo.yamagata.jp',
  'shirataka.yamagata.jp',
  'shonai.yamagata.jp',
  'takahata.yamagata.jp',
  'tendo.yamagata.jp',
  'tozawa.yamagata.jp',
  'tsuruoka.yamagata.jp',
  'yamagata.yamagata.jp',
  'yamanobe.yamagata.jp',
  'yonezawa.yamagata.jp',
  'yuza.yamagata.jp',
  'abu.yamaguchi.jp',
  'hagi.yamaguchi.jp',
  'hikari.yamaguchi.jp',
  'hofu.yamaguchi.jp',
  'iwakuni.yamaguchi.jp',
  'kudamatsu.yamaguchi.jp',
  'mitou.yamaguchi.jp',
  'nagato.yamaguchi.jp',
  'oshima.yamaguchi.jp',
  'shimonoseki.yamaguchi.jp',
  'shunan.yamaguchi.jp',
  'tabuse.yamaguchi.jp',
  'tokuyama.yamaguchi.jp',
  'toyota.yamaguchi.jp',
  'ube.yamaguchi.jp',
  'yuu.yamaguchi.jp',
  'chuo.yamanashi.jp',
  'doshi.yamanashi.jp',
  'fuefuki.yamanashi.jp',
  'fujikawa.yamanashi.jp',
  'fujikawaguchiko.yamanashi.jp',
  'fujiyoshida.yamanashi.jp',
  'hayakawa.yamanashi.jp',
  'hokuto.yamanashi.jp',
  'ichikawamisato.yamanashi.jp',
  'kai.yamanashi.jp',
  'kofu.yamanashi.jp',
  'koshu.yamanashi.jp',
  'kosuge.yamanashi.jp',
  'minami-alps.yamanashi.jp',
  'minobu.yamanashi.jp',
  'nakamichi.yamanashi.jp',
  'nanbu.yamanashi.jp',
  'narusawa.yamanashi.jp',
  'nirasaki.yamanashi.jp',
  'nishikatsura.yamanashi.jp',
  'oshino.yamanashi.jp',
  'otsuki.yamanashi.jp',
  'showa.yamanashi.jp',
  'tabayama.yamanashi.jp',
  'tsuru.yamanashi.jp',
  'uenohara.yamanashi.jp',
  'yamanakako.yamanashi.jp',
  'yamanashi.yamanashi.jp',
  'ke',
  'ac.ke',
  'co.ke',
  'go.ke',
  'info.ke',
  'me.ke',
  'mobi.ke',
  'ne.ke',
  'or.ke',
  'sc.ke',
  'kg',
  'org.kg',
  'net.kg',
  'com.kg',
  'edu.kg',
  'gov.kg',
  'mil.kg',
  '*.kh',
  'ki',
  'edu.ki',
  'biz.ki',
  'net.ki',
  'org.ki',
  'gov.ki',
  'info.ki',
  'com.ki',
  'km',
  'org.km',
  'nom.km',
  'gov.km',
  'prd.km',
  'tm.km',
  'edu.km',
  'mil.km',
  'ass.km',
  'com.km',
  'coop.km',
  'asso.km',
  'presse.km',
  'medecin.km',
  'notaires.km',
  'pharmaciens.km',
  'veterinaire.km',
  'gouv.km',
  'kn',
  'net.kn',
  'org.kn',
  'edu.kn',
  'gov.kn',
  'kp',
  'com.kp',
  'edu.kp',
  'gov.kp',
  'org.kp',
  'rep.kp',
  'tra.kp',
  'kr',
  'ac.kr',
  'co.kr',
  'es.kr',
  'go.kr',
  'hs.kr',
  'kg.kr',
  'mil.kr',
  'ms.kr',
  'ne.kr',
  'or.kr',
  'pe.kr',
  're.kr',
  'sc.kr',
  'busan.kr',
  'chungbuk.kr',
  'chungnam.kr',
  'daegu.kr',
  'daejeon.kr',
  'gangwon.kr',
  'gwangju.kr',
  'gyeongbuk.kr',
  'gyeonggi.kr',
  'gyeongnam.kr',
  'incheon.kr',
  'jeju.kr',
  'jeonbuk.kr',
  'jeonnam.kr',
  'seoul.kr',
  'ulsan.kr',
  'kw',
  'com.kw',
  'edu.kw',
  'emb.kw',
  'gov.kw',
  'ind.kw',
  'net.kw',
  'org.kw',
  'ky',
  'edu.ky',
  'gov.ky',
  'com.ky',
  'org.ky',
  'net.ky',
  'kz',
  'org.kz',
  'edu.kz',
  'net.kz',
  'gov.kz',
  'mil.kz',
  'com.kz',
  'la',
  'int.la',
  'net.la',
  'info.la',
  'edu.la',
  'gov.la',
  'per.la',
  'com.la',
  'org.la',
  'lb',
  'com.lb',
  'edu.lb',
  'gov.lb',
  'net.lb',
  'org.lb',
  'lc',
  'com.lc',
  'net.lc',
  'co.lc',
  'org.lc',
  'edu.lc',
  'gov.lc',
  'li',
  'lk',
  'gov.lk',
  'sch.lk',
  'net.lk',
  'int.lk',
  'com.lk',
  'org.lk',
  'edu.lk',
  'ngo.lk',
  'soc.lk',
  'web.lk',
  'ltd.lk',
  'assn.lk',
  'grp.lk',
  'hotel.lk',
  'ac.lk',
  'lr',
  'com.lr',
  'edu.lr',
  'gov.lr',
  'org.lr',
  'net.lr',
  'ls',
  'ac.ls',
  'biz.ls',
  'co.ls',
  'edu.ls',
  'gov.ls',
  'info.ls',
  'net.ls',
  'org.ls',
  'sc.ls',
  'lt',
  'gov.lt',
  'lu',
  'lv',
  'com.lv',
  'edu.lv',
  'gov.lv',
  'org.lv',
  'mil.lv',
  'id.lv',
  'net.lv',
  'asn.lv',
  'conf.lv',
  'ly',
  'com.ly',
  'net.ly',
  'gov.ly',
  'plc.ly',
  'edu.ly',
  'sch.ly',
  'med.ly',
  'org.ly',
  'id.ly',
  'ma',
  'co.ma',
  'net.ma',
  'gov.ma',
  'org.ma',
  'ac.ma',
  'press.ma',
  'mc',
  'tm.mc',
  'asso.mc',
  'md',
  'me',
  'co.me',
  'net.me',
  'org.me',
  'edu.me',
  'ac.me',
  'gov.me',
  'its.me',
  'priv.me',
  'mg',
  'org.mg',
  'nom.mg',
  'gov.mg',
  'prd.mg',
  'tm.mg',
  'edu.mg',
  'mil.mg',
  'com.mg',
  'co.mg',
  'mh',
  'mil',
  'mk',
  'com.mk',
  'org.mk',
  'net.mk',
  'edu.mk',
  'gov.mk',
  'inf.mk',
  'name.mk',
  'ml',
  'com.ml',
  'edu.ml',
  'gouv.ml',
  'gov.ml',
  'net.ml',
  'org.ml',
  'presse.ml',
  '*.mm',
  'mn',
  'gov.mn',
  'edu.mn',
  'org.mn',
  'mo',
  'com.mo',
  'net.mo',
  'org.mo',
  'edu.mo',
  'gov.mo',
  'mobi',
  'mp',
  'mq',
  'mr',
  'gov.mr',
  'ms',
  'com.ms',
  'edu.ms',
  'gov.ms',
  'net.ms',
  'org.ms',
  'mt',
  'com.mt',
  'edu.mt',
  'net.mt',
  'org.mt',
  'mu',
  'com.mu',
  'net.mu',
  'org.mu',
  'gov.mu',
  'ac.mu',
  'co.mu',
  'or.mu',
  'museum',
  'academy.museum',
  'agriculture.museum',
  'air.museum',
  'airguard.museum',
  'alabama.museum',
  'alaska.museum',
  'amber.museum',
  'ambulance.museum',
  'american.museum',
  'americana.museum',
  'americanantiques.museum',
  'americanart.museum',
  'amsterdam.museum',
  'and.museum',
  'annefrank.museum',
  'anthro.museum',
  'anthropology.museum',
  'antiques.museum',
  'aquarium.museum',
  'arboretum.museum',
  'archaeological.museum',
  'archaeology.museum',
  'architecture.museum',
  'art.museum',
  'artanddesign.museum',
  'artcenter.museum',
  'artdeco.museum',
  'arteducation.museum',
  'artgallery.museum',
  'arts.museum',
  'artsandcrafts.museum',
  'asmatart.museum',
  'assassination.museum',
  'assisi.museum',
  'association.museum',
  'astronomy.museum',
  'atlanta.museum',
  'austin.museum',
  'australia.museum',
  'automotive.museum',
  'aviation.museum',
  'axis.museum',
  'badajoz.museum',
  'baghdad.museum',
  'bahn.museum',
  'bale.museum',
  'baltimore.museum',
  'barcelona.museum',
  'baseball.museum',
  'basel.museum',
  'baths.museum',
  'bauern.museum',
  'beauxarts.museum',
  'beeldengeluid.museum',
  'bellevue.museum',
  'bergbau.museum',
  'berkeley.museum',
  'berlin.museum',
  'bern.museum',
  'bible.museum',
  'bilbao.museum',
  'bill.museum',
  'birdart.museum',
  'birthplace.museum',
  'bonn.museum',
  'boston.museum',
  'botanical.museum',
  'botanicalgarden.museum',
  'botanicgarden.museum',
  'botany.museum',
  'brandywinevalley.museum',
  'brasil.museum',
  'bristol.museum',
  'british.museum',
  'britishcolumbia.museum',
  'broadcast.museum',
  'brunel.museum',
  'brussel.museum',
  'brussels.museum',
  'bruxelles.museum',
  'building.museum',
  'burghof.museum',
  'bus.museum',
  'bushey.museum',
  'cadaques.museum',
  'california.museum',
  'cambridge.museum',
  'can.museum',
  'canada.museum',
  'capebreton.museum',
  'carrier.museum',
  'cartoonart.museum',
  'casadelamoneda.museum',
  'castle.museum',
  'castres.museum',
  'celtic.museum',
  'center.museum',
  'chattanooga.museum',
  'cheltenham.museum',
  'chesapeakebay.museum',
  'chicago.museum',
  'children.museum',
  'childrens.museum',
  'childrensgarden.museum',
  'chiropractic.museum',
  'chocolate.museum',
  'christiansburg.museum',
  'cincinnati.museum',
  'cinema.museum',
  'circus.museum',
  'civilisation.museum',
  'civilization.museum',
  'civilwar.museum',
  'clinton.museum',
  'clock.museum',
  'coal.museum',
  'coastaldefence.museum',
  'cody.museum',
  'coldwar.museum',
  'collection.museum',
  'colonialwilliamsburg.museum',
  'coloradoplateau.museum',
  'columbia.museum',
  'columbus.museum',
  'communication.museum',
  'communications.museum',
  'community.museum',
  'computer.museum',
  'computerhistory.museum',
  'comunicações.museum',
  'contemporary.museum',
  'contemporaryart.museum',
  'convent.museum',
  'copenhagen.museum',
  'corporation.museum',
  'correios-e-telecomunicações.museum',
  'corvette.museum',
  'costume.museum',
  'countryestate.museum',
  'county.museum',
  'crafts.museum',
  'cranbrook.museum',
  'creation.museum',
  'cultural.museum',
  'culturalcenter.museum',
  'culture.museum',
  'cyber.museum',
  'cymru.museum',
  'dali.museum',
  'dallas.museum',
  'database.museum',
  'ddr.museum',
  'decorativearts.museum',
  'delaware.museum',
  'delmenhorst.museum',
  'denmark.museum',
  'depot.museum',
  'design.museum',
  'detroit.museum',
  'dinosaur.museum',
  'discovery.museum',
  'dolls.museum',
  'donostia.museum',
  'durham.museum',
  'eastafrica.museum',
  'eastcoast.museum',
  'education.museum',
  'educational.museum',
  'egyptian.museum',
  'eisenbahn.museum',
  'elburg.museum',
  'elvendrell.museum',
  'embroidery.museum',
  'encyclopedic.museum',
  'england.museum',
  'entomology.museum',
  'environment.museum',
  'environmentalconservation.museum',
  'epilepsy.museum',
  'essex.museum',
  'estate.museum',
  'ethnology.museum',
  'exeter.museum',
  'exhibition.museum',
  'family.museum',
  'farm.museum',
  'farmequipment.museum',
  'farmers.museum',
  'farmstead.museum',
  'field.museum',
  'figueres.museum',
  'filatelia.museum',
  'film.museum',
  'fineart.museum',
  'finearts.museum',
  'finland.museum',
  'flanders.museum',
  'florida.museum',
  'force.museum',
  'fortmissoula.museum',
  'fortworth.museum',
  'foundation.museum',
  'francaise.museum',
  'frankfurt.museum',
  'franziskaner.museum',
  'freemasonry.museum',
  'freiburg.museum',
  'fribourg.museum',
  'frog.museum',
  'fundacio.museum',
  'furniture.museum',
  'gallery.museum',
  'garden.museum',
  'gateway.museum',
  'geelvinck.museum',
  'gemological.museum',
  'geology.museum',
  'georgia.museum',
  'giessen.museum',
  'glas.museum',
  'glass.museum',
  'gorge.museum',
  'grandrapids.museum',
  'graz.museum',
  'guernsey.museum',
  'halloffame.museum',
  'hamburg.museum',
  'handson.museum',
  'harvestcelebration.museum',
  'hawaii.museum',
  'health.museum',
  'heimatunduhren.museum',
  'hellas.museum',
  'helsinki.museum',
  'hembygdsforbund.museum',
  'heritage.museum',
  'histoire.museum',
  'historical.museum',
  'historicalsociety.museum',
  'historichouses.museum',
  'historisch.museum',
  'historisches.museum',
  'history.museum',
  'historyofscience.museum',
  'horology.museum',
  'house.museum',
  'humanities.museum',
  'illustration.museum',
  'imageandsound.museum',
  'indian.museum',
  'indiana.museum',
  'indianapolis.museum',
  'indianmarket.museum',
  'intelligence.museum',
  'interactive.museum',
  'iraq.museum',
  'iron.museum',
  'isleofman.museum',
  'jamison.museum',
  'jefferson.museum',
  'jerusalem.museum',
  'jewelry.museum',
  'jewish.museum',
  'jewishart.museum',
  'jfk.museum',
  'journalism.museum',
  'judaica.museum',
  'judygarland.museum',
  'juedisches.museum',
  'juif.museum',
  'karate.museum',
  'karikatur.museum',
  'kids.museum',
  'koebenhavn.museum',
  'koeln.museum',
  'kunst.museum',
  'kunstsammlung.museum',
  'kunstunddesign.museum',
  'labor.museum',
  'labour.museum',
  'lajolla.museum',
  'lancashire.museum',
  'landes.museum',
  'lans.museum',
  'läns.museum',
  'larsson.museum',
  'lewismiller.museum',
  'lincoln.museum',
  'linz.museum',
  'living.museum',
  'livinghistory.museum',
  'localhistory.museum',
  'london.museum',
  'losangeles.museum',
  'louvre.museum',
  'loyalist.museum',
  'lucerne.museum',
  'luxembourg.museum',
  'luzern.museum',
  'mad.museum',
  'madrid.museum',
  'mallorca.museum',
  'manchester.museum',
  'mansion.museum',
  'mansions.museum',
  'manx.museum',
  'marburg.museum',
  'maritime.museum',
  'maritimo.museum',
  'maryland.museum',
  'marylhurst.museum',
  'media.museum',
  'medical.museum',
  'medizinhistorisches.museum',
  'meeres.museum',
  'memorial.museum',
  'mesaverde.museum',
  'michigan.museum',
  'midatlantic.museum',
  'military.museum',
  'mill.museum',
  'miners.museum',
  'mining.museum',
  'minnesota.museum',
  'missile.museum',
  'missoula.museum',
  'modern.museum',
  'moma.museum',
  'money.museum',
  'monmouth.museum',
  'monticello.museum',
  'montreal.museum',
  'moscow.museum',
  'motorcycle.museum',
  'muenchen.museum',
  'muenster.museum',
  'mulhouse.museum',
  'muncie.museum',
  'museet.museum',
  'museumcenter.museum',
  'museumvereniging.museum',
  'music.museum',
  'national.museum',
  'nationalfirearms.museum',
  'nationalheritage.museum',
  'nativeamerican.museum',
  'naturalhistory.museum',
  'naturalhistorymuseum.museum',
  'naturalsciences.museum',
  'nature.museum',
  'naturhistorisches.museum',
  'natuurwetenschappen.museum',
  'naumburg.museum',
  'naval.museum',
  'nebraska.museum',
  'neues.museum',
  'newhampshire.museum',
  'newjersey.museum',
  'newmexico.museum',
  'newport.museum',
  'newspaper.museum',
  'newyork.museum',
  'niepce.museum',
  'norfolk.museum',
  'north.museum',
  'nrw.museum',
  'nyc.museum',
  'nyny.museum',
  'oceanographic.museum',
  'oceanographique.museum',
  'omaha.museum',
  'online.museum',
  'ontario.museum',
  'openair.museum',
  'oregon.museum',
  'oregontrail.museum',
  'otago.museum',
  'oxford.museum',
  'pacific.museum',
  'paderborn.museum',
  'palace.museum',
  'paleo.museum',
  'palmsprings.museum',
  'panama.museum',
  'paris.museum',
  'pasadena.museum',
  'pharmacy.museum',
  'philadelphia.museum',
  'philadelphiaarea.museum',
  'philately.museum',
  'phoenix.museum',
  'photography.museum',
  'pilots.museum',
  'pittsburgh.museum',
  'planetarium.museum',
  'plantation.museum',
  'plants.museum',
  'plaza.museum',
  'portal.museum',
  'portland.museum',
  'portlligat.museum',
  'posts-and-telecommunications.museum',
  'preservation.museum',
  'presidio.museum',
  'press.museum',
  'project.museum',
  'public.museum',
  'pubol.museum',
  'quebec.museum',
  'railroad.museum',
  'railway.museum',
  'research.museum',
  'resistance.museum',
  'riodejaneiro.museum',
  'rochester.museum',
  'rockart.museum',
  'roma.museum',
  'russia.museum',
  'saintlouis.museum',
  'salem.museum',
  'salvadordali.museum',
  'salzburg.museum',
  'sandiego.museum',
  'sanfrancisco.museum',
  'santabarbara.museum',
  'santacruz.museum',
  'santafe.museum',
  'saskatchewan.museum',
  'satx.museum',
  'savannahga.museum',
  'schlesisches.museum',
  'schoenbrunn.museum',
  'schokoladen.museum',
  'school.museum',
  'schweiz.museum',
  'science.museum',
  'scienceandhistory.museum',
  'scienceandindustry.museum',
  'sciencecenter.museum',
  'sciencecenters.museum',
  'science-fiction.museum',
  'sciencehistory.museum',
  'sciences.museum',
  'sciencesnaturelles.museum',
  'scotland.museum',
  'seaport.museum',
  'settlement.museum',
  'settlers.museum',
  'shell.museum',
  'sherbrooke.museum',
  'sibenik.museum',
  'silk.museum',
  'ski.museum',
  'skole.museum',
  'society.museum',
  'sologne.museum',
  'soundandvision.museum',
  'southcarolina.museum',
  'southwest.museum',
  'space.museum',
  'spy.museum',
  'square.museum',
  'stadt.museum',
  'stalbans.museum',
  'starnberg.museum',
  'state.museum',
  'stateofdelaware.museum',
  'station.museum',
  'steam.museum',
  'steiermark.museum',
  'stjohn.museum',
  'stockholm.museum',
  'stpetersburg.museum',
  'stuttgart.museum',
  'suisse.museum',
  'surgeonshall.museum',
  'surrey.museum',
  'svizzera.museum',
  'sweden.museum',
  'sydney.museum',
  'tank.museum',
  'tcm.museum',
  'technology.museum',
  'telekommunikation.museum',
  'television.museum',
  'texas.museum',
  'textile.museum',
  'theater.museum',
  'time.museum',
  'timekeeping.museum',
  'topology.museum',
  'torino.museum',
  'touch.museum',
  'town.museum',
  'transport.museum',
  'tree.museum',
  'trolley.museum',
  'trust.museum',
  'trustee.museum',
  'uhren.museum',
  'ulm.museum',
  'undersea.museum',
  'university.museum',
  'usa.museum',
  'usantiques.museum',
  'usarts.museum',
  'uscountryestate.museum',
  'usculture.museum',
  'usdecorativearts.museum',
  'usgarden.museum',
  'ushistory.museum',
  'ushuaia.museum',
  'uslivinghistory.museum',
  'utah.museum',
  'uvic.museum',
  'valley.museum',
  'vantaa.museum',
  'versailles.museum',
  'viking.museum',
  'village.museum',
  'virginia.museum',
  'virtual.museum',
  'virtuel.museum',
  'vlaanderen.museum',
  'volkenkunde.museum',
  'wales.museum',
  'wallonie.museum',
  'war.museum',
  'washingtondc.museum',
  'watchandclock.museum',
  'watch-and-clock.museum',
  'western.museum',
  'westfalen.museum',
  'whaling.museum',
  'wildlife.museum',
  'williamsburg.museum',
  'windmill.museum',
  'workshop.museum',
  'york.museum',
  'yorkshire.museum',
  'yosemite.museum',
  'youth.museum',
  'zoological.museum',
  'zoology.museum',
  'ירושלים.museum',
  'иком.museum',
  'mv',
  'aero.mv',
  'biz.mv',
  'com.mv',
  'coop.mv',
  'edu.mv',
  'gov.mv',
  'info.mv',
  'int.mv',
  'mil.mv',
  'museum.mv',
  'name.mv',
  'net.mv',
  'org.mv',
  'pro.mv',
  'mw',
  'ac.mw',
  'biz.mw',
  'co.mw',
  'com.mw',
  'coop.mw',
  'edu.mw',
  'gov.mw',
  'int.mw',
  'museum.mw',
  'net.mw',
  'org.mw',
  'mx',
  'com.mx',
  'org.mx',
  'gob.mx',
  'edu.mx',
  'net.mx',
  'my',
  'com.my',
  'net.my',
  'org.my',
  'gov.my',
  'edu.my',
  'mil.my',
  'name.my',
  'mz',
  'ac.mz',
  'adv.mz',
  'co.mz',
  'edu.mz',
  'gov.mz',
  'mil.mz',
  'net.mz',
  'org.mz',
  'na',
  'info.na',
  'pro.na',
  'name.na',
  'school.na',
  'or.na',
  'dr.na',
  'us.na',
  'mx.na',
  'ca.na',
  'in.na',
  'cc.na',
  'tv.na',
  'ws.na',
  'mobi.na',
  'co.na',
  'com.na',
  'org.na',
  'name',
  'nc',
  'asso.nc',
  'nom.nc',
  'ne',
  'net',
  'nf',
  'com.nf',
  'net.nf',
  'per.nf',
  'rec.nf',
  'web.nf',
  'arts.nf',
  'firm.nf',
  'info.nf',
  'other.nf',
  'store.nf',
  'ng',
  'com.ng',
  'edu.ng',
  'gov.ng',
  'i.ng',
  'mil.ng',
  'mobi.ng',
  'name.ng',
  'net.ng',
  'org.ng',
  'sch.ng',
  'ni',
  'ac.ni',
  'biz.ni',
  'co.ni',
  'com.ni',
  'edu.ni',
  'gob.ni',
  'in.ni',
  'info.ni',
  'int.ni',
  'mil.ni',
  'net.ni',
  'nom.ni',
  'org.ni',
  'web.ni',
  'nl',
  'no',
  'fhs.no',
  'vgs.no',
  'fylkesbibl.no',
  'folkebibl.no',
  'museum.no',
  'idrett.no',
  'priv.no',
  'mil.no',
  'stat.no',
  'dep.no',
  'kommune.no',
  'herad.no',
  'aa.no',
  'ah.no',
  'bu.no',
  'fm.no',
  'hl.no',
  'hm.no',
  'jan-mayen.no',
  'mr.no',
  'nl.no',
  'nt.no',
  'of.no',
  'ol.no',
  'oslo.no',
  'rl.no',
  'sf.no',
  'st.no',
  'svalbard.no',
  'tm.no',
  'tr.no',
  'va.no',
  'vf.no',
  'gs.aa.no',
  'gs.ah.no',
  'gs.bu.no',
  'gs.fm.no',
  'gs.hl.no',
  'gs.hm.no',
  'gs.jan-mayen.no',
  'gs.mr.no',
  'gs.nl.no',
  'gs.nt.no',
  'gs.of.no',
  'gs.ol.no',
  'gs.oslo.no',
  'gs.rl.no',
  'gs.sf.no',
  'gs.st.no',
  'gs.svalbard.no',
  'gs.tm.no',
  'gs.tr.no',
  'gs.va.no',
  'gs.vf.no',
  'akrehamn.no',
  'åkrehamn.no',
  'algard.no',
  'ålgård.no',
  'arna.no',
  'brumunddal.no',
  'bryne.no',
  'bronnoysund.no',
  'brønnøysund.no',
  'drobak.no',
  'drøbak.no',
  'egersund.no',
  'fetsund.no',
  'floro.no',
  'florø.no',
  'fredrikstad.no',
  'hokksund.no',
  'honefoss.no',
  'hønefoss.no',
  'jessheim.no',
  'jorpeland.no',
  'jørpeland.no',
  'kirkenes.no',
  'kopervik.no',
  'krokstadelva.no',
  'langevag.no',
  'langevåg.no',
  'leirvik.no',
  'mjondalen.no',
  'mjøndalen.no',
  'mo-i-rana.no',
  'mosjoen.no',
  'mosjøen.no',
  'nesoddtangen.no',
  'orkanger.no',
  'osoyro.no',
  'osøyro.no',
  'raholt.no',
  'råholt.no',
  'sandnessjoen.no',
  'sandnessjøen.no',
  'skedsmokorset.no',
  'slattum.no',
  'spjelkavik.no',
  'stathelle.no',
  'stavern.no',
  'stjordalshalsen.no',
  'stjørdalshalsen.no',
  'tananger.no',
  'tranby.no',
  'vossevangen.no',
  'afjord.no',
  'åfjord.no',
  'agdenes.no',
  'al.no',
  'ål.no',
  'alesund.no',
  'ålesund.no',
  'alstahaug.no',
  'alta.no',
  'áltá.no',
  'alaheadju.no',
  'álaheadju.no',
  'alvdal.no',
  'amli.no',
  'åmli.no',
  'amot.no',
  'åmot.no',
  'andebu.no',
  'andoy.no',
  'andøy.no',
  'andasuolo.no',
  'ardal.no',
  'årdal.no',
  'aremark.no',
  'arendal.no',
  'ås.no',
  'aseral.no',
  'åseral.no',
  'asker.no',
  'askim.no',
  'askvoll.no',
  'askoy.no',
  'askøy.no',
  'asnes.no',
  'åsnes.no',
  'audnedaln.no',
  'aukra.no',
  'aure.no',
  'aurland.no',
  'aurskog-holand.no',
  'aurskog-høland.no',
  'austevoll.no',
  'austrheim.no',
  'averoy.no',
  'averøy.no',
  'balestrand.no',
  'ballangen.no',
  'balat.no',
  'bálát.no',
  'balsfjord.no',
  'bahccavuotna.no',
  'báhccavuotna.no',
  'bamble.no',
  'bardu.no',
  'beardu.no',
  'beiarn.no',
  'bajddar.no',
  'bájddar.no',
  'baidar.no',
  'báidár.no',
  'berg.no',
  'bergen.no',
  'berlevag.no',
  'berlevåg.no',
  'bearalvahki.no',
  'bearalváhki.no',
  'bindal.no',
  'birkenes.no',
  'bjarkoy.no',
  'bjarkøy.no',
  'bjerkreim.no',
  'bjugn.no',
  'bodo.no',
  'bodø.no',
  'badaddja.no',
  'bådåddjå.no',
  'budejju.no',
  'bokn.no',
  'bremanger.no',
  'bronnoy.no',
  'brønnøy.no',
  'bygland.no',
  'bykle.no',
  'barum.no',
  'bærum.no',
  'bo.telemark.no',
  'bø.telemark.no',
  'bo.nordland.no',
  'bø.nordland.no',
  'bievat.no',
  'bievát.no',
  'bomlo.no',
  'bømlo.no',
  'batsfjord.no',
  'båtsfjord.no',
  'bahcavuotna.no',
  'báhcavuotna.no',
  'dovre.no',
  'drammen.no',
  'drangedal.no',
  'dyroy.no',
  'dyrøy.no',
  'donna.no',
  'dønna.no',
  'eid.no',
  'eidfjord.no',
  'eidsberg.no',
  'eidskog.no',
  'eidsvoll.no',
  'eigersund.no',
  'elverum.no',
  'enebakk.no',
  'engerdal.no',
  'etne.no',
  'etnedal.no',
  'evenes.no',
  'evenassi.no',
  'evenášši.no',
  'evje-og-hornnes.no',
  'farsund.no',
  'fauske.no',
  'fuossko.no',
  'fuoisku.no',
  'fedje.no',
  'fet.no',
  'finnoy.no',
  'finnøy.no',
  'fitjar.no',
  'fjaler.no',
  'fjell.no',
  'flakstad.no',
  'flatanger.no',
  'flekkefjord.no',
  'flesberg.no',
  'flora.no',
  'fla.no',
  'flå.no',
  'folldal.no',
  'forsand.no',
  'fosnes.no',
  'frei.no',
  'frogn.no',
  'froland.no',
  'frosta.no',
  'frana.no',
  'fræna.no',
  'froya.no',
  'frøya.no',
  'fusa.no',
  'fyresdal.no',
  'forde.no',
  'førde.no',
  'gamvik.no',
  'gangaviika.no',
  'gáŋgaviika.no',
  'gaular.no',
  'gausdal.no',
  'gildeskal.no',
  'gildeskål.no',
  'giske.no',
  'gjemnes.no',
  'gjerdrum.no',
  'gjerstad.no',
  'gjesdal.no',
  'gjovik.no',
  'gjøvik.no',
  'gloppen.no',
  'gol.no',
  'gran.no',
  'grane.no',
  'granvin.no',
  'gratangen.no',
  'grimstad.no',
  'grong.no',
  'kraanghke.no',
  'kråanghke.no',
  'grue.no',
  'gulen.no',
  'hadsel.no',
  'halden.no',
  'halsa.no',
  'hamar.no',
  'hamaroy.no',
  'habmer.no',
  'hábmer.no',
  'hapmir.no',
  'hápmir.no',
  'hammerfest.no',
  'hammarfeasta.no',
  'hámmárfeasta.no',
  'haram.no',
  'hareid.no',
  'harstad.no',
  'hasvik.no',
  'aknoluokta.no',
  'ákŋoluokta.no',
  'hattfjelldal.no',
  'aarborte.no',
  'haugesund.no',
  'hemne.no',
  'hemnes.no',
  'hemsedal.no',
  'heroy.more-og-romsdal.no',
  'herøy.møre-og-romsdal.no',
  'heroy.nordland.no',
  'herøy.nordland.no',
  'hitra.no',
  'hjartdal.no',
  'hjelmeland.no',
  'hobol.no',
  'hobøl.no',
  'hof.no',
  'hol.no',
  'hole.no',
  'holmestrand.no',
  'holtalen.no',
  'holtålen.no',
  'hornindal.no',
  'horten.no',
  'hurdal.no',
  'hurum.no',
  'hvaler.no',
  'hyllestad.no',
  'hagebostad.no',
  'hægebostad.no',
  'hoyanger.no',
  'høyanger.no',
  'hoylandet.no',
  'høylandet.no',
  'ha.no',
  'hå.no',
  'ibestad.no',
  'inderoy.no',
  'inderøy.no',
  'iveland.no',
  'jevnaker.no',
  'jondal.no',
  'jolster.no',
  'jølster.no',
  'karasjok.no',
  'karasjohka.no',
  'kárášjohka.no',
  'karlsoy.no',
  'galsa.no',
  'gálsá.no',
  'karmoy.no',
  'karmøy.no',
  'kautokeino.no',
  'guovdageaidnu.no',
  'klepp.no',
  'klabu.no',
  'klæbu.no',
  'kongsberg.no',
  'kongsvinger.no',
  'kragero.no',
  'kragerø.no',
  'kristiansand.no',
  'kristiansund.no',
  'krodsherad.no',
  'krødsherad.no',
  'kvalsund.no',
  'rahkkeravju.no',
  'ráhkkerávju.no',
  'kvam.no',
  'kvinesdal.no',
  'kvinnherad.no',
  'kviteseid.no',
  'kvitsoy.no',
  'kvitsøy.no',
  'kvafjord.no',
  'kvæfjord.no',
  'giehtavuoatna.no',
  'kvanangen.no',
  'kvænangen.no',
  'navuotna.no',
  'návuotna.no',
  'kafjord.no',
  'kåfjord.no',
  'gaivuotna.no',
  'gáivuotna.no',
  'larvik.no',
  'lavangen.no',
  'lavagis.no',
  'loabat.no',
  'loabát.no',
  'lebesby.no',
  'davvesiida.no',
  'leikanger.no',
  'leirfjord.no',
  'leka.no',
  'leksvik.no',
  'lenvik.no',
  'leangaviika.no',
  'leaŋgaviika.no',
  'lesja.no',
  'levanger.no',
  'lier.no',
  'lierne.no',
  'lillehammer.no',
  'lillesand.no',
  'lindesnes.no',
  'lindas.no',
  'lindås.no',
  'lom.no',
  'loppa.no',
  'lahppi.no',
  'láhppi.no',
  'lund.no',
  'lunner.no',
  'luroy.no',
  'lurøy.no',
  'luster.no',
  'lyngdal.no',
  'lyngen.no',
  'ivgu.no',
  'lardal.no',
  'lerdal.no',
  'lærdal.no',
  'lodingen.no',
  'lødingen.no',
  'lorenskog.no',
  'lørenskog.no',
  'loten.no',
  'løten.no',
  'malvik.no',
  'masoy.no',
  'måsøy.no',
  'muosat.no',
  'muosát.no',
  'mandal.no',
  'marker.no',
  'marnardal.no',
  'masfjorden.no',
  'meland.no',
  'meldal.no',
  'melhus.no',
  'meloy.no',
  'meløy.no',
  'meraker.no',
  'meråker.no',
  'moareke.no',
  'moåreke.no',
  'midsund.no',
  'midtre-gauldal.no',
  'modalen.no',
  'modum.no',
  'molde.no',
  'moskenes.no',
  'moss.no',
  'mosvik.no',
  'malselv.no',
  'målselv.no',
  'malatvuopmi.no',
  'málatvuopmi.no',
  'namdalseid.no',
  'aejrie.no',
  'namsos.no',
  'namsskogan.no',
  'naamesjevuemie.no',
  'nååmesjevuemie.no',
  'laakesvuemie.no',
  'nannestad.no',
  'narvik.no',
  'narviika.no',
  'naustdal.no',
  'nedre-eiker.no',
  'nes.akershus.no',
  'nes.buskerud.no',
  'nesna.no',
  'nesodden.no',
  'nesseby.no',
  'unjarga.no',
  'unjárga.no',
  'nesset.no',
  'nissedal.no',
  'nittedal.no',
  'nord-aurdal.no',
  'nord-fron.no',
  'nord-odal.no',
  'norddal.no',
  'nordkapp.no',
  'davvenjarga.no',
  'davvenjárga.no',
  'nordre-land.no',
  'nordreisa.no',
  'raisa.no',
  'ráisa.no',
  'nore-og-uvdal.no',
  'notodden.no',
  'naroy.no',
  'nærøy.no',
  'notteroy.no',
  'nøtterøy.no',
  'odda.no',
  'oksnes.no',
  'øksnes.no',
  'oppdal.no',
  'oppegard.no',
  'oppegård.no',
  'orkdal.no',
  'orland.no',
  'ørland.no',
  'orskog.no',
  'ørskog.no',
  'orsta.no',
  'ørsta.no',
  'os.hedmark.no',
  'os.hordaland.no',
  'osen.no',
  'osteroy.no',
  'osterøy.no',
  'ostre-toten.no',
  'østre-toten.no',
  'overhalla.no',
  'ovre-eiker.no',
  'øvre-eiker.no',
  'oyer.no',
  'øyer.no',
  'oygarden.no',
  'øygarden.no',
  'oystre-slidre.no',
  'øystre-slidre.no',
  'porsanger.no',
  'porsangu.no',
  'porsáŋgu.no',
  'porsgrunn.no',
  'radoy.no',
  'radøy.no',
  'rakkestad.no',
  'rana.no',
  'ruovat.no',
  'randaberg.no',
  'rauma.no',
  'rendalen.no',
  'rennebu.no',
  'rennesoy.no',
  'rennesøy.no',
  'rindal.no',
  'ringebu.no',
  'ringerike.no',
  'ringsaker.no',
  'rissa.no',
  'risor.no',
  'risør.no',
  'roan.no',
  'rollag.no',
  'rygge.no',
  'ralingen.no',
  'rælingen.no',
  'rodoy.no',
  'rødøy.no',
  'romskog.no',
  'rømskog.no',
  'roros.no',
  'røros.no',
  'rost.no',
  'røst.no',
  'royken.no',
  'røyken.no',
  'royrvik.no',
  'røyrvik.no',
  'rade.no',
  'råde.no',
  'salangen.no',
  'siellak.no',
  'saltdal.no',
  'salat.no',
  'sálát.no',
  'sálat.no',
  'samnanger.no',
  'sande.more-og-romsdal.no',
  'sande.møre-og-romsdal.no',
  'sande.vestfold.no',
  'sandefjord.no',
  'sandnes.no',
  'sandoy.no',
  'sandøy.no',
  'sarpsborg.no',
  'sauda.no',
  'sauherad.no',
  'sel.no',
  'selbu.no',
  'selje.no',
  'seljord.no',
  'sigdal.no',
  'siljan.no',
  'sirdal.no',
  'skaun.no',
  'skedsmo.no',
  'ski.no',
  'skien.no',
  'skiptvet.no',
  'skjervoy.no',
  'skjervøy.no',
  'skierva.no',
  'skiervá.no',
  'skjak.no',
  'skjåk.no',
  'skodje.no',
  'skanland.no',
  'skånland.no',
  'skanit.no',
  'skánit.no',
  'smola.no',
  'smøla.no',
  'snillfjord.no',
  'snasa.no',
  'snåsa.no',
  'snoasa.no',
  'snaase.no',
  'snåase.no',
  'sogndal.no',
  'sokndal.no',
  'sola.no',
  'solund.no',
  'songdalen.no',
  'sortland.no',
  'spydeberg.no',
  'stange.no',
  'stavanger.no',
  'steigen.no',
  'steinkjer.no',
  'stjordal.no',
  'stjørdal.no',
  'stokke.no',
  'stor-elvdal.no',
  'stord.no',
  'stordal.no',
  'storfjord.no',
  'omasvuotna.no',
  'strand.no',
  'stranda.no',
  'stryn.no',
  'sula.no',
  'suldal.no',
  'sund.no',
  'sunndal.no',
  'surnadal.no',
  'sveio.no',
  'svelvik.no',
  'sykkylven.no',
  'sogne.no',
  'søgne.no',
  'somna.no',
  'sømna.no',
  'sondre-land.no',
  'søndre-land.no',
  'sor-aurdal.no',
  'sør-aurdal.no',
  'sor-fron.no',
  'sør-fron.no',
  'sor-odal.no',
  'sør-odal.no',
  'sor-varanger.no',
  'sør-varanger.no',
  'matta-varjjat.no',
  'mátta-várjjat.no',
  'sorfold.no',
  'sørfold.no',
  'sorreisa.no',
  'sørreisa.no',
  'sorum.no',
  'sørum.no',
  'tana.no',
  'deatnu.no',
  'time.no',
  'tingvoll.no',
  'tinn.no',
  'tjeldsund.no',
  'dielddanuorri.no',
  'tjome.no',
  'tjøme.no',
  'tokke.no',
  'tolga.no',
  'torsken.no',
  'tranoy.no',
  'tranøy.no',
  'tromso.no',
  'tromsø.no',
  'tromsa.no',
  'romsa.no',
  'trondheim.no',
  'troandin.no',
  'trysil.no',
  'trana.no',
  'træna.no',
  'trogstad.no',
  'trøgstad.no',
  'tvedestrand.no',
  'tydal.no',
  'tynset.no',
  'tysfjord.no',
  'divtasvuodna.no',
  'divttasvuotna.no',
  'tysnes.no',
  'tysvar.no',
  'tysvær.no',
  'tonsberg.no',
  'tønsberg.no',
  'ullensaker.no',
  'ullensvang.no',
  'ulvik.no',
  'utsira.no',
  'vadso.no',
  'vadsø.no',
  'cahcesuolo.no',
  'čáhcesuolo.no',
  'vaksdal.no',
  'valle.no',
  'vang.no',
  'vanylven.no',
  'vardo.no',
  'vardø.no',
  'varggat.no',
  'várggát.no',
  'vefsn.no',
  'vaapste.no',
  'vega.no',
  'vegarshei.no',
  'vegårshei.no',
  'vennesla.no',
  'verdal.no',
  'verran.no',
  'vestby.no',
  'vestnes.no',
  'vestre-slidre.no',
  'vestre-toten.no',
  'vestvagoy.no',
  'vestvågøy.no',
  'vevelstad.no',
  'vik.no',
  'vikna.no',
  'vindafjord.no',
  'volda.no',
  'voss.no',
  'varoy.no',
  'værøy.no',
  'vagan.no',
  'vågan.no',
  'voagat.no',
  'vagsoy.no',
  'vågsøy.no',
  'vaga.no',
  'vågå.no',
  'valer.ostfold.no',
  'våler.østfold.no',
  'valer.hedmark.no',
  'våler.hedmark.no',
  '*.np',
  'nr',
  'biz.nr',
  'info.nr',
  'gov.nr',
  'edu.nr',
  'org.nr',
  'net.nr',
  'com.nr',
  'nu',
  'nz',
  'ac.nz',
  'co.nz',
  'cri.nz',
  'geek.nz',
  'gen.nz',
  'govt.nz',
  'health.nz',
  'iwi.nz',
  'kiwi.nz',
  'maori.nz',
  'mil.nz',
  'māori.nz',
  'net.nz',
  'org.nz',
  'parliament.nz',
  'school.nz',
  'om',
  'co.om',
  'com.om',
  'edu.om',
  'gov.om',
  'med.om',
  'museum.om',
  'net.om',
  'org.om',
  'pro.om',
  'onion',
  'org',
  'pa',
  'ac.pa',
  'gob.pa',
  'com.pa',
  'org.pa',
  'sld.pa',
  'edu.pa',
  'net.pa',
  'ing.pa',
  'abo.pa',
  'med.pa',
  'nom.pa',
  'pe',
  'edu.pe',
  'gob.pe',
  'nom.pe',
  'mil.pe',
  'org.pe',
  'com.pe',
  'net.pe',
  'pf',
  'com.pf',
  'org.pf',
  'edu.pf',
  '*.pg',
  'ph',
  'com.ph',
  'net.ph',
  'org.ph',
  'gov.ph',
  'edu.ph',
  'ngo.ph',
  'mil.ph',
  'i.ph',
  'pk',
  'com.pk',
  'net.pk',
  'edu.pk',
  'org.pk',
  'fam.pk',
  'biz.pk',
  'web.pk',
  'gov.pk',
  'gob.pk',
  'gok.pk',
  'gon.pk',
  'gop.pk',
  'gos.pk',
  'info.pk',
  'pl',
  'com.pl',
  'net.pl',
  'org.pl',
  'aid.pl',
  'agro.pl',
  'atm.pl',
  'auto.pl',
  'biz.pl',
  'edu.pl',
  'gmina.pl',
  'gsm.pl',
  'info.pl',
  'mail.pl',
  'miasta.pl',
  'media.pl',
  'mil.pl',
  'nieruchomosci.pl',
  'nom.pl',
  'pc.pl',
  'powiat.pl',
  'priv.pl',
  'realestate.pl',
  'rel.pl',
  'sex.pl',
  'shop.pl',
  'sklep.pl',
  'sos.pl',
  'szkola.pl',
  'targi.pl',
  'tm.pl',
  'tourism.pl',
  'travel.pl',
  'turystyka.pl',
  'gov.pl',
  'ap.gov.pl',
  'ic.gov.pl',
  'is.gov.pl',
  'us.gov.pl',
  'kmpsp.gov.pl',
  'kppsp.gov.pl',
  'kwpsp.gov.pl',
  'psp.gov.pl',
  'wskr.gov.pl',
  'kwp.gov.pl',
  'mw.gov.pl',
  'ug.gov.pl',
  'um.gov.pl',
  'umig.gov.pl',
  'ugim.gov.pl',
  'upow.gov.pl',
  'uw.gov.pl',
  'starostwo.gov.pl',
  'pa.gov.pl',
  'po.gov.pl',
  'psse.gov.pl',
  'pup.gov.pl',
  'rzgw.gov.pl',
  'sa.gov.pl',
  'so.gov.pl',
  'sr.gov.pl',
  'wsa.gov.pl',
  'sko.gov.pl',
  'uzs.gov.pl',
  'wiih.gov.pl',
  'winb.gov.pl',
  'pinb.gov.pl',
  'wios.gov.pl',
  'witd.gov.pl',
  'wzmiuw.gov.pl',
  'piw.gov.pl',
  'wiw.gov.pl',
  'griw.gov.pl',
  'wif.gov.pl',
  'oum.gov.pl',
  'sdn.gov.pl',
  'zp.gov.pl',
  'uppo.gov.pl',
  'mup.gov.pl',
  'wuoz.gov.pl',
  'konsulat.gov.pl',
  'oirm.gov.pl',
  'augustow.pl',
  'babia-gora.pl',
  'bedzin.pl',
  'beskidy.pl',
  'bialowieza.pl',
  'bialystok.pl',
  'bielawa.pl',
  'bieszczady.pl',
  'boleslawiec.pl',
  'bydgoszcz.pl',
  'bytom.pl',
  'cieszyn.pl',
  'czeladz.pl',
  'czest.pl',
  'dlugoleka.pl',
  'elblag.pl',
  'elk.pl',
  'glogow.pl',
  'gniezno.pl',
  'gorlice.pl',
  'grajewo.pl',
  'ilawa.pl',
  'jaworzno.pl',
  'jelenia-gora.pl',
  'jgora.pl',
  'kalisz.pl',
  'kazimierz-dolny.pl',
  'karpacz.pl',
  'kartuzy.pl',
  'kaszuby.pl',
  'katowice.pl',
  'kepno.pl',
  'ketrzyn.pl',
  'klodzko.pl',
  'kobierzyce.pl',
  'kolobrzeg.pl',
  'konin.pl',
  'konskowola.pl',
  'kutno.pl',
  'lapy.pl',
  'lebork.pl',
  'legnica.pl',
  'lezajsk.pl',
  'limanowa.pl',
  'lomza.pl',
  'lowicz.pl',
  'lubin.pl',
  'lukow.pl',
  'malbork.pl',
  'malopolska.pl',
  'mazowsze.pl',
  'mazury.pl',
  'mielec.pl',
  'mielno.pl',
  'mragowo.pl',
  'naklo.pl',
  'nowaruda.pl',
  'nysa.pl',
  'olawa.pl',
  'olecko.pl',
  'olkusz.pl',
  'olsztyn.pl',
  'opoczno.pl',
  'opole.pl',
  'ostroda.pl',
  'ostroleka.pl',
  'ostrowiec.pl',
  'ostrowwlkp.pl',
  'pila.pl',
  'pisz.pl',
  'podhale.pl',
  'podlasie.pl',
  'polkowice.pl',
  'pomorze.pl',
  'pomorskie.pl',
  'prochowice.pl',
  'pruszkow.pl',
  'przeworsk.pl',
  'pulawy.pl',
  'radom.pl',
  'rawa-maz.pl',
  'rybnik.pl',
  'rzeszow.pl',
  'sanok.pl',
  'sejny.pl',
  'slask.pl',
  'slupsk.pl',
  'sosnowiec.pl',
  'stalowa-wola.pl',
  'skoczow.pl',
  'starachowice.pl',
  'stargard.pl',
  'suwalki.pl',
  'swidnica.pl',
  'swiebodzin.pl',
  'swinoujscie.pl',
  'szczecin.pl',
  'szczytno.pl',
  'tarnobrzeg.pl',
  'tgory.pl',
  'turek.pl',
  'tychy.pl',
  'ustka.pl',
  'walbrzych.pl',
  'warmia.pl',
  'warszawa.pl',
  'waw.pl',
  'wegrow.pl',
  'wielun.pl',
  'wlocl.pl',
  'wloclawek.pl',
  'wodzislaw.pl',
  'wolomin.pl',
  'wroclaw.pl',
  'zachpomor.pl',
  'zagan.pl',
  'zarow.pl',
  'zgora.pl',
  'zgorzelec.pl',
  'pm',
  'pn',
  'gov.pn',
  'co.pn',
  'org.pn',
  'edu.pn',
  'net.pn',
  'post',
  'pr',
  'com.pr',
  'net.pr',
  'org.pr',
  'gov.pr',
  'edu.pr',
  'isla.pr',
  'pro.pr',
  'biz.pr',
  'info.pr',
  'name.pr',
  'est.pr',
  'prof.pr',
  'ac.pr',
  'pro',
  'aaa.pro',
  'aca.pro',
  'acct.pro',
  'avocat.pro',
  'bar.pro',
  'cpa.pro',
  'eng.pro',
  'jur.pro',
  'law.pro',
  'med.pro',
  'recht.pro',
  'ps',
  'edu.ps',
  'gov.ps',
  'sec.ps',
  'plo.ps',
  'com.ps',
  'org.ps',
  'net.ps',
  'pt',
  'net.pt',
  'gov.pt',
  'org.pt',
  'edu.pt',
  'int.pt',
  'publ.pt',
  'com.pt',
  'nome.pt',
  'pw',
  'co.pw',
  'ne.pw',
  'or.pw',
  'ed.pw',
  'go.pw',
  'belau.pw',
  'py',
  'com.py',
  'coop.py',
  'edu.py',
  'gov.py',
  'mil.py',
  'net.py',
  'org.py',
  'qa',
  'com.qa',
  'edu.qa',
  'gov.qa',
  'mil.qa',
  'name.qa',
  'net.qa',
  'org.qa',
  'sch.qa',
  're',
  'asso.re',
  'com.re',
  'nom.re',
  'ro',
  'arts.ro',
  'com.ro',
  'firm.ro',
  'info.ro',
  'nom.ro',
  'nt.ro',
  'org.ro',
  'rec.ro',
  'store.ro',
  'tm.ro',
  'www.ro',
  'rs',
  'ac.rs',
  'co.rs',
  'edu.rs',
  'gov.rs',
  'in.rs',
  'org.rs',
  'ru',
  'ac.ru',
  'edu.ru',
  'gov.ru',
  'int.ru',
  'mil.ru',
  'test.ru',
  'rw',
  'ac.rw',
  'co.rw',
  'coop.rw',
  'gov.rw',
  'mil.rw',
  'net.rw',
  'org.rw',
  'sa',
  'com.sa',
  'net.sa',
  'org.sa',
  'gov.sa',
  'med.sa',
  'pub.sa',
  'edu.sa',
  'sch.sa',
  'sb',
  'com.sb',
  'edu.sb',
  'gov.sb',
  'net.sb',
  'org.sb',
  'sc',
  'com.sc',
  'gov.sc',
  'net.sc',
  'org.sc',
  'edu.sc',
  'sd',
  'com.sd',
  'net.sd',
  'org.sd',
  'edu.sd',
  'med.sd',
  'tv.sd',
  'gov.sd',
  'info.sd',
  'se',
  'a.se',
  'ac.se',
  'b.se',
  'bd.se',
  'brand.se',
  'c.se',
  'd.se',
  'e.se',
  'f.se',
  'fh.se',
  'fhsk.se',
  'fhv.se',
  'g.se',
  'h.se',
  'i.se',
  'k.se',
  'komforb.se',
  'kommunalforbund.se',
  'komvux.se',
  'l.se',
  'lanbib.se',
  'm.se',
  'n.se',
  'naturbruksgymn.se',
  'o.se',
  'org.se',
  'p.se',
  'parti.se',
  'pp.se',
  'press.se',
  'r.se',
  's.se',
  't.se',
  'tm.se',
  'u.se',
  'w.se',
  'x.se',
  'y.se',
  'z.se',
  'sg',
  'com.sg',
  'net.sg',
  'org.sg',
  'gov.sg',
  'edu.sg',
  'per.sg',
  'sh',
  'com.sh',
  'net.sh',
  'gov.sh',
  'org.sh',
  'mil.sh',
  'si',
  'sj',
  'sk',
  'sl',
  'com.sl',
  'net.sl',
  'edu.sl',
  'gov.sl',
  'org.sl',
  'sm',
  'sn',
  'art.sn',
  'com.sn',
  'edu.sn',
  'gouv.sn',
  'org.sn',
  'perso.sn',
  'univ.sn',
  'so',
  'com.so',
  'net.so',
  'org.so',
  'sr',
  'st',
  'co.st',
  'com.st',
  'consulado.st',
  'edu.st',
  'embaixada.st',
  'gov.st',
  'mil.st',
  'net.st',
  'org.st',
  'principe.st',
  'saotome.st',
  'store.st',
  'su',
  'sv',
  'com.sv',
  'edu.sv',
  'gob.sv',
  'org.sv',
  'red.sv',
  'sx',
  'gov.sx',
  'sy',
  'edu.sy',
  'gov.sy',
  'net.sy',
  'mil.sy',
  'com.sy',
  'org.sy',
  'sz',
  'co.sz',
  'ac.sz',
  'org.sz',
  'tc',
  'td',
  'tel',
  'tf',
  'tg',
  'th',
  'ac.th',
  'co.th',
  'go.th',
  'in.th',
  'mi.th',
  'net.th',
  'or.th',
  'tj',
  'ac.tj',
  'biz.tj',
  'co.tj',
  'com.tj',
  'edu.tj',
  'go.tj',
  'gov.tj',
  'int.tj',
  'mil.tj',
  'name.tj',
  'net.tj',
  'nic.tj',
  'org.tj',
  'test.tj',
  'web.tj',
  'tk',
  'tl',
  'gov.tl',
  'tm',
  'com.tm',
  'co.tm',
  'org.tm',
  'net.tm',
  'nom.tm',
  'gov.tm',
  'mil.tm',
  'edu.tm',
  'tn',
  'com.tn',
  'ens.tn',
  'fin.tn',
  'gov.tn',
  'ind.tn',
  'intl.tn',
  'nat.tn',
  'net.tn',
  'org.tn',
  'info.tn',
  'perso.tn',
  'tourism.tn',
  'edunet.tn',
  'rnrt.tn',
  'rns.tn',
  'rnu.tn',
  'mincom.tn',
  'agrinet.tn',
  'defense.tn',
  'turen.tn',
  'to',
  'com.to',
  'gov.to',
  'net.to',
  'org.to',
  'edu.to',
  'mil.to',
  'tr',
  'av.tr',
  'bbs.tr',
  'bel.tr',
  'biz.tr',
  'com.tr',
  'dr.tr',
  'edu.tr',
  'gen.tr',
  'gov.tr',
  'info.tr',
  'mil.tr',
  'k12.tr',
  'kep.tr',
  'name.tr',
  'net.tr',
  'org.tr',
  'pol.tr',
  'tel.tr',
  'tsk.tr',
  'tv.tr',
  'web.tr',
  'nc.tr',
  'gov.nc.tr',
  'tt',
  'co.tt',
  'com.tt',
  'org.tt',
  'net.tt',
  'biz.tt',
  'info.tt',
  'pro.tt',
  'int.tt',
  'coop.tt',
  'jobs.tt',
  'mobi.tt',
  'travel.tt',
  'museum.tt',
  'aero.tt',
  'name.tt',
  'gov.tt',
  'edu.tt',
  'tv',
  'tw',
  'edu.tw',
  'gov.tw',
  'mil.tw',
  'com.tw',
  'net.tw',
  'org.tw',
  'idv.tw',
  'game.tw',
  'ebiz.tw',
  'club.tw',
  '網路.tw',
  '組織.tw',
  '商業.tw',
  'tz',
  'ac.tz',
  'co.tz',
  'go.tz',
  'hotel.tz',
  'info.tz',
  'me.tz',
  'mil.tz',
  'mobi.tz',
  'ne.tz',
  'or.tz',
  'sc.tz',
  'tv.tz',
  'ua',
  'com.ua',
  'edu.ua',
  'gov.ua',
  'in.ua',
  'net.ua',
  'org.ua',
  'cherkassy.ua',
  'cherkasy.ua',
  'chernigov.ua',
  'chernihiv.ua',
  'chernivtsi.ua',
  'chernovtsy.ua',
  'ck.ua',
  'cn.ua',
  'cr.ua',
  'crimea.ua',
  'cv.ua',
  'dn.ua',
  'dnepropetrovsk.ua',
  'dnipropetrovsk.ua',
  'dominic.ua',
  'donetsk.ua',
  'dp.ua',
  'if.ua',
  'ivano-frankivsk.ua',
  'kh.ua',
  'kharkiv.ua',
  'kharkov.ua',
  'kherson.ua',
  'khmelnitskiy.ua',
  'khmelnytskyi.ua',
  'kiev.ua',
  'kirovograd.ua',
  'km.ua',
  'kr.ua',
  'krym.ua',
  'ks.ua',
  'kv.ua',
  'kyiv.ua',
  'lg.ua',
  'lt.ua',
  'lugansk.ua',
  'lutsk.ua',
  'lv.ua',
  'lviv.ua',
  'mk.ua',
  'mykolaiv.ua',
  'nikolaev.ua',
  'od.ua',
  'odesa.ua',
  'odessa.ua',
  'pl.ua',
  'poltava.ua',
  'rivne.ua',
  'rovno.ua',
  'rv.ua',
  'sb.ua',
  'sebastopol.ua',
  'sevastopol.ua',
  'sm.ua',
  'sumy.ua',
  'te.ua',
  'ternopil.ua',
  'uz.ua',
  'uzhgorod.ua',
  'vinnica.ua',
  'vinnytsia.ua',
  'vn.ua',
  'volyn.ua',
  'yalta.ua',
  'zaporizhzhe.ua',
  'zaporizhzhia.ua',
  'zhitomir.ua',
  'zhytomyr.ua',
  'zp.ua',
  'zt.ua',
  'ug',
  'co.ug',
  'or.ug',
  'ac.ug',
  'sc.ug',
  'go.ug',
  'ne.ug',
  'com.ug',
  'org.ug',
  'uk',
  'ac.uk',
  'co.uk',
  'gov.uk',
  'ltd.uk',
  'me.uk',
  'net.uk',
  'nhs.uk',
  'org.uk',
  'plc.uk',
  'police.uk',
  '*.sch.uk',
  'us',
  'dni.us',
  'fed.us',
  'isa.us',
  'kids.us',
  'nsn.us',
  'ak.us',
  'al.us',
  'ar.us',
  'as.us',
  'az.us',
  'ca.us',
  'co.us',
  'ct.us',
  'dc.us',
  'de.us',
  'fl.us',
  'ga.us',
  'gu.us',
  'hi.us',
  'ia.us',
  'id.us',
  'il.us',
  'in.us',
  'ks.us',
  'ky.us',
  'la.us',
  'ma.us',
  'md.us',
  'me.us',
  'mi.us',
  'mn.us',
  'mo.us',
  'ms.us',
  'mt.us',
  'nc.us',
  'nd.us',
  'ne.us',
  'nh.us',
  'nj.us',
  'nm.us',
  'nv.us',
  'ny.us',
  'oh.us',
  'ok.us',
  'or.us',
  'pa.us',
  'pr.us',
  'ri.us',
  'sc.us',
  'sd.us',
  'tn.us',
  'tx.us',
  'ut.us',
  'vi.us',
  'vt.us',
  'va.us',
  'wa.us',
  'wi.us',
  'wv.us',
  'wy.us',
  'k12.ak.us',
  'k12.al.us',
  'k12.ar.us',
  'k12.as.us',
  'k12.az.us',
  'k12.ca.us',
  'k12.co.us',
  'k12.ct.us',
  'k12.dc.us',
  'k12.de.us',
  'k12.fl.us',
  'k12.ga.us',
  'k12.gu.us',
  'k12.ia.us',
  'k12.id.us',
  'k12.il.us',
  'k12.in.us',
  'k12.ks.us',
  'k12.ky.us',
  'k12.la.us',
  'k12.ma.us',
  'k12.md.us',
  'k12.me.us',
  'k12.mi.us',
  'k12.mn.us',
  'k12.mo.us',
  'k12.ms.us',
  'k12.mt.us',
  'k12.nc.us',
  'k12.ne.us',
  'k12.nh.us',
  'k12.nj.us',
  'k12.nm.us',
  'k12.nv.us',
  'k12.ny.us',
  'k12.oh.us',
  'k12.ok.us',
  'k12.or.us',
  'k12.pa.us',
  'k12.pr.us',
  'k12.ri.us',
  'k12.sc.us',
  'k12.tn.us',
  'k12.tx.us',
  'k12.ut.us',
  'k12.vi.us',
  'k12.vt.us',
  'k12.va.us',
  'k12.wa.us',
  'k12.wi.us',
  'k12.wy.us',
  'cc.ak.us',
  'cc.al.us',
  'cc.ar.us',
  'cc.as.us',
  'cc.az.us',
  'cc.ca.us',
  'cc.co.us',
  'cc.ct.us',
  'cc.dc.us',
  'cc.de.us',
  'cc.fl.us',
  'cc.ga.us',
  'cc.gu.us',
  'cc.hi.us',
  'cc.ia.us',
  'cc.id.us',
  'cc.il.us',
  'cc.in.us',
  'cc.ks.us',
  'cc.ky.us',
  'cc.la.us',
  'cc.ma.us',
  'cc.md.us',
  'cc.me.us',
  'cc.mi.us',
  'cc.mn.us',
  'cc.mo.us',
  'cc.ms.us',
  'cc.mt.us',
  'cc.nc.us',
  'cc.nd.us',
  'cc.ne.us',
  'cc.nh.us',
  'cc.nj.us',
  'cc.nm.us',
  'cc.nv.us',
  'cc.ny.us',
  'cc.oh.us',
  'cc.ok.us',
  'cc.or.us',
  'cc.pa.us',
  'cc.pr.us',
  'cc.ri.us',
  'cc.sc.us',
  'cc.sd.us',
  'cc.tn.us',
  'cc.tx.us',
  'cc.ut.us',
  'cc.vi.us',
  'cc.vt.us',
  'cc.va.us',
  'cc.wa.us',
  'cc.wi.us',
  'cc.wv.us',
  'cc.wy.us',
  'lib.ak.us',
  'lib.al.us',
  'lib.ar.us',
  'lib.as.us',
  'lib.az.us',
  'lib.ca.us',
  'lib.co.us',
  'lib.ct.us',
  'lib.dc.us',
  'lib.fl.us',
  'lib.ga.us',
  'lib.gu.us',
  'lib.hi.us',
  'lib.ia.us',
  'lib.id.us',
  'lib.il.us',
  'lib.in.us',
  'lib.ks.us',
  'lib.ky.us',
  'lib.la.us',
  'lib.ma.us',
  'lib.md.us',
  'lib.me.us',
  'lib.mi.us',
  'lib.mn.us',
  'lib.mo.us',
  'lib.ms.us',
  'lib.mt.us',
  'lib.nc.us',
  'lib.nd.us',
  'lib.ne.us',
  'lib.nh.us',
  'lib.nj.us',
  'lib.nm.us',
  'lib.nv.us',
  'lib.ny.us',
  'lib.oh.us',
  'lib.ok.us',
  'lib.or.us',
  'lib.pa.us',
  'lib.pr.us',
  'lib.ri.us',
  'lib.sc.us',
  'lib.sd.us',
  'lib.tn.us',
  'lib.tx.us',
  'lib.ut.us',
  'lib.vi.us',
  'lib.vt.us',
  'lib.va.us',
  'lib.wa.us',
  'lib.wi.us',
  'lib.wy.us',
  'pvt.k12.ma.us',
  'chtr.k12.ma.us',
  'paroch.k12.ma.us',
  'ann-arbor.mi.us',
  'cog.mi.us',
  'dst.mi.us',
  'eaton.mi.us',
  'gen.mi.us',
  'mus.mi.us',
  'tec.mi.us',
  'washtenaw.mi.us',
  'uy',
  'com.uy',
  'edu.uy',
  'gub.uy',
  'mil.uy',
  'net.uy',
  'org.uy',
  'uz',
  'co.uz',
  'com.uz',
  'net.uz',
  'org.uz',
  'va',
  'vc',
  'com.vc',
  'net.vc',
  'org.vc',
  'gov.vc',
  'mil.vc',
  'edu.vc',
  've',
  'arts.ve',
  'co.ve',
  'com.ve',
  'e12.ve',
  'edu.ve',
  'firm.ve',
  'gob.ve',
  'gov.ve',
  'info.ve',
  'int.ve',
  'mil.ve',
  'net.ve',
  'org.ve',
  'rec.ve',
  'store.ve',
  'tec.ve',
  'web.ve',
  'vg',
  'vi',
  'co.vi',
  'com.vi',
  'k12.vi',
  'net.vi',
  'org.vi',
  'vn',
  'com.vn',
  'net.vn',
  'org.vn',
  'edu.vn',
  'gov.vn',
  'int.vn',
  'ac.vn',
  'biz.vn',
  'info.vn',
  'name.vn',
  'pro.vn',
  'health.vn',
  'vu',
  'com.vu',
  'edu.vu',
  'net.vu',
  'org.vu',
  'wf',
  'ws',
  'com.ws',
  'net.ws',
  'org.ws',
  'gov.ws',
  'edu.ws',
  'yt',
  'امارات',
  'հայ',
  'বাংলা',
  'бг',
  'бел',
  '中国',
  '中國',
  'الجزائر',
  'مصر',
  'ею',
  'გე',
  'ελ',
  '香港',
  '公司.香港',
  '教育.香港',
  '政府.香港',
  '個人.香港',
  '網絡.香港',
  '組織.香港',
  'ಭಾರತ',
  'ଭାରତ',
  'ভাৰত',
  'भारतम्',
  'भारोत',
  'ڀارت',
  'ഭാരതം',
  'भारत',
  'بارت',
  'بھارت',
  'భారత్',
  'ભારત',
  'ਭਾਰਤ',
  'ভারত',
  'இந்தியா',
  'ایران',
  'ايران',
  'عراق',
  'الاردن',
  '한국',
  'қаз',
  'ලංකා',
  'இலங்கை',
  'المغرب',
  'мкд',
  'мон',
  '澳門',
  '澳门',
  'مليسيا',
  'عمان',
  'پاکستان',
  'پاكستان',
  'فلسطين',
  'срб',
  'пр.срб',
  'орг.срб',
  'обр.срб',
  'од.срб',
  'упр.срб',
  'ак.срб',
  'рф',
  'قطر',
  'السعودية',
  'السعودیة',
  'السعودیۃ',
  'السعوديه',
  'سودان',
  '新加坡',
  'சிங்கப்பூர்',
  'سورية',
  'سوريا',
  'ไทย',
  'ศึกษา.ไทย',
  'ธุรกิจ.ไทย',
  'รัฐบาล.ไทย',
  'ทหาร.ไทย',
  'เน็ต.ไทย',
  'องค์กร.ไทย',
  'تونس',
  '台灣',
  '台湾',
  '臺灣',
  'укр',
  'اليمن',
  'xxx',
  '*.ye',
  'ac.za',
  'agric.za',
  'alt.za',
  'co.za',
  'edu.za',
  'gov.za',
  'grondar.za',
  'law.za',
  'mil.za',
  'net.za',
  'ngo.za',
  'nic.za',
  'nis.za',
  'nom.za',
  'org.za',
  'school.za',
  'tm.za',
  'web.za',
  'zm',
  'ac.zm',
  'biz.zm',
  'co.zm',
  'com.zm',
  'edu.zm',
  'gov.zm',
  'info.zm',
  'mil.zm',
  'net.zm',
  'org.zm',
  'sch.zm',
  'zw',
  'ac.zw',
  'co.zw',
  'gov.zw',
  'mil.zw',
  'org.zw',
  'aaa',
  'aarp',
  'abarth',
  'abb',
  'abbott',
  'abbvie',
  'abc',
  'able',
  'abogado',
  'abudhabi',
  'academy',
  'accenture',
  'accountant',
  'accountants',
  'aco',
  'actor',
  'adac',
  'ads',
  'adult',
  'aeg',
  'aetna',
  'afamilycompany',
  'afl',
  'africa',
  'agakhan',
  'agency',
  'aig',
  'aigo',
  'airbus',
  'airforce',
  'airtel',
  'akdn',
  'alfaromeo',
  'alibaba',
  'alipay',
  'allfinanz',
  'allstate',
  'ally',
  'alsace',
  'alstom',
  'americanexpress',
  'americanfamily',
  'amex',
  'amfam',
  'amica',
  'amsterdam',
  'analytics',
  'android',
  'anquan',
  'anz',
  'aol',
  'apartments',
  'app',
  'apple',
  'aquarelle',
  'arab',
  'aramco',
  'archi',
  'army',
  'art',
  'arte',
  'asda',
  'associates',
  'athleta',
  'attorney',
  'auction',
  'audi',
  'audible',
  'audio',
  'auspost',
  'author',
  'auto',
  'autos',
  'avianca',
  'aws',
  'axa',
  'azure',
  'baby',
  'baidu',
  'banamex',
  'bananarepublic',
  'band',
  'bank',
  'bar',
  'barcelona',
  'barclaycard',
  'barclays',
  'barefoot',
  'bargains',
  'baseball',
  'basketball',
  'bauhaus',
  'bayern',
  'bbc',
  'bbt',
  'bbva',
  'bcg',
  'bcn',
  'beats',
  'beauty',
  'beer',
  'bentley',
  'berlin',
  'best',
  'bestbuy',
  'bet',
  'bharti',
  'bible',
  'bid',
  'bike',
  'bing',
  'bingo',
  'bio',
  'black',
  'blackfriday',
  'blockbuster',
  'blog',
  'bloomberg',
  'blue',
  'bms',
  'bmw',
  'bnpparibas',
  'boats',
  'boehringer',
  'bofa',
  'bom',
  'bond',
  'boo',
  'book',
  'booking',
  'bosch',
  'bostik',
  'boston',
  'bot',
  'boutique',
  'box',
  'bradesco',
  'bridgestone',
  'broadway',
  'broker',
  'brother',
  'brussels',
  'budapest',
  'bugatti',
  'build',
  'builders',
  'business',
  'buy',
  'buzz',
  'bzh',
  'cab',
  'cafe',
  'cal',
  'call',
  'calvinklein',
  'cam',
  'camera',
  'camp',
  'cancerresearch',
  'canon',
  'capetown',
  'capital',
  'capitalone',
  'car',
  'caravan',
  'cards',
  'care',
  'career',
  'careers',
  'cars',
  'cartier',
  'casa',
  'case',
  'caseih',
  'cash',
  'casino',
  'catering',
  'catholic',
  'cba',
  'cbn',
  'cbre',
  'cbs',
  'ceb',
  'center',
  'ceo',
  'cern',
  'cfa',
  'cfd',
  'chanel',
  'channel',
  'charity',
  'chase',
  'chat',
  'cheap',
  'chintai',
  'christmas',
  'chrome',
  'chrysler',
  'church',
  'cipriani',
  'circle',
  'cisco',
  'citadel',
  'citi',
  'citic',
  'city',
  'cityeats',
  'claims',
  'cleaning',
  'click',
  'clinic',
  'clinique',
  'clothing',
  'cloud',
  'club',
  'clubmed',
  'coach',
  'codes',
  'coffee',
  'college',
  'cologne',
  'comcast',
  'commbank',
  'community',
  'company',
  'compare',
  'computer',
  'comsec',
  'condos',
  'construction',
  'consulting',
  'contact',
  'contractors',
  'cooking',
  'cookingchannel',
  'cool',
  'corsica',
  'country',
  'coupon',
  'coupons',
  'courses',
  'cpa',
  'credit',
  'creditcard',
  'creditunion',
  'cricket',
  'crown',
  'crs',
  'cruise',
  'cruises',
  'csc',
  'cuisinella',
  'cymru',
  'cyou',
  'dabur',
  'dad',
  'dance',
  'data',
  'date',
  'dating',
  'datsun',
  'day',
  'dclk',
  'dds',
  'deal',
  'dealer',
  'deals',
  'degree',
  'delivery',
  'dell',
  'deloitte',
  'delta',
  'democrat',
  'dental',
  'dentist',
  'desi',
  'design',
  'dev',
  'dhl',
  'diamonds',
  'diet',
  'digital',
  'direct',
  'directory',
  'discount',
  'discover',
  'dish',
  'diy',
  'dnp',
  'docs',
  'doctor',
  'dodge',
  'dog',
  'domains',
  'dot',
  'download',
  'drive',
  'dtv',
  'dubai',
  'duck',
  'dunlop',
  'dupont',
  'durban',
  'dvag',
  'dvr',
  'earth',
  'eat',
  'eco',
  'edeka',
  'education',
  'email',
  'emerck',
  'energy',
  'engineer',
  'engineering',
  'enterprises',
  'epson',
  'equipment',
  'ericsson',
  'erni',
  'esq',
  'estate',
  'esurance',
  'etisalat',
  'eurovision',
  'eus',
  'events',
  'everbank',
  'exchange',
  'expert',
  'exposed',
  'express',
  'extraspace',
  'fage',
  'fail',
  'fairwinds',
  'faith',
  'family',
  'fan',
  'fans',
  'farm',
  'farmers',
  'fashion',
  'fast',
  'fedex',
  'feedback',
  'ferrari',
  'ferrero',
  'fiat',
  'fidelity',
  'fido',
  'film',
  'final',
  'finance',
  'financial',
  'fire',
  'firestone',
  'firmdale',
  'fish',
  'fishing',
  'fit',
  'fitness',
  'flickr',
  'flights',
  'flir',
  'florist',
  'flowers',
  'fly',
  'foo',
  'food',
  'foodnetwork',
  'football',
  'ford',
  'forex',
  'forsale',
  'forum',
  'foundation',
  'fox',
  'free',
  'fresenius',
  'frl',
  'frogans',
  'frontdoor',
  'frontier',
  'ftr',
  'fujitsu',
  'fujixerox',
  'fun',
  'fund',
  'furniture',
  'futbol',
  'fyi',
  'gal',
  'gallery',
  'gallo',
  'gallup',
  'game',
  'games',
  'gap',
  'garden',
  'gay',
  'gbiz',
  'gdn',
  'gea',
  'gent',
  'genting',
  'george',
  'ggee',
  'gift',
  'gifts',
  'gives',
  'giving',
  'glade',
  'glass',
  'gle',
  'global',
  'globo',
  'gmail',
  'gmbh',
  'gmo',
  'gmx',
  'godaddy',
  'gold',
  'goldpoint',
  'golf',
  'goo',
  'goodyear',
  'goog',
  'google',
  'gop',
  'got',
  'grainger',
  'graphics',
  'gratis',
  'green',
  'gripe',
  'grocery',
  'group',
  'guardian',
  'gucci',
  'guge',
  'guide',
  'guitars',
  'guru',
  'hair',
  'hamburg',
  'hangout',
  'haus',
  'hbo',
  'hdfc',
  'hdfcbank',
  'health',
  'healthcare',
  'help',
  'helsinki',
  'here',
  'hermes',
  'hgtv',
  'hiphop',
  'hisamitsu',
  'hitachi',
  'hiv',
  'hkt',
  'hockey',
  'holdings',
  'holiday',
  'homedepot',
  'homegoods',
  'homes',
  'homesense',
  'honda',
  'horse',
  'hospital',
  'host',
  'hosting',
  'hot',
  'hoteles',
  'hotels',
  'hotmail',
  'house',
  'how',
  'hsbc',
  'hughes',
  'hyatt',
  'hyundai',
  'ibm',
  'icbc',
  'ice',
  'icu',
  'ieee',
  'ifm',
  'ikano',
  'imamat',
  'imdb',
  'immo',
  'immobilien',
  'inc',
  'industries',
  'infiniti',
  'ing',
  'ink',
  'institute',
  'insurance',
  'insure',
  'intel',
  'international',
  'intuit',
  'investments',
  'ipiranga',
  'irish',
  'ismaili',
  'ist',
  'istanbul',
  'itau',
  'itv',
  'iveco',
  'jaguar',
  'java',
  'jcb',
  'jcp',
  'jeep',
  'jetzt',
  'jewelry',
  'jio',
  'jll',
  'jmp',
  'jnj',
  'joburg',
  'jot',
  'joy',
  'jpmorgan',
  'jprs',
  'juegos',
  'juniper',
  'kaufen',
  'kddi',
  'kerryhotels',
  'kerrylogistics',
  'kerryproperties',
  'kfh',
  'kia',
  'kim',
  'kinder',
  'kindle',
  'kitchen',
  'kiwi',
  'koeln',
  'komatsu',
  'kosher',
  'kpmg',
  'kpn',
  'krd',
  'kred',
  'kuokgroup',
  'kyoto',
  'lacaixa',
  'ladbrokes',
  'lamborghini',
  'lamer',
  'lancaster',
  'lancia',
  'lancome',
  'land',
  'landrover',
  'lanxess',
  'lasalle',
  'lat',
  'latino',
  'latrobe',
  'law',
  'lawyer',
  'lds',
  'lease',
  'leclerc',
  'lefrak',
  'legal',
  'lego',
  'lexus',
  'lgbt',
  'liaison',
  'lidl',
  'life',
  'lifeinsurance',
  'lifestyle',
  'lighting',
  'like',
  'lilly',
  'limited',
  'limo',
  'lincoln',
  'linde',
  'link',
  'lipsy',
  'live',
  'living',
  'lixil',
  'llc',
  'llp',
  'loan',
  'loans',
  'locker',
  'locus',
  'loft',
  'lol',
  'london',
  'lotte',
  'lotto',
  'love',
  'lpl',
  'lplfinancial',
  'ltd',
  'ltda',
  'lundbeck',
  'lupin',
  'luxe',
  'luxury',
  'macys',
  'madrid',
  'maif',
  'maison',
  'makeup',
  'man',
  'management',
  'mango',
  'map',
  'market',
  'marketing',
  'markets',
  'marriott',
  'marshalls',
  'maserati',
  'mattel',
  'mba',
  'mckinsey',
  'med',
  'media',
  'meet',
  'melbourne',
  'meme',
  'memorial',
  'men',
  'menu',
  'merckmsd',
  'metlife',
  'miami',
  'microsoft',
  'mini',
  'mint',
  'mit',
  'mitsubishi',
  'mlb',
  'mls',
  'mma',
  'mobile',
  'mobily',
  'moda',
  'moe',
  'moi',
  'mom',
  'monash',
  'money',
  'monster',
  'mopar',
  'mormon',
  'mortgage',
  'moscow',
  'moto',
  'motorcycles',
  'mov',
  'movie',
  'movistar',
  'msd',
  'mtn',
  'mtr',
  'mutual',
  'nab',
  'nadex',
  'nagoya',
  'nationwide',
  'natura',
  'navy',
  'nba',
  'nec',
  'netbank',
  'netflix',
  'network',
  'neustar',
  'new',
  'newholland',
  'news',
  'next',
  'nextdirect',
  'nexus',
  'nfl',
  'ngo',
  'nhk',
  'nico',
  'nike',
  'nikon',
  'ninja',
  'nissan',
  'nissay',
  'nokia',
  'northwesternmutual',
  'norton',
  'now',
  'nowruz',
  'nowtv',
  'nra',
  'nrw',
  'ntt',
  'nyc',
  'obi',
  'observer',
  'off',
  'office',
  'okinawa',
  'olayan',
  'olayangroup',
  'oldnavy',
  'ollo',
  'omega',
  'one',
  'ong',
  'onl',
  'online',
  'onyourside',
  'ooo',
  'open',
  'oracle',
  'orange',
  'organic',
  'origins',
  'osaka',
  'otsuka',
  'ott',
  'ovh',
  'page',
  'panasonic',
  'paris',
  'pars',
  'partners',
  'parts',
  'party',
  'passagens',
  'pay',
  'pccw',
  'pet',
  'pfizer',
  'pharmacy',
  'phd',
  'philips',
  'phone',
  'photo',
  'photography',
  'photos',
  'physio',
  'piaget',
  'pics',
  'pictet',
  'pictures',
  'pid',
  'pin',
  'ping',
  'pink',
  'pioneer',
  'pizza',
  'place',
  'play',
  'playstation',
  'plumbing',
  'plus',
  'pnc',
  'pohl',
  'poker',
  'politie',
  'porn',
  'pramerica',
  'praxi',
  'press',
  'prime',
  'prod',
  'productions',
  'prof',
  'progressive',
  'promo',
  'properties',
  'property',
  'protection',
  'pru',
  'prudential',
  'pub',
  'pwc',
  'qpon',
  'quebec',
  'quest',
  'qvc',
  'racing',
  'radio',
  'raid',
  'read',
  'realestate',
  'realtor',
  'realty',
  'recipes',
  'red',
  'redstone',
  'redumbrella',
  'rehab',
  'reise',
  'reisen',
  'reit',
  'reliance',
  'ren',
  'rent',
  'rentals',
  'repair',
  'report',
  'republican',
  'rest',
  'restaurant',
  'review',
  'reviews',
  'rexroth',
  'rich',
  'richardli',
  'ricoh',
  'rightathome',
  'ril',
  'rio',
  'rip',
  'rmit',
  'rocher',
  'rocks',
  'rodeo',
  'rogers',
  'room',
  'rsvp',
  'rugby',
  'ruhr',
  'run',
  'rwe',
  'ryukyu',
  'saarland',
  'safe',
  'safety',
  'sakura',
  'sale',
  'salon',
  'samsclub',
  'samsung',
  'sandvik',
  'sandvikcoromant',
  'sanofi',
  'sap',
  'sarl',
  'sas',
  'save',
  'saxo',
  'sbi',
  'sbs',
  'sca',
  'scb',
  'schaeffler',
  'schmidt',
  'scholarships',
  'school',
  'schule',
  'schwarz',
  'science',
  'scjohnson',
  'scor',
  'scot',
  'search',
  'seat',
  'secure',
  'security',
  'seek',
  'select',
  'sener',
  'services',
  'ses',
  'seven',
  'sew',
  'sex',
  'sexy',
  'sfr',
  'shangrila',
  'sharp',
  'shaw',
  'shell',
  'shia',
  'shiksha',
  'shoes',
  'shop',
  'shopping',
  'shouji',
  'show',
  'showtime',
  'shriram',
  'silk',
  'sina',
  'singles',
  'site',
  'ski',
  'skin',
  'sky',
  'skype',
  'sling',
  'smart',
  'smile',
  'sncf',
  'soccer',
  'social',
  'softbank',
  'software',
  'sohu',
  'solar',
  'solutions',
  'song',
  'sony',
  'soy',
  'space',
  'sport',
  'spot',
  'spreadbetting',
  'srl',
  'srt',
  'stada',
  'staples',
  'star',
  'statebank',
  'statefarm',
  'stc',
  'stcgroup',
  'stockholm',
  'storage',
  'store',
  'stream',
  'studio',
  'study',
  'style',
  'sucks',
  'supplies',
  'supply',
  'support',
  'surf',
  'surgery',
  'suzuki',
  'swatch',
  'swiftcover',
  'swiss',
  'sydney',
  'symantec',
  'systems',
  'tab',
  'taipei',
  'talk',
  'taobao',
  'target',
  'tatamotors',
  'tatar',
  'tattoo',
  'tax',
  'taxi',
  'tci',
  'tdk',
  'team',
  'tech',
  'technology',
  'telefonica',
  'temasek',
  'tennis',
  'teva',
  'thd',
  'theater',
  'theatre',
  'tiaa',
  'tickets',
  'tienda',
  'tiffany',
  'tips',
  'tires',
  'tirol',
  'tjmaxx',
  'tjx',
  'tkmaxx',
  'tmall',
  'today',
  'tokyo',
  'tools',
  'top',
  'toray',
  'toshiba',
  'total',
  'tours',
  'town',
  'toyota',
  'toys',
  'trade',
  'trading',
  'training',
  'travel',
  'travelchannel',
  'travelers',
  'travelersinsurance',
  'trust',
  'trv',
  'tube',
  'tui',
  'tunes',
  'tushu',
  'tvs',
  'ubank',
  'ubs',
  'uconnect',
  'unicom',
  'university',
  'uno',
  'uol',
  'ups',
  'vacations',
  'vana',
  'vanguard',
  'vegas',
  'ventures',
  'verisign',
  'versicherung',
  'vet',
  'viajes',
  'video',
  'vig',
  'viking',
  'villas',
  'vin',
  'vip',
  'virgin',
  'visa',
  'vision',
  'vistaprint',
  'viva',
  'vivo',
  'vlaanderen',
  'vodka',
  'volkswagen',
  'volvo',
  'vote',
  'voting',
  'voto',
  'voyage',
  'vuelos',
  'wales',
  'walmart',
  'walter',
  'wang',
  'wanggou',
  'warman',
  'watch',
  'watches',
  'weather',
  'weatherchannel',
  'webcam',
  'weber',
  'website',
  'wed',
  'wedding',
  'weibo',
  'weir',
  'whoswho',
  'wien',
  'wiki',
  'williamhill',
  'win',
  'windows',
  'wine',
  'winners',
  'wme',
  'wolterskluwer',
  'woodside',
  'work',
  'works',
  'world',
  'wow',
  'wtc',
  'wtf',
  'xbox',
  'xerox',
  'xfinity',
  'xihuan',
  'xin',
  'कॉम',
  'セール',
  '佛山',
  '慈善',
  '集团',
  '在线',
  '大众汽车',
  '点看',
  'คอม',
  '八卦',
  'موقع',
  '公益',
  '公司',
  '香格里拉',
  '网站',
  '移动',
  '我爱你',
  'москва',
  'католик',
  'онлайн',
  'сайт',
  '联通',
  'קום',
  '时尚',
  '微博',
  '淡马锡',
  'ファッション',
  'орг',
  'नेट',
  'ストア',
  '삼성',
  '商标',
  '商店',
  '商城',
  'дети',
  'ポイント',
  '新闻',
  '工行',
  '家電',
  'كوم',
  '中文网',
  '中信',
  '娱乐',
  '谷歌',
  '電訊盈科',
  '购物',
  'クラウド',
  '通販',
  '网店',
  'संगठन',
  '餐厅',
  '网络',
  'ком',
  '诺基亚',
  '食品',
  '飞利浦',
  '手表',
  '手机',
  'ارامكو',
  'العليان',
  'اتصالات',
  'بازار',
  'موبايلي',
  'ابوظبي',
  'كاثوليك',
  'همراه',
  '닷컴',
  '政府',
  'شبكة',
  'بيتك',
  'عرب',
  '机构',
  '组织机构',
  '健康',
  '招聘',
  'рус',
  '珠宝',
  '大拿',
  'みんな',
  'グーグル',
  '世界',
  '書籍',
  '网址',
  '닷넷',
  'コム',
  '天主教',
  '游戏',
  'vermögensberater',
  'vermögensberatung',
  '企业',
  '信息',
  '嘉里大酒店',
  '嘉里',
  '广东',
  '政务',
  'xyz',
  'yachts',
  'yahoo',
  'yamaxun',
  'yandex',
  'yodobashi',
  'yoga',
  'yokohama',
  'you',
  'youtube',
  'yun',
  'zappos',
  'zara',
  'zero',
  'zip',
  'zone',
  'zuerich',
  'cc.ua',
  'inf.ua',
  'ltd.ua',
  'beep.pl',
  'barsy.ca',
  '*.compute.estate',
  '*.alces.network',
  'alwaysdata.net',
  'cloudfront.net',
  '*.compute.amazonaws.com',
  '*.compute-1.amazonaws.com',
  '*.compute.amazonaws.com.cn',
  'us-east-1.amazonaws.com',
  'cn-north-1.eb.amazonaws.com.cn',
  'cn-northwest-1.eb.amazonaws.com.cn',
  'elasticbeanstalk.com',
  'ap-northeast-1.elasticbeanstalk.com',
  'ap-northeast-2.elasticbeanstalk.com',
  'ap-northeast-3.elasticbeanstalk.com',
  'ap-south-1.elasticbeanstalk.com',
  'ap-southeast-1.elasticbeanstalk.com',
  'ap-southeast-2.elasticbeanstalk.com',
  'ca-central-1.elasticbeanstalk.com',
  'eu-central-1.elasticbeanstalk.com',
  'eu-west-1.elasticbeanstalk.com',
  'eu-west-2.elasticbeanstalk.com',
  'eu-west-3.elasticbeanstalk.com',
  'sa-east-1.elasticbeanstalk.com',
  'us-east-1.elasticbeanstalk.com',
  'us-east-2.elasticbeanstalk.com',
  'us-gov-west-1.elasticbeanstalk.com',
  'us-west-1.elasticbeanstalk.com',
  'us-west-2.elasticbeanstalk.com',
  '*.elb.amazonaws.com',
  '*.elb.amazonaws.com.cn',
  's3.amazonaws.com',
  's3-ap-northeast-1.amazonaws.com',
  's3-ap-northeast-2.amazonaws.com',
  's3-ap-south-1.amazonaws.com',
  's3-ap-southeast-1.amazonaws.com',
  's3-ap-southeast-2.amazonaws.com',
  's3-ca-central-1.amazonaws.com',
  's3-eu-central-1.amazonaws.com',
  's3-eu-west-1.amazonaws.com',
  's3-eu-west-2.amazonaws.com',
  's3-eu-west-3.amazonaws.com',
  's3-external-1.amazonaws.com',
  's3-fips-us-gov-west-1.amazonaws.com',
  's3-sa-east-1.amazonaws.com',
  's3-us-gov-west-1.amazonaws.com',
  's3-us-east-2.amazonaws.com',
  's3-us-west-1.amazonaws.com',
  's3-us-west-2.amazonaws.com',
  's3.ap-northeast-2.amazonaws.com',
  's3.ap-south-1.amazonaws.com',
  's3.cn-north-1.amazonaws.com.cn',
  's3.ca-central-1.amazonaws.com',
  's3.eu-central-1.amazonaws.com',
  's3.eu-west-2.amazonaws.com',
  's3.eu-west-3.amazonaws.com',
  's3.us-east-2.amazonaws.com',
  's3.dualstack.ap-northeast-1.amazonaws.com',
  's3.dualstack.ap-northeast-2.amazonaws.com',
  's3.dualstack.ap-south-1.amazonaws.com',
  's3.dualstack.ap-southeast-1.amazonaws.com',
  's3.dualstack.ap-southeast-2.amazonaws.com',
  's3.dualstack.ca-central-1.amazonaws.com',
  's3.dualstack.eu-central-1.amazonaws.com',
  's3.dualstack.eu-west-1.amazonaws.com',
  's3.dualstack.eu-west-2.amazonaws.com',
  's3.dualstack.eu-west-3.amazonaws.com',
  's3.dualstack.sa-east-1.amazonaws.com',
  's3.dualstack.us-east-1.amazonaws.com',
  's3.dualstack.us-east-2.amazonaws.com',
  's3-website-us-east-1.amazonaws.com',
  's3-website-us-west-1.amazonaws.com',
  's3-website-us-west-2.amazonaws.com',
  's3-website-ap-northeast-1.amazonaws.com',
  's3-website-ap-southeast-1.amazonaws.com',
  's3-website-ap-southeast-2.amazonaws.com',
  's3-website-eu-west-1.amazonaws.com',
  's3-website-sa-east-1.amazonaws.com',
  's3-website.ap-northeast-2.amazonaws.com',
  's3-website.ap-south-1.amazonaws.com',
  's3-website.ca-central-1.amazonaws.com',
  's3-website.eu-central-1.amazonaws.com',
  's3-website.eu-west-2.amazonaws.com',
  's3-website.eu-west-3.amazonaws.com',
  's3-website.us-east-2.amazonaws.com',
  't3l3p0rt.net',
  'tele.amune.org',
  'apigee.io',
  'on-aptible.com',
  'user.aseinet.ne.jp',
  'gv.vc',
  'd.gv.vc',
  'user.party.eus',
  'pimienta.org',
  'poivron.org',
  'potager.org',
  'sweetpepper.org',
  'myasustor.com',
  'go-vip.co',
  'go-vip.net',
  'wpcomstaging.com',
  'myfritz.net',
  '*.awdev.ca',
  '*.advisor.ws',
  'b-data.io',
  'backplaneapp.io',
  'balena-devices.com',
  'app.banzaicloud.io',
  'betainabox.com',
  'bnr.la',
  'blackbaudcdn.net',
  'boomla.net',
  'boxfuse.io',
  'square7.ch',
  'bplaced.com',
  'bplaced.de',
  'square7.de',
  'bplaced.net',
  'square7.net',
  'browsersafetymark.io',
  'uk0.bigv.io',
  'dh.bytemark.co.uk',
  'vm.bytemark.co.uk',
  'mycd.eu',
  'carrd.co',
  'crd.co',
  'uwu.ai',
  'ae.org',
  'ar.com',
  'br.com',
  'cn.com',
  'com.de',
  'com.se',
  'de.com',
  'eu.com',
  'gb.com',
  'gb.net',
  'hu.com',
  'hu.net',
  'jp.net',
  'jpn.com',
  'kr.com',
  'mex.com',
  'no.com',
  'qc.com',
  'ru.com',
  'sa.com',
  'se.net',
  'uk.com',
  'uk.net',
  'us.com',
  'uy.com',
  'za.bz',
  'za.com',
  'africa.com',
  'gr.com',
  'in.net',
  'us.org',
  'co.com',
  'c.la',
  'certmgr.org',
  'xenapponazure.com',
  'discourse.group',
  'virtueeldomein.nl',
  'cleverapps.io',
  '*.lcl.dev',
  '*.stg.dev',
  'c66.me',
  'cloud66.ws',
  'cloud66.zone',
  'jdevcloud.com',
  'wpdevcloud.com',
  'cloudaccess.host',
  'freesite.host',
  'cloudaccess.net',
  'cloudcontrolled.com',
  'cloudcontrolapp.com',
  'cloudera.site',
  'trycloudflare.com',
  'workers.dev',
  'wnext.app',
  'co.ca',
  '*.otap.co',
  'co.cz',
  'c.cdn77.org',
  'cdn77-ssl.net',
  'r.cdn77.net',
  'rsc.cdn77.org',
  'ssl.origin.cdn77-secure.org',
  'cloudns.asia',
  'cloudns.biz',
  'cloudns.club',
  'cloudns.cc',
  'cloudns.eu',
  'cloudns.in',
  'cloudns.info',
  'cloudns.org',
  'cloudns.pro',
  'cloudns.pw',
  'cloudns.us',
  'cloudeity.net',
  'cnpy.gdn',
  'co.nl',
  'co.no',
  'webhosting.be',
  'hosting-cluster.nl',
  'dyn.cosidns.de',
  'dynamisches-dns.de',
  'dnsupdater.de',
  'internet-dns.de',
  'l-o-g-i-n.de',
  'dynamic-dns.info',
  'feste-ip.net',
  'knx-server.net',
  'static-access.net',
  'realm.cz',
  '*.cryptonomic.net',
  'cupcake.is',
  'cyon.link',
  'cyon.site',
  'daplie.me',
  'localhost.daplie.me',
  'dattolocal.com',
  'dattorelay.com',
  'dattoweb.com',
  'mydatto.com',
  'dattolocal.net',
  'mydatto.net',
  'biz.dk',
  'co.dk',
  'firm.dk',
  'reg.dk',
  'store.dk',
  '*.dapps.earth',
  '*.bzz.dapps.earth',
  'debian.net',
  'dedyn.io',
  'dnshome.de',
  'online.th',
  'shop.th',
  'drayddns.com',
  'dreamhosters.com',
  'mydrobo.com',
  'drud.io',
  'drud.us',
  'duckdns.org',
  'dy.fi',
  'tunk.org',
  'dyndns-at-home.com',
  'dyndns-at-work.com',
  'dyndns-blog.com',
  'dyndns-free.com',
  'dyndns-home.com',
  'dyndns-ip.com',
  'dyndns-mail.com',
  'dyndns-office.com',
  'dyndns-pics.com',
  'dyndns-remote.com',
  'dyndns-server.com',
  'dyndns-web.com',
  'dyndns-wiki.com',
  'dyndns-work.com',
  'dyndns.biz',
  'dyndns.info',
  'dyndns.org',
  'dyndns.tv',
  'at-band-camp.net',
  'ath.cx',
  'barrel-of-knowledge.info',
  'barrell-of-knowledge.info',
  'better-than.tv',
  'blogdns.com',
  'blogdns.net',
  'blogdns.org',
  'blogsite.org',
  'boldlygoingnowhere.org',
  'broke-it.net',
  'buyshouses.net',
  'cechire.com',
  'dnsalias.com',
  'dnsalias.net',
  'dnsalias.org',
  'dnsdojo.com',
  'dnsdojo.net',
  'dnsdojo.org',
  'does-it.net',
  'doesntexist.com',
  'doesntexist.org',
  'dontexist.com',
  'dontexist.net',
  'dontexist.org',
  'doomdns.com',
  'doomdns.org',
  'dvrdns.org',
  'dyn-o-saur.com',
  'dynalias.com',
  'dynalias.net',
  'dynalias.org',
  'dynathome.net',
  'dyndns.ws',
  'endofinternet.net',
  'endofinternet.org',
  'endoftheinternet.org',
  'est-a-la-maison.com',
  'est-a-la-masion.com',
  'est-le-patron.com',
  'est-mon-blogueur.com',
  'for-better.biz',
  'for-more.biz',
  'for-our.info',
  'for-some.biz',
  'for-the.biz',
  'forgot.her.name',
  'forgot.his.name',
  'from-ak.com',
  'from-al.com',
  'from-ar.com',
  'from-az.net',
  'from-ca.com',
  'from-co.net',
  'from-ct.com',
  'from-dc.com',
  'from-de.com',
  'from-fl.com',
  'from-ga.com',
  'from-hi.com',
  'from-ia.com',
  'from-id.com',
  'from-il.com',
  'from-in.com',
  'from-ks.com',
  'from-ky.com',
  'from-la.net',
  'from-ma.com',
  'from-md.com',
  'from-me.org',
  'from-mi.com',
  'from-mn.com',
  'from-mo.com',
  'from-ms.com',
  'from-mt.com',
  'from-nc.com',
  'from-nd.com',
  'from-ne.com',
  'from-nh.com',
  'from-nj.com',
  'from-nm.com',
  'from-nv.com',
  'from-ny.net',
  'from-oh.com',
  'from-ok.com',
  'from-or.com',
  'from-pa.com',
  'from-pr.com',
  'from-ri.com',
  'from-sc.com',
  'from-sd.com',
  'from-tn.com',
  'from-tx.com',
  'from-ut.com',
  'from-va.com',
  'from-vt.com',
  'from-wa.com',
  'from-wi.com',
  'from-wv.com',
  'from-wy.com',
  'ftpaccess.cc',
  'fuettertdasnetz.de',
  'game-host.org',
  'game-server.cc',
  'getmyip.com',
  'gets-it.net',
  'go.dyndns.org',
  'gotdns.com',
  'gotdns.org',
  'groks-the.info',
  'groks-this.info',
  'ham-radio-op.net',
  'here-for-more.info',
  'hobby-site.com',
  'hobby-site.org',
  'home.dyndns.org',
  'homedns.org',
  'homeftp.net',
  'homeftp.org',
  'homeip.net',
  'homelinux.com',
  'homelinux.net',
  'homelinux.org',
  'homeunix.com',
  'homeunix.net',
  'homeunix.org',
  'iamallama.com',
  'in-the-band.net',
  'is-a-anarchist.com',
  'is-a-blogger.com',
  'is-a-bookkeeper.com',
  'is-a-bruinsfan.org',
  'is-a-bulls-fan.com',
  'is-a-candidate.org',
  'is-a-caterer.com',
  'is-a-celticsfan.org',
  'is-a-chef.com',
  'is-a-chef.net',
  'is-a-chef.org',
  'is-a-conservative.com',
  'is-a-cpa.com',
  'is-a-cubicle-slave.com',
  'is-a-democrat.com',
  'is-a-designer.com',
  'is-a-doctor.com',
  'is-a-financialadvisor.com',
  'is-a-geek.com',
  'is-a-geek.net',
  'is-a-geek.org',
  'is-a-green.com',
  'is-a-guru.com',
  'is-a-hard-worker.com',
  'is-a-hunter.com',
  'is-a-knight.org',
  'is-a-landscaper.com',
  'is-a-lawyer.com',
  'is-a-liberal.com',
  'is-a-libertarian.com',
  'is-a-linux-user.org',
  'is-a-llama.com',
  'is-a-musician.com',
  'is-a-nascarfan.com',
  'is-a-nurse.com',
  'is-a-painter.com',
  'is-a-patsfan.org',
  'is-a-personaltrainer.com',
  'is-a-photographer.com',
  'is-a-player.com',
  'is-a-republican.com',
  'is-a-rockstar.com',
  'is-a-socialist.com',
  'is-a-soxfan.org',
  'is-a-student.com',
  'is-a-teacher.com',
  'is-a-techie.com',
  'is-a-therapist.com',
  'is-an-accountant.com',
  'is-an-actor.com',
  'is-an-actress.com',
  'is-an-anarchist.com',
  'is-an-artist.com',
  'is-an-engineer.com',
  'is-an-entertainer.com',
  'is-by.us',
  'is-certified.com',
  'is-found.org',
  'is-gone.com',
  'is-into-anime.com',
  'is-into-cars.com',
  'is-into-cartoons.com',
  'is-into-games.com',
  'is-leet.com',
  'is-lost.org',
  'is-not-certified.com',
  'is-saved.org',
  'is-slick.com',
  'is-uberleet.com',
  'is-very-bad.org',
  'is-very-evil.org',
  'is-very-good.org',
  'is-very-nice.org',
  'is-very-sweet.org',
  'is-with-theband.com',
  'isa-geek.com',
  'isa-geek.net',
  'isa-geek.org',
  'isa-hockeynut.com',
  'issmarterthanyou.com',
  'isteingeek.de',
  'istmein.de',
  'kicks-ass.net',
  'kicks-ass.org',
  'knowsitall.info',
  'land-4-sale.us',
  'lebtimnetz.de',
  'leitungsen.de',
  'likes-pie.com',
  'likescandy.com',
  'merseine.nu',
  'mine.nu',
  'misconfused.org',
  'mypets.ws',
  'myphotos.cc',
  'neat-url.com',
  'office-on-the.net',
  'on-the-web.tv',
  'podzone.net',
  'podzone.org',
  'readmyblog.org',
  'saves-the-whales.com',
  'scrapper-site.net',
  'scrapping.cc',
  'selfip.biz',
  'selfip.com',
  'selfip.info',
  'selfip.net',
  'selfip.org',
  'sells-for-less.com',
  'sells-for-u.com',
  'sells-it.net',
  'sellsyourhome.org',
  'servebbs.com',
  'servebbs.net',
  'servebbs.org',
  'serveftp.net',
  'serveftp.org',
  'servegame.org',
  'shacknet.nu',
  'simple-url.com',
  'space-to-rent.com',
  'stuff-4-sale.org',
  'stuff-4-sale.us',
  'teaches-yoga.com',
  'thruhere.net',
  'traeumtgerade.de',
  'webhop.biz',
  'webhop.info',
  'webhop.net',
  'webhop.org',
  'worse-than.tv',
  'writesthisblog.com',
  'ddnss.de',
  'dyn.ddnss.de',
  'dyndns.ddnss.de',
  'dyndns1.de',
  'dyn-ip24.de',
  'home-webserver.de',
  'dyn.home-webserver.de',
  'myhome-server.de',
  'ddnss.org',
  'definima.net',
  'definima.io',
  'bci.dnstrace.pro',
  'ddnsfree.com',
  'ddnsgeek.com',
  'giize.com',
  'gleeze.com',
  'kozow.com',
  'loseyourip.com',
  'ooguy.com',
  'theworkpc.com',
  'casacam.net',
  'dynu.net',
  'accesscam.org',
  'camdvr.org',
  'freeddns.org',
  'mywire.org',
  'webredirect.org',
  'myddns.rocks',
  'blogsite.xyz',
  'dynv6.net',
  'e4.cz',
  'mytuleap.com',
  'onred.one',
  'staging.onred.one',
  'enonic.io',
  'customer.enonic.io',
  'eu.org',
  'al.eu.org',
  'asso.eu.org',
  'at.eu.org',
  'au.eu.org',
  'be.eu.org',
  'bg.eu.org',
  'ca.eu.org',
  'cd.eu.org',
  'ch.eu.org',
  'cn.eu.org',
  'cy.eu.org',
  'cz.eu.org',
  'de.eu.org',
  'dk.eu.org',
  'edu.eu.org',
  'ee.eu.org',
  'es.eu.org',
  'fi.eu.org',
  'fr.eu.org',
  'gr.eu.org',
  'hr.eu.org',
  'hu.eu.org',
  'ie.eu.org',
  'il.eu.org',
  'in.eu.org',
  'int.eu.org',
  'is.eu.org',
  'it.eu.org',
  'jp.eu.org',
  'kr.eu.org',
  'lt.eu.org',
  'lu.eu.org',
  'lv.eu.org',
  'mc.eu.org',
  'me.eu.org',
  'mk.eu.org',
  'mt.eu.org',
  'my.eu.org',
  'net.eu.org',
  'ng.eu.org',
  'nl.eu.org',
  'no.eu.org',
  'nz.eu.org',
  'paris.eu.org',
  'pl.eu.org',
  'pt.eu.org',
  'q-a.eu.org',
  'ro.eu.org',
  'ru.eu.org',
  'se.eu.org',
  'si.eu.org',
  'sk.eu.org',
  'tr.eu.org',
  'uk.eu.org',
  'us.eu.org',
  'eu-1.evennode.com',
  'eu-2.evennode.com',
  'eu-3.evennode.com',
  'eu-4.evennode.com',
  'us-1.evennode.com',
  'us-2.evennode.com',
  'us-3.evennode.com',
  'us-4.evennode.com',
  'twmail.cc',
  'twmail.net',
  'twmail.org',
  'mymailer.com.tw',
  'url.tw',
  'apps.fbsbx.com',
  'ru.net',
  'adygeya.ru',
  'bashkiria.ru',
  'bir.ru',
  'cbg.ru',
  'com.ru',
  'dagestan.ru',
  'grozny.ru',
  'kalmykia.ru',
  'kustanai.ru',
  'marine.ru',
  'mordovia.ru',
  'msk.ru',
  'mytis.ru',
  'nalchik.ru',
  'nov.ru',
  'pyatigorsk.ru',
  'spb.ru',
  'vladikavkaz.ru',
  'vladimir.ru',
  'abkhazia.su',
  'adygeya.su',
  'aktyubinsk.su',
  'arkhangelsk.su',
  'armenia.su',
  'ashgabad.su',
  'azerbaijan.su',
  'balashov.su',
  'bashkiria.su',
  'bryansk.su',
  'bukhara.su',
  'chimkent.su',
  'dagestan.su',
  'east-kazakhstan.su',
  'exnet.su',
  'georgia.su',
  'grozny.su',
  'ivanovo.su',
  'jambyl.su',
  'kalmykia.su',
  'kaluga.su',
  'karacol.su',
  'karaganda.su',
  'karelia.su',
  'khakassia.su',
  'krasnodar.su',
  'kurgan.su',
  'kustanai.su',
  'lenug.su',
  'mangyshlak.su',
  'mordovia.su',
  'msk.su',
  'murmansk.su',
  'nalchik.su',
  'navoi.su',
  'north-kazakhstan.su',
  'nov.su',
  'obninsk.su',
  'penza.su',
  'pokrovsk.su',
  'sochi.su',
  'spb.su',
  'tashkent.su',
  'termez.su',
  'togliatti.su',
  'troitsk.su',
  'tselinograd.su',
  'tula.su',
  'tuva.su',
  'vladikavkaz.su',
  'vladimir.su',
  'vologda.su',
  'channelsdvr.net',
  'fastly-terrarium.com',
  'fastlylb.net',
  'map.fastlylb.net',
  'freetls.fastly.net',
  'map.fastly.net',
  'a.prod.fastly.net',
  'global.prod.fastly.net',
  'a.ssl.fastly.net',
  'b.ssl.fastly.net',
  'global.ssl.fastly.net',
  'fastpanel.direct',
  'fastvps-server.com',
  'fhapp.xyz',
  'fedorainfracloud.org',
  'fedorapeople.org',
  'cloud.fedoraproject.org',
  'app.os.fedoraproject.org',
  'app.os.stg.fedoraproject.org',
  'mydobiss.com',
  'filegear.me',
  'filegear-au.me',
  'filegear-de.me',
  'filegear-gb.me',
  'filegear-ie.me',
  'filegear-jp.me',
  'filegear-sg.me',
  'firebaseapp.com',
  'flynnhub.com',
  'flynnhosting.net',
  'freebox-os.com',
  'freeboxos.com',
  'fbx-os.fr',
  'fbxos.fr',
  'freebox-os.fr',
  'freeboxos.fr',
  'freedesktop.org',
  '*.futurecms.at',
  '*.ex.futurecms.at',
  '*.in.futurecms.at',
  'futurehosting.at',
  'futuremailing.at',
  '*.ex.ortsinfo.at',
  '*.kunden.ortsinfo.at',
  '*.statics.cloud',
  'service.gov.uk',
  'gehirn.ne.jp',
  'usercontent.jp',
  'lab.ms',
  'github.io',
  'githubusercontent.com',
  'gitlab.io',
  'glitch.me',
  'cloudapps.digital',
  'london.cloudapps.digital',
  'homeoffice.gov.uk',
  'ro.im',
  'shop.ro',
  'goip.de',
  'run.app',
  'a.run.app',
  'web.app',
  '*.0emm.com',
  'appspot.com',
  'blogspot.ae',
  'blogspot.al',
  'blogspot.am',
  'blogspot.ba',
  'blogspot.be',
  'blogspot.bg',
  'blogspot.bj',
  'blogspot.ca',
  'blogspot.cf',
  'blogspot.ch',
  'blogspot.cl',
  'blogspot.co.at',
  'blogspot.co.id',
  'blogspot.co.il',
  'blogspot.co.ke',
  'blogspot.co.nz',
  'blogspot.co.uk',
  'blogspot.co.za',
  'blogspot.com',
  'blogspot.com.ar',
  'blogspot.com.au',
  'blogspot.com.br',
  'blogspot.com.by',
  'blogspot.com.co',
  'blogspot.com.cy',
  'blogspot.com.ee',
  'blogspot.com.eg',
  'blogspot.com.es',
  'blogspot.com.mt',
  'blogspot.com.ng',
  'blogspot.com.tr',
  'blogspot.com.uy',
  'blogspot.cv',
  'blogspot.cz',
  'blogspot.de',
  'blogspot.dk',
  'blogspot.fi',
  'blogspot.fr',
  'blogspot.gr',
  'blogspot.hk',
  'blogspot.hr',
  'blogspot.hu',
  'blogspot.ie',
  'blogspot.in',
  'blogspot.is',
  'blogspot.it',
  'blogspot.jp',
  'blogspot.kr',
  'blogspot.li',
  'blogspot.lt',
  'blogspot.lu',
  'blogspot.md',
  'blogspot.mk',
  'blogspot.mr',
  'blogspot.mx',
  'blogspot.my',
  'blogspot.nl',
  'blogspot.no',
  'blogspot.pe',
  'blogspot.pt',
  'blogspot.qa',
  'blogspot.re',
  'blogspot.ro',
  'blogspot.rs',
  'blogspot.ru',
  'blogspot.se',
  'blogspot.sg',
  'blogspot.si',
  'blogspot.sk',
  'blogspot.sn',
  'blogspot.td',
  'blogspot.tw',
  'blogspot.ug',
  'blogspot.vn',
  'cloudfunctions.net',
  'cloud.goog',
  'codespot.com',
  'googleapis.com',
  'googlecode.com',
  'pagespeedmobilizer.com',
  'publishproxy.com',
  'withgoogle.com',
  'withyoutube.com',
  'fin.ci',
  'free.hr',
  'caa.li',
  'ua.rs',
  'conf.se',
  'hs.zone',
  'hs.run',
  'hashbang.sh',
  'hasura.app',
  'hasura-app.io',
  'hepforge.org',
  'herokuapp.com',
  'herokussl.com',
  'myravendb.com',
  'ravendb.community',
  'ravendb.me',
  'development.run',
  'ravendb.run',
  'bpl.biz',
  'orx.biz',
  'ng.city',
  'biz.gl',
  'ng.ink',
  'col.ng',
  'firm.ng',
  'gen.ng',
  'ltd.ng',
  'ng.school',
  'sch.so',
  'häkkinen.fi',
  '*.moonscale.io',
  'moonscale.net',
  'iki.fi',
  'dyn-berlin.de',
  'in-berlin.de',
  'in-brb.de',
  'in-butter.de',
  'in-dsl.de',
  'in-dsl.net',
  'in-dsl.org',
  'in-vpn.de',
  'in-vpn.net',
  'in-vpn.org',
  'biz.at',
  'info.at',
  'info.cx',
  'ac.leg.br',
  'al.leg.br',
  'am.leg.br',
  'ap.leg.br',
  'ba.leg.br',
  'ce.leg.br',
  'df.leg.br',
  'es.leg.br',
  'go.leg.br',
  'ma.leg.br',
  'mg.leg.br',
  'ms.leg.br',
  'mt.leg.br',
  'pa.leg.br',
  'pb.leg.br',
  'pe.leg.br',
  'pi.leg.br',
  'pr.leg.br',
  'rj.leg.br',
  'rn.leg.br',
  'ro.leg.br',
  'rr.leg.br',
  'rs.leg.br',
  'sc.leg.br',
  'se.leg.br',
  'sp.leg.br',
  'to.leg.br',
  'pixolino.com',
  'ipifony.net',
  'mein-iserv.de',
  'test-iserv.de',
  'iserv.dev',
  'iobb.net',
  'myjino.ru',
  '*.hosting.myjino.ru',
  '*.landing.myjino.ru',
  '*.spectrum.myjino.ru',
  '*.vps.myjino.ru',
  '*.triton.zone',
  '*.cns.joyent.com',
  'js.org',
  'kaas.gg',
  'khplay.nl',
  'keymachine.de',
  'kinghost.net',
  'uni5.net',
  'knightpoint.systems',
  'co.krd',
  'edu.krd',
  'git-repos.de',
  'lcube-server.de',
  'svn-repos.de',
  'leadpages.co',
  'lpages.co',
  'lpusercontent.com',
  'lelux.site',
  'co.business',
  'co.education',
  'co.events',
  'co.financial',
  'co.network',
  'co.place',
  'co.technology',
  'app.lmpm.com',
  'linkitools.space',
  'linkyard.cloud',
  'linkyard-cloud.ch',
  'members.linode.com',
  'nodebalancer.linode.com',
  'we.bs',
  'loginline.app',
  'loginline.dev',
  'loginline.io',
  'loginline.services',
  'loginline.site',
  'krasnik.pl',
  'leczna.pl',
  'lubartow.pl',
  'lublin.pl',
  'poniatowa.pl',
  'swidnik.pl',
  'uklugs.org',
  'glug.org.uk',
  'lug.org.uk',
  'lugs.org.uk',
  'barsy.bg',
  'barsy.co.uk',
  'barsyonline.co.uk',
  'barsycenter.com',
  'barsyonline.com',
  'barsy.club',
  'barsy.de',
  'barsy.eu',
  'barsy.in',
  'barsy.info',
  'barsy.io',
  'barsy.me',
  'barsy.menu',
  'barsy.mobi',
  'barsy.net',
  'barsy.online',
  'barsy.org',
  'barsy.pro',
  'barsy.pub',
  'barsy.shop',
  'barsy.site',
  'barsy.support',
  'barsy.uk',
  '*.magentosite.cloud',
  'mayfirst.info',
  'mayfirst.org',
  'hb.cldmail.ru',
  'miniserver.com',
  'memset.net',
  'cloud.metacentrum.cz',
  'custom.metacentrum.cz',
  'flt.cloud.muni.cz',
  'usr.cloud.muni.cz',
  'meteorapp.com',
  'eu.meteorapp.com',
  'co.pl',
  'azurecontainer.io',
  'azurewebsites.net',
  'azure-mobile.net',
  'cloudapp.net',
  'mozilla-iot.org',
  'bmoattachments.org',
  'net.ru',
  'org.ru',
  'pp.ru',
  'ui.nabu.casa',
  'pony.club',
  'of.fashion',
  'on.fashion',
  'of.football',
  'in.london',
  'of.london',
  'for.men',
  'and.mom',
  'for.mom',
  'for.one',
  'for.sale',
  'of.work',
  'to.work',
  'nctu.me',
  'bitballoon.com',
  'netlify.com',
  '4u.com',
  'ngrok.io',
  'nh-serv.co.uk',
  'nfshost.com',
  'dnsking.ch',
  'mypi.co',
  'n4t.co',
  '001www.com',
  'ddnslive.com',
  'myiphost.com',
  'forumz.info',
  '16-b.it',
  '32-b.it',
  '64-b.it',
  'soundcast.me',
  'tcp4.me',
  'dnsup.net',
  'hicam.net',
  'now-dns.net',
  'ownip.net',
  'vpndns.net',
  'dynserv.org',
  'now-dns.org',
  'x443.pw',
  'now-dns.top',
  'ntdll.top',
  'freeddns.us',
  'crafting.xyz',
  'zapto.xyz',
  'nsupdate.info',
  'nerdpol.ovh',
  'blogsyte.com',
  'brasilia.me',
  'cable-modem.org',
  'ciscofreak.com',
  'collegefan.org',
  'couchpotatofries.org',
  'damnserver.com',
  'ddns.me',
  'ditchyourip.com',
  'dnsfor.me',
  'dnsiskinky.com',
  'dvrcam.info',
  'dynns.com',
  'eating-organic.net',
  'fantasyleague.cc',
  'geekgalaxy.com',
  'golffan.us',
  'health-carereform.com',
  'homesecuritymac.com',
  'homesecuritypc.com',
  'hopto.me',
  'ilovecollege.info',
  'loginto.me',
  'mlbfan.org',
  'mmafan.biz',
  'myactivedirectory.com',
  'mydissent.net',
  'myeffect.net',
  'mymediapc.net',
  'mypsx.net',
  'mysecuritycamera.com',
  'mysecuritycamera.net',
  'mysecuritycamera.org',
  'net-freaks.com',
  'nflfan.org',
  'nhlfan.net',
  'no-ip.ca',
  'no-ip.co.uk',
  'no-ip.net',
  'noip.us',
  'onthewifi.com',
  'pgafan.net',
  'point2this.com',
  'pointto.us',
  'privatizehealthinsurance.net',
  'quicksytes.com',
  'read-books.org',
  'securitytactics.com',
  'serveexchange.com',
  'servehumour.com',
  'servep2p.com',
  'servesarcasm.com',
  'stufftoread.com',
  'ufcfan.org',
  'unusualperson.com',
  'workisboring.com',
  '3utilities.com',
  'bounceme.net',
  'ddns.net',
  'ddnsking.com',
  'gotdns.ch',
  'hopto.org',
  'myftp.biz',
  'myftp.org',
  'myvnc.com',
  'no-ip.biz',
  'no-ip.info',
  'no-ip.org',
  'noip.me',
  'redirectme.net',
  'servebeer.com',
  'serveblog.net',
  'servecounterstrike.com',
  'serveftp.com',
  'servegame.com',
  'servehalflife.com',
  'servehttp.com',
  'serveirc.com',
  'serveminecraft.net',
  'servemp3.com',
  'servepics.com',
  'servequake.com',
  'sytes.net',
  'webhop.me',
  'zapto.org',
  'stage.nodeart.io',
  'nodum.co',
  'nodum.io',
  'pcloud.host',
  'nyc.mn',
  'nom.ae',
  'nom.af',
  'nom.ai',
  'nom.al',
  'nym.by',
  'nym.bz',
  'nom.cl',
  'nym.ec',
  'nom.gd',
  'nom.ge',
  'nom.gl',
  'nym.gr',
  'nom.gt',
  'nym.gy',
  'nym.hk',
  'nom.hn',
  'nym.ie',
  'nom.im',
  'nom.ke',
  'nym.kz',
  'nym.la',
  'nym.lc',
  'nom.li',
  'nym.li',
  'nym.lt',
  'nym.lu',
  'nym.me',
  'nom.mk',
  'nym.mn',
  'nym.mx',
  'nom.nu',
  'nym.nz',
  'nym.pe',
  'nym.pt',
  'nom.pw',
  'nom.qa',
  'nym.ro',
  'nom.rs',
  'nom.si',
  'nym.sk',
  'nom.st',
  'nym.su',
  'nym.sx',
  'nom.tj',
  'nym.tw',
  'nom.ug',
  'nom.uy',
  'nom.vc',
  'nom.vg',
  'cya.gg',
  'cloudycluster.net',
  'nid.io',
  'opencraft.hosting',
  'operaunite.com',
  'outsystemscloud.com',
  'ownprovider.com',
  'own.pm',
  'ox.rs',
  'oy.lc',
  'pgfog.com',
  'pagefrontapp.com',
  'art.pl',
  'gliwice.pl',
  'krakow.pl',
  'poznan.pl',
  'wroc.pl',
  'zakopane.pl',
  'pantheonsite.io',
  'gotpantheon.com',
  'mypep.link',
  'on-web.fr',
  '*.platform.sh',
  '*.platformsh.site',
  'dyn53.io',
  'co.bn',
  'xen.prgmr.com',
  'priv.at',
  'prvcy.page',
  '*.dweb.link',
  'protonet.io',
  'chirurgiens-dentistes-en-france.fr',
  'byen.site',
  'pubtls.org',
  'qualifioapp.com',
  'instantcloud.cn',
  'ras.ru',
  'qa2.com',
  'dev-myqnapcloud.com',
  'alpha-myqnapcloud.com',
  'myqnapcloud.com',
  '*.quipelements.com',
  'vapor.cloud',
  'vaporcloud.io',
  'rackmaze.com',
  'rackmaze.net',
  '*.on-rancher.cloud',
  '*.on-rio.io',
  'readthedocs.io',
  'rhcloud.com',
  'app.render.com',
  'onrender.com',
  'repl.co',
  'repl.run',
  'resindevice.io',
  'devices.resinstaging.io',
  'hzc.io',
  'wellbeingzone.eu',
  'ptplus.fit',
  'wellbeingzone.co.uk',
  'git-pages.rit.edu',
  'sandcats.io',
  'logoip.de',
  'logoip.com',
  'schokokeks.net',
  'scrysec.com',
  'firewall-gateway.com',
  'firewall-gateway.de',
  'my-gateway.de',
  'my-router.de',
  'spdns.de',
  'spdns.eu',
  'firewall-gateway.net',
  'my-firewall.org',
  'myfirewall.org',
  'spdns.org',
  'biz.ua',
  'co.ua',
  'pp.ua',
  'shiftedit.io',
  'myshopblocks.com',
  'shopitsite.com',
  'mo-siemens.io',
  '1kapp.com',
  'appchizi.com',
  'applinzi.com',
  'sinaapp.com',
  'vipsinaapp.com',
  'siteleaf.net',
  'bounty-full.com',
  'alpha.bounty-full.com',
  'beta.bounty-full.com',
  'stackhero-network.com',
  'static.land',
  'dev.static.land',
  'sites.static.land',
  'apps.lair.io',
  '*.stolos.io',
  'spacekit.io',
  'customer.speedpartner.de',
  'api.stdlib.com',
  'storj.farm',
  'utwente.io',
  'soc.srcf.net',
  'user.srcf.net',
  'temp-dns.com',
  'applicationcloud.io',
  'scapp.io',
  '*.s5y.io',
  '*.sensiosite.cloud',
  'syncloud.it',
  'diskstation.me',
  'dscloud.biz',
  'dscloud.me',
  'dscloud.mobi',
  'dsmynas.com',
  'dsmynas.net',
  'dsmynas.org',
  'familyds.com',
  'familyds.net',
  'familyds.org',
  'i234.me',
  'myds.me',
  'synology.me',
  'vpnplus.to',
  'direct.quickconnect.to',
  'taifun-dns.de',
  'gda.pl',
  'gdansk.pl',
  'gdynia.pl',
  'med.pl',
  'sopot.pl',
  'edugit.org',
  'telebit.app',
  'telebit.io',
  '*.telebit.xyz',
  'gwiddle.co.uk',
  'thingdustdata.com',
  'cust.dev.thingdust.io',
  'cust.disrec.thingdust.io',
  'cust.prod.thingdust.io',
  'cust.testing.thingdust.io',
  'arvo.network',
  'azimuth.network',
  'bloxcms.com',
  'townnews-staging.com',
  '12hp.at',
  '2ix.at',
  '4lima.at',
  'lima-city.at',
  '12hp.ch',
  '2ix.ch',
  '4lima.ch',
  'lima-city.ch',
  'trafficplex.cloud',
  'de.cool',
  '12hp.de',
  '2ix.de',
  '4lima.de',
  'lima-city.de',
  '1337.pictures',
  'clan.rip',
  'lima-city.rocks',
  'webspace.rocks',
  'lima.zone',
  '*.transurl.be',
  '*.transurl.eu',
  '*.transurl.nl',
  'tuxfamily.org',
  'dd-dns.de',
  'diskstation.eu',
  'diskstation.org',
  'dray-dns.de',
  'draydns.de',
  'dyn-vpn.de',
  'dynvpn.de',
  'mein-vigor.de',
  'my-vigor.de',
  'my-wan.de',
  'syno-ds.de',
  'synology-diskstation.de',
  'synology-ds.de',
  'uber.space',
  '*.uberspace.de',
  'hk.com',
  'hk.org',
  'ltd.hk',
  'inc.hk',
  'virtualuser.de',
  'virtual-user.de',
  'lib.de.us',
  '2038.io',
  'router.management',
  'v-info.info',
  'voorloper.cloud',
  'wafflecell.com',
  '*.webhare.dev',
  'wedeploy.io',
  'wedeploy.me',
  'wedeploy.sh',
  'remotewd.com',
  'wmflabs.org',
  'half.host',
  'xnbay.com',
  'u2.xnbay.com',
  'u2-local.xnbay.com',
  'cistron.nl',
  'demon.nl',
  'xs4all.space',
  'yandexcloud.net',
  'storage.yandexcloud.net',
  'website.yandexcloud.net',
  'official.academy',
  'yolasite.com',
  'ybo.faith',
  'yombo.me',
  'homelink.one',
  'ybo.party',
  'ybo.review',
  'ybo.science',
  'ybo.trade',
  'nohost.me',
  'noho.st',
  'za.net',
  'za.org',
  'now.sh',
  'bss.design',
  'basicserver.io',
  'virtualserver.io',
  'site.builder.nu',
  'enterprisecloud.nu',
  'zone.id'
];

/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */

var psl = _commonjsHelpers.createCommonjsModule(function(module, exports) {
  var internals = {};

  //
  // Read rules from file.
  //
  internals.rules = require$$0$3.map(function(rule) {
    return {
      rule: rule,
      suffix: rule.replace(/^(\*\.|\!)/, ''),
      punySuffix: -1,
      wildcard: rule.charAt(0) === '*',
      exception: rule.charAt(0) === '!'
    };
  });

  //
  // Check is given string ends with `suffix`.
  //
  internals.endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  //
  // Find rule for a given domain.
  //
  internals.findRule = function(domain) {
    var punyDomain = Punycode__default['default'].toASCII(domain);
    return internals.rules.reduce(function(memo, rule) {
      if (rule.punySuffix === -1) {
        rule.punySuffix = Punycode__default['default'].toASCII(rule.suffix);
      }
      if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {
        return memo;
      }
      // This has been commented out as it never seems to run. This is because
      // sub tlds always appear after their parents and we never find a shorter
      // match.
      //if (memo) {
      //  var memoSuffix = Punycode.toASCII(memo.suffix);
      //  if (memoSuffix.length >= punySuffix.length) {
      //    return memo;
      //  }
      //}
      return rule;
    }, null);
  };

  //
  // Error codes and messages.
  //
  exports.errorCodes = {
    DOMAIN_TOO_SHORT: 'Domain name too short.',
    DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',
    LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',
    LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',
    LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',
    LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',
    LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'
  };

  //
  // Validate domain name and throw if not valid.
  //
  // From wikipedia:
  //
  // Hostnames are composed of series of labels concatenated with dots, as are all
  // domain names. Each label must be between 1 and 63 characters long, and the
  // entire hostname (including the delimiting dots) has a maximum of 255 chars.
  //
  // Allowed chars:
  //
  // * `a-z`
  // * `0-9`
  // * `-` but not as a starting or ending character
  // * `.` as a separator for the textual portions of a domain name
  //
  // * http://en.wikipedia.org/wiki/Domain_name
  // * http://en.wikipedia.org/wiki/Hostname
  //
  internals.validate = function(input) {
    // Before we can validate we need to take care of IDNs with unicode chars.
    var ascii = Punycode__default['default'].toASCII(input);

    if (ascii.length < 1) {
      return 'DOMAIN_TOO_SHORT';
    }
    if (ascii.length > 255) {
      return 'DOMAIN_TOO_LONG';
    }

    // Check each part's length and allowed chars.
    var labels = ascii.split('.');
    var label;

    for (var i = 0; i < labels.length; ++i) {
      label = labels[i];
      if (!label.length) {
        return 'LABEL_TOO_SHORT';
      }
      if (label.length > 63) {
        return 'LABEL_TOO_LONG';
      }
      if (label.charAt(0) === '-') {
        return 'LABEL_STARTS_WITH_DASH';
      }
      if (label.charAt(label.length - 1) === '-') {
        return 'LABEL_ENDS_WITH_DASH';
      }
      if (!/^[a-z0-9\-]+$/.test(label)) {
        return 'LABEL_INVALID_CHARS';
      }
    }
  };

  //
  // Public API
  //

  //
  // Parse domain.
  //
  exports.parse = function(input) {
    if (typeof input !== 'string') {
      throw new TypeError('Domain name must be a string.');
    }

    // Force domain to lowercase.
    var domain = input.slice(0).toLowerCase();

    // Handle FQDN.
    // TODO: Simply remove trailing dot?
    if (domain.charAt(domain.length - 1) === '.') {
      domain = domain.slice(0, domain.length - 1);
    }

    // Validate and sanitise input.
    var error = internals.validate(domain);
    if (error) {
      return {
        input: input,
        error: {
          message: exports.errorCodes[error],
          code: error
        }
      };
    }

    var parsed = {
      input: input,
      tld: null,
      sld: null,
      domain: null,
      subdomain: null,
      listed: false
    };

    var domainParts = domain.split('.');

    // Non-Internet TLD
    if (domainParts[domainParts.length - 1] === 'local') {
      return parsed;
    }

    var handlePunycode = function() {
      if (!/xn--/.test(domain)) {
        return parsed;
      }
      if (parsed.domain) {
        parsed.domain = Punycode__default['default'].toASCII(parsed.domain);
      }
      if (parsed.subdomain) {
        parsed.subdomain = Punycode__default['default'].toASCII(parsed.subdomain);
      }
      return parsed;
    };

    var rule = internals.findRule(domain);

    // Unlisted tld.
    if (!rule) {
      if (domainParts.length < 2) {
        return parsed;
      }
      parsed.tld = domainParts.pop();
      parsed.sld = domainParts.pop();
      parsed.domain = [parsed.sld, parsed.tld].join('.');
      if (domainParts.length) {
        parsed.subdomain = domainParts.pop();
      }
      return handlePunycode();
    }

    // At this point we know the public suffix is listed.
    parsed.listed = true;

    var tldParts = rule.suffix.split('.');
    var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);

    if (rule.exception) {
      privateParts.push(tldParts.shift());
    }

    parsed.tld = tldParts.join('.');

    if (!privateParts.length) {
      return handlePunycode();
    }

    if (rule.wildcard) {
      tldParts.unshift(privateParts.pop());
      parsed.tld = tldParts.join('.');
    }

    if (!privateParts.length) {
      return handlePunycode();
    }

    parsed.sld = privateParts.pop();
    parsed.domain = [parsed.sld, parsed.tld].join('.');

    if (privateParts.length) {
      parsed.subdomain = privateParts.join('.');
    }

    return handlePunycode();
  };

  //
  // Get domain.
  //
  exports.get = function(domain) {
    if (!domain) {
      return null;
    }
    return exports.parse(domain).domain || null;
  };

  //
  // Check whether domain belongs to a known public suffix.
  //
  exports.isValid = function(domain) {
    var parsed = exports.parse(domain);
    return Boolean(parsed.domain && parsed.listed);
  };
});

/*!
 * Copyright (c) 2018, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

function getPublicSuffix(domain) {
  return psl.get(domain);
}

var getPublicSuffix_1 = getPublicSuffix;

var pubsuffixPsl = {
  getPublicSuffix: getPublicSuffix_1
};

/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*jshint unused:false */

function Store() {}
var Store_1 = Store;

// Stores may be synchronous, but are still required to use a
// Continuation-Passing Style API.  The CookieJar itself will expose a "*Sync"
// API that converts from synchronous-callbacks to imperative style.
Store.prototype.synchronous = false;

Store.prototype.findCookie = function(domain, path, key, cb) {
  throw new Error('findCookie is not implemented');
};

Store.prototype.findCookies = function(domain, path, cb) {
  throw new Error('findCookies is not implemented');
};

Store.prototype.putCookie = function(cookie, cb) {
  throw new Error('putCookie is not implemented');
};

Store.prototype.updateCookie = function(oldCookie, newCookie, cb) {
  // recommended default implementation:
  // return this.putCookie(newCookie, cb);
  throw new Error('updateCookie is not implemented');
};

Store.prototype.removeCookie = function(domain, path, key, cb) {
  throw new Error('removeCookie is not implemented');
};

Store.prototype.removeCookies = function(domain, path, cb) {
  throw new Error('removeCookies is not implemented');
};

Store.prototype.removeAllCookies = function(cb) {
  throw new Error('removeAllCookies is not implemented');
};

Store.prototype.getAllCookies = function(cb) {
  throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
};

var store = {
  Store: Store_1
};

/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// Gives the permutation of all possible domainMatch()es of a given domain. The
// array is in shortest-to-longest order.  Handy for indexing.
function permuteDomain(domain) {
  var pubSuf = pubsuffixPsl.getPublicSuffix(domain);
  if (!pubSuf) {
    return null;
  }
  if (pubSuf == domain) {
    return [domain];
  }

  var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
  var parts = prefix.split('.').reverse();
  var cur = pubSuf;
  var permutations = [cur];
  while (parts.length) {
    cur = parts.shift() + '.' + cur;
    permutations.push(cur);
  }
  return permutations;
}

var permuteDomain_2 = permuteDomain;

var permuteDomain_1 = {
  permuteDomain: permuteDomain_2
};

/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * "A request-path path-matches a given cookie-path if at least one of the
 * following conditions holds:"
 */
function pathMatch(reqPath, cookiePath) {
  // "o  The cookie-path and the request-path are identical."
  if (cookiePath === reqPath) {
    return true;
  }

  var idx = reqPath.indexOf(cookiePath);
  if (idx === 0) {
    // "o  The cookie-path is a prefix of the request-path, and the last
    // character of the cookie-path is %x2F ("/")."
    if (cookiePath.substr(-1) === '/') {
      return true;
    }

    // " o  The cookie-path is a prefix of the request-path, and the first
    // character of the request-path that is not included in the cookie- path
    // is a %x2F ("/") character."
    if (reqPath.substr(cookiePath.length, 1) === '/') {
      return true;
    }
  }

  return false;
}

var pathMatch_2 = pathMatch;

var pathMatch_1 = {
  pathMatch: pathMatch_2
};

/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var Store$1 = store.Store;
var permuteDomain$1 = permuteDomain_1.permuteDomain;
var pathMatch$1 = pathMatch_1.pathMatch;

function MemoryCookieStore() {
  Store$1.call(this);
  this.idx = {};
}
util__default['default'].inherits(MemoryCookieStore, Store$1);
var MemoryCookieStore_1 = MemoryCookieStore;
MemoryCookieStore.prototype.idx = null;

// Since it's just a struct in RAM, this Store is synchronous
MemoryCookieStore.prototype.synchronous = true;

// force a default depth:
MemoryCookieStore.prototype.inspect = function() {
  return '{ idx: ' + util__default['default'].inspect(this.idx, false, 2) + ' }';
};

// Use the new custom inspection symbol to add the custom inspect function if
// available.
if (util__default['default'].inspect.custom) {
  MemoryCookieStore.prototype[util__default['default'].inspect.custom] = MemoryCookieStore.prototype.inspect;
}

MemoryCookieStore.prototype.findCookie = function(domain, path, key, cb) {
  if (!this.idx[domain]) {
    return cb(null, undefined);
  }
  if (!this.idx[domain][path]) {
    return cb(null, undefined);
  }
  return cb(null, this.idx[domain][path][key] || null);
};

MemoryCookieStore.prototype.findCookies = function(domain, path, cb) {
  var results = [];
  if (!domain) {
    return cb(null, []);
  }

  var pathMatcher;
  if (!path) {
    // null means "all paths"
    pathMatcher = function matchAll(domainIndex) {
      for (var curPath in domainIndex) {
        var pathIndex = domainIndex[curPath];
        for (var key in pathIndex) {
          results.push(pathIndex[key]);
        }
      }
    };
  } else {
    pathMatcher = function matchRFC(domainIndex) {
      //NOTE: we should use path-match algorithm from S5.1.4 here
      //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
      Object.keys(domainIndex).forEach(function(cookiePath) {
        if (pathMatch$1(path, cookiePath)) {
          var pathIndex = domainIndex[cookiePath];

          for (var key in pathIndex) {
            results.push(pathIndex[key]);
          }
        }
      });
    };
  }

  var domains = permuteDomain$1(domain) || [domain];
  var idx = this.idx;
  domains.forEach(function(curDomain) {
    var domainIndex = idx[curDomain];
    if (!domainIndex) {
      return;
    }
    pathMatcher(domainIndex);
  });

  cb(null, results);
};

MemoryCookieStore.prototype.putCookie = function(cookie, cb) {
  if (!this.idx[cookie.domain]) {
    this.idx[cookie.domain] = {};
  }
  if (!this.idx[cookie.domain][cookie.path]) {
    this.idx[cookie.domain][cookie.path] = {};
  }
  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
  cb(null);
};

MemoryCookieStore.prototype.updateCookie = function(oldCookie, newCookie, cb) {
  // updateCookie() may avoid updating cookies that are identical.  For example,
  // lastAccessed may not be important to some stores and an equality
  // comparison could exclude that field.
  this.putCookie(newCookie, cb);
};

MemoryCookieStore.prototype.removeCookie = function(domain, path, key, cb) {
  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
    delete this.idx[domain][path][key];
  }
  cb(null);
};

MemoryCookieStore.prototype.removeCookies = function(domain, path, cb) {
  if (this.idx[domain]) {
    if (path) {
      delete this.idx[domain][path];
    } else {
      delete this.idx[domain];
    }
  }
  return cb(null);
};

MemoryCookieStore.prototype.removeAllCookies = function(cb) {
  this.idx = {};
  return cb(null);
};

MemoryCookieStore.prototype.getAllCookies = function(cb) {
  var cookies = [];
  var idx = this.idx;

  var domains = Object.keys(idx);
  domains.forEach(function(domain) {
    var paths = Object.keys(idx[domain]);
    paths.forEach(function(path) {
      var keys = Object.keys(idx[domain][path]);
      keys.forEach(function(key) {
        if (key !== null) {
          cookies.push(idx[domain][path][key]);
        }
      });
    });
  });

  // Sort by creationIndex so deserializing retains the creation order.
  // When implementing your own store, this SHOULD retain the order too
  cookies.sort(function(a, b) {
    return (a.creationIndex || 0) - (b.creationIndex || 0);
  });

  cb(null, cookies);
};

var memstore = {
  MemoryCookieStore: MemoryCookieStore_1
};

// generated by genversion
var version$2 = '3.0.1';

/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
var urlParse = url__default['default'].parse;

var ipRegex$1 = ipRegex({ exact: true });

var Store$2 = store.Store;
var MemoryCookieStore$1 = memstore.MemoryCookieStore;
var pathMatch$2 = pathMatch_1.pathMatch;

var punycode;
try {
  punycode = Punycode__default['default'];
} catch (e) {
  console.warn("tough-cookie: can't load punycode; won't use punycode for domain normalization");
}

// From RFC6265 S4.1.1
// note that it excludes \x3B ";"
var COOKIE_OCTETS = /^[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]+$/;

var CONTROL_CHARS = /[\x00-\x1F]/;

// From Chromium // '\r', '\n' and '\0' should be treated as a terminator in
// the "relaxed" mode, see:
// https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60
var TERMINATORS = ['\n', '\r', '\0'];

// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
// Note ';' is \x3B
var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;

// date-time parsing constants (RFC6265 S5.1.1)

var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;

var MONTH_TO_NUM = {
  jan: 0,
  feb: 1,
  mar: 2,
  apr: 3,
  may: 4,
  jun: 5,
  jul: 6,
  aug: 7,
  sep: 8,
  oct: 9,
  nov: 10,
  dec: 11
};
var NUM_TO_MONTH = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var NUM_TO_DAY = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

var MAX_TIME = 2147483647000; // 31-bit max
var MIN_TIME = 0; // 31-bit min

/*
 * Parses a Natural number (i.e., non-negative integer) with either the
 *    <min>*<max>DIGIT ( non-digit *OCTET )
 * or
 *    <min>*<max>DIGIT
 * grammar (RFC6265 S5.1.1).
 *
 * The "trailingOK" boolean controls if the grammar accepts a
 * "( non-digit *OCTET )" trailer.
 */
function parseDigits(token, minDigits, maxDigits, trailingOK) {
  var count = 0;
  while (count < token.length) {
    var c = token.charCodeAt(count);
    // "non-digit = %x00-2F / %x3A-FF"
    if (c <= 0x2f || c >= 0x3a) {
      break;
    }
    count++;
  }

  // constrain to a minimum and maximum number of digits.
  if (count < minDigits || count > maxDigits) {
    return null;
  }

  if (!trailingOK && count != token.length) {
    return null;
  }

  return parseInt(token.substr(0, count), 10);
}

function parseTime(token) {
  var parts = token.split(':');
  var result = [0, 0, 0];

  /* RF6256 S5.1.1:
   *      time            = hms-time ( non-digit *OCTET )
   *      hms-time        = time-field ":" time-field ":" time-field
   *      time-field      = 1*2DIGIT
   */

  if (parts.length !== 3) {
    return null;
  }

  for (var i = 0; i < 3; i++) {
    // "time-field" must be strictly "1*2DIGIT", HOWEVER, "hms-time" can be
    // followed by "( non-digit *OCTET )" so therefore the last time-field can
    // have a trailer
    var trailingOK = i == 2;
    var num = parseDigits(parts[i], 1, 2, trailingOK);
    if (num === null) {
      return null;
    }
    result[i] = num;
  }

  return result;
}

function parseMonth(token) {
  token = String(token)
    .substr(0, 3)
    .toLowerCase();
  var num = MONTH_TO_NUM[token];
  return num >= 0 ? num : null;
}

/*
 * RFC6265 S5.1.1 date parser (see RFC for full grammar)
 */
function parseDate(str) {
  if (!str) {
    return;
  }

  /* RFC6265 S5.1.1:
   * 2. Process each date-token sequentially in the order the date-tokens
   * appear in the cookie-date
   */
  var tokens = str.split(DATE_DELIM);
  if (!tokens) {
    return;
  }

  var hour = null;
  var minute = null;
  var second = null;
  var dayOfMonth = null;
  var month = null;
  var year = null;

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i].trim();
    if (!token.length) {
      continue;
    }

    var result;

    /* 2.1. If the found-time flag is not set and the token matches the time
     * production, set the found-time flag and set the hour- value,
     * minute-value, and second-value to the numbers denoted by the digits in
     * the date-token, respectively.  Skip the remaining sub-steps and continue
     * to the next date-token.
     */
    if (second === null) {
      result = parseTime(token);
      if (result) {
        hour = result[0];
        minute = result[1];
        second = result[2];
        continue;
      }
    }

    /* 2.2. If the found-day-of-month flag is not set and the date-token matches
     * the day-of-month production, set the found-day-of- month flag and set
     * the day-of-month-value to the number denoted by the date-token.  Skip
     * the remaining sub-steps and continue to the next date-token.
     */
    if (dayOfMonth === null) {
      // "day-of-month = 1*2DIGIT ( non-digit *OCTET )"
      result = parseDigits(token, 1, 2, true);
      if (result !== null) {
        dayOfMonth = result;
        continue;
      }
    }

    /* 2.3. If the found-month flag is not set and the date-token matches the
     * month production, set the found-month flag and set the month-value to
     * the month denoted by the date-token.  Skip the remaining sub-steps and
     * continue to the next date-token.
     */
    if (month === null) {
      result = parseMonth(token);
      if (result !== null) {
        month = result;
        continue;
      }
    }

    /* 2.4. If the found-year flag is not set and the date-token matches the
     * year production, set the found-year flag and set the year-value to the
     * number denoted by the date-token.  Skip the remaining sub-steps and
     * continue to the next date-token.
     */
    if (year === null) {
      // "year = 2*4DIGIT ( non-digit *OCTET )"
      result = parseDigits(token, 2, 4, true);
      if (result !== null) {
        year = result;
        /* From S5.1.1:
         * 3.  If the year-value is greater than or equal to 70 and less
         * than or equal to 99, increment the year-value by 1900.
         * 4.  If the year-value is greater than or equal to 0 and less
         * than or equal to 69, increment the year-value by 2000.
         */
        if (year >= 70 && year <= 99) {
          year += 1900;
        } else if (year >= 0 && year <= 69) {
          year += 2000;
        }
      }
    }
  }

  /* RFC 6265 S5.1.1
   * "5. Abort these steps and fail to parse the cookie-date if:
   *     *  at least one of the found-day-of-month, found-month, found-
   *        year, or found-time flags is not set,
   *     *  the day-of-month-value is less than 1 or greater than 31,
   *     *  the year-value is less than 1601,
   *     *  the hour-value is greater than 23,
   *     *  the minute-value is greater than 59, or
   *     *  the second-value is greater than 59.
   *     (Note that leap seconds cannot be represented in this syntax.)"
   *
   * So, in order as above:
   */
  if (
    dayOfMonth === null ||
    month === null ||
    year === null ||
    second === null ||
    dayOfMonth < 1 ||
    dayOfMonth > 31 ||
    year < 1601 ||
    hour > 23 ||
    minute > 59 ||
    second > 59
  ) {
    return;
  }

  return new Date(Date.UTC(year, month, dayOfMonth, hour, minute, second));
}

function formatDate(date) {
  var d = date.getUTCDate();
  d = d >= 10 ? d : '0' + d;
  var h = date.getUTCHours();
  h = h >= 10 ? h : '0' + h;
  var m = date.getUTCMinutes();
  m = m >= 10 ? m : '0' + m;
  var s = date.getUTCSeconds();
  s = s >= 10 ? s : '0' + s;
  return (
    NUM_TO_DAY[date.getUTCDay()] +
    ', ' +
    d +
    ' ' +
    NUM_TO_MONTH[date.getUTCMonth()] +
    ' ' +
    date.getUTCFullYear() +
    ' ' +
    h +
    ':' +
    m +
    ':' +
    s +
    ' GMT'
  );
}

// S5.1.2 Canonicalized Host Names
function canonicalDomain(str) {
  if (str == null) {
    return null;
  }
  str = str.trim().replace(/^\./, ''); // S4.1.2.3 & S5.2.3: ignore leading .

  // convert to IDN if any non-ASCII characters
  if (punycode && /[^\u0001-\u007f]/.test(str)) {
    str = punycode.toASCII(str);
  }

  return str.toLowerCase();
}

// S5.1.3 Domain Matching
function domainMatch(str, domStr, canonicalize) {
  if (str == null || domStr == null) {
    return null;
  }
  if (canonicalize !== false) {
    str = canonicalDomain(str);
    domStr = canonicalDomain(domStr);
  }

  /*
   * "The domain string and the string are identical. (Note that both the
   * domain string and the string will have been canonicalized to lower case at
   * this point)"
   */
  if (str == domStr) {
    return true;
  }

  /* "All of the following [three] conditions hold:" (order adjusted from the RFC) */

  /* "* The string is a host name (i.e., not an IP address)." */
  if (ipRegex$1.test(str)) {
    return false;
  }

  /* "* The domain string is a suffix of the string" */
  var idx = str.indexOf(domStr);
  if (idx <= 0) {
    return false; // it's a non-match (-1) or prefix (0)
  }

  // e.g "a.b.c".indexOf("b.c") === 2
  // 5 === 3+2
  if (str.length !== domStr.length + idx) {
    // it's not a suffix
    return false;
  }

  /* "* The last character of the string that is not included in the domain
   * string is a %x2E (".") character." */
  if (str.substr(idx - 1, 1) !== '.') {
    return false;
  }

  return true;
}

// RFC6265 S5.1.4 Paths and Path-Match

/*
 * "The user agent MUST use an algorithm equivalent to the following algorithm
 * to compute the default-path of a cookie:"
 *
 * Assumption: the path (and not query part or absolute uri) is passed in.
 */
function defaultPath(path) {
  // "2. If the uri-path is empty or if the first character of the uri-path is not
  // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
  if (!path || path.substr(0, 1) !== '/') {
    return '/';
  }

  // "3. If the uri-path contains no more than one %x2F ("/") character, output
  // %x2F ("/") and skip the remaining step."
  if (path === '/') {
    return path;
  }

  var rightSlash = path.lastIndexOf('/');
  if (rightSlash === 0) {
    return '/';
  }

  // "4. Output the characters of the uri-path from the first character up to,
  // but not including, the right-most %x2F ("/")."
  return path.slice(0, rightSlash);
}

function trimTerminator(str) {
  for (var t = 0; t < TERMINATORS.length; t++) {
    var terminatorIdx = str.indexOf(TERMINATORS[t]);
    if (terminatorIdx !== -1) {
      str = str.substr(0, terminatorIdx);
    }
  }

  return str;
}

function parseCookiePair(cookiePair, looseMode) {
  cookiePair = trimTerminator(cookiePair);

  var firstEq = cookiePair.indexOf('=');
  if (looseMode) {
    if (firstEq === 0) {
      // '=' is immediately at start
      cookiePair = cookiePair.substr(1);
      firstEq = cookiePair.indexOf('='); // might still need to split on '='
    }
  } else {
    // non-loose mode
    if (firstEq <= 0) {
      // no '=' or is at start
      return; // needs to have non-empty "cookie-name"
    }
  }

  var cookieName, cookieValue;
  if (firstEq <= 0) {
    cookieName = '';
    cookieValue = cookiePair.trim();
  } else {
    cookieName = cookiePair.substr(0, firstEq).trim();
    cookieValue = cookiePair.substr(firstEq + 1).trim();
  }

  if (CONTROL_CHARS.test(cookieName) || CONTROL_CHARS.test(cookieValue)) {
    return;
  }

  var c = new Cookie$1();
  c.key = cookieName;
  c.value = cookieValue;
  return c;
}

function parse$4(str, options) {
  if (!options || typeof options !== 'object') {
    options = {};
  }
  str = str.trim();

  // We use a regex to parse the "name-value-pair" part of S5.2
  var firstSemi = str.indexOf(';'); // S5.2 step 1
  var cookiePair = firstSemi === -1 ? str : str.substr(0, firstSemi);
  var c = parseCookiePair(cookiePair, !!options.loose);
  if (!c) {
    return;
  }

  if (firstSemi === -1) {
    return c;
  }

  // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
  // (including the %x3B (";") in question)." plus later on in the same section
  // "discard the first ";" and trim".
  var unparsed = str.slice(firstSemi + 1).trim();

  // "If the unparsed-attributes string is empty, skip the rest of these
  // steps."
  if (unparsed.length === 0) {
    return c;
  }

  /*
   * S5.2 says that when looping over the items "[p]rocess the attribute-name
   * and attribute-value according to the requirements in the following
   * subsections" for every item.  Plus, for many of the individual attributes
   * in S5.3 it says to use the "attribute-value of the last attribute in the
   * cookie-attribute-list".  Therefore, in this implementation, we overwrite
   * the previous value.
   */
  var cookie_avs = unparsed.split(';');
  while (cookie_avs.length) {
    var av = cookie_avs.shift().trim();
    if (av.length === 0) {
      // happens if ";;" appears
      continue;
    }
    var av_sep = av.indexOf('=');
    var av_key, av_value;

    if (av_sep === -1) {
      av_key = av;
      av_value = null;
    } else {
      av_key = av.substr(0, av_sep);
      av_value = av.substr(av_sep + 1);
    }

    av_key = av_key.trim().toLowerCase();

    if (av_value) {
      av_value = av_value.trim();
    }

    switch (av_key) {
      case 'expires': // S5.2.1
        if (av_value) {
          var exp = parseDate(av_value);
          // "If the attribute-value failed to parse as a cookie date, ignore the
          // cookie-av."
          if (exp) {
            // over and underflow not realistically a concern: V8's getTime() seems to
            // store something larger than a 32-bit time_t (even with 32-bit node)
            c.expires = exp;
          }
        }
        break;

      case 'max-age': // S5.2.2
        if (av_value) {
          // "If the first character of the attribute-value is not a DIGIT or a "-"
          // character ...[or]... If the remainder of attribute-value contains a
          // non-DIGIT character, ignore the cookie-av."
          if (/^-?[0-9]+$/.test(av_value)) {
            var delta = parseInt(av_value, 10);
            // "If delta-seconds is less than or equal to zero (0), let expiry-time
            // be the earliest representable date and time."
            c.setMaxAge(delta);
          }
        }
        break;

      case 'domain': // S5.2.3
        // "If the attribute-value is empty, the behavior is undefined.  However,
        // the user agent SHOULD ignore the cookie-av entirely."
        if (av_value) {
          // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
          // (".") character."
          var domain = av_value.trim().replace(/^\./, '');
          if (domain) {
            // "Convert the cookie-domain to lower case."
            c.domain = domain.toLowerCase();
          }
        }
        break;

      case 'path': // S5.2.4
        /*
         * "If the attribute-value is empty or if the first character of the
         * attribute-value is not %x2F ("/"):
         *   Let cookie-path be the default-path.
         * Otherwise:
         *   Let cookie-path be the attribute-value."
         *
         * We'll represent the default-path as null since it depends on the
         * context of the parsing.
         */
        c.path = av_value && av_value[0] === '/' ? av_value : null;
        break;

      case 'secure': // S5.2.5
        /*
         * "If the attribute-name case-insensitively matches the string "Secure",
         * the user agent MUST append an attribute to the cookie-attribute-list
         * with an attribute-name of Secure and an empty attribute-value."
         */
        c.secure = true;
        break;

      case 'httponly': // S5.2.6 -- effectively the same as 'secure'
        c.httpOnly = true;
        break;

      default:
        c.extensions = c.extensions || [];
        c.extensions.push(av);
        break;
    }
  }

  return c;
}

// avoid the V8 deoptimization monster!
function jsonParse(str) {
  var obj;
  try {
    obj = JSON.parse(str);
  } catch (e) {
    return e;
  }
  return obj;
}

function fromJSON(str) {
  if (!str) {
    return null;
  }

  var obj;
  if (typeof str === 'string') {
    obj = jsonParse(str);
    if (obj instanceof Error) {
      return null;
    }
  } else {
    // assume it's an Object
    obj = str;
  }

  var c = new Cookie$1();
  for (var i = 0; i < Cookie$1.serializableProperties.length; i++) {
    var prop = Cookie$1.serializableProperties[i];
    if (obj[prop] === undefined || obj[prop] === Cookie$1.prototype[prop]) {
      continue; // leave as prototype default
    }

    if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
      if (obj[prop] === null) {
        c[prop] = null;
      } else {
        c[prop] = obj[prop] == 'Infinity' ? 'Infinity' : new Date(obj[prop]);
      }
    } else {
      c[prop] = obj[prop];
    }
  }

  return c;
}

/* Section 5.4 part 2:
 * "*  Cookies with longer paths are listed before cookies with
 *     shorter paths.
 *
 *  *  Among cookies that have equal-length path fields, cookies with
 *     earlier creation-times are listed before cookies with later
 *     creation-times."
 */

function cookieCompare(a, b) {
  var cmp = 0;

  // descending for length: b CMP a
  var aPathLen = a.path ? a.path.length : 0;
  var bPathLen = b.path ? b.path.length : 0;
  cmp = bPathLen - aPathLen;
  if (cmp !== 0) {
    return cmp;
  }

  // ascending for time: a CMP b
  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
  cmp = aTime - bTime;
  if (cmp !== 0) {
    return cmp;
  }

  // break ties for the same millisecond (precision of JavaScript's clock)
  cmp = a.creationIndex - b.creationIndex;

  return cmp;
}

// Gives the permutation of all possible pathMatch()es of a given path. The
// array is in longest-to-shortest order.  Handy for indexing.
function permutePath(path) {
  if (path === '/') {
    return ['/'];
  }
  if (path.lastIndexOf('/') === path.length - 1) {
    path = path.substr(0, path.length - 1);
  }
  var permutations = [path];
  while (path.length > 1) {
    var lindex = path.lastIndexOf('/');
    if (lindex === 0) {
      break;
    }
    path = path.substr(0, lindex);
    permutations.push(path);
  }
  permutations.push('/');
  return permutations;
}

function getCookieContext(url) {
  if (url instanceof Object) {
    return url;
  }
  // NOTE: decodeURI will throw on malformed URIs (see GH-32).
  // Therefore, we will just skip decoding for such URIs.
  try {
    url = decodeURI(url);
  } catch (err) {
    // Silently swallow error
  }

  return urlParse(url);
}

function Cookie$1(options) {
  options = options || {};

  Object.keys(options).forEach(function(prop) {
    if (
      Cookie$1.prototype.hasOwnProperty(prop) &&
      Cookie$1.prototype[prop] !== options[prop] &&
      prop.substr(0, 1) !== '_'
    ) {
      this[prop] = options[prop];
    }
  }, this);

  this.creation = this.creation || new Date();

  // used to break creation ties in cookieCompare():
  Object.defineProperty(this, 'creationIndex', {
    configurable: false,
    enumerable: false, // important for assert.deepEqual checks
    writable: true,
    value: ++Cookie$1.cookiesCreated
  });
}

Cookie$1.cookiesCreated = 0; // incremented each time a cookie is created

Cookie$1.parse = parse$4;
Cookie$1.fromJSON = fromJSON;

Cookie$1.prototype.key = '';
Cookie$1.prototype.value = '';

// the order in which the RFC has them:
Cookie$1.prototype.expires = 'Infinity'; // coerces to literal Infinity
Cookie$1.prototype.maxAge = null; // takes precedence over expires for TTL
Cookie$1.prototype.domain = null;
Cookie$1.prototype.path = null;
Cookie$1.prototype.secure = false;
Cookie$1.prototype.httpOnly = false;
Cookie$1.prototype.extensions = null;

// set by the CookieJar:
Cookie$1.prototype.hostOnly = null; // boolean when set
Cookie$1.prototype.pathIsDefault = null; // boolean when set
Cookie$1.prototype.creation = null; // Date when set; defaulted by Cookie.parse
Cookie$1.prototype.lastAccessed = null; // Date when set
Object.defineProperty(Cookie$1.prototype, 'creationIndex', {
  configurable: true,
  enumerable: false,
  writable: true,
  value: 0
});

Cookie$1.serializableProperties = Object.keys(Cookie$1.prototype).filter(function(prop) {
  return !(Cookie$1.prototype[prop] instanceof Function || prop === 'creationIndex' || prop.substr(0, 1) === '_');
});

Cookie$1.prototype.inspect = function inspect() {
  var now = Date.now();
  return (
    'Cookie="' +
    this.toString() +
    '; hostOnly=' +
    (this.hostOnly != null ? this.hostOnly : '?') +
    '; aAge=' +
    (this.lastAccessed ? now - this.lastAccessed.getTime() + 'ms' : '?') +
    '; cAge=' +
    (this.creation ? now - this.creation.getTime() + 'ms' : '?') +
    '"'
  );
};

// Use the new custom inspection symbol to add the custom inspect function if
// available.
if (util__default['default'].inspect.custom) {
  Cookie$1.prototype[util__default['default'].inspect.custom] = Cookie$1.prototype.inspect;
}

Cookie$1.prototype.toJSON = function() {
  var obj = {};

  var props = Cookie$1.serializableProperties;
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    if (this[prop] === Cookie$1.prototype[prop]) {
      continue; // leave as prototype default
    }

    if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
      if (this[prop] === null) {
        obj[prop] = null;
      } else {
        obj[prop] =
          this[prop] == 'Infinity' // intentionally not ===
            ? 'Infinity'
            : this[prop].toISOString();
      }
    } else if (prop === 'maxAge') {
      if (this[prop] !== null) {
        // again, intentionally not ===
        obj[prop] = this[prop] == Infinity || this[prop] == -Infinity ? this[prop].toString() : this[prop];
      }
    } else {
      if (this[prop] !== Cookie$1.prototype[prop]) {
        obj[prop] = this[prop];
      }
    }
  }

  return obj;
};

Cookie$1.prototype.clone = function() {
  return fromJSON(this.toJSON());
};

Cookie$1.prototype.validate = function validate() {
  if (!COOKIE_OCTETS.test(this.value)) {
    return false;
  }
  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
    return false;
  }
  if (this.maxAge != null && this.maxAge <= 0) {
    return false; // "Max-Age=" non-zero-digit *DIGIT
  }
  if (this.path != null && !PATH_VALUE.test(this.path)) {
    return false;
  }

  var cdomain = this.cdomain();
  if (cdomain) {
    if (cdomain.match(/\.$/)) {
      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
    }
    var suffix = pubsuffixPsl.getPublicSuffix(cdomain);
    if (suffix == null) {
      // it's a public suffix
      return false;
    }
  }
  return true;
};

Cookie$1.prototype.setExpires = function setExpires(exp) {
  if (exp instanceof Date) {
    this.expires = exp;
  } else {
    this.expires = parseDate(exp) || 'Infinity';
  }
};

Cookie$1.prototype.setMaxAge = function setMaxAge(age) {
  if (age === Infinity || age === -Infinity) {
    this.maxAge = age.toString(); // so JSON.stringify() works
  } else {
    this.maxAge = age;
  }
};

// gives Cookie header format
Cookie$1.prototype.cookieString = function cookieString() {
  var val = this.value;
  if (val == null) {
    val = '';
  }
  if (this.key === '') {
    return val;
  }
  return this.key + '=' + val;
};

// gives Set-Cookie header format
Cookie$1.prototype.toString = function toString() {
  var str = this.cookieString();

  if (this.expires != Infinity) {
    if (this.expires instanceof Date) {
      str += '; Expires=' + formatDate(this.expires);
    } else {
      str += '; Expires=' + this.expires;
    }
  }

  if (this.maxAge != null && this.maxAge != Infinity) {
    str += '; Max-Age=' + this.maxAge;
  }

  if (this.domain && !this.hostOnly) {
    str += '; Domain=' + this.domain;
  }
  if (this.path) {
    str += '; Path=' + this.path;
  }

  if (this.secure) {
    str += '; Secure';
  }
  if (this.httpOnly) {
    str += '; HttpOnly';
  }
  if (this.extensions) {
    this.extensions.forEach(function(ext) {
      str += '; ' + ext;
    });
  }

  return str;
};

// TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
// elsewhere)
// S5.3 says to give the "latest representable date" for which we use Infinity
// For "expired" we use 0
Cookie$1.prototype.TTL = function TTL(now) {
  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
   * attribute, the Max-Age attribute has precedence and controls the
   * expiration date of the cookie.
   * (Concurs with S5.3 step 3)
   */
  if (this.maxAge != null) {
    return this.maxAge <= 0 ? 0 : this.maxAge * 1000;
  }

  var expires = this.expires;
  if (expires != Infinity) {
    if (!(expires instanceof Date)) {
      expires = parseDate(expires) || Infinity;
    }

    if (expires == Infinity) {
      return Infinity;
    }

    return expires.getTime() - (now || Date.now());
  }

  return Infinity;
};

// expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
// elsewhere)
Cookie$1.prototype.expiryTime = function expiryTime(now) {
  if (this.maxAge != null) {
    var relativeTo = now || this.creation || new Date();
    var age = this.maxAge <= 0 ? -Infinity : this.maxAge * 1000;
    return relativeTo.getTime() + age;
  }

  if (this.expires == Infinity) {
    return Infinity;
  }
  return this.expires.getTime();
};

// expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
// elsewhere), except it returns a Date
Cookie$1.prototype.expiryDate = function expiryDate(now) {
  var millisec = this.expiryTime(now);
  if (millisec == Infinity) {
    return new Date(MAX_TIME);
  } else if (millisec == -Infinity) {
    return new Date(MIN_TIME);
  } else {
    return new Date(millisec);
  }
};

// This replaces the "persistent-flag" parts of S5.3 step 3
Cookie$1.prototype.isPersistent = function isPersistent() {
  return this.maxAge != null || this.expires != Infinity;
};

// Mostly S5.1.2 and S5.2.3:
Cookie$1.prototype.cdomain = Cookie$1.prototype.canonicalizedDomain = function canonicalizedDomain() {
  if (this.domain == null) {
    return null;
  }
  return canonicalDomain(this.domain);
};

function CookieJar$1(store, options) {
  if (typeof options === 'boolean') {
    options = { rejectPublicSuffixes: options };
  } else if (options == null) {
    options = {};
  }
  if (options.rejectPublicSuffixes != null) {
    this.rejectPublicSuffixes = options.rejectPublicSuffixes;
  }
  if (options.looseMode != null) {
    this.enableLooseMode = options.looseMode;
  }

  if (!store) {
    store = new MemoryCookieStore$1();
  }
  this.store = store;
}
CookieJar$1.prototype.store = null;
CookieJar$1.prototype.rejectPublicSuffixes = true;
CookieJar$1.prototype.enableLooseMode = false;
var CAN_BE_SYNC = [];

CAN_BE_SYNC.push('setCookie');
CookieJar$1.prototype.setCookie = function(cookie, url, options, cb) {
  var err;
  var context = getCookieContext(url);
  if (options instanceof Function) {
    cb = options;
    options = {};
  }

  var host = canonicalDomain(context.hostname);
  var loose = this.enableLooseMode;
  if (options.loose != null) {
    loose = options.loose;
  }

  // S5.3 step 1
  if (typeof cookie === 'string' || cookie instanceof String) {
    cookie = Cookie$1.parse(cookie, { loose: loose });
    if (!cookie) {
      err = new Error('Cookie failed to parse');
      return cb(options.ignoreError ? null : err);
    }
  } else if (!(cookie instanceof Cookie$1)) {
    // If you're seeing this error, and are passing in a Cookie object,
    // it *might* be a Cookie object from another loaded version of tough-cookie.
    err = new Error('First argument to setCookie must be a Cookie object or string');
    return cb(options.ignoreError ? null : err);
  }

  // S5.3 step 2
  var now = options.now || new Date(); // will assign later to save effort in the face of errors

  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()

  // S5.3 step 4: NOOP; domain is null by default

  // S5.3 step 5: public suffixes
  if (this.rejectPublicSuffixes && cookie.domain) {
    var suffix = pubsuffixPsl.getPublicSuffix(cookie.cdomain());
    if (suffix == null) {
      // e.g. "com"
      err = new Error('Cookie has domain set to a public suffix');
      return cb(options.ignoreError ? null : err);
    }
  }

  // S5.3 step 6:
  if (cookie.domain) {
    if (!domainMatch(host, cookie.cdomain(), false)) {
      err = new Error("Cookie not in this host's domain. Cookie:" + cookie.cdomain() + ' Request:' + host);
      return cb(options.ignoreError ? null : err);
    }

    if (cookie.hostOnly == null) {
      // don't reset if already set
      cookie.hostOnly = false;
    }
  } else {
    cookie.hostOnly = true;
    cookie.domain = host;
  }

  //S5.2.4 If the attribute-value is empty or if the first character of the
  //attribute-value is not %x2F ("/"):
  //Let cookie-path be the default-path.
  if (!cookie.path || cookie.path[0] !== '/') {
    cookie.path = defaultPath(context.pathname);
    cookie.pathIsDefault = true;
  }

  // S5.3 step 8: NOOP; secure attribute
  // S5.3 step 9: NOOP; httpOnly attribute

  // S5.3 step 10
  if (options.http === false && cookie.httpOnly) {
    err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
    return cb(options.ignoreError ? null : err);
  }

  var store = this.store;

  if (!store.updateCookie) {
    store.updateCookie = function(oldCookie, newCookie, cb) {
      this.putCookie(newCookie, cb);
    };
  }

  function withCookie(err, oldCookie) {
    if (err) {
      return cb(err);
    }

    var next = function(err) {
      if (err) {
        return cb(err);
      } else {
        cb(null, cookie);
      }
    };

    if (oldCookie) {
      // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
      // domain, and path as the newly created cookie:"
      if (options.http === false && oldCookie.httpOnly) {
        // step 11.2
        err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
        return cb(options.ignoreError ? null : err);
      }
      cookie.creation = oldCookie.creation; // step 11.3
      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
      cookie.lastAccessed = now;
      // Step 11.4 (delete cookie) is implied by just setting the new one:
      store.updateCookie(oldCookie, cookie, next); // step 12
    } else {
      cookie.creation = cookie.lastAccessed = now;
      store.putCookie(cookie, next); // step 12
    }
  }

  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
};

// RFC6365 S5.4
CAN_BE_SYNC.push('getCookies');
CookieJar$1.prototype.getCookies = function(url, options, cb) {
  var context = getCookieContext(url);
  if (options instanceof Function) {
    cb = options;
    options = {};
  }

  var host = canonicalDomain(context.hostname);
  var path = context.pathname || '/';

  var secure = options.secure;
  if (secure == null && context.protocol && (context.protocol == 'https:' || context.protocol == 'wss:')) {
    secure = true;
  }

  var http = options.http;
  if (http == null) {
    http = true;
  }

  var now = options.now || Date.now();
  var expireCheck = options.expire !== false;
  var allPaths = !!options.allPaths;
  var store = this.store;

  function matchingCookie(c) {
    // "Either:
    //   The cookie's host-only-flag is true and the canonicalized
    //   request-host is identical to the cookie's domain.
    // Or:
    //   The cookie's host-only-flag is false and the canonicalized
    //   request-host domain-matches the cookie's domain."
    if (c.hostOnly) {
      if (c.domain != host) {
        return false;
      }
    } else {
      if (!domainMatch(host, c.domain, false)) {
        return false;
      }
    }

    // "The request-uri's path path-matches the cookie's path."
    if (!allPaths && !pathMatch$2(path, c.path)) {
      return false;
    }

    // "If the cookie's secure-only-flag is true, then the request-uri's
    // scheme must denote a "secure" protocol"
    if (c.secure && !secure) {
      return false;
    }

    // "If the cookie's http-only-flag is true, then exclude the cookie if the
    // cookie-string is being generated for a "non-HTTP" API"
    if (c.httpOnly && !http) {
      return false;
    }

    // deferred from S5.3
    // non-RFC: allow retention of expired cookies by choice
    if (expireCheck && c.expiryTime() <= now) {
      store.removeCookie(c.domain, c.path, c.key, function() {}); // result ignored
      return false;
    }

    return true;
  }

  store.findCookies(host, allPaths ? null : path, function(err, cookies) {
    if (err) {
      return cb(err);
    }

    cookies = cookies.filter(matchingCookie);

    // sorting of S5.4 part 2
    if (options.sort !== false) {
      cookies = cookies.sort(cookieCompare);
    }

    // S5.4 part 3
    var now = new Date();
    cookies.forEach(function(c) {
      c.lastAccessed = now;
    });
    // TODO persist lastAccessed

    cb(null, cookies);
  });
};

CAN_BE_SYNC.push('getCookieString');
CookieJar$1.prototype.getCookieString = function(/*..., cb*/) {
  var args = Array.prototype.slice.call(arguments, 0);
  var cb = args.pop();
  var next = function(err, cookies) {
    if (err) {
      cb(err);
    } else {
      cb(
        null,
        cookies
          .sort(cookieCompare)
          .map(function(c) {
            return c.cookieString();
          })
          .join('; ')
      );
    }
  };
  args.push(next);
  this.getCookies.apply(this, args);
};

CAN_BE_SYNC.push('getSetCookieStrings');
CookieJar$1.prototype.getSetCookieStrings = function(/*..., cb*/) {
  var args = Array.prototype.slice.call(arguments, 0);
  var cb = args.pop();
  var next = function(err, cookies) {
    if (err) {
      cb(err);
    } else {
      cb(
        null,
        cookies.map(function(c) {
          return c.toString();
        })
      );
    }
  };
  args.push(next);
  this.getCookies.apply(this, args);
};

CAN_BE_SYNC.push('serialize');
CookieJar$1.prototype.serialize = function(cb) {
  var type = this.store.constructor.name;
  if (type === 'Object') {
    type = null;
  }

  // update README.md "Serialization Format" if you change this, please!
  var serialized = {
    // The version of tough-cookie that serialized this jar. Generally a good
    // practice since future versions can make data import decisions based on
    // known past behavior. When/if this matters, use `semver`.
    version: 'tough-cookie@' + version$2,

    // add the store type, to make humans happy:
    storeType: type,

    // CookieJar configuration:
    rejectPublicSuffixes: !!this.rejectPublicSuffixes,

    // this gets filled from getAllCookies:
    cookies: []
  };

  if (!(this.store.getAllCookies && typeof this.store.getAllCookies === 'function')) {
    return cb(new Error('store does not support getAllCookies and cannot be serialized'));
  }

  this.store.getAllCookies(function(err, cookies) {
    if (err) {
      return cb(err);
    }

    serialized.cookies = cookies.map(function(cookie) {
      // convert to serialized 'raw' cookies
      cookie = cookie instanceof Cookie$1 ? cookie.toJSON() : cookie;

      // Remove the index so new ones get assigned during deserialization
      delete cookie.creationIndex;

      return cookie;
    });

    return cb(null, serialized);
  });
};

// well-known name that JSON.stringify calls
CookieJar$1.prototype.toJSON = function() {
  return this.serializeSync();
};

// use the class method CookieJar.deserialize instead of calling this directly
CAN_BE_SYNC.push('_importCookies');
CookieJar$1.prototype._importCookies = function(serialized, cb) {
  var jar = this;
  var cookies = serialized.cookies;
  if (!cookies || !Array.isArray(cookies)) {
    return cb(new Error('serialized jar has no cookies array'));
  }
  cookies = cookies.slice(); // do not modify the original

  function putNext(err) {
    if (err) {
      return cb(err);
    }

    if (!cookies.length) {
      return cb(err, jar);
    }

    var cookie;
    try {
      cookie = fromJSON(cookies.shift());
    } catch (e) {
      return cb(e);
    }

    if (cookie === null) {
      return putNext(null); // skip this cookie
    }

    jar.store.putCookie(cookie, putNext);
  }

  putNext();
};

CookieJar$1.deserialize = function(strOrObj, store, cb) {
  if (arguments.length !== 3) {
    // store is optional
    cb = store;
    store = null;
  }

  var serialized;
  if (typeof strOrObj === 'string') {
    serialized = jsonParse(strOrObj);
    if (serialized instanceof Error) {
      return cb(serialized);
    }
  } else {
    serialized = strOrObj;
  }

  var jar = new CookieJar$1(store, serialized.rejectPublicSuffixes);
  jar._importCookies(serialized, function(err) {
    if (err) {
      return cb(err);
    }
    cb(null, jar);
  });
};

CookieJar$1.deserializeSync = function(strOrObj, store) {
  var serialized = typeof strOrObj === 'string' ? JSON.parse(strOrObj) : strOrObj;
  var jar = new CookieJar$1(store, serialized.rejectPublicSuffixes);

  // catch this mistake early:
  if (!jar.store.synchronous) {
    throw new Error('CookieJar store is not synchronous; use async API instead.');
  }

  jar._importCookiesSync(serialized);
  return jar;
};
CookieJar$1.fromJSON = CookieJar$1.deserializeSync;

CookieJar$1.prototype.clone = function(newStore, cb) {
  if (arguments.length === 1) {
    cb = newStore;
    newStore = null;
  }

  this.serialize(function(err, serialized) {
    if (err) {
      return cb(err);
    }
    CookieJar$1.deserialize(serialized, newStore, cb);
  });
};

CAN_BE_SYNC.push('removeAllCookies');
CookieJar$1.prototype.removeAllCookies = function(cb) {
  var store = this.store;

  // Check that the store implements its own removeAllCookies(). The default
  // implementation in Store will immediately call the callback with a "not
  // implemented" Error.
  if (store.removeAllCookies instanceof Function && store.removeAllCookies !== Store$2.prototype.removeAllCookies) {
    return store.removeAllCookies(cb);
  }

  store.getAllCookies(function(err, cookies) {
    if (err) {
      return cb(err);
    }

    if (cookies.length === 0) {
      return cb(null);
    }

    var completedCount = 0;
    var removeErrors = [];

    function removeCookieCb(removeErr) {
      if (removeErr) {
        removeErrors.push(removeErr);
      }

      completedCount++;

      if (completedCount === cookies.length) {
        return cb(removeErrors.length ? removeErrors[0] : null);
      }
    }

    cookies.forEach(function(cookie) {
      store.removeCookie(cookie.domain, cookie.path, cookie.key, removeCookieCb);
    });
  });
};

CookieJar$1.prototype._cloneSync = syncWrap('clone');
CookieJar$1.prototype.cloneSync = function(newStore) {
  if (!newStore.synchronous) {
    throw new Error('CookieJar clone destination store is not synchronous; use async API instead.');
  }
  return this._cloneSync(newStore);
};

// Use a closure to provide a true imperative API for synchronous stores.
function syncWrap(method) {
  return function() {
    if (!this.store.synchronous) {
      throw new Error('CookieJar store is not synchronous; use async API instead.');
    }

    var args = Array.prototype.slice.call(arguments);
    var syncErr, syncResult;
    args.push(function syncCb(err, result) {
      syncErr = err;
      syncResult = result;
    });
    this[method].apply(this, args);

    if (syncErr) {
      throw syncErr;
    }
    return syncResult;
  };
}

// wrap all declared CAN_BE_SYNC methods in the sync wrapper
CAN_BE_SYNC.forEach(function(method) {
  CookieJar$1.prototype[method + 'Sync'] = syncWrap(method);
});

var version$3 = version$2;
var CookieJar_1 = CookieJar$1;
var Cookie_1 = Cookie$1;
var Store_1$1 = Store$2;
var MemoryCookieStore_1$1 = MemoryCookieStore$1;
var parseDate_1 = parseDate;
var formatDate_1 = formatDate;
var parse_1 = parse$4;
var fromJSON_1 = fromJSON;
var domainMatch_1 = domainMatch;
var defaultPath_1 = defaultPath;
var pathMatch_1$1 = pathMatch$2;
var getPublicSuffix$1 = pubsuffixPsl.getPublicSuffix;
var cookieCompare_1 = cookieCompare;
var permuteDomain$2 = permuteDomain_1.permuteDomain;
var permutePath_1 = permutePath;
var canonicalDomain_1 = canonicalDomain;

var cookie$1 = {
  version: version$3,
  CookieJar: CookieJar_1,
  Cookie: Cookie_1,
  Store: Store_1$1,
  MemoryCookieStore: MemoryCookieStore_1$1,
  parseDate: parseDate_1,
  formatDate: formatDate_1,
  parse: parse_1,
  fromJSON: fromJSON_1,
  domainMatch: domainMatch_1,
  defaultPath: defaultPath_1,
  pathMatch: pathMatch_1$1,
  getPublicSuffix: getPublicSuffix$1,
  cookieCompare: cookieCompare_1,
  permuteDomain: permuteDomain$2,
  permutePath: permutePath_1,
  canonicalDomain: canonicalDomain_1
};

var node_cookies = cookie$1;

var timeouts = {
  addTimeout: function(name, delay, callback, context) {
    this._timeouts = this._timeouts || {};
    if (this._timeouts.hasOwnProperty(name)) return;
    var self = this;
    this._timeouts[name] = _commonjsHelpers.commonjsGlobal.setTimeout(function() {
      delete self._timeouts[name];
      callback.call(context);
    }, 1000 * delay);
  },

  removeTimeout: function(name) {
    this._timeouts = this._timeouts || {};
    var timeout = this._timeouts[name];
    if (!timeout) return;
    _commonjsHelpers.commonjsGlobal.clearTimeout(timeout);
    delete this._timeouts[name];
  },

  removeAllTimeouts: function() {
    this._timeouts = this._timeouts || {};
    for (var name in this._timeouts) this.removeTimeout(name);
  }
};

var Cookie$2 = node_cookies.Cookie;

var Transport$1 = extend$1(
  _class({
    className: 'Transport',
    DEFAULT_PORTS: { 'http:': 80, 'https:': 443, 'ws:': 80, 'wss:': 443 },
    MAX_DELAY: 0,

    batching: true,

    initialize: function(dispatcher, endpoint) {
      this._dispatcher = dispatcher;
      this.endpoint = endpoint;
      this._outbox = [];
      this._proxy = extend$1({}, this._dispatcher.proxy);

      if (!this._proxy.origin) this._proxy.origin = this._findProxy();
    },

    close: function() {},

    encode: function(messages) {
      return '';
    },

    sendMessage: function(message) {
      this.debug(
        'Client ? sending message to ?: ?',
        this._dispatcher.clientId,
        uri$1.stringify(this.endpoint),
        message
      );

      if (!this.batching) return promise$2.resolve(this.request([message]));

      this._outbox.push(message);
      this._flushLargeBatch();

      if (message.channel === channel.HANDSHAKE) return this._publish(0.01);

      if (message.channel === channel.CONNECT) this._connectMessage = message;

      return this._publish(this.MAX_DELAY);
    },

    _makePromise: function() {
      var self = this;

      this._requestPromise =
        this._requestPromise ||
        new promise$2(function(resolve) {
          self._resolvePromise = resolve;
        });
    },

    _publish: function(delay) {
      this._makePromise();

      this.addTimeout(
        'publish',
        delay,
        function() {
          this._flush();
          delete this._requestPromise;
        },
        this
      );

      return this._requestPromise;
    },

    _flush: function() {
      this.removeTimeout('publish');

      if (this._outbox.length > 1 && this._connectMessage) this._connectMessage.advice = { timeout: 0 };

      this._resolvePromise(this.request(this._outbox));

      this._connectMessage = null;
      this._outbox = [];
    },

    _flushLargeBatch: function() {
      var string = this.encode(this._outbox);
      if (string.length < this._dispatcher.maxRequestSize) return;
      var last = this._outbox.pop();

      this._makePromise();
      this._flush();

      if (last) this._outbox.push(last);
    },

    _receive: function(replies) {
      if (!replies) return;
      replies = [].concat(replies);

      this.debug(
        'Client ? received from ? via ?: ?',
        this._dispatcher.clientId,
        uri$1.stringify(this.endpoint),
        this.connectionType,
        replies
      );

      for (var i = 0, n = replies.length; i < n; i++) this._dispatcher.handleResponse(replies[i]);
    },

    _handleError: function(messages, immediate) {
      messages = [].concat(messages);

      this.debug(
        'Client ? failed to send to ? via ?: ?',
        this._dispatcher.clientId,
        uri$1.stringify(this.endpoint),
        this.connectionType,
        messages
      );

      for (var i = 0, n = messages.length; i < n; i++) this._dispatcher.handleError(messages[i]);
    },

    _getCookies: function() {
      var cookies = this._dispatcher.cookies,
        url = uri$1.stringify(this.endpoint);

      if (!cookies) return '';

      return array
        .map(cookies.getCookiesSync(url), function(cookie) {
          return cookie.cookieString();
        })
        .join('; ');
    },

    _storeCookies: function(setCookie) {
      var cookies = this._dispatcher.cookies,
        url = uri$1.stringify(this.endpoint),
        cookie;

      if (!setCookie || !cookies) return;
      setCookie = [].concat(setCookie);

      for (var i = 0, n = setCookie.length; i < n; i++) {
        cookie = Cookie$2.parse(setCookie[i]);
        cookies.setCookieSync(cookie, url);
      }
    },

    _findProxy: function() {
      if (typeof process === 'undefined') return undefined;

      var protocol = this.endpoint.protocol;
      if (!protocol) return undefined;

      var name = protocol.replace(/:$/, '').toLowerCase() + '_proxy',
        upcase = name.toUpperCase(),
        env = process.env,
        keys,
        proxy;

      if (name === 'http_proxy' && env.REQUEST_METHOD) {
        keys = Object.keys(env).filter(function(k) {
          return /^http_proxy$/i.test(k);
        });
        if (keys.length === 1) {
          if (keys[0] === name && env[upcase] === undefined) proxy = env[name];
        } else if (keys.length > 1) {
          proxy = env[name];
        }
        proxy = proxy || env['CGI_' + upcase];
      } else {
        proxy = env[name] || env[upcase];
        if (proxy && !env[name])
          console.warn('The environment variable ' + upcase + ' is discouraged. Use ' + name + '.');
      }
      return proxy;
    }
  }),
  {
    get: function(dispatcher, allowed, disabled, callback, context) {
      var endpoint = dispatcher.endpoint;

      array.asyncEach(
        this._transports,
        function(pair, resume) {
          var connType = pair[0],
            klass = pair[1],
            connEndpoint = dispatcher.endpointFor(connType);

          if (array.indexOf(disabled, connType) >= 0) return resume();

          if (array.indexOf(allowed, connType) < 0) {
            klass.isUsable(dispatcher, connEndpoint, function() {});
            return resume();
          }

          klass.isUsable(dispatcher, connEndpoint, function(isUsable) {
            if (!isUsable) return resume();
            var transport = klass.hasOwnProperty('create')
              ? klass.create(dispatcher, connEndpoint)
              : new klass(dispatcher, connEndpoint);
            callback.call(context, transport);
          });
        },
        function() {
          throw new Error('Could not find a usable connection type for ' + uri$1.stringify(endpoint));
        }
      );
    },

    register: function(type, klass) {
      this._transports.push([type, klass]);
      klass.prototype.connectionType = type;
    },

    getConnectionTypes: function() {
      return array.map(this._transports, function(t) {
        return t[0];
      });
    },

    _transports: []
  }
);

extend$1(Transport$1.prototype, logging);
extend$1(Transport$1.prototype, timeouts);

var transport$1 = Transport$1;

var copyObject = function(object) {
  var clone, i, key;
  if (object instanceof Array) {
    clone = [];
    i = object.length;
    while (i--) clone[i] = copyObject(object[i]);
    return clone;
  } else if (typeof object === 'object') {
    clone = object === null ? null : {};
    for (key in object) clone[key] = copyObject(object[key]);
    return clone;
  } else {
    return object;
  }
};

var copy_object = copyObject;

var random = function(bitlength) {
  bitlength = bitlength || constants.ID_LENGTH;
  var maxLength = Math.ceil((bitlength * Math.log(2)) / Math.log(36));
  var string = driver.csprng(bitlength, 36);
  while (string.length < maxLength) string = '0' + string;
  return string;
};

var Connection = _class({
  initialize: function(engine, id, options) {
    this._engine = engine;
    this._id = id;
    this._options = options;
    this._inbox = [];
  },

  deliver: function(message) {
    delete message.clientId;
    if (this.socket) return this.socket.send(message);
    this._inbox.push(message);
    this._beginDeliveryTimeout();
  },

  connect: function(options, callback, context) {
    options = options || {};
    var timeout = options.timeout !== undefined ? options.timeout / 1000 : this._engine.timeout;

    this.setDeferredStatus('unknown');
    this.callback(callback, context);

    this._beginDeliveryTimeout();
    this._beginConnectionTimeout(timeout);
  },

  flush: function() {
    this.removeTimeout('connection');
    this.removeTimeout('delivery');

    this.setDeferredStatus('succeeded', this._inbox);
    this._inbox = [];

    if (!this.socket) this._engine.closeConnection(this._id);
  },

  _beginDeliveryTimeout: function() {
    if (this._inbox.length === 0) return;
    this.addTimeout('delivery', this._engine.MAX_DELAY, this.flush, this);
  },

  _beginConnectionTimeout: function(timeout) {
    this.addTimeout('connection', timeout, this.flush, this);
  }
});

extend$1(Connection.prototype, deferrable);
extend$1(Connection.prototype, timeouts);

var connection$1 = Connection;

var namespace = _class({
  initialize: function() {
    this._used = {};
  },

  exists: function(id) {
    return this._used.hasOwnProperty(id);
  },

  generate: function() {
    var name = random();
    while (this._used.hasOwnProperty(name)) name = random();
    return (this._used[name] = name);
  },

  release: function(id) {
    delete this._used[id];
  }
});

var set = _class({
  initialize: function() {
    this._index = {};
  },

  add: function(item) {
    var key = item.id !== undefined ? item.id : item;
    if (this._index.hasOwnProperty(key)) return false;
    this._index[key] = item;
    return true;
  },

  forEach: function(block, context) {
    for (var key in this._index) {
      if (this._index.hasOwnProperty(key)) block.call(context, this._index[key]);
    }
  },

  isEmpty: function() {
    for (var key in this._index) {
      if (this._index.hasOwnProperty(key)) return false;
    }
    return true;
  },

  member: function(item) {
    for (var key in this._index) {
      if (this._index[key] === item) return true;
    }
    return false;
  },

  remove: function(item) {
    var key = item.id !== undefined ? item.id : item;
    var removed = this._index[key];
    delete this._index[key];
    return removed;
  },

  toArray: function() {
    var array = [];
    this.forEach(function(item) {
      array.push(item);
    });
    return array;
  }
});

var Memory = function(server, options) {
  this._server = server;
  this._options = options || {};
  this.reset();
};

Memory.create = function(server, options) {
  return new Memory(server, options);
};

Memory.prototype = {
  disconnect: function() {
    this.reset();
    this.removeAllTimeouts();
  },

  reset: function() {
    this._namespace = new namespace();
    this._clients = {};
    this._channels = {};
    this._messages = {};
  },

  createClient: function(callback, context) {
    var clientId = this._namespace.generate();
    this._server.debug('Created new client ?', clientId);
    this.ping(clientId);
    this._server.trigger('handshake', clientId);
    callback.call(context, clientId);
  },

  destroyClient: function(clientId, callback, context) {
    if (!this._namespace.exists(clientId)) return;
    var clients = this._clients;

    if (clients[clientId])
      clients[clientId].forEach(function(channel) {
        this.unsubscribe(clientId, channel);
      }, this);

    this.removeTimeout(clientId);
    this._namespace.release(clientId);
    delete this._messages[clientId];
    this._server.debug('Destroyed client ?', clientId);
    this._server.trigger('disconnect', clientId);
    this._server.trigger('close', clientId);
    if (callback) callback.call(context);
  },

  clientExists: function(clientId, callback, context) {
    callback.call(context, this._namespace.exists(clientId));
  },

  ping: function(clientId) {
    var timeout = this._server.timeout;
    if (typeof timeout !== 'number') return;

    this._server.debug('Ping ?, ?', clientId, timeout);
    this.removeTimeout(clientId);
    this.addTimeout(
      clientId,
      2 * timeout,
      function() {
        this.destroyClient(clientId);
      },
      this
    );
  },

  subscribe: function(clientId, channel, callback, context) {
    var clients = this._clients,
      channels = this._channels;

    clients[clientId] = clients[clientId] || new set();
    var trigger = clients[clientId].add(channel);

    channels[channel] = channels[channel] || new set();
    channels[channel].add(clientId);

    this._server.debug('Subscribed client ? to channel ?', clientId, channel);
    if (trigger) this._server.trigger('subscribe', clientId, channel);
    if (callback) callback.call(context, true);
  },

  unsubscribe: function(clientId, channel, callback, context) {
    var clients = this._clients,
      channels = this._channels,
      trigger = false;

    if (clients[clientId]) {
      trigger = clients[clientId].remove(channel);
      if (clients[clientId].isEmpty()) delete clients[clientId];
    }

    if (channels[channel]) {
      channels[channel].remove(clientId);
      if (channels[channel].isEmpty()) delete channels[channel];
    }

    this._server.debug('Unsubscribed client ? from channel ?', clientId, channel);
    if (trigger) this._server.trigger('unsubscribe', clientId, channel);
    if (callback) callback.call(context, true);
  },

  publish: function(message, channels) {
    this._server.debug('Publishing message ?', message);

    var messages = this._messages,
      clients = new set(),
      subs;

    for (var i = 0, n = channels.length; i < n; i++) {
      subs = this._channels[channels[i]];
      if (!subs) continue;
      subs.forEach(clients.add, clients);
    }

    clients.forEach(function(clientId) {
      this._server.debug('Queueing for client ?: ?', clientId, message);
      messages[clientId] = messages[clientId] || [];
      messages[clientId].push(copy_object(message));
      this.emptyQueue(clientId);
    }, this);

    this._server.trigger('publish', message.clientId, message.channel, message.data);
  },

  emptyQueue: function(clientId) {
    if (!this._server.hasConnection(clientId)) return;
    this._server.deliver(clientId, this._messages[clientId]);
    delete this._messages[clientId];
  }
};

extend$1(Memory.prototype, timeouts);

var memory = Memory;

var Proxy$1 = extend$1(
  _class({
    className: 'Engine.Proxy',
    MAX_DELAY: 0,
    INTERVAL: 0,
    TIMEOUT: 60,

    initialize: function(options) {
      this._options = options || {};
      this._connections = {};
      this.interval = this._options.interval || this.INTERVAL;
      this.timeout = this._options.timeout || this.TIMEOUT;

      var engineClass = this._options.type || memory;
      this._engine = engineClass.create(this, this._options);

      this.bind(
        'close',
        function(clientId) {
          var self = this;
          driver.asap_1(function() {
            self.flushConnection(clientId);
          });
        },
        this
      );

      this.debug('Created new engine: ?', this._options);
    },

    connect: function(clientId, options, callback, context) {
      this.debug('Accepting connection from ?', clientId);
      this._engine.ping(clientId);
      var conn = this.connection(clientId, true);
      conn.connect(options, callback, context);
      this._engine.emptyQueue(clientId);
    },

    hasConnection: function(clientId) {
      return this._connections.hasOwnProperty(clientId);
    },

    connection: function(clientId, create) {
      var conn = this._connections[clientId];
      if (conn || !create) return conn;
      this._connections[clientId] = new connection$1(this, clientId);
      this.trigger('connection:open', clientId);
      return this._connections[clientId];
    },

    closeConnection: function(clientId) {
      this.debug('Closing connection for ?', clientId);
      var conn = this._connections[clientId];
      if (!conn) return;
      if (conn.socket) conn.socket.close();
      this.trigger('connection:close', clientId);
      delete this._connections[clientId];
    },

    openSocket: function(clientId, socket) {
      var conn = this.connection(clientId, true);
      conn.socket = socket;
    },

    deliver: function(clientId, messages) {
      if (!messages || messages.length === 0) return false;

      var conn = this.connection(clientId, false);
      if (!conn) return false;

      for (var i = 0, n = messages.length; i < n; i++) {
        conn.deliver(messages[i]);
      }
      return true;
    },

    generateId: function() {
      return random();
    },

    flushConnection: function(clientId, close) {
      if (!clientId) return;
      this.debug('Flushing connection for ?', clientId);
      var conn = this.connection(clientId, false);
      if (!conn) return;
      if (close === false) conn.socket = null;
      conn.flush();
      this.closeConnection(clientId);
    },

    close: function() {
      for (var clientId in this._connections) this.flushConnection(clientId);
      this._engine.disconnect();
    },

    disconnect: function() {
      if (this._engine.disconnect) return this._engine.disconnect();
    },

    publish: function(message) {
      var channels = channel.expand(message.channel);
      return this._engine.publish(message, channels);
    }
  }),
  {
    get: function(options) {
      return new Proxy$1(options);
    }
  }
);

var METHODS = ['createClient', 'clientExists', 'destroyClient', 'ping', 'subscribe', 'unsubscribe'];

METHODS.forEach(function(method) {
  Proxy$1.prototype[method] = function() {
    return this._engine[method].apply(this._engine, arguments);
  };
});

extend$1(Proxy$1.prototype, publisher);
extend$1(Proxy$1.prototype, logging);

var proxy = Proxy$1;

var Error$1 = _class({
  initialize: function(code, params, message) {
    this.code = code;
    this.params = Array.prototype.slice.call(params);
    this.message = message;
  },

  toString: function() {
    return this.code + ':' + this.params.join(',') + ':' + this.message;
  }
});

Error$1.parse = function(message) {
  message = message || '';
  if (!grammar.ERROR.test(message)) return new Error$1(null, [], message);

  var parts = message.split(':'),
    code = parseInt(parts[0]),
    params = parts[1].split(','),
    message = parts[2];

  return new Error$1(code, params, message);
};

// http://code.google.com/p/cometd/wiki/BayeuxCodes
var errors$2 = {
  versionMismatch: [300, 'Version mismatch'],
  conntypeMismatch: [301, 'Connection types not supported'],
  extMismatch: [302, 'Extension mismatch'],
  badRequest: [400, 'Bad request'],
  clientUnknown: [401, 'Unknown client'],
  parameterMissing: [402, 'Missing required parameter'],
  channelForbidden: [403, 'Forbidden channel'],
  channelUnknown: [404, 'Unknown channel'],
  channelInvalid: [405, 'Invalid channel'],
  extUnknown: [406, 'Unknown extension'],
  publishFailed: [407, 'Failed to publish'],
  serverError: [500, 'Internal server error']
};

for (var name in errors$2)
  (function(name) {
    Error$1[name] = function() {
      return new Error$1(errors$2[name][0], arguments, errors$2[name][1]).toString();
    };
  })(name);

var error$1 = Error$1;

var Extensible = {
  addExtension: function(extension) {
    this._extensions = this._extensions || [];
    this._extensions.push(extension);
    if (extension.added) extension.added(this);
  },

  removeExtension: function(extension) {
    if (!this._extensions) return;
    var i = this._extensions.length;
    while (i--) {
      if (this._extensions[i] !== extension) continue;
      this._extensions.splice(i, 1);
      if (extension.removed) extension.removed(this);
    }
  },

  pipeThroughExtensions: function(stage, message, request, callback, context) {
    this.debug('Passing through ? extensions: ?', stage, message);

    if (!this._extensions) return callback.call(context, message);
    var extensions = this._extensions.slice();

    var pipe = function(message) {
      if (!message) return callback.call(context, message);

      var extension = extensions.shift();
      if (!extension) return callback.call(context, message);

      var fn = extension[stage];
      if (!fn) return pipe(message);

      if (fn.length >= 3) extension[stage](message, request, pipe);
      else extension[stage](message, pipe);
    };
    pipe(message);
  }
};

extend$1(Extensible, logging);

var extensible = Extensible;

var socket = _class({
  initialize: function(server, socket, request) {
    this._server = server;
    this._socket = socket;
    this._request = request;
  },

  send: function(message) {
    this._server.pipeThroughExtensions(
      'outgoing',
      message,
      this._request,
      function(pipedMessage) {
        if (this._socket) this._socket.send(to_json([pipedMessage]));
      },
      this
    );
  },

  close: function() {
    if (this._socket) this._socket.close();
    delete this._socket;
  }
});

var Server = _class({
  className: 'Server',
  META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],

  initialize: function(options) {
    this._options = options || {};
    var engineOpts = this._options.engine || {};
    engineOpts.timeout = this._options.timeout;
    this._engine = proxy.get(engineOpts);

    this.info('Created new server: ?', this._options);
  },

  close: function() {
    return this._engine.close();
  },

  openSocket: function(clientId, socket$1, request) {
    if (!clientId || !socket$1) return;
    this._engine.openSocket(clientId, new socket(this, socket$1, request));
  },

  closeSocket: function(clientId, close) {
    this._engine.flushConnection(clientId, close);
  },

  process: function(messages, request, callback, context) {
    var local = request === null;

    messages = [].concat(messages);
    this.info('Processing messages: ? (local: ?)', messages, local);

    if (messages.length === 0) return callback.call(context, []);
    var processed = 0,
      responses = [],
      self = this;

    var gatherReplies = function(replies) {
      responses = responses.concat(replies);
      processed += 1;
      if (processed < messages.length) return;

      var n = responses.length;
      while (n--) {
        if (!responses[n]) responses.splice(n, 1);
      }
      self.info('Returning replies: ?', responses);
      callback.call(context, responses);
    };

    var handleReply = function(replies) {
      var extended = 0,
        expected = replies.length;
      if (expected === 0) gatherReplies(replies);

      for (var i = 0, n = replies.length; i < n; i++) {
        this.debug('Processing reply: ?', replies[i]);
        (function(index) {
          self.pipeThroughExtensions('outgoing', replies[index], request, function(message) {
            replies[index] = message;
            extended += 1;
            if (extended === expected) gatherReplies(replies);
          });
        })(i);
      }
    };

    for (var i = 0, n = messages.length; i < n; i++) {
      this.pipeThroughExtensions(
        'incoming',
        messages[i],
        request,
        function(pipedMessage) {
          this._handle(pipedMessage, local, handleReply, this);
        },
        this
      );
    }
  },

  _makeResponse: function(message) {
    var response = {};

    if (message.id) response.id = message.id;
    if (message.clientId) response.clientId = message.clientId;
    if (message.channel) response.channel = message.channel;
    if (message.error) response.error = message.error;

    response.successful = !response.error;
    return response;
  },

  _handle: function(message, local, callback, context) {
    if (!message) return callback.call(context, []);
    this.info('Handling message: ? (local: ?)', message, local);

    var channelName = message.channel,
      error = message.error,
      response;

    if (channel.isMeta(channelName)) return this._handleMeta(message, local, callback, context);

    if (!grammar.CHANNEL_NAME.test(channelName)) error = error$1.channelInvalid(channelName);

    if (message.data === undefined) error = error$1.parameterMissing('data');

    if (!error) this._engine.publish(message);

    response = this._makeResponse(message);
    if (error) response.error = error;
    response.successful = !response.error;
    callback.call(context, [response]);
  },

  _handleMeta: function(message, local, callback, context) {
    var method = channel.parse(message.channel)[1],
      response;

    if (array.indexOf(this.META_METHODS, method) < 0) {
      response = this._makeResponse(message);
      response.error = error$1.channelForbidden(message.channel);
      response.successful = false;
      return callback.call(context, [response]);
    }

    this[method](
      message,
      local,
      function(responses) {
        responses = [].concat(responses);
        for (var i = 0, n = responses.length; i < n; i++) this._advize(responses[i], message.connectionType);
        callback.call(context, responses);
      },
      this
    );
  },

  _advize: function(response, connectionType) {
    if (array.indexOf([channel.HANDSHAKE, channel.CONNECT], response.channel) < 0) return;

    var interval, timeout;
    if (connectionType === 'eventsource') {
      interval = Math.floor(this._engine.timeout * 1000);
      timeout = 0;
    } else {
      interval = Math.floor(this._engine.interval * 1000);
      timeout = Math.floor(this._engine.timeout * 1000);
    }

    response.advice = response.advice || {};
    if (response.error) {
      extend$1(response.advice, { reconnect: 'handshake' }, false);
    } else {
      extend$1(
        response.advice,
        {
          reconnect: 'retry',
          interval: interval,
          timeout: timeout
        },
        false
      );
    }
  },

  // MUST contain  * version
  //               * supportedConnectionTypes
  // MAY contain   * minimumVersion
  //               * ext
  //               * id
  handshake: function(message, local, callback, context) {
    var response = this._makeResponse(message);
    response.version = constants.BAYEUX_VERSION;

    if (!message.version) response.error = error$1.parameterMissing('version');

    var clientConns = message.supportedConnectionTypes,
      commonConns;

    response.supportedConnectionTypes = constants.CONNECTION_TYPES;

    if (clientConns) {
      commonConns = array.filter(clientConns, function(conn) {
        return array.indexOf(constants.CONNECTION_TYPES, conn) >= 0;
      });
      if (commonConns.length === 0) response.error = error$1.conntypeMismatch(clientConns);
    } else {
      response.error = error$1.parameterMissing('supportedConnectionTypes');
    }

    response.successful = !response.error;
    if (!response.successful) return callback.call(context, response);

    this._engine.createClient(function(clientId) {
      response.clientId = clientId;
      callback.call(context, response);
    }, this);
  },

  // MUST contain  * clientId
  //               * connectionType
  // MAY contain   * ext
  //               * id
  connect: function(message, local, callback, context) {
    var response = this._makeResponse(message),
      clientId = message.clientId,
      connectionType = message.connectionType;

    this._engine.clientExists(
      clientId,
      function(exists) {
        if (!exists) response.error = error$1.clientUnknown(clientId);
        if (!clientId) response.error = error$1.parameterMissing('clientId');

        if (array.indexOf(constants.CONNECTION_TYPES, connectionType) < 0)
          response.error = error$1.conntypeMismatch(connectionType);

        if (!connectionType) response.error = error$1.parameterMissing('connectionType');

        response.successful = !response.error;

        if (!response.successful) {
          delete response.clientId;
          return callback.call(context, response);
        }

        if (message.connectionType === 'eventsource') {
          message.advice = message.advice || {};
          message.advice.timeout = 0;
        }
        this._engine.connect(response.clientId, message.advice, function(events) {
          callback.call(context, [response].concat(events));
        });
      },
      this
    );
  },

  // MUST contain  * clientId
  // MAY contain   * ext
  //               * id
  disconnect: function(message, local, callback, context) {
    var response = this._makeResponse(message),
      clientId = message.clientId;

    this._engine.clientExists(
      clientId,
      function(exists) {
        if (!exists) response.error = error$1.clientUnknown(clientId);
        if (!clientId) response.error = error$1.parameterMissing('clientId');

        response.successful = !response.error;
        if (!response.successful) delete response.clientId;

        if (response.successful) this._engine.destroyClient(clientId);
        callback.call(context, response);
      },
      this
    );
  },

  // MUST contain  * clientId
  //               * subscription
  // MAY contain   * ext
  //               * id
  subscribe: function(message, local, callback, context) {
    var response = this._makeResponse(message),
      clientId = message.clientId,
      subscription = message.subscription,
      channel$1;

    subscription = subscription ? [].concat(subscription) : [];

    this._engine.clientExists(
      clientId,
      function(exists) {
        if (!exists) response.error = error$1.clientUnknown(clientId);
        if (!clientId) response.error = error$1.parameterMissing('clientId');
        if (!message.subscription) response.error = error$1.parameterMissing('subscription');

        response.subscription = message.subscription || [];

        for (var i = 0, n = subscription.length; i < n; i++) {
          channel$1 = subscription[i];

          if (response.error) break;
          if (!local && !channel.isSubscribable(channel$1)) response.error = error$1.channelForbidden(channel$1);
          if (!channel.isValid(channel$1)) response.error = error$1.channelInvalid(channel$1);

          if (response.error) break;
          this._engine.subscribe(clientId, channel$1);
        }

        response.successful = !response.error;
        callback.call(context, response);
      },
      this
    );
  },

  // MUST contain  * clientId
  //               * subscription
  // MAY contain   * ext
  //               * id
  unsubscribe: function(message, local, callback, context) {
    var response = this._makeResponse(message),
      clientId = message.clientId,
      subscription = message.subscription,
      channel$1;

    subscription = subscription ? [].concat(subscription) : [];

    this._engine.clientExists(
      clientId,
      function(exists) {
        if (!exists) response.error = error$1.clientUnknown(clientId);
        if (!clientId) response.error = error$1.parameterMissing('clientId');
        if (!message.subscription) response.error = error$1.parameterMissing('subscription');

        response.subscription = message.subscription || [];

        for (var i = 0, n = subscription.length; i < n; i++) {
          channel$1 = subscription[i];

          if (response.error) break;
          if (!local && !channel.isSubscribable(channel$1)) response.error = error$1.channelForbidden(channel$1);
          if (!channel.isValid(channel$1)) response.error = error$1.channelInvalid(channel$1);

          if (response.error) break;
          this._engine.unsubscribe(clientId, channel$1);
        }

        response.successful = !response.error;
        callback.call(context, response);
      },
      this
    );
  }
});

Server.create = function(options) {
  return new Server(options);
};

extend$1(Server.prototype, logging);
extend$1(Server.prototype, extensible);

var server = Server;

var NodeLocal = extend$1(
  _class(transport$1, {
    batching: false,

    request: function(messages) {
      messages = copy_object(messages);
      var self = this;

      driver.asap_1(function() {
        self.endpoint.process(messages, null, function(replies) {
          self._receive(copy_object(replies));
        });
      });
    }
  }),
  {
    isUsable: function(client, endpoint, callback, context) {
      callback.call(context, endpoint instanceof server);
    }
  }
);

var node_local = NodeLocal;

var Event = function(eventType, options) {
  this.type = eventType;
  for (var key in options) this[key] = options[key];
};

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

var event = Event;

var EventTarget = {
  onopen: null,
  onmessage: null,
  onerror: null,
  onclose: null,

  addEventListener: function(eventType, listener, useCapture) {
    this.on(eventType, listener);
  },

  removeEventListener: function(eventType, listener, useCapture) {
    this.removeListener(eventType, listener);
  },

  dispatchEvent: function(event$1) {
    event$1.target = event$1.currentTarget = this;
    event$1.eventPhase = event.AT_TARGET;

    if (this['on' + event$1.type]) this['on' + event$1.type](event$1);

    this.emit(event$1.type, event$1);
  }
};

var event_target = EventTarget;

var Stream$3 = Stream__default['default'].Stream;

var API = function(options) {
  options = options || {};
  driver.driver.validateOptions(options, ['headers', 'extensions', 'maxLength', 'ping', 'proxy', 'tls', 'ca']);

  this.readable = this.writable = true;

  var headers = options.headers;
  if (headers) {
    for (var name in headers) this._driver.setHeader(name, headers[name]);
  }

  var extensions = options.extensions;
  if (extensions) {
    [].concat(extensions).forEach(this._driver.addExtension, this._driver);
  }

  this._ping = options.ping;
  this._pingId = 0;
  this.readyState = API.CONNECTING;
  this.bufferedAmount = 0;
  this.protocol = '';
  this.url = this._driver.url;
  this.version = this._driver.version;

  var self = this;

  this._driver.on('open', function(e) {
    self._open();
  });
  this._driver.on('message', function(e) {
    self._receiveMessage(e.data);
  });
  this._driver.on('close', function(e) {
    self._beginClose(e.reason, e.code);
  });

  this._driver.on('error', function(error) {
    self._emitError(error.message);
  });
  this.on('error', function() {});

  this._driver.messages.on('drain', function() {
    self.emit('drain');
  });

  if (this._ping)
    this._pingTimer = setInterval(function() {
      self._pingId += 1;
      self.ping(self._pingId.toString());
    }, this._ping * 1000);

  this._configureStream();

  if (!this._proxy) {
    this._stream.pipe(this._driver.io);
    this._driver.io.pipe(this._stream);
  }
};
util__default['default'].inherits(API, Stream$3);

API.CONNECTING = 0;
API.OPEN = 1;
API.CLOSING = 2;
API.CLOSED = 3;

API.CLOSE_TIMEOUT = 30000;

var instance = {
  write: function(data) {
    return this.send(data);
  },

  end: function(data) {
    if (data !== undefined) this.send(data);
    this.close();
  },

  pause: function() {
    return this._driver.messages.pause();
  },

  resume: function() {
    return this._driver.messages.resume();
  },

  send: function(data) {
    if (this.readyState > API.OPEN) return false;
    if (!(data instanceof Buffer)) data = String(data);
    return this._driver.messages.write(data);
  },

  ping: function(message, callback) {
    if (this.readyState > API.OPEN) return false;
    return this._driver.ping(message, callback);
  },

  close: function(code, reason) {
    if (code === undefined) code = 1000;
    if (reason === undefined) reason = '';

    if (code !== 1000 && (code < 3000 || code > 4999))
      throw new Error(
        "Failed to execute 'close' on WebSocket: " +
          'The code must be either 1000, or between 3000 and 4999. ' +
          code +
          ' is neither.'
      );

    if (this.readyState !== API.CLOSED) this.readyState = API.CLOSING;
    var self = this;

    this._closeTimer = setTimeout(function() {
      self._beginClose('', 1006);
    }, API.CLOSE_TIMEOUT);

    this._driver.close(reason, code);
  },

  _configureStream: function() {
    var self = this;

    this._stream.setTimeout(0);
    this._stream.setNoDelay(true);

    ['close', 'end'].forEach(function(event) {
      this._stream.on(event, function() {
        self._finalizeClose();
      });
    }, this);

    this._stream.on('error', function(error) {
      self._emitError('Network error: ' + self.url + ': ' + error.message);
      self._finalizeClose();
    });
  },

  _open: function() {
    if (this.readyState !== API.CONNECTING) return;

    this.readyState = API.OPEN;
    this.protocol = this._driver.protocol || '';

    var event$1 = new event('open');
    event$1.initEvent('open', false, false);
    this.dispatchEvent(event$1);
  },

  _receiveMessage: function(data) {
    if (this.readyState > API.OPEN) return false;

    if (this.readable) this.emit('data', data);

    var event$1 = new event('message', { data: data });
    event$1.initEvent('message', false, false);
    this.dispatchEvent(event$1);
  },

  _emitError: function(message) {
    if (this.readyState >= API.CLOSING) return;

    var event$1 = new event('error', { message: message });
    event$1.initEvent('error', false, false);
    this.dispatchEvent(event$1);
  },

  _beginClose: function(reason, code) {
    if (this.readyState === API.CLOSED) return;
    this.readyState = API.CLOSING;
    this._closeParams = [reason, code];

    if (this._stream) {
      this._stream.destroy();
      if (!this._stream.readable) this._finalizeClose();
    }
  },

  _finalizeClose: function() {
    if (this.readyState === API.CLOSED) return;
    this.readyState = API.CLOSED;

    if (this._closeTimer) clearTimeout(this._closeTimer);
    if (this._pingTimer) clearInterval(this._pingTimer);
    if (this._stream) this._stream.end();

    if (this.readable) this.emit('end');
    this.readable = this.writable = false;

    var reason = this._closeParams ? this._closeParams[0] : '',
      code = this._closeParams ? this._closeParams[1] : 1006;

    var event$1 = new event('close', { code: code, reason: reason });
    event$1.initEvent('close', false, false);
    this.dispatchEvent(event$1);
  }
};

for (var method$1 in instance) API.prototype[method$1] = instance[method$1];
for (var key$3 in event_target) API.prototype[key$3] = event_target[key$3];

var api = API;

var DEFAULT_PORTS = { 'http:': 80, 'https:': 443, 'ws:': 80, 'wss:': 443 },
  SECURE_PROTOCOLS = ['https:', 'wss:'];

var Client = function(_url, protocols, options) {
  options = options || {};

  this.url = _url;
  this._driver = driver.driver.client(this.url, { maxLength: options.maxLength, protocols: protocols });

  ['open', 'error'].forEach(function(event) {
    this._driver.on(event, function() {
      self.headers = self._driver.headers;
      self.statusCode = self._driver.statusCode;
    });
  }, this);

  var proxy = options.proxy || {},
    endpoint = url__default['default'].parse(proxy.origin || this.url),
    port = endpoint.port || DEFAULT_PORTS[endpoint.protocol],
    secure = SECURE_PROTOCOLS.indexOf(endpoint.protocol) >= 0,
    onConnect = function() {
      self._onConnect();
    },
    netOptions = options.net || {},
    originTLS = options.tls || {},
    socketTLS = proxy.origin ? proxy.tls || {} : originTLS,
    self = this;

  netOptions.host = socketTLS.host = endpoint.hostname;
  netOptions.port = socketTLS.port = port;

  originTLS.ca = originTLS.ca || options.ca;
  socketTLS.servername = socketTLS.servername || endpoint.hostname;

  this._stream = secure
    ? tls__default['default'].connect(socketTLS, onConnect)
    : net__default['default'].connect(netOptions, onConnect);

  if (proxy.origin) this._configureProxy(proxy, originTLS);

  api.call(this, options);
};
util__default['default'].inherits(Client, api);

Client.prototype._onConnect = function() {
  var worker = this._proxy || this._driver;
  worker.start();
};

Client.prototype._configureProxy = function(proxy, originTLS) {
  var uri = url__default['default'].parse(this.url),
    secure = SECURE_PROTOCOLS.indexOf(uri.protocol) >= 0,
    self = this,
    name;

  this._proxy = this._driver.proxy(proxy.origin);

  if (proxy.headers) {
    for (name in proxy.headers) this._proxy.setHeader(name, proxy.headers[name]);
  }

  this._proxy.pipe(
    this._stream,
    { end: false }
  );
  this._stream.pipe(this._proxy);

  this._proxy.on('connect', function() {
    if (secure) {
      var options = { socket: self._stream, servername: uri.hostname };
      for (name in originTLS) options[name] = originTLS[name];
      self._stream = tls__default['default'].connect(options);
      self._configureStream();
    }
    self._driver.io.pipe(self._stream);
    self._stream.pipe(self._driver.io);
    self._driver.start();
  });

  this._proxy.on('error', function(error) {
    self._driver.emit('error', error);
  });
};

var client = Client;

var Stream$4 = Stream__default['default'].Stream;

var EventSource = function(request, response, options) {
  this.writable = true;
  options = options || {};

  this._stream = response.socket;
  this._ping = options.ping || this.DEFAULT_PING;
  this._retry = options.retry || this.DEFAULT_RETRY;

  var scheme = driver.driver.isSecureRequest(request) ? 'https:' : 'http:';
  this.url = scheme + '//' + request.headers.host + request.url;
  this.lastEventId = request.headers['last-event-id'] || '';
  this.readyState = api.CONNECTING;

  var headers = new driver.headers(),
    self = this;

  if (options.headers) {
    for (var key in options.headers) headers.set(key, options.headers[key]);
  }

  if (!this._stream || !this._stream.writable) return;
  process.nextTick(function() {
    self._open();
  });

  this._stream.setTimeout(0);
  this._stream.setNoDelay(true);

  var handshake =
    'HTTP/1.1 200 OK\r\n' +
    'Content-Type: text/event-stream\r\n' +
    'Cache-Control: no-cache, no-store\r\n' +
    'Connection: close\r\n' +
    headers.toString() +
    '\r\n' +
    'retry: ' +
    Math.floor(this._retry * 1000) +
    '\r\n\r\n';

  this._write(handshake);

  this._stream.on('drain', function() {
    self.emit('drain');
  });

  if (this._ping)
    this._pingTimer = setInterval(function() {
      self.ping();
    }, this._ping * 1000);

  ['error', 'end'].forEach(function(event) {
    self._stream.on(event, function() {
      self.close();
    });
  });
};
util__default['default'].inherits(EventSource, Stream$4);

EventSource.isEventSource = function(request) {
  if (request.method !== 'GET') return false;
  var accept = (request.headers.accept || '').split(/\s*,\s*/);
  return accept.indexOf('text/event-stream') >= 0;
};

var instance$1 = {
  DEFAULT_PING: 10,
  DEFAULT_RETRY: 5,

  _write: function(chunk) {
    if (!this.writable) return false;
    try {
      return this._stream.write(chunk, 'utf8');
    } catch (e) {
      return false;
    }
  },

  _open: function() {
    if (this.readyState !== api.CONNECTING) return;

    this.readyState = api.OPEN;

    var event$1 = new event('open');
    event$1.initEvent('open', false, false);
    this.dispatchEvent(event$1);
  },

  write: function(message) {
    return this.send(message);
  },

  end: function(message) {
    if (message !== undefined) this.write(message);
    this.close();
  },

  send: function(message, options) {
    if (this.readyState > api.OPEN) return false;

    message = String(message).replace(/(\r\n|\r|\n)/g, '$1data: ');
    options = options || {};

    var frame = '';
    if (options.event) frame += 'event: ' + options.event + '\r\n';
    if (options.id) frame += 'id: ' + options.id + '\r\n';
    frame += 'data: ' + message + '\r\n\r\n';

    return this._write(frame);
  },

  ping: function() {
    return this._write(':\r\n\r\n');
  },

  close: function() {
    if (this.readyState > api.OPEN) return false;

    this.readyState = api.CLOSED;
    this.writable = false;
    if (this._pingTimer) clearInterval(this._pingTimer);
    if (this._stream) this._stream.end();

    var event$1 = new event('close');
    event$1.initEvent('close', false, false);
    this.dispatchEvent(event$1);

    return true;
  }
};

for (var method$2 in instance$1) EventSource.prototype[method$2] = instance$1[method$2];
for (var key$4 in event_target) EventSource.prototype[key$4] = event_target[key$4];

var eventsource = EventSource;

var WebSocket = function(request, socket, body, protocols, options) {
  options = options || {};

  this._stream = socket;
  this._driver = driver.driver.http(request, { maxLength: options.maxLength, protocols: protocols });

  var self = this;
  if (!this._stream || !this._stream.writable) return;
  if (!this._stream.readable) return this._stream.end();

  var catchup = function() {
    self._stream.removeListener('data', catchup);
  };
  this._stream.on('data', catchup);

  api.call(this, options);

  process.nextTick(function() {
    self._driver.start();
    self._driver.io.write(body);
  });
};
util__default['default'].inherits(WebSocket, api);

WebSocket.isWebSocket = function(request) {
  return driver.driver.isWebSocket(request);
};

WebSocket.validateOptions = function(options, validKeys) {
  driver.driver.validateOptions(options, validKeys);
};

WebSocket.WebSocket = WebSocket;
WebSocket.Client = client;
WebSocket.EventSource = eventsource;

var websocket = WebSocket;

var WS = websocket.Client;

var node_websocket = {
  create: function(url, protocols, options) {
    return new WS(url, protocols, options);
  }
};

var WebSocket$1 = extend$1(
  _class(transport$1, {
    UNCONNECTED: 1,
    CONNECTING: 2,
    CONNECTED: 3,

    batching: false,

    isUsable: function(callback, context) {
      this.callback(function() {
        callback.call(context, true);
      });
      this.errback(function() {
        callback.call(context, false);
      });
      this.connect();
    },

    request: function(messages) {
      this._pending = this._pending || new set();
      for (var i = 0, n = messages.length; i < n; i++) this._pending.add(messages[i]);

      var self = this;

      var promise = new promise$2(function(resolve, reject) {
        self.callback(function(socket) {
          if (!socket || socket.readyState !== 1) return;
          socket.send(to_json(messages));
          resolve(socket);
        });

        self.connect();
      });

      return {
        abort: function() {
          promise.then(function(ws) {
            ws.close();
          });
        }
      };
    },

    connect: function() {
      if (WebSocket$1._unloaded) return;

      this._state = this._state || this.UNCONNECTED;
      if (this._state !== this.UNCONNECTED) return;
      this._state = this.CONNECTING;

      var socket = this._createSocket();
      if (!socket) return this.setDeferredStatus('failed');

      var self = this;

      socket.onopen = function() {
        if (socket.headers) self._storeCookies(socket.headers['set-cookie']);
        self._socket = socket;
        self._state = self.CONNECTED;
        self._everConnected = true;
        self._ping();
        self.setDeferredStatus('succeeded', socket);
      };

      var closed = false;
      socket.onclose = socket.onerror = function() {
        if (closed) return;
        closed = true;

        var wasConnected = self._state === self.CONNECTED;
        socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;

        delete self._socket;
        self._state = self.UNCONNECTED;
        self.removeTimeout('ping');

        var pending = self._pending ? self._pending.toArray() : [];
        delete self._pending;

        if (wasConnected || self._everConnected) {
          self.setDeferredStatus('unknown');
          self._handleError(pending, wasConnected);
        } else {
          self.setDeferredStatus('failed');
        }
      };

      socket.onmessage = function(event) {
        var replies;
        try {
          replies = JSON.parse(event.data);
        } catch (error) {}

        if (!replies) return;

        replies = [].concat(replies);

        for (var i = 0, n = replies.length; i < n; i++) {
          if (replies[i].successful === undefined) continue;
          self._pending.remove(replies[i]);
        }
        self._receive(replies);
      };
    },

    close: function() {
      if (!this._socket) return;
      this._socket.close();
    },

    _createSocket: function() {
      var url = WebSocket$1.getSocketUrl(this.endpoint),
        headers = this._dispatcher.headers,
        extensions = this._dispatcher.wsExtensions,
        cookie = this._getCookies(),
        tls = this._dispatcher.tls,
        options = { extensions: extensions, headers: headers, proxy: this._proxy, tls: tls };

      if (cookie !== '') options.headers['Cookie'] = cookie;

      return node_websocket.create(url, [], options);
    },

    _ping: function() {
      if (!this._socket || this._socket.readyState !== 1) return;
      this._socket.send('[]');
      this.addTimeout('ping', this._dispatcher.timeout / 2, this._ping, this);
    }
  }),
  {
    PROTOCOLS: {
      'http:': 'ws:',
      'https:': 'wss:'
    },

    create: function(dispatcher, endpoint) {
      var sockets = (dispatcher.transports.websocket = dispatcher.transports.websocket || {});
      sockets[endpoint.href] = sockets[endpoint.href] || new this(dispatcher, endpoint);
      return sockets[endpoint.href];
    },

    getSocketUrl: function(endpoint) {
      endpoint = copy_object(endpoint);
      endpoint.protocol = this.PROTOCOLS[endpoint.protocol];
      return uri$1.stringify(endpoint);
    },

    isUsable: function(dispatcher, endpoint, callback, context) {
      this.create(dispatcher, endpoint).isUsable(callback, context);
    }
  }
);

extend$1(WebSocket$1.prototype, deferrable);

var web_socket = WebSocket$1;

var NodeHttp = extend$1(
  _class(transport$1, {
    className: 'NodeHttp',
    SECURE_PROTOCOLS: ['https:', 'wss:'],

    initialize: function() {
      transport$1.prototype.initialize.apply(this, arguments);

      this._endpointSecure = this.SECURE_PROTOCOLS.indexOf(this.endpoint.protocol) >= 0;
      this._httpClient = this._endpointSecure ? https__default['default'] : http__default['default'];

      var proxy = this._proxy;
      if (!proxy.origin) return;

      this._proxyUri = uri$1.parse(proxy.origin);
      this._proxySecure = this.SECURE_PROTOCOLS.indexOf(this._proxyUri.protocol) >= 0;

      if (!this._endpointSecure) {
        this._httpClient = this._proxySecure ? https__default['default'] : http__default['default'];
        return;
      }

      var options = extend$1(
        {
          proxy: {
            host: this._proxyUri.hostname,
            port: this._proxyUri.port || this.DEFAULT_PORTS[this._proxyUri.protocol],
            proxyAuth: this._proxyUri.auth,
            headers: extend$1({ host: this.endpoint.host }, proxy.headers)
          }
        },
        this._dispatcher.tls
      );

      if (this._proxySecure) {
        extend$1(options.proxy, proxy.tls);
        this._tunnel = driver.tunnelAgent.httpsOverHttps(options);
      } else {
        this._tunnel = driver.tunnelAgent.httpsOverHttp(options);
      }
    },

    encode: function(messages) {
      return to_json(messages);
    },

    request: function(messages) {
      var content = new Buffer(this.encode(messages), 'utf8'),
        params = this._buildParams(content),
        request = this._httpClient.request(params),
        self = this;

      request.on('response', function(response) {
        self._handleResponse(messages, response);
        self._storeCookies(response.headers['set-cookie']);
      });

      request.on('error', function(error) {
        self.error('HTTP error: ' + error.message);
        self._handleError(messages);
      });

      request.end(content);
      return request;
    },

    _buildParams: function(content) {
      var uri = this.endpoint,
        proxy = this._proxyUri,
        target = this._tunnel ? uri : proxy || uri;

      var params = {
        method: 'POST',
        host: target.hostname,
        port: target.port || this.DEFAULT_PORTS[target.protocol],
        path: uri.path,
        headers: extend$1(
          {
            'Content-Length': content.length,
            'Content-Type': 'application/json',
            Host: uri.host
          },
          this._dispatcher.headers
        )
      };

      var cookie = this._getCookies();
      if (cookie !== '') params.headers['Cookie'] = cookie;

      if (this._tunnel) {
        params.agent = this._tunnel;
      } else if (this._endpointSecure) {
        extend$1(params, this._dispatcher.tls);
      } else if (proxy) {
        params.path = this.endpoint.href;
        extend$1(params, this._proxy.tls);
        if (proxy.auth) params.headers['Proxy-Authorization'] = new Buffer(proxy.auth, 'utf8').toString('base64');
      }

      return params;
    },

    _handleResponse: function(messages, response) {
      var body = '',
        self = this;

      response.setEncoding('utf8');
      response.on('data', function(chunk) {
        body += chunk;
      });

      response.on('end', function() {
        var replies;
        try {
          replies = JSON.parse(body);
        } catch (error) {}

        if (replies) self._receive(replies);
        else self._handleError(messages);
      });
    }
  }),
  {
    isUsable: function(dispatcher, endpoint, callback, context) {
      callback.call(context, uri$1.isURI(endpoint));
    }
  }
);

var node_http = NodeHttp;

transport$1.register('in-process', node_local);
transport$1.register('websocket', web_socket);
transport$1.register('long-polling', node_http);

var node_transports = transport$1;

var Scheduler = function(message, options) {
  this.message = message;
  this.options = options;
  this.attempts = 0;
};

extend$1(Scheduler.prototype, {
  getTimeout: function() {
    return this.options.timeout;
  },

  getInterval: function() {
    return this.options.interval;
  },

  isDeliverable: function() {
    var attempts = this.options.attempts,
      made = this.attempts,
      deadline = this.options.deadline,
      now = new Date().getTime();

    if (attempts !== undefined && made >= attempts) return false;

    if (deadline !== undefined && now > deadline) return false;

    return true;
  },

  send: function() {
    this.attempts += 1;
  },

  succeed: function() {},

  fail: function() {},

  abort: function() {}
});

var scheduler = Scheduler;

var Dispatcher = _class({
  className: 'Dispatcher',
  MAX_REQUEST_SIZE: 2048,
  DEFAULT_RETRY: 5,

  UP: 1,
  DOWN: 2,

  initialize: function(client, endpoint, options) {
    this._client = client;
    this.endpoint = uri$1.parse(endpoint);
    this._alternates = options.endpoints || {};

    this.cookies = node_cookies.CookieJar && new node_cookies.CookieJar();
    this._disabled = [];
    this._envelopes = {};
    this.headers = {};
    this.retry = options.retry || this.DEFAULT_RETRY;
    this._scheduler = options.scheduler || scheduler;
    this._state = 0;
    this.transports = {};
    this.wsExtensions = [];

    this.proxy = options.proxy || {};
    if (typeof this._proxy === 'string') this._proxy = { origin: this._proxy };

    var exts = options.websocketExtensions;
    if (exts) {
      exts = [].concat(exts);
      for (var i = 0, n = exts.length; i < n; i++) this.addWebsocketExtension(exts[i]);
    }

    this.tls = options.tls || {};
    this.tls.ca = this.tls.ca || options.ca;

    for (var type in this._alternates) this._alternates[type] = uri$1.parse(this._alternates[type]);

    this.maxRequestSize = this.MAX_REQUEST_SIZE;
  },

  endpointFor: function(connectionType) {
    return this._alternates[connectionType] || this.endpoint;
  },

  addWebsocketExtension: function(extension) {
    this.wsExtensions.push(extension);
  },

  disable: function(feature) {
    this._disabled.push(feature);
  },

  setHeader: function(name, value) {
    this.headers[name] = value;
  },

  close: function() {
    var transport = this._transport;
    delete this._transport;
    if (transport) transport.close();
  },

  getConnectionTypes: function() {
    return node_transports.getConnectionTypes();
  },

  selectTransport: function(transportTypes) {
    node_transports.get(
      this,
      transportTypes,
      this._disabled,
      function(transport) {
        this.debug('Selected ? transport for ?', transport.connectionType, uri$1.stringify(transport.endpoint));

        if (transport === this._transport) return;
        if (this._transport) this._transport.close();

        this._transport = transport;
        this.connectionType = transport.connectionType;
      },
      this
    );
  },

  sendMessage: function(message, timeout, options) {
    options = options || {};

    var id = message.id,
      attempts = options.attempts,
      deadline = options.deadline && new Date().getTime() + options.deadline * 1000,
      envelope = this._envelopes[id],
      scheduler;

    if (!envelope) {
      scheduler = new this._scheduler(message, {
        timeout: timeout,
        interval: this.retry,
        attempts: attempts,
        deadline: deadline
      });
      envelope = this._envelopes[id] = { message: message, scheduler: scheduler };
    }

    this._sendEnvelope(envelope);
  },

  _sendEnvelope: function(envelope) {
    if (!this._transport) return;
    if (envelope.request || envelope.timer) return;

    var message = envelope.message,
      scheduler = envelope.scheduler,
      self = this;

    if (!scheduler.isDeliverable()) {
      scheduler.abort();
      delete this._envelopes[message.id];
      return;
    }

    envelope.timer = _commonjsHelpers.commonjsGlobal.setTimeout(function() {
      self.handleError(message);
    }, scheduler.getTimeout() * 1000);

    scheduler.send();
    envelope.request = this._transport.sendMessage(message);
  },

  handleResponse: function(reply) {
    var envelope = this._envelopes[reply.id];

    if (reply.successful !== undefined && envelope) {
      envelope.scheduler.succeed();
      delete this._envelopes[reply.id];
      _commonjsHelpers.commonjsGlobal.clearTimeout(envelope.timer);
    }

    this.trigger('message', reply);

    if (this._state === this.UP) return;
    this._state = this.UP;
    this._client.trigger('transport:up');
  },

  handleError: function(message, immediate) {
    var envelope = this._envelopes[message.id],
      request = envelope && envelope.request,
      self = this;

    if (!request) return;

    request.then(function(req) {
      if (req && req.abort) req.abort();
    });

    var scheduler = envelope.scheduler;
    scheduler.fail();

    _commonjsHelpers.commonjsGlobal.clearTimeout(envelope.timer);
    envelope.request = envelope.timer = null;

    if (immediate) {
      this._sendEnvelope(envelope);
    } else {
      envelope.timer = _commonjsHelpers.commonjsGlobal.setTimeout(function() {
        envelope.timer = null;
        self._sendEnvelope(envelope);
      }, scheduler.getInterval() * 1000);
    }

    if (this._state === this.DOWN) return;
    this._state = this.DOWN;
    this._client.trigger('transport:down');
  }
});

Dispatcher.create = function(client, endpoint, options) {
  return new Dispatcher(client, endpoint, options);
};

extend$1(Dispatcher.prototype, publisher);
extend$1(Dispatcher.prototype, logging);

var dispatcher = Dispatcher;

var publication = _class(deferrable);

var Subscription = _class({
  initialize: function(client, channels, callback, context) {
    this._client = client;
    this._channels = channels;
    this._callback = callback;
    this._context = context;
    this._cancelled = false;
  },

  withChannel: function(callback, context) {
    this._withChannel = [callback, context];
    return this;
  },

  apply: function(context, args) {
    var message = args[0];

    if (this._callback) this._callback.call(this._context, message.data);

    if (this._withChannel) this._withChannel[0].call(this._withChannel[1], message.channel, message.data);
  },

  cancel: function() {
    if (this._cancelled) return;
    this._client.unsubscribe(this._channels, this);
    this._cancelled = true;
  },

  unsubscribe: function() {
    this.cancel();
  }
});

extend$1(Subscription.prototype, deferrable);

var subscription = Subscription;

var Client$1 = _class({
  className: 'Client',
  UNCONNECTED: 1,
  CONNECTING: 2,
  CONNECTED: 3,
  DISCONNECTED: 4,

  HANDSHAKE: 'handshake',
  RETRY: 'retry',
  NONE: 'none',

  CONNECTION_TIMEOUT: 60,

  DEFAULT_ENDPOINT: '/bayeux',
  INTERVAL: 0,

  initialize: function(endpoint, options) {
    this.info('New client created for ?', endpoint);
    options = options || {};

    validate_options(options, [
      'interval',
      'timeout',
      'endpoints',
      'proxy',
      'retry',
      'scheduler',
      'websocketExtensions',
      'tls',
      'ca'
    ]);

    this._channels = new channel.Set();
    this._dispatcher = dispatcher.create(this, endpoint || this.DEFAULT_ENDPOINT, options);

    this._messageId = 0;
    this._state = this.UNCONNECTED;

    this._responseCallbacks = {};

    this._advice = {
      reconnect: this.RETRY,
      interval: 1000 * (options.interval || this.INTERVAL),
      timeout: 1000 * (options.timeout || this.CONNECTION_TIMEOUT)
    };
    this._dispatcher.timeout = this._advice.timeout / 1000;

    this._dispatcher.bind('message', this._receiveMessage, this);
  },

  addWebsocketExtension: function(extension) {
    return this._dispatcher.addWebsocketExtension(extension);
  },

  disable: function(feature) {
    return this._dispatcher.disable(feature);
  },

  setHeader: function(name, value) {
    return this._dispatcher.setHeader(name, value);
  },

  // Request
  // MUST include:  * channel
  //                * version
  //                * supportedConnectionTypes
  // MAY include:   * minimumVersion
  //                * ext
  //                * id
  //
  // Success Response                             Failed Response
  // MUST include:  * channel                     MUST include:  * channel
  //                * version                                    * successful
  //                * supportedConnectionTypes                   * error
  //                * clientId                    MAY include:   * supportedConnectionTypes
  //                * successful                                 * advice
  // MAY include:   * minimumVersion                             * version
  //                * advice                                     * minimumVersion
  //                * ext                                        * ext
  //                * id                                         * id
  //                * authSuccessful
  handshake: function(callback, context) {
    if (this._advice.reconnect === this.NONE) return;
    if (this._state !== this.UNCONNECTED) return;

    this._state = this.CONNECTING;
    var self = this;

    this.info('Initiating handshake with ?', uri$1.stringify(this._dispatcher.endpoint));
    this._dispatcher.selectTransport(constants.MANDATORY_CONNECTION_TYPES);

    this._sendMessage(
      {
        channel: channel.HANDSHAKE,
        version: constants.BAYEUX_VERSION,
        supportedConnectionTypes: this._dispatcher.getConnectionTypes()
      },
      {},
      function(response) {
        if (response.successful) {
          this._state = this.CONNECTED;
          this._dispatcher.clientId = response.clientId;

          this._dispatcher.selectTransport(response.supportedConnectionTypes);

          this.info('Handshake successful: ?', this._dispatcher.clientId);

          this.subscribe(this._channels.getKeys(), true);
          if (callback)
            driver.asap_1(function() {
              callback.call(context);
            });
        } else {
          this.info('Handshake unsuccessful');
          _commonjsHelpers.commonjsGlobal.setTimeout(function() {
            self.handshake(callback, context);
          }, this._dispatcher.retry * 1000);
          this._state = this.UNCONNECTED;
        }
      },
      this
    );
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * connectionType                     * clientId
  // MAY include:   * ext                 MAY include:   * error
  //                * id                                 * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  connect: function(callback, context) {
    if (this._advice.reconnect === this.NONE) return;
    if (this._state === this.DISCONNECTED) return;

    if (this._state === this.UNCONNECTED)
      return this.handshake(function() {
        this.connect(callback, context);
      }, this);

    this.callback(callback, context);
    if (this._state !== this.CONNECTED) return;

    this.info('Calling deferred actions for ?', this._dispatcher.clientId);
    this.setDeferredStatus('succeeded');
    this.setDeferredStatus('unknown');

    if (this._connectRequest) return;
    this._connectRequest = true;

    this.info('Initiating connection for ?', this._dispatcher.clientId);

    this._sendMessage(
      {
        channel: channel.CONNECT,
        clientId: this._dispatcher.clientId,
        connectionType: this._dispatcher.connectionType
      },
      {},
      this._cycleConnection,
      this
    );
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  // MAY include:   * ext                                * clientId
  //                * id                  MAY include:   * error
  //                                                     * ext
  //                                                     * id
  disconnect: function() {
    if (this._state !== this.CONNECTED) return;
    this._state = this.DISCONNECTED;

    this.info('Disconnecting ?', this._dispatcher.clientId);
    var promise = new publication();

    this._sendMessage(
      {
        channel: channel.DISCONNECT,
        clientId: this._dispatcher.clientId
      },
      {},
      function(response) {
        if (response.successful) {
          this._dispatcher.close();
          promise.setDeferredStatus('succeeded');
        } else {
          promise.setDeferredStatus('failed', error$1.parse(response.error));
        }
      },
      this
    );

    this.info('Clearing channel listeners for ?', this._dispatcher.clientId);
    this._channels = new channel.Set();

    return promise;
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * subscription                       * clientId
  // MAY include:   * ext                                * subscription
  //                * id                  MAY include:   * error
  //                                                     * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  subscribe: function(channel$1, callback, context) {
    if (channel$1 instanceof Array)
      return array.map(
        channel$1,
        function(c) {
          return this.subscribe(c, callback, context);
        },
        this
      );

    var subscription$1 = new subscription(this, channel$1, callback, context),
      force = callback === true,
      hasSubscribe = this._channels.hasSubscription(channel$1);

    if (hasSubscribe && !force) {
      this._channels.subscribe([channel$1], subscription$1);
      subscription$1.setDeferredStatus('succeeded');
      return subscription$1;
    }

    this.connect(function() {
      this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel$1);
      if (!force) this._channels.subscribe([channel$1], subscription$1);

      this._sendMessage(
        {
          channel: channel.SUBSCRIBE,
          clientId: this._dispatcher.clientId,
          subscription: channel$1
        },
        {},
        function(response) {
          if (!response.successful) {
            subscription$1.setDeferredStatus('failed', error$1.parse(response.error));
            return this._channels.unsubscribe(channel$1, subscription$1);
          }

          var channels = [].concat(response.subscription);
          this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);
          subscription$1.setDeferredStatus('succeeded');
        },
        this
      );
    }, this);

    return subscription$1;
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * subscription                       * clientId
  // MAY include:   * ext                                * subscription
  //                * id                  MAY include:   * error
  //                                                     * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  unsubscribe: function(channel$1, subscription) {
    if (channel$1 instanceof Array)
      return array.map(
        channel$1,
        function(c) {
          return this.unsubscribe(c, subscription);
        },
        this
      );

    var dead = this._channels.unsubscribe(channel$1, subscription);
    if (!dead) return;

    this.connect(function() {
      this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel$1);

      this._sendMessage(
        {
          channel: channel.UNSUBSCRIBE,
          clientId: this._dispatcher.clientId,
          subscription: channel$1
        },
        {},
        function(response) {
          if (!response.successful) return;

          var channels = [].concat(response.subscription);
          this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);
        },
        this
      );
    }, this);
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * data                               * successful
  // MAY include:   * clientId            MAY include:   * id
  //                * id                                 * error
  //                * ext                                * ext
  publish: function(channel, data, options) {
    validate_options(options || {}, ['attempts', 'deadline']);
    var publication$1 = new publication();

    this.connect(function() {
      this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);

      this._sendMessage(
        {
          channel: channel,
          data: data,
          clientId: this._dispatcher.clientId
        },
        options,
        function(response) {
          if (response.successful) publication$1.setDeferredStatus('succeeded');
          else publication$1.setDeferredStatus('failed', error$1.parse(response.error));
        },
        this
      );
    }, this);

    return publication$1;
  },

  _sendMessage: function(message, options, callback, context) {
    message.id = this._generateMessageId();

    var timeout = this._advice.timeout ? (1.2 * this._advice.timeout) / 1000 : 1.2 * this._dispatcher.retry;

    this.pipeThroughExtensions(
      'outgoing',
      message,
      null,
      function(message) {
        if (!message) return;
        if (callback) this._responseCallbacks[message.id] = [callback, context];
        this._dispatcher.sendMessage(message, timeout, options || {});
      },
      this
    );
  },

  _generateMessageId: function() {
    this._messageId += 1;
    if (this._messageId >= Math.pow(2, 32)) this._messageId = 0;
    return this._messageId.toString(36);
  },

  _receiveMessage: function(message) {
    var id = message.id,
      callback;

    if (message.successful !== undefined) {
      callback = this._responseCallbacks[id];
      delete this._responseCallbacks[id];
    }

    this.pipeThroughExtensions(
      'incoming',
      message,
      null,
      function(message) {
        if (!message) return;
        if (message.advice) this._handleAdvice(message.advice);
        this._deliverMessage(message);
        if (callback) callback[0].call(callback[1], message);
      },
      this
    );
  },

  _handleAdvice: function(advice) {
    extend$1(this._advice, advice);
    this._dispatcher.timeout = this._advice.timeout / 1000;

    if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {
      this._state = this.UNCONNECTED;
      this._dispatcher.clientId = null;
      this._cycleConnection();
    }
  },

  _deliverMessage: function(message) {
    if (!message.channel || message.data === undefined) return;
    this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);
    this._channels.distributeMessage(message);
  },

  _cycleConnection: function() {
    if (this._connectRequest) {
      this._connectRequest = null;
      this.info('Closed connection for ?', this._dispatcher.clientId);
    }
    var self = this;
    _commonjsHelpers.commonjsGlobal.setTimeout(function() {
      self.connect();
    }, this._advice.interval);
  }
});

extend$1(Client$1.prototype, deferrable);
extend$1(Client$1.prototype, publisher);
extend$1(Client$1.prototype, logging);
extend$1(Client$1.prototype, extensible);

var client$1 = Client$1;

var id_from_messages = function(messages) {
  var connect = array.filter([].concat(messages), function(message) {
    return message.channel === '/meta/connect';
  });
  return connect[0] && connect[0].clientId;
};

var content_types = {
  TYPE_JSON: { 'Content-Type': 'application/json; charset=utf-8' },
  TYPE_SCRIPT: { 'Content-Type': 'text/javascript; charset=utf-8' },
  TYPE_TEXT: { 'Content-Type': 'text/plain; charset=utf-8' }
};

var StaticServer = _class({
  initialize: function(directory, pathRegex) {
    this._directory = directory;
    this._pathRegex = pathRegex;
    this._pathMap = {};
    this._index = {};
  },

  map: function(requestPath, filename) {
    this._pathMap[requestPath] = filename;
  },

  test: function(pathname) {
    return this._pathRegex.test(pathname);
  },

  call: function(request, response) {
    var pathname = url__default['default'].parse(request.url, true).pathname,
      filename = path__default['default'].basename(pathname);

    filename = this._pathMap[filename] || filename;
    this._index[filename] = this._index[filename] || {};

    var cache = this._index[filename],
      fullpath = path__default['default'].join(this._directory, filename);

    try {
      cache.content = cache.content || fs__default['default'].readFileSync(fullpath);
      cache.digest =
        cache.digest ||
        crypto__default['default']
          .createHash('sha1')
          .update(cache.content)
          .digest('hex');
      cache.mtime = cache.mtime || fs__default['default'].statSync(fullpath).mtime;
    } catch (error) {
      response.writeHead(404, {});
      return response.end();
    }

    var type = /\.js$/.test(pathname) ? 'TYPE_SCRIPT' : 'TYPE_JSON',
      ims = request.headers['if-modified-since'];

    var headers = {
      ETag: cache.digest,
      'Last-Modified': cache.mtime.toGMTString()
    };

    if (request.headers['if-none-match'] === cache.digest) {
      response.writeHead(304, headers);
      response.end();
    } else if (ims && cache.mtime <= new Date(ims)) {
      response.writeHead(304, headers);
      response.end();
    } else {
      headers['Content-Length'] = cache.content.length;
      extend$1(headers, content_types[type]);
      response.writeHead(200, headers);
      response.end(cache.content);
    }
  }
});

var static_server = StaticServer;

var EventSource$1 = websocket.EventSource;

var NodeAdapter = _class({
  className: 'NodeAdapter',
  DEFAULT_ENDPOINT: '/bayeux',
  SCRIPT_PATH: 'faye-browser-min.js',

  VALID_JSONP_CALLBACK: /^[a-z_\$][a-z0-9_\$]*(\.[a-z_\$][a-z0-9_\$]*)*$/i,

  initialize: function(options) {
    this._options = options || {};
    validate_options(this._options, ['engine', 'mount', 'ping', 'timeout', 'extensions', 'websocketExtensions']);

    this._extensions = [];
    this._endpoint = this._options.mount || this.DEFAULT_ENDPOINT;
    this._endpointRe = new RegExp('^' + this._endpoint.replace(/\/$/, '') + '(/[^/]*)*(\\.[^\\.]+)?$');
    this._server = server.create(this._options);

    this._static = new static_server(path__default['default'].join(__dirname, '..', '..', 'client'), /\.(?:js|map)$/);
    this._static.map(path__default['default'].basename(this._endpoint) + '.js', this.SCRIPT_PATH);
    this._static.map('client.js', this.SCRIPT_PATH);

    var extensions = this._options.extensions,
      websocketExtensions = this._options.websocketExtensions,
      i,
      n;

    if (extensions) {
      extensions = [].concat(extensions);
      for (i = 0, n = extensions.length; i < n; i++) this.addExtension(extensions[i]);
    }

    if (websocketExtensions) {
      websocketExtensions = [].concat(websocketExtensions);
      for (i = 0, n = websocketExtensions.length; i < n; i++) this.addWebsocketExtension(websocketExtensions[i]);
    }
  },

  listen: function() {
    throw new Error('The listen() method is deprecated - use the attach() method to bind Faye to an http.Server');
  },

  addExtension: function(extension) {
    return this._server.addExtension(extension);
  },

  removeExtension: function(extension) {
    return this._server.removeExtension(extension);
  },

  addWebsocketExtension: function(extension) {
    this._extensions.push(extension);
  },

  close: function() {
    return this._server.close();
  },

  getClient: function() {
    return (this._client = this._client || new client$1(this._server));
  },

  attach: function(httpServer) {
    this._overrideListeners(httpServer, 'request', 'handle');
    this._overrideListeners(httpServer, 'upgrade', 'handleUpgrade');
  },

  _overrideListeners: function(httpServer, event, method) {
    var listeners = httpServer.listeners(event),
      self = this;

    httpServer.removeAllListeners(event);

    httpServer.on(event, function(request) {
      if (self.check(request)) return self[method].apply(self, arguments);

      for (var i = 0, n = listeners.length; i < n; i++) listeners[i].apply(this, arguments);
    });
  },

  check: function(request) {
    var path = url__default['default'].parse(request.url, true).pathname;
    return !!this._endpointRe.test(path);
  },

  handle: function(request, response) {
    var requestUrl = url__default['default'].parse(request.url, true),
      requestMethod = request.method,
      self = this;

    request.originalUrl = request.url;

    request.on('error', function(error) {
      self._returnError(response, error);
    });
    response.on('error', function(error) {
      self._returnError(null, error);
    });

    if (this._static.test(requestUrl.pathname)) return this._static.call(request, response);

    // http://groups.google.com/group/faye-users/browse_thread/thread/4a01bb7d25d3636a
    if (requestMethod === 'OPTIONS' || request.headers['access-control-request-method'] === 'POST')
      return this._handleOptions(response);

    if (EventSource$1.isEventSource(request)) return this.handleEventSource(request, response);

    if (requestMethod === 'GET') return this._callWithParams(request, response, requestUrl.query);

    if (requestMethod === 'POST')
      return this._concatStream(
        request,
        function(data) {
          var type = (request.headers['content-type'] || '').split(';')[0],
            params = type === 'application/json' ? { message: data } : querystring__default['default'].parse(data);

          request.body = data;
          this._callWithParams(request, response, params);
        },
        this
      );

    this._returnError(response, { message: 'Unrecognized request type' });
  },

  _callWithParams: function(request, response, params) {
    if (!params.message)
      return this._returnError(response, {
        message: 'Received request with no message: ' + this._formatRequest(request)
      });

    try {
      this.debug('Received message via HTTP ' + request.method + ': ?', params.message);

      var message = this._parseJSON(params.message),
        jsonp = params.jsonp || constants.JSONP_CALLBACK,
        isGet = request.method === 'GET',
        type = isGet ? content_types.TYPE_SCRIPT : content_types.TYPE_JSON,
        headers = extend$1({}, type),
        origin = request.headers.origin;

      if (!this.VALID_JSONP_CALLBACK.test(jsonp))
        return this._returnError(response, { message: 'Invalid JSON-P callback: ' + jsonp });

      if (origin) headers['Access-Control-Allow-Origin'] = origin;
      headers['Cache-Control'] = 'no-cache, no-store';
      headers['X-Content-Type-Options'] = 'nosniff';

      this._server.process(
        message,
        request,
        function(replies) {
          var body = to_json(replies);

          if (isGet) {
            body = '/**/' + jsonp + '(' + this._jsonpEscape(body) + ');';
            headers['Content-Disposition'] = 'attachment; filename=f.txt';
          }

          headers['Content-Length'] = new Buffer(body, 'utf8').length.toString();

          this.debug('HTTP response: ?', body);
          response.writeHead(200, headers);
          response.end(body);
        },
        this
      );
    } catch (error) {
      this._returnError(response, error);
    }
  },

  _jsonpEscape: function(json) {
    return json.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
  },

  handleUpgrade: function(request, socket, head) {
    var options = { extensions: this._extensions, ping: this._options.ping },
      ws = new websocket(request, socket, head, [], options),
      clientId = null,
      self = this;

    request.originalUrl = request.url;

    ws.onmessage = function(event) {
      try {
        self.debug('Received message via WebSocket[' + ws.version + ']: ?', event.data);

        var message = self._parseJSON(event.data),
          cid = id_from_messages(message);

        if (clientId && cid && cid !== clientId) self._server.closeSocket(clientId, false);
        self._server.openSocket(cid, ws, request);
        if (cid) clientId = cid;

        self._server.process(message, request, function(replies) {
          if (ws) ws.send(to_json(replies));
        });
      } catch (error) {
        console.log(error.stack);
        self.error(error.message + '\nBacktrace:\n' + error.stack);
      }
    };

    ws.onclose = function(event) {
      self._server.closeSocket(clientId);
      ws = null;
    };
  },

  handleEventSource: function(request, response) {
    var es = new EventSource$1(request, response, { ping: this._options.ping }),
      clientId = es.url.split('/').pop(),
      self = this;

    this.debug('Opened EventSource connection for ?', clientId);
    this._server.openSocket(clientId, es, request);

    es.onclose = function(event) {
      self._server.closeSocket(clientId);
      es = null;
    };
  },

  _handleOptions: function(response) {
    var headers = {
      'Access-Control-Allow-Credentials': 'false',
      'Access-Control-Allow-Headers': 'Accept, Authorization, Content-Type, Pragma, X-Requested-With',
      'Access-Control-Allow-Methods': 'POST, GET',
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Max-Age': '86400'
    };

    response.writeHead(200, headers);
    response.end('');
  },

  _concatStream: function(stream, callback, context) {
    var chunks = [],
      length = 0;

    stream.on('data', function(chunk) {
      chunks.push(chunk);
      length += chunk.length;
    });

    stream.on('end', function() {
      var buffer = new Buffer(length),
        offset = 0;

      for (var i = 0, n = chunks.length; i < n; i++) {
        chunks[i].copy(buffer, offset);
        offset += chunks[i].length;
      }
      callback.call(context, buffer.toString('utf8'));
    });
  },

  _parseJSON: function(json) {
    var data = JSON.parse(json);
    if (typeof data === 'object') return data;
    throw new SyntaxError('JSON messages must contain an object or array');
  },

  _formatRequest: function(request) {
    var method = request.method.toUpperCase(),
      string = 'curl -X ' + method;

    string += " 'http://" + request.headers.host + request.url + "'";
    if (method === 'POST') {
      string += " -H 'Content-Type: " + request.headers['content-type'] + "'";
      string += " -d '" + request.body + "'";
    }
    return string;
  },

  _returnError: function(response, error) {
    var message = error.message;
    if (error.stack) message += '\nBacktrace:\n' + error.stack;
    this.error(message);

    if (!response) return;

    response.writeHead(400, content_types.TYPE_TEXT);
    response.end('Bad request');
  }
});

for (var method$3 in publisher)
  (function(method) {
    NodeAdapter.prototype[method] = function() {
      return this._server._engine[method].apply(this._server._engine, arguments);
    };
  })(method$3);

extend$1(NodeAdapter.prototype, logging);

var node_adapter = NodeAdapter;

var Faye = {
  VERSION: constants.VERSION,

  Client: client$1,
  Scheduler: scheduler,
  NodeAdapter: node_adapter
};

logging.wrapper = Faye;

var faye_node = Faye;

/**
 * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html
 *
 * For use with Streaming.prototype.createClient()
 **/
var StreamingExtension = {};

/**
 * Constructor for an auth failure detector extension
 *
 * Based on new feature released with Salesforce Spring '18:
 * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=
 *
 * Example triggering error message:
 *
 * ```
 * {
 *   "ext":{
 *     "sfdc":{"failureReason":"401::Authentication invalid"},
 *     "replay":true},
 *   "advice":{"reconnect":"none"},
 *   "channel":"/meta/handshake",
 *   "error":"403::Handshake denied",
 *   "successful":false
 * }
 * ```
 *
 * Example usage:
 *
 * ```javascript
 * const conn = new jsforce.Connection({ … });
 *
 * const channel = "/event/My_Event__e";
 *
 * // Exit the Node process when auth fails
 * const exitCallback = () => process.exit(1);
 * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);
 *
 * const fayeClient = conn.streaming.createClient([ authFailureExt ]);
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 *
 * @param {Function} failureCallback - Invoked when authentication becomes invalid
 */
StreamingExtension.AuthFailure = function(failureCallback) {
  this.incoming = function(message, callback) {
    if (
      (message.channel === '/meta/connect' || message.channel === '/meta/handshake') &&
      message.advice &&
      message.advice.reconnect == 'none'
    ) {
      failureCallback(message);
    } else {
      callback(message);
    }
  };
};

/**
 * Constructor for a durable streaming replay extension
 *
 * Modified from original Salesforce demo source code:
 * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource
 *
 * Example usage:
 *
 * ```javascript
 * const conn = new jsforce.Connection({ … });
 *
 * const channel = "/event/My_Event__e";
 * const replayId = -2; // -2 is all retained events
 *
 * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);
 *
 * const fayeClient = conn.streaming.createClient([ replayExt ]);
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 */
StreamingExtension.Replay = function(channel, replayId) {
  var REPLAY_FROM_KEY = 'replay';

  var _extensionEnabled = replayId != null ? true : false;
  var _replay = replayId;
  var _channel = channel;

  this.setExtensionEnabled = function(extensionEnabled) {
    _extensionEnabled = extensionEnabled;
  };

  this.setReplay = function(replay) {
    _replay = parseInt(replay, 10);
  };

  this.setChannel = function(channel) {
    _channel = channel;
  };

  this.incoming = function(message, callback) {
    if (message.channel === '/meta/handshake') {
      if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {
        _extensionEnabled = true;
      }
    } else if (message.channel === _channel && message.data && message.data.event && message.data.event.replayId) {
      _replay = message.data.event.replayId;
    }
    callback(message);
  };

  this.outgoing = function(message, callback) {
    if (message.channel === '/meta/subscribe' && message.subscription === _channel) {
      if (_extensionEnabled) {
        if (!message.ext) {
          message.ext = {};
        }

        var replayFromMap = {};
        replayFromMap[_channel] = _replay;

        // add "ext : { "replay" : { CHANNEL : REPLAY_VALUE }}" to subscribe message
        message.ext[REPLAY_FROM_KEY] = replayFromMap;
      }
    }
    callback(message);
  };
};

var streamingExtension = StreamingExtension;

/**
 * @file Manages Streaming APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var events = events__default['default'];

/**
 * Streaming API topic class
 *
 * @class Streaming~Topic
 * @param {Streaming} steaming - Streaming API object
 * @param {String} name - Topic name
 */
var Topic = function(streaming, name) {
  this._streaming = streaming;
  this.name = name;
};

/**
 * @typedef {Object} Streaming~StreamingMessage
 * @prop {Object} event
 * @prop {Object} event.type - Event type
 * @prop {Record} sobject - Record information
 */
/**
 * Subscribe listener to topic
 *
 * @method Streaming~Topic#subscribe
 * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Topic.prototype.subscribe = function(listener) {
  return this._streaming.subscribe(this.name, listener);
};

/**
 * Unsubscribe listener from topic
 *
 * @method Streaming~Topic#unsubscribe
 * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener
 * @returns {Streaming~Topic}
 */
Topic.prototype.unsubscribe = function(listener) {
  this._streaming.unsubscribe(this.name, listener);
  return this;
};

/*--------------------------------------------*/

/**
 * Streaming API Generic Streaming Channel
 *
 * @class Streaming~Channel
 * @param {Streaming} steaming - Streaming API object
 * @param {String} name - Channel name (starts with "/u/")
 */
var Channel$1 = function(streaming, name) {
  this._streaming = streaming;
  this._name = name;
};

/**
 * Subscribe to channel
 *
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Channel$1.prototype.subscribe = function(listener) {
  return this._streaming.subscribe(this._name, listener);
};

Channel$1.prototype.unsubscribe = function(listener) {
  this._streaming.unsubscribe(this._name, listener);
  return this;
};

Channel$1.prototype.push = function(events, callback) {
  var isArray = core.isArray(events);
  events = isArray ? events : [events];
  var conn = this._streaming._conn;
  if (!this._id) {
    this._id = conn
      .sobject('StreamingChannel')
      .findOne({ Name: this._name }, 'Id')
      .then(function(rec) {
        return rec.Id;
      });
  }
  return this._id
    .then(function(id) {
      var channelUrl = '/sobjects/StreamingChannel/' + id + '/push';
      return conn.requestPost(channelUrl, { pushEvents: events });
    })
    .then(function(rets) {
      return isArray ? rets : rets[0];
    })
    .thenCall(callback);
};

/*--------------------------------------------*/

/**
 * Streaming API class
 *
 * @class
 * @extends events.EventEmitter
 * @param {Connection} conn - Connection object
 */
var Streaming = function(conn) {
  this._conn = conn;
};

inherits(Streaming, events.EventEmitter);

/** @private **/
Streaming.prototype._createClient = function(forChannelName, extensions) {
  // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.
  var needsReplayFix = typeof forChannelName === 'string' && forChannelName.indexOf('/u/') === 0;
  var endpointUrl = [
    this._conn.instanceUrl,
    // special endpoint "/cometd/replay/xx.x" is only available in 36.0.
    // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm
    'cometd' + (needsReplayFix === true && this._conn.version === '36.0' ? '/replay' : ''),
    this._conn.version
  ].join('/');
  var fayeClient = new faye_node.Client(endpointUrl, {});
  fayeClient.setHeader('Authorization', 'OAuth ' + this._conn.accessToken);
  if (extensions instanceof Array) {
    extensions.forEach(function(extension) {
      fayeClient.addExtension(extension);
    });
  }
  if (fayeClient._dispatcher.getConnectionTypes().indexOf('callback-polling') === -1) {
    // prevent streaming API server error
    fayeClient._dispatcher.selectTransport('long-polling');
    fayeClient._dispatcher._transport.batching = false;
  }
  return fayeClient;
};

/** @private **/
Streaming.prototype._getFayeClient = function(channelName) {
  var isGeneric = channelName.indexOf('/u/') === 0;
  var clientType = isGeneric ? 'generic' : 'pushTopic';
  if (!this._fayeClients || !this._fayeClients[clientType]) {
    this._fayeClients = this._fayeClients || {};
    this._fayeClients[clientType] = this._createClient(channelName);
  }
  return this._fayeClients[clientType];
};

/**
 * Get named topic
 *
 * @param {String} name - Topic name
 * @returns {Streaming~Topic}
 */
Streaming.prototype.topic = function(name) {
  this._topics = this._topics || {};
  var topic = (this._topics[name] = this._topics[name] || new Topic(this, name));
  return topic;
};

/**
 * Get Channel for Id
 * @param {String} channelId - Id of StreamingChannel object
 * @returns {Streaming~Channel}
 */
Streaming.prototype.channel = function(channelId) {
  return new Channel$1(this, channelId);
};

/**
 * Subscribe topic/channel
 *
 * @param {String} name - Topic name
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Streaming.prototype.subscribe = function(name, listener) {
  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;
  var fayeClient = this._getFayeClient(channelName);
  return fayeClient.subscribe(channelName, listener);
};

/**
 * Unsubscribe topic
 *
 * @param {String} name - Topic name
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Streaming}
 */
Streaming.prototype.unsubscribe = function(name, listener) {
  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;
  var fayeClient = this._getFayeClient(channelName);
  fayeClient.unsubscribe(channelName, listener);
  return this;
};

/**
 * Create a Streaming client, optionally with extensions
 *
 * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html
 *
 * Example usage:
 *
 * ```javascript
 * // Establish a Salesforce connection. (Details elided)
 * const conn = new jsforce.Connection({ … });
 *
 * const fayeClient = conn.streaming.createClient();
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 *
 * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:
 *
 * ```javascript
 * // Establish a Salesforce connection. (Details elided)
 * const conn = new jsforce.Connection({ … });
 *
 * const channel = "/event/My_Event__e";
 * const replayId = -2; // -2 is all retained events
 *
 * const exitCallback = () => process.exit(1);
 * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);
 *
 * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);
 *
 * const fayeClient = conn.streaming.createClient([
 *   authFailureExt,
 *   replayExt
 * ]);
 *
 * const subscription = fayeClient.subscribe(channel, data => {
 *   console.log('topic received data', data);
 * });
 *
 * subscription.cancel();
 * ```
 *
 * @param {Array} Extensions - Optional, extensions to apply to the Faye client
 * @returns {FayeClient} - Faye client object
 */
Streaming.prototype.createClient = function(extensions) {
  return this._createClient(null, extensions);
};

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
core$2.on('connection:new', function(conn) {
  conn.streaming = new Streaming(conn);
});

/*
 *
 */
core$2.StreamingExtension = streamingExtension;

/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 * API class for Tooling API call
 *
 * @class
 * @param {Connection} conn - Connection
 */
var Tooling = function(conn) {
  this._conn = conn;
  this._logger = conn._logger;
  var delegates = [
    'query',
    'queryMore',
    '_toRecordResult',
    'create',
    '_createSingle',
    '_createParallel',
    '_createMany',
    'insert',
    'retrieve',
    '_retrieveSingle',
    '_retrieveParallel',
    '_retrieveMany',
    'update',
    '_updateSingle',
    '_updateParallel',
    '_updateMany',
    'upsert',
    'del',
    'delete',
    'destroy',
    '_destroySingle',
    '_destroyParallel',
    '_destroyMany',
    'describe',
    'describeGlobal',
    'sobject'
  ];
  delegates.forEach(function(method) {
    this[method] = conn.constructor.prototype[method];
  }, this);

  this.cache = new cache$2();

  var cacheOptions = {
    key: function(type) {
      return type ? 'describe.' + type : 'describe';
    }
  };
  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);
  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);
  this.describeSObject$ = this.describe$;
  this.describeSObject = this.describe;

  cacheOptions = { key: 'describeGlobal' };
  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);
  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);

  this.initialize();
};

/**
 * Initialize tooling API
 * @protected
 */
Tooling.prototype.initialize = function() {
  this.sobjects = {};
  this.cache.clear();
  this.cache.get('describeGlobal').removeAllListeners('value');
  this.cache.get('describeGlobal').on(
    'value',
    core.bind(function(res) {
      if (res.result) {
        var types = core.map(res.result.sobjects, function(so) {
          return so.name;
        });
        types.forEach(this.sobject, this);
      }
    }, this)
  );
};

/**
 * @private
 */
Tooling.prototype._baseUrl = function() {
  return this._conn._baseUrl() + '/tooling';
};

/**
 * @private
 */
Tooling.prototype._supports = function(feature) {
  // should return false in order not to use compsite collection
  if (feature === 'sobject-collection') {
    return false;
  }
  return this._conn._supports.apply(this._conn, arguments);
};

/**
 * @private
 */
Tooling.prototype.request = function() {
  return this._conn.request.apply(this._conn, arguments);
};

/**
 * Execute query by using SOQL
 *
 * @param {String} soql - SOQL string
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
/**
 * Query next record set by using query locator
 *
 * @method Tooling#query
 * @param {String} locator - Next record set locator
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
/**
 * Retrieve specified records
 *
 * @method Tooling#queryMore
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A record ID or array of record IDs
 * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
 * @returns {Promise.<Record|Array.<Record>>}
 */

/**
 * Synonym of Tooling#create()
 *
 * @method Tooling#insert
 * @param {String} type - SObject Type
 * @param {Object|Array.<Object>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Create records
 *
 * @method Tooling#create
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Update records
 *
 * @method Tooling#update
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to update
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Upsert records
 *
 * @method Tooling#upsert
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - Record or array of records to upsert
 * @param {String} extIdField - External ID field name
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Synonym of Tooling#destroy()
 *
 * @method Tooling#delete
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Synonym of Tooling#destroy()
 *
 * @method Tooling#del
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Delete records
 *
 * @method Tooling#destroy
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Synonym of Tooling#describe()
 *
 * @method Tooling#describeSObject
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */
/**
 * Describe SObject metadata
 *
 * @method Tooling#describe
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */

/**
 * Describe global SObjects
 *
 * @method Tooling#describeGlobal
 * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function
 * @returns {Promise.<DescribeGlobalResult>}
 */

/**
 * Get SObject instance
 *
 * @method Tooling#sobject
 * @param {String} type - SObject Type
 * @returns {SObject}
 */

/**
 * @typedef {Object} Tooling~ExecuteAnonymousResult
 * @prop {Boolean} compiled - Flag if the query is compiled successfully
 * @prop {String} compileProblem - Error reason in compilation
 * @prop {Boolean} success - Flag if the code is executed successfully
 * @prop {Number} line - Line number for the error
 * @prop {Number} column - Column number for the error
 * @prop {String} exceptionMessage - Exception message
 * @prop {String} exceptionStackTrace - Exception stack trace
 */
/**
 * Executes Apex code anonymously
 *
 * @param {String} body - Anonymous Apex code
 * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~ExecuteAnonymousResult>}
 */
Tooling.prototype.executeAnonymous = function(body, callback) {
  var url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
  return this.request(url).thenCall(callback);
};

/**
 * Executes Apex tests asynchronously
 *
 * @param {Array.<String>} classids - Comma separated list of class IDs
 * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~ExecuteAnonymousResult>}
 */
Tooling.prototype.runTestsAsynchronous = function(classids, callback) {
  var url = this._baseUrl() + '/runTestsAsynchronous/';
  return this._conn.requestPost(url, { classids: classids.join(',') }, undefined, callback);
};

/**
 * Executes Apex tests synchronously
 *
 * @param {Array.<String>} classnames - Comma separated list of class Names
 * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~ExecuteAnonymousResult>}
 */
Tooling.prototype.runTestsSynchronous = function(classnames, callback) {
  var url = this._baseUrl() + '/runTestsSynchronous/';
  return this._conn.requestPost(url, { classnames: classnames.join(',') }, undefined, callback);
};

/**
 * @typedef {Object} Tooling~CompletionsResult
 * @prop {Object} publicDeclarations
 */
/**
 * Retrieves available code completions of the referenced type
 *
 * @param {String} [type] - completion type (default 'apex')
 * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~CompletionsResult>}
 */
Tooling.prototype.completions = function(type, callback) {
  if (!core.isString(type)) {
    callback = type;
    type = 'apex';
  }
  var url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
  return this.request(url).thenCall(callback);
};

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
core$2.on('connection:new', function(conn) {
  conn.tooling = new Tooling(conn);
});

/*global process */

/*  */
var Registry = function(configFilePath) {
  this._registryConfig = {};
};

/**
 * @private
 * @override
 */
Registry.prototype._saveConfig = function() {
  throw new Error('_saveConfig must be implemented in subclass');
};

Registry.prototype._getClients = function() {
  return this._registryConfig.clients || (this._registryConfig.clients = {});
};

Registry.prototype._getConnections = function() {
  return this._registryConfig.connections || (this._registryConfig.connections = {});
};

Registry.prototype.getConnectionNames = function() {
  return Object.keys(this._getConnections());
};

Registry.prototype.getConnection = function(name) {
  return new connection(this.getConnectionConfig(name));
};

Registry.prototype.getConnectionConfig = function(name) {
  if (!name) {
    name = this._registryConfig['default'];
  }
  var connections = this._getConnections();
  var connConfig = connections[name];
  if (connConfig) {
    connConfig = core.clone(connConfig);
    if (connConfig.client) {
      connConfig.oauth2 = core.clone(this.getClient(connConfig.client));
    }
    delete connConfig.client;
  }
  return connConfig;
};

Registry.prototype.saveConnectionConfig = function(name, connConfig) {
  var connections = this._getConnections();
  connConfig = core.clone(connConfig);
  if (connConfig.oauth2) {
    var clientName = this._findClientName(connConfig.oauth2);
    if (clientName) {
      connConfig.client = clientName;
    }
    delete connConfig.oauth2;
  }
  connections[name] = connConfig;
  this._saveConfig();
};

Registry.prototype._findClientName = function(clientConfig) {
  var clients = this._getClients();
  for (var name in clients) {
    var client = clients[name];
    if (
      client.clientId === clientConfig.clientId &&
      (client.loginUrl || 'https://login.salesforce.com') === clientConfig.loginUrl
    ) {
      return name;
    }
  }
  return null;
};

Registry.prototype.setDefaultConnection = function(name) {
  this._registryConfig['default'] = name;
  this._saveConfig();
};

Registry.prototype.removeConnectionConfig = function(name) {
  var connections = this._getConnections();
  delete connections[name];
  this._saveConfig();
};

Registry.prototype.getClient = function(name) {
  var clientConfig = this._getClients()[name];
  return clientConfig && core.clone(clientConfig);
};

Registry.prototype.getClientNames = function() {
  return Object.keys(this._getClients());
};

Registry.prototype.registerClient = function(name, clientConfig) {
  var clients = this._getClients();
  clients[name] = clientConfig;
  this._saveConfig();
};

/* ------------------------------------------------------------------------- */

var registry = Registry;

/* ------------------------------------------------------------------------- */

var FileRegistry = function(configFilePath) {
  FileRegistry.super_.call(this);
  this._configFilePath = configFilePath || this._getDefaultConfigFilePath();
  try {
    var data = fs__default['default'].readFileSync(this._configFilePath, 'utf-8');
    this._registryConfig = JSON.parse(data);
  } catch (e) {}
};

inherits(FileRegistry, registry);

/**
 *
 */
FileRegistry.prototype._getDefaultConfigFilePath = function() {
  var homeDir = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];
  var configDir = homeDir + '/.jsforce';
  return configDir + '/config.json';
};

/**
 * @private
 */
FileRegistry.prototype._saveConfig = function() {
  var data = JSON.stringify(this._registryConfig, null, 4);
  try {
    fs__default['default'].writeFileSync(this._configFilePath, data);
    fs__default['default'].chmodSync(this._configFilePath, '600');
  } catch (e) {
    var configDir = path__default['default'].dirname(this._configFilePath);
    fs__default['default'].mkdirSync(configDir);
    fs__default['default'].chmodSync(configDir, '700');
    fs__default['default'].writeFileSync(this._configFilePath, data);
    fs__default['default'].chmodSync(this._configFilePath, '600');
  }
};

/**
 *
 */
var fileRegistry = FileRegistry;

core$2.registry = new fileRegistry();

/**
 * @file JSforce API root object
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

var jsforce = core$2;

var jsforce$1 = jsforce;

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/**
 * The 'async' in our request override replaces the jsforce promise with the node promise, then returns it back to
 * jsforce which expects .thenCall. Add .thenCall to the node promise to prevent breakage.
 */
// @ts-ignore
Promise.prototype.thenCall = jsforce$1.Promise.prototype.thenCall;
const clientId = `sfdx toolbelt:${process.env.SFDX_SET_CLIENT_IDS || ''}`;
const SFDX_HTTP_HEADERS = {
  'content-type': 'application/json',
  'user-agent': clientId
};
/**
 * Handles connections and requests to Salesforce Orgs.
 *
 * ```
 * // Uses latest API version
 * const connection = await Connection.create({
 *   authInfo: await AuthInfo.create({ username: 'myAdminUsername' })
 * });
 * connection.query('SELECT Name from Account');
 *
 * // Use different API version
 * connection.setApiVersion("42.0");
 * connection.query('SELECT Name from Account');
 * ```
 */
class Connection$1 extends jsforce$1.Connection {
  /**
   * Creates an instance of a Connection. Performs additional async initializations.
   * @param options Constructor options.
   */
  static async create(options) {
    const _aggregator = options.configAggregator || (await config_configAggregator.ConfigAggregator.create());
    const versionFromConfig = index.lib.asString(_aggregator.getInfo('apiVersion').value);
    const baseOptions = {
      // Set the API version obtained from the config aggregator.
      // Will use jsforce default if undefined.
      version: versionFromConfig,
      callOptions: {
        client: clientId
      }
    };
    // Get connection options from auth info and create a new jsForce connection
    options.connectionOptions = Object.assign(baseOptions, options.authInfo.getConnectionOptions());
    const conn = new this(options);
    await conn.init();
    if (!versionFromConfig) {
      await conn.useLatestApiVersion();
    }
    return conn;
  }
  /**
   * Constructor
   * **Do not directly construct instances of this class -- use {@link Connection.create} instead.**
   * @param options The options for the class instance.
   * @ignore
   */
  constructor(options) {
    super(options.connectionOptions || {});
    this.tooling.autoFetchQuery = Connection$1.prototype.autoFetchQuery;
    this.options = options;
  }
  /**
   * Async initializer.
   */
  async init() {
    this.logger = this._logger = this.tooling._logger = await logger$1.Logger.child('connection');
  }
  /**
   * Send REST API request with given HTTP request info, with connected session information
   * and SFDX headers.
   *
   * @param request HTTP request object or URL to GET request.
   * @param options HTTP API request options.
   */
  async request(request, options) {
    const _request = index.lib.isString(request) ? { method: 'GET', url: request } : request;
    _request.headers = Object.assign({}, SFDX_HTTP_HEADERS, _request.headers);
    this.logger.debug(`request: ${JSON.stringify(_request)}`);
    //  The "as" is a workaround for the jsforce typings.
    return super.request(_request, options);
  }
  /**
   * Send REST API request with given HTTP request info, with connected session information
   * and SFDX headers. This method returns a raw http response which includes a response body and statusCode.
   *
   * @param request HTTP request object or URL to GET request.
   */
  async requestRaw(request) {
    const _headers = this.accessToken ? { Authorization: `Bearer ${this.accessToken}` } : {};
    index$1.lib.merge(_headers, SFDX_HTTP_HEADERS, request.headers);
    return this._transport.httpRequest({
      method: request.method,
      url: request.url,
      headers: _headers,
      body: request.body
    });
  }
  /**
   * The Force API base url for the instance.
   */
  baseUrl() {
    // essentially the same as pathJoin(super.instanceUrl, 'services', 'data', `v${super.version}`);
    return super._baseUrl();
  }
  /**
   * Retrieves the highest api version that is supported by the target server instance.
   */
  async retrieveMaxApiVersion() {
    const versions = await this.request(`${this.instanceUrl}/services/data`);
    this.logger.debug(`response for org versions: ${versions}`);
    const max = index.lib.ensure(index$1.lib.maxBy(versions, version => version.version));
    return max.version;
  }
  /**
   * Use the latest API version available on `this.instanceUrl`.
   */
  async useLatestApiVersion() {
    try {
      this.setApiVersion(await this.retrieveMaxApiVersion());
    } catch (err) {
      // Don't fail if we can't use the latest, just use the default
      this.logger.warn('Failed to set the latest API version:', err);
    }
  }
  /**
   * Get the API version used for all connection requests.
   */
  getApiVersion() {
    return this.version;
  }
  /**
   * Set the API version for all connection requests.
   *
   * **Throws** *{@link SfdxError}{ name: 'IncorrectAPIVersion' }* Incorrect API version.
   * @param version The API version.
   */
  setApiVersion(version) {
    if (!util_sfdc.sfdc.validateApiVersion(version)) {
      throw new sfdxError.SfdxError(
        `Invalid API version ${version}. Expecting format "[1-9][0-9].0", i.e. 42.0`,
        'IncorrectAPIVersion'
      );
    }
    this.version = version;
  }
  /**
   * Getter for the AuthInfo.
   */
  getAuthInfoFields() {
    return this.options.authInfo.getFields();
  }
  /**
   * Getter for the auth fields.
   */
  getConnectionOptions() {
    return this.options.authInfo.getConnectionOptions();
  }
  /**
   * Getter for the username of the Salesforce Org.
   */
  getUsername() {
    return this.getAuthInfoFields().username;
  }
  /**
   * Returns true if this connection is using access token auth.
   */
  isUsingAccessToken() {
    return this.options.authInfo.isUsingAccessToken();
  }
  /**
   * Normalize a Salesforce url to include a instance information.
   * @param url Partial url.
   */
  normalizeUrl(url) {
    return this._normalizeUrl(url);
  }
  /**
   * Executes a query and auto-fetches (i.e., "queryMore") all results.  This is especially
   * useful with large query result sizes, such as over 2000 records.  The default maximum
   * fetch size is 10,000 records. Modify this via the options argument.
   * @param soql The SOQL string.
   * @param options The query options. NOTE: the autoFetch option will always be true.
   */
  async autoFetchQuery(soql, options = {}) {
    const config = await config_configAggregator.ConfigAggregator.create();
    // take the limit from the calling function, then the config, then default 10,000
    const maxFetch = config.getInfo('maxQueryLimit').value || options.maxFetch || 10000;
    const _options = Object.assign(options, {
      autoFetch: true,
      maxFetch
    });
    const records = [];
    this._logger.debug(`Auto-fetching query: ${soql}`);
    return new Promise((resolve, reject) => {
      const query = this.query(soql, _options)
        .on('record', rec => records.push(rec))
        .on('error', err => reject(err))
        .on('end', () => {
          const totalSize = index.lib.getNumber(query, 'totalSize') || 0;
          if (totalSize > records.length) {
            process.emitWarning(
              `The query result is missing ${totalSize -
                records.length} records due to a ${maxFetch} record limit. Increase the number of records returned by setting the config value "maxQueryLimit" or the environment variable "SFDX_MAX_QUERY_LIMIT" to ${totalSize} or greater than ${maxFetch}.`
            );
            this._logger.warn(
              `The query: ${soql} result is missing ${totalSize - records.length} records due to an API limit.`
            );
          }
          resolve({
            done: true,
            totalSize,
            records
          });
        });
    });
  }
}

exports.Connection = Connection$1;
exports.SFDX_HTTP_HEADERS = SFDX_HTTP_HEADERS;
exports.Transport = Transport;
exports.jsforce = jsforce$1;
//# sourceMappingURL=connection-44f077f0.js.map
