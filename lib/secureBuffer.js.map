{"version":3,"file":"secureBuffer.js","sources":["../src/secureBuffer.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { ensure, Optional } from '@salesforce/ts-types';\nimport * as crypto from 'crypto';\n\nconst cipherName = 'aes-256-cbc';\nconst cipherSize = 32;\n\n/**\n * Returns the intended type of the object to return. This is implementation specific.\n * @param buffer A buffer containing the decrypted secret.\n */\nexport type DecipherCallback<T> = (buffer: Buffer) => T;\n\n/**\n * Used to store and retrieve a sensitive information in memory. This is not meant for at rest encryption.\n *\n * ```\n * const sString: SecureBuffer<string> = new SecureBuffer();\n * sString.consume(secretTextBuffer);\n * const value: string = sString.value((buffer: Buffer): string => {\n *     const password: string = buffer.toString('utf8');\n *     // doSomething with the password\n *     // returns something of type <T>\n *     return testReturnValue;\n * });\n * ```\n */\nexport class SecureBuffer<T> {\n  private key = crypto.randomBytes(cipherSize);\n  private iv = crypto.randomBytes(16);\n\n  private secret?: Buffer;\n\n  /**\n   * Invokes a callback with a decrypted version of the buffer.\n   * @param cb The callback containing the decrypted buffer parameter that returns a desired.\n   * typed object. It's important to understand that once the callback goes out of scope the buffer parameters is\n   * overwritten with random data. Do not make a copy of this buffer and persist it!\n   */\n  public value(cb: DecipherCallback<T>): Optional<T> {\n    if (cb) {\n      const cipher = crypto.createDecipheriv(cipherName, this.key, this.iv);\n      const a = cipher.update(ensure(this.secret));\n      const b = cipher.final();\n      const c = Buffer.concat([a, b]);\n      try {\n        return cb(c);\n      } finally {\n        crypto.randomFillSync(a);\n        crypto.randomFillSync(b);\n        crypto.randomFillSync(c);\n      }\n    }\n  }\n\n  /**\n   * Overwrites the value of the encrypted secret with random data.\n   */\n  public clear() {\n    if (this.secret) {\n      crypto.randomFillSync(this.secret);\n    }\n    const cipher = crypto.createCipheriv(cipherName, this.key, this.iv);\n    this.secret = Buffer.concat([cipher.update(Buffer.from('')), cipher.final()]);\n  }\n\n  /**\n   * Consumes a buffer of data that's intended to be secret.\n   * @param buffer Data to encrypt. The input buffer is overwritten with random data after it's encrypted\n   * and assigned internally.\n   */\n  public consume(buffer: Buffer) {\n    let targetBuffer = buffer;\n    if (!targetBuffer) {\n      targetBuffer = Buffer.from('');\n    }\n    const cipher = crypto.createCipheriv(cipherName, this.key, this.iv);\n    this.secret = Buffer.concat([cipher.update(targetBuffer), cipher.final()]);\n    crypto.randomFillSync(targetBuffer);\n  }\n}\n"],"names":["crypto.randomBytes","crypto.createDecipheriv","ensure","crypto.randomFillSync","crypto.createCipheriv"],"mappings":";;;;;;;;AAAA;;;;;;AAUA,MAAM,UAAU,GAAG,aAAa,CAAC;AACjC,MAAM,UAAU,GAAG,EAAE,CAAC;AAQtB;;;;;;;;;;;;;;MAca,YAAY;IAAzB;QACU,QAAG,GAAGA,kBAAkB,CAAC,UAAU,CAAC,CAAC;QACrC,OAAE,GAAGA,kBAAkB,CAAC,EAAE,CAAC,CAAC;KAmDrC;;;;;;;IAzCQ,KAAK,CAAC,EAAuB;QAClC,IAAI,EAAE,EAAE;YACN,MAAM,MAAM,GAAGC,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YACtE,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAACC,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YACzB,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI;gBACF,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;aACd;oBAAS;gBACRC,qBAAqB,CAAC,CAAC,CAAC,CAAC;gBACzBA,qBAAqB,CAAC,CAAC,CAAC,CAAC;gBACzBA,qBAAqB,CAAC,CAAC,CAAC,CAAC;aAC1B;SACF;KACF;;;;IAKM,KAAK;QACV,IAAI,IAAI,CAAC,MAAM,EAAE;YACfA,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpC;QACD,MAAM,MAAM,GAAGC,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KAC/E;;;;;;IAOM,OAAO,CAAC,MAAc;QAC3B,IAAI,YAAY,GAAG,MAAM,CAAC;QAC1B,IAAI,CAAC,YAAY,EAAE;YACjB,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChC;QACD,MAAM,MAAM,GAAGA,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC3ED,qBAAqB,CAAC,YAAY,CAAC,CAAC;KACrC;;;;;"}