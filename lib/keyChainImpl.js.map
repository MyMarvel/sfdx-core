{"version":3,"file":"keyChainImpl.js","sources":["../src/keyChainImpl.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { asString, Dictionary, ensure, Nullable } from '@salesforce/ts-types';\nimport * as childProcess from 'child_process';\nimport * as nodeFs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { ConfigFile } from './config/configFile';\nimport { ConfigValue } from './config/configStore';\nimport { KeychainConfig } from './config/keychainConfig';\nimport { Global } from './global';\nimport { SfdxError, SfdxErrorConfig } from './sfdxError';\nimport { fs } from './util/fs';\n\nexport type FsIfc = Pick<typeof nodeFs, 'statSync'>;\n\n/* tslint:disable: no-bitwise */\n\nconst GET_PASSWORD_RETRY_COUNT = 3;\n\n/**\n * Helper to reduce an array of cli args down to a presentable string for logging.\n * @param optionsArray CLI command args.\n */\nfunction _optionsToString(optionsArray: string[]) {\n  return optionsArray.reduce((accum, element) => `${accum} ${element}`);\n}\n\n/**\n * Helper to determine if a program is executable. Returns `true` if the program is executable for the user. For\n * Windows true is always returned.\n * @param mode Stats mode.\n * @param gid Unix group id.\n * @param uid Unix user id.\n */\nconst _isExe = (mode: number, gid: number, uid: number) => {\n  if (process.platform === 'win32') {\n    return true;\n  }\n\n  return Boolean(\n    mode & parseInt('0001', 8) ||\n      (mode & parseInt('0010', 8) && process.getgid && gid === process.getgid()) ||\n      (mode & parseInt('0100', 8) && process.getuid && uid === process.getuid())\n  );\n};\n\n/**\n * Private helper to validate that a program exists on the file system and is executable.\n *\n * **Throws** *{@link SfdxError}{ name: 'MissingCredentialProgramError' }* When the OS credential program isn't found.\n *\n * **Throws** *{@link SfdxError}{ name: 'CredentialProgramAccessError' }* When the OS credential program isn't accessible.\n *\n * @param programPath The absolute path of the program.\n * @param fsIfc The file system interface.\n * @param isExeIfc Executable validation function.\n */\nconst _validateProgram = async (\n  programPath: string,\n  fsIfc: FsIfc,\n  isExeIfc: (mode: number, gid: number, uid: number) => boolean\n) => {\n  let noPermission;\n  try {\n    const stats = fsIfc.statSync(programPath);\n    noPermission = !isExeIfc(stats.mode, stats.gid, stats.uid);\n  } catch (e) {\n    throw SfdxError.create('@salesforce/core', 'encryption', 'MissingCredentialProgramError', [programPath]);\n  }\n\n  if (noPermission) {\n    throw SfdxError.create('@salesforce/core', 'encryption', 'CredentialProgramAccessError', [programPath]);\n  }\n};\n\n/**\n * Basic keychain interface.\n */\nexport interface PasswordStore {\n  /**\n   * Gets a password\n   * @param opts cli level password options.\n   * @param fn function callback for password.\n   * @param retryCount number of reties to get the password.\n   */\n  getPassword(\n    opts: ProgramOpts,\n    fn: (error: Nullable<Error>, password?: string) => void,\n    retryCount?: number\n  ): Promise<void>;\n\n  /**\n   * Sets a password.\n   * @param opts cli level password options.\n   * @param fn function callback for password.\n   */\n  setPassword(opts: ProgramOpts, fn: (error: Nullable<Error>, password?: string) => void): Promise<void>;\n}\n\n/**\n * @private\n */\nexport class KeychainAccess implements PasswordStore {\n  /**\n   * Abstract prototype for general cross platform keychain interaction.\n   * @param osImpl The platform impl for (linux, darwin, windows).\n   * @param fsIfc The file system interface.\n   */\n  constructor(private osImpl: OsImpl, private fsIfc: FsIfc) {}\n\n  /**\n   * Validates the os level program is executable.\n   */\n  public async validateProgram() {\n    await _validateProgram(this.osImpl.getProgram(), this.fsIfc, _isExe);\n  }\n\n  /**\n   * Returns a password using the native program for credential management.\n   * @param opts Options for the credential lookup.\n   * @param fn Callback function (err, password).\n   * @param retryCount Used internally to track the number of retries for getting a password out of the keychain.\n   */\n  public async getPassword(\n    opts: ProgramOpts,\n    fn: (error: Nullable<Error>, password?: string) => void,\n    retryCount = 0\n  ): Promise<void> {\n    if (opts.service == null) {\n      fn(SfdxError.create('@salesforce/core', 'encryption', 'KeyChainServiceRequiredError'));\n      return;\n    }\n\n    if (opts.account == null) {\n      fn(SfdxError.create('@salesforce/core', 'encryption', 'KeyChainAccountRequiredError'));\n      return;\n    }\n\n    await this.validateProgram();\n\n    const credManager = this.osImpl.getCommandFunc(opts, childProcess.spawn);\n\n    let stdout = '';\n    let stderr = '';\n\n    if (credManager.stdout) {\n      credManager.stdout.on('data', data => {\n        stdout += data;\n      });\n    }\n    if (credManager.stderr) {\n      credManager.stderr.on('data', data => {\n        stderr += data;\n      });\n    }\n\n    credManager.on('close', async code => {\n      try {\n        return await this.osImpl.onGetCommandClose(code, stdout, stderr, opts, fn);\n      } catch (e) {\n        if (e.retry) {\n          if (retryCount >= GET_PASSWORD_RETRY_COUNT) {\n            throw SfdxError.create('@salesforce/core', 'encryption', 'PasswordRetryError', [GET_PASSWORD_RETRY_COUNT]);\n          }\n          return this.getPassword(opts, fn, retryCount + 1);\n        } else {\n          // if retry\n          throw e;\n        }\n      }\n    });\n\n    if (credManager.stdin) {\n      credManager.stdin.end();\n    }\n  }\n\n  /**\n   * Sets a password using the native program for credential management.\n   * @param opts Options for the credential lookup.\n   * @param fn Callback function (err, password).\n   */\n  public async setPassword(opts: ProgramOpts, fn: (error: Nullable<Error>, password?: string) => void): Promise<void> {\n    if (opts.service == null) {\n      fn(SfdxError.create('@salesforce/core', 'encryption', 'KeyChainServiceRequiredError'));\n      return;\n    }\n\n    if (opts.account == null) {\n      fn(SfdxError.create('@salesforce/core', 'encryption', 'KeyChainAccountRequiredError'));\n      return;\n    }\n\n    if (opts.password == null) {\n      fn(SfdxError.create('@salesforce/core', 'encryption', 'PasswordRequiredError'));\n      return;\n    }\n\n    await _validateProgram(this.osImpl.getProgram(), this.fsIfc, _isExe);\n\n    const credManager = this.osImpl.setCommandFunc(opts, childProcess.spawn);\n\n    let stdout = '';\n    let stderr = '';\n\n    if (credManager.stdout) {\n      credManager.stdout.on('data', (data: string) => {\n        stdout += data;\n      });\n    }\n\n    if (credManager.stderr) {\n      credManager.stderr.on('data', (data: string) => {\n        stderr += data;\n      });\n    }\n\n    credManager.on(\n      'close',\n      async (code: number) => await this.osImpl.onSetCommandClose(code, stdout, stderr, opts, fn)\n    );\n\n    if (credManager.stdin) {\n      credManager.stdin.end();\n    }\n  }\n}\n\ninterface ProgramOpts {\n  account: string;\n  service: string;\n  password?: string;\n}\n\ninterface OsImpl {\n  getProgram(): string;\n  getProgramOptions(opts: ProgramOpts): string[];\n  getCommandFunc(\n    opts: ProgramOpts,\n    fn: (program: string, opts: string[]) => childProcess.ChildProcess\n  ): childProcess.ChildProcess;\n  onGetCommandClose(\n    code: number,\n    stdout: string,\n    stderr: string,\n    opts: ProgramOpts,\n    fn: (err: Nullable<Error>, result?: string) => void\n  ): Promise<void>;\n  setProgramOptions(opts: ProgramOpts): string[];\n  setCommandFunc(\n    opts: ProgramOpts,\n    fn: (program: string, opts: string[]) => childProcess.ChildProcess\n  ): childProcess.ChildProcess;\n  onSetCommandClose(\n    code: number,\n    stdout: string,\n    stderr: string,\n    opts: ProgramOpts,\n    fn: (err: Nullable<Error>) => void\n  ): Promise<void>;\n}\n\n/**\n * Linux implementation.\n *\n * Uses libsecret.\n */\nconst _linuxImpl: OsImpl = {\n  getProgram() {\n    return process.env.SFDX_SECRET_TOOL_PATH || path.join(path.sep, 'usr', 'bin', 'secret-tool');\n  },\n\n  getProgramOptions(opts) {\n    return ['lookup', 'user', opts.account, 'domain', opts.service];\n  },\n\n  getCommandFunc(opts, fn) {\n    return fn(_linuxImpl.getProgram(), _linuxImpl.getProgramOptions(opts));\n  },\n\n  async onGetCommandClose(code, stdout, stderr, opts, fn) {\n    if (code === 1) {\n      const command = `${_linuxImpl.getProgram()} ${_optionsToString(_linuxImpl.getProgramOptions(opts))}`;\n      const errorConfig = new SfdxErrorConfig(\n        '@salesforce/core',\n        'encryption',\n        'PasswordNotFoundError',\n        [`\\n${stdout} - ${stderr}`],\n        'PasswordNotFoundErrorAction',\n        [command]\n      );\n      const error = SfdxError.create(errorConfig);\n\n      // This is a workaround for linux.\n      // Calling secret-tool too fast can cause it to return an unexpected error. (below)\n      if (stderr != null && stderr.includes('invalid or unencryptable secret')) {\n        // @ts-ignore TODO: make an error subclass with this field\n        error.retry = true;\n\n        // Throwing here allows us to perform a retry in KeychainAccess\n        throw error;\n      }\n\n      // All other issues we will report back to the handler.\n      fn(error);\n    } else {\n      fn(null, stdout.trim());\n    }\n  },\n\n  setProgramOptions(opts) {\n    return ['store', \"--label='salesforce.com'\", 'user', opts.account, 'domain', opts.service];\n  },\n\n  setCommandFunc(opts, fn) {\n    const secretTool = fn(_linuxImpl.getProgram(), _linuxImpl.setProgramOptions(opts));\n    if (secretTool.stdin) {\n      secretTool.stdin.write(`${opts.password}\\n`);\n    }\n    return secretTool;\n  },\n\n  async onSetCommandClose(code, stdout, stderr, opts, fn) {\n    if (code !== 0) {\n      const command = `${_linuxImpl.getProgram()} ${_optionsToString(_linuxImpl.setProgramOptions(opts))}`;\n      const errorConfig = new SfdxErrorConfig(\n        '@salesforce/core',\n        'encryption',\n        'SetCredentialError',\n        [`\\n${stdout} - ${stderr}`],\n        'SetCredentialErrorAction',\n        [os.userInfo().username, command]\n      );\n      fn(SfdxError.create(errorConfig));\n    } else {\n      fn(null);\n    }\n  }\n};\n\n/**\n * OSX implementation.\n *\n * /usr/bin/security is a cli front end for OSX keychain.\n */\nconst _darwinImpl: OsImpl = {\n  getProgram() {\n    return path.join(path.sep, 'usr', 'bin', 'security');\n  },\n\n  getProgramOptions(opts) {\n    return ['find-generic-password', '-a', opts.account, '-s', opts.service, '-g'];\n  },\n\n  getCommandFunc(opts, fn) {\n    return fn(_darwinImpl.getProgram(), _darwinImpl.getProgramOptions(opts));\n  },\n\n  async onGetCommandClose(code, stdout, stderr, opts, fn) {\n    let err: SfdxError;\n\n    if (code !== 0) {\n      switch (code) {\n        case 128:\n          err = SfdxError.create('@salesforce/core', 'encryption', 'KeyChainUserCanceledError');\n          break;\n        default:\n          const command = `${_darwinImpl.getProgram()} ${_optionsToString(_darwinImpl.getProgramOptions(opts))}`;\n          const errorConfig = new SfdxErrorConfig(\n            '@salesforce/core',\n            'encryption',\n            'PasswordNotFoundError',\n            [`\\n${stdout} - ${stderr}`],\n            'PasswordNotFoundErrorAction',\n            [command]\n          );\n          err = SfdxError.create(errorConfig);\n      }\n      fn(err);\n      return;\n    }\n\n    // For better or worse, the last line (containing the actual password) is actually written to stderr instead of\n    // stdout. Reference: http://blog.macromates.com/2006/keychain-access-from-shell/\n    if (/password/.test(stderr)) {\n      const match = stderr.match(/\"(.*)\"/);\n      if (!match || !match[1]) {\n        const errorConfig = new SfdxErrorConfig(\n          '@salesforce/core',\n          'encryption',\n          'PasswordNotFoundError',\n          [`\\n${stdout} - ${stderr}`],\n          'PasswordNotFoundErrorAction'\n        );\n        fn(SfdxError.create(errorConfig));\n      } else {\n        fn(null, match[1]);\n      }\n    } else {\n      const command = `${_darwinImpl.getProgram()} ${_optionsToString(_darwinImpl.getProgramOptions(opts))}`;\n      const errorConfig = new SfdxErrorConfig(\n        '@salesforce/core',\n        'encryption',\n        'PasswordNotFoundError',\n        [`\\n${stdout} - ${stderr}`],\n        'PasswordNotFoundErrorAction',\n        [command]\n      );\n      fn(SfdxError.create(errorConfig));\n    }\n  },\n\n  setProgramOptions(opts) {\n    const result = ['add-generic-password', '-a', opts.account, '-s', opts.service];\n    if (opts.password) {\n      result.push('-w', opts.password);\n    }\n    return result;\n  },\n\n  setCommandFunc(opts, fn) {\n    return fn(_darwinImpl.getProgram(), _darwinImpl.setProgramOptions(opts));\n  },\n\n  async onSetCommandClose(code, stdout, stderr, opts, fn) {\n    if (code !== 0) {\n      const command = `${_darwinImpl.getProgram()} ${_optionsToString(_darwinImpl.setProgramOptions(opts))}`;\n      const errorConfig = new SfdxErrorConfig(\n        '@salesforce/core',\n        'encryption',\n        'SetCredentialError',\n        [`\\n${stdout} - ${stderr}`],\n        'SetCredentialErrorAction',\n        [os.userInfo().username, command]\n      );\n      fn(SfdxError.create(errorConfig));\n    } else {\n      fn(null);\n    }\n  }\n};\n\nasync function _writeFile(opts: ProgramOpts, fn: (error: Nullable<Error>, contents?: Dictionary<ConfigValue>) => void) {\n  try {\n    const config = await KeychainConfig.create(KeychainConfig.getDefaultOptions());\n    config.set(SecretField.ACCOUNT, opts.account);\n    config.set(SecretField.KEY, opts.password || '');\n    config.set(SecretField.SERVICE, opts.service);\n    await config.write();\n\n    fn(null, config.getContents());\n  } catch (err) {\n    fn(err);\n  }\n}\n\nenum SecretField {\n  SERVICE = 'service',\n  ACCOUNT = 'account',\n  KEY = 'key'\n}\n\n// istanbul ignore next - getPassword/setPassword is always mocked out\n/**\n * @@ignore\n */\nexport class GenericKeychainAccess implements PasswordStore {\n  public async getPassword(opts: ProgramOpts, fn: (error: Nullable<Error>, password?: string) => void): Promise<void> {\n    // validate the file in .sfdx\n    await this.isValidFileAccess(async fileAccessError => {\n      // the file checks out.\n      if (fileAccessError == null) {\n        // read it's contents\n        return KeychainConfig.create(KeychainConfig.getDefaultOptions())\n          .then((config: KeychainConfig) => {\n            // validate service name and account just because\n            if (opts.service === config.get(SecretField.SERVICE) && opts.account === config.get(SecretField.ACCOUNT)) {\n              const key = config.get(SecretField.KEY);\n              fn(null, asString(key));\n            } else {\n              // if the service and account names don't match then maybe someone or something is editing\n              // that file. #donotallow\n              const errorConfig = new SfdxErrorConfig(\n                '@salesforce/core',\n                'encryption',\n                'GenericKeychainServiceError',\n                [KeychainConfig.getFileName()],\n                'GenericKeychainServiceErrorAction'\n              );\n              const err = SfdxError.create(errorConfig);\n              fn(err);\n            }\n          })\n          .catch(readJsonErr => {\n            fn(readJsonErr);\n          });\n      } else {\n        if (fileAccessError.code === 'ENOENT') {\n          fn(SfdxError.create('@salesforce/core', 'encryption', 'PasswordNotFoundError', []));\n        } else {\n          fn(fileAccessError);\n        }\n      }\n    });\n  }\n\n  public async setPassword(opts: ProgramOpts, fn: (error: Nullable<Error>, password?: string) => void): Promise<void> {\n    // validate the file in .sfdx\n    await this.isValidFileAccess(async fileAccessError => {\n      // if there is a validation error\n      if (fileAccessError != null) {\n        // file not found\n        if (fileAccessError.code === 'ENOENT') {\n          // create the file\n          await _writeFile.call(this, opts, fn);\n        } else {\n          fn(fileAccessError);\n        }\n      } else {\n        // the existing file validated. we can write the updated key\n        await _writeFile.call(this, opts, fn);\n      }\n    });\n  }\n\n  protected async isValidFileAccess(cb: (error: Nullable<NodeJS.ErrnoException>) => Promise<void>): Promise<void> {\n    try {\n      const root = await ConfigFile.resolveRootFolder(true);\n      await fs.access(path.join(root, Global.STATE_FOLDER), fs.constants.R_OK | fs.constants.X_OK | fs.constants.W_OK);\n      await cb(null);\n    } catch (err) {\n      await cb(err);\n    }\n  }\n}\n\n/**\n * @ignore\n */\n// istanbul ignore next - getPassword/setPassword is always mocked out\nexport class GenericUnixKeychainAccess extends GenericKeychainAccess {\n  protected async isValidFileAccess(cb: (error: Nullable<Error>) => Promise<void>): Promise<void> {\n    const secretFile: string = path.join(\n      await ConfigFile.resolveRootFolder(true),\n      Global.STATE_FOLDER,\n      ensure(KeychainConfig.getDefaultOptions().filename)\n    );\n    await super.isValidFileAccess(async err => {\n      if (err != null) {\n        await cb(err);\n      } else {\n        const keyFile = await KeychainConfig.create(KeychainConfig.getDefaultOptions());\n        const stats = await keyFile.stat();\n        const octalModeStr = (stats.mode & 0o777).toString(8);\n        const EXPECTED_OCTAL_PERM_VALUE = '600';\n        if (octalModeStr === EXPECTED_OCTAL_PERM_VALUE) {\n          await cb(null);\n        } else {\n          const errorConfig = new SfdxErrorConfig(\n            '@salesforce/core',\n            'encryption',\n            'GenericKeychainInvalidPermsError',\n            undefined,\n            'GenericKeychainInvalidPermsErrorAction',\n            [secretFile, EXPECTED_OCTAL_PERM_VALUE]\n          );\n          await cb(SfdxError.create(errorConfig));\n        }\n      }\n    });\n  }\n}\n\n/**\n * @ignore\n */\nexport class GenericWindowsKeychainAccess extends GenericKeychainAccess {\n  protected async isValidFileAccess(cb: (error: Nullable<Error>) => Promise<void>): Promise<void> {\n    await super.isValidFileAccess(async err => {\n      if (err != null) {\n        await cb(err);\n      } else {\n        try {\n          const secretFile: string = path.join(\n            await ConfigFile.resolveRootFolder(true),\n            Global.STATE_FOLDER,\n            ensure(KeychainConfig.getDefaultOptions().filename)\n          );\n          await fs.access(secretFile, fs.constants.R_OK | fs.constants.W_OK);\n          await cb(null);\n        } catch (e) {\n          await cb(err);\n        }\n      }\n    });\n  }\n}\n\n/**\n * @ignore\n */\nexport const keyChainImpl = {\n  generic_unix: new GenericUnixKeychainAccess(),\n  generic_windows: new GenericWindowsKeychainAccess(),\n  darwin: new KeychainAccess(_darwinImpl, nodeFs),\n  linux: new KeychainAccess(_linuxImpl, nodeFs),\n  validateProgram: _validateProgram\n};\n\nexport type KeyChain = GenericUnixKeychainAccess | GenericWindowsKeychainAccess | KeychainAccess;\n"],"names":["SfdxError","childProcess.spawn","path.join","path.sep","SfdxErrorConfig","os.userInfo","KeychainConfig","asString","ConfigFile","fs","Global","ensure","nodeFs"],"mappings":"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"}