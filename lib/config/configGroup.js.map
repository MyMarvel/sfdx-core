{"version":3,"file":"configGroup.js","sources":["../../src/config/configGroup.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { definiteEntriesOf, definiteValuesOf, Dictionary, getJsonMap, JsonMap, Optional } from '@salesforce/ts-types';\nimport { SfdxError } from '../sfdxError';\nimport { ConfigFile } from './configFile';\nimport { ConfigContents, ConfigEntry, ConfigValue } from './configStore';\n\n/**\n * A config file that stores config values in groups. e.g. to store different config\n * values for different commands, without having manually manipulate the config.\n *\n * **Note:** All config methods are overwritten to use the {@link ConfigGroup.setDefaultGroup}.\n *\n * ```\n * class MyPluginConfig extends ConfigGroup<ConfigGroup.Options> {\n *   public static getFileName(): string {\n *     return 'myPluginConfigFilename.json';\n *   }\n * }\n * const myConfig = await MyPluginConfig.create(ConfigGroup.getOptions('all'));\n * myConfig.setDefaultGroup('myCommand'); // Can be set in your command's init.\n * myConfig.set('mykey', 'myvalue'); // Sets 'myKey' for the 'myCommand' group.\n * myConfig.setInGroup('myKey', 'myvalue', 'all'); // Manually set in another group.\n * await myConfig.write();\n * ```\n */\nexport class ConfigGroup<T extends ConfigGroup.Options> extends ConfigFile<T> {\n  /**\n   * Get ConfigGroup specific options, such as the default group.\n   * @param defaultGroup The default group to use when creating the config.\n   * @param filename The filename of the config file. Uses the static {@link getFileName} by default.\n   */\n  public static getOptions(defaultGroup: string, filename?: string): ConfigGroup.Options {\n    const options: ConfigFile.Options = ConfigFile.getDefaultOptions(true, filename);\n    const configGroupOptions: ConfigGroup.Options = { defaultGroup };\n    Object.assign(configGroupOptions, options);\n    return configGroupOptions;\n  }\n\n  protected defaultGroup = 'default';\n\n  /**\n   * Sets the default group for all {@link BaseConfigStore} methods to use.\n   * **Throws** *{@link SfdxError}{ name: 'MissingGroupName' }* The group parameter is null or undefined.\n   * @param group The group.\n   */\n  public setDefaultGroup(group: string): void {\n    if (!group) {\n      throw new SfdxError('null or undefined group', 'MissingGroupName');\n    }\n\n    this.defaultGroup = group;\n  }\n\n  /**\n   * Set a group of entries in a bulk save. Returns The new properties that were saved.\n   * @param newEntries An object representing the aliases to set.\n   * @param group The group the property belongs to.\n   */\n  public async updateValues(newEntries: Dictionary<ConfigValue>, group?: string): Promise<Dictionary<ConfigValue>> {\n    // Make sure the contents are loaded\n    await this.read();\n    Object.entries(newEntries).forEach(([key, val]) => this.setInGroup(key, val, group || this.defaultGroup));\n    await this.write();\n    return newEntries;\n  }\n\n  /**\n   * Set a value on a group. Returns the promise resolved when the value is set.\n   * @param key The key.\n   * @param value The value.\n   * @param group The group.\n   */\n  public async updateValue(key: string, value: ConfigValue, group?: string): Promise<void> {\n    // Make sure the content is loaded\n    await this.read();\n    this.setInGroup(key, value, group || this.defaultGroup);\n    // Then save it\n    await this.write();\n  }\n\n  /**\n   * Gets an array of key value pairs.\n   */\n  public entries(): ConfigEntry[] {\n    const group = this.getGroup();\n    if (group) {\n      return definiteEntriesOf(group);\n    }\n    return [];\n  }\n\n  /**\n   * Returns a specified element from ConfigGroup. Returns the associated value.\n   * @param key The key.\n   */\n  public get(key: string): Optional<ConfigValue> {\n    return this.getInGroup(key);\n  }\n\n  /**\n   * Returns a boolean if an element with the specified key exists in the default group.\n   * @param {string} key The key.\n   */\n  public has(key: string): boolean {\n    const group = this.getGroup();\n    return !!group && super.has(this.defaultGroup) && !!group[key];\n  }\n\n  /**\n   * Returns an array of the keys from the default group.\n   */\n  public keys(): string[] {\n    return Object.keys(this.getGroup(this.defaultGroup) || {});\n  }\n\n  /**\n   * Returns an array of the values from the default group.\n   */\n  public values(): ConfigValue[] {\n    return definiteValuesOf(this.getGroup(this.defaultGroup) || {});\n  }\n\n  /**\n   * Add or updates an element with the specified key in the default group.\n   * @param key The key.\n   * @param value The value.\n   */\n  public set(key: string, value: ConfigValue): ConfigContents {\n    return this.setInGroup(key, value, this.defaultGroup);\n  }\n\n  /**\n   * Removes an element with the specified key from the default group. Returns `true` if the item was deleted.\n   * @param key The key.\n   */\n  public unset(key: string): boolean {\n    const groupContents = this.getGroup(this.defaultGroup);\n    if (groupContents) {\n      delete groupContents[key];\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Remove all key value pairs from the default group.\n   */\n  public clear(): void {\n    delete this.getContents()[this.defaultGroup];\n  }\n\n  /**\n   * Get all config contents for a group.\n   * @param {string} [group = 'default'] The group.\n   */\n  public getGroup(group = this.defaultGroup): Optional<ConfigContents> {\n    return getJsonMap(this.getContents(), group) || undefined;\n  }\n\n  /**\n   * Returns the value associated to the key and group, or undefined if there is none.\n   * @param key The key.\n   * @param group The group. Defaults to the default group.\n   */\n  public getInGroup(key: string, group?: string): Optional<ConfigValue> {\n    const groupContents = this.getGroup(group);\n    if (groupContents) {\n      return groupContents[key];\n    }\n  }\n\n  /**\n   * Convert the config object to a json object.\n   */\n  public toObject(): JsonMap {\n    return this.getContents();\n  }\n\n  /**\n   * Convert an object to a {@link ConfigContents} and set it as the config contents.\n   * @param {object} obj The object.\n   */\n  public setContentsFromObject<U extends object>(obj: U): void {\n    const contents = new Map<string, ConfigValue>(Object.entries(obj));\n    Array.from(contents.entries()).forEach(([groupKey, groupContents]) => {\n      if (groupContents) {\n        Object.entries(groupContents).forEach(([contentKey, contentValue]) => {\n          this.setInGroup(contentKey, contentValue, groupKey);\n        });\n      }\n    });\n  }\n\n  /**\n   * Sets the value for the key and group in the config object.\n   * @param key The key.\n   * @param value The value.\n   * @param group The group. Uses the default group if not specified.\n   */\n  public setInGroup(key: string, value?: ConfigValue, group?: string): ConfigContents {\n    let content: JsonMap;\n\n    group = group || this.defaultGroup;\n\n    if (!super.has(group)) {\n      super.set(group, {});\n    }\n    content = this.getGroup(group) || {};\n    this.setMethod(content, key, value);\n\n    return content;\n  }\n\n  /**\n   * Initialize the asynchronous dependencies.\n   */\n  public async init(): Promise<void> {\n    await super.init();\n    this.setDefaultGroup(this.options.defaultGroup);\n  }\n}\n\nexport namespace ConfigGroup {\n  /**\n   * Options when creating the config file.\n   */\n  export interface Options extends ConfigFile.Options {\n    /**\n     * The default group for properties to go into.\n     */\n    defaultGroup: string;\n  }\n}\n"],"names":["ConfigFile","SfdxError","definiteEntriesOf","definiteValuesOf","getJsonMap"],"mappings":"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"}