{"version":3,"file":"configAggregator.js","sources":["../../src/config/configAggregator.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { AsyncOptionalCreatable, merge, snakeCase, sortBy } from '@salesforce/kit';\nimport { AnyJson, definiteEntriesOf, Dictionary, get, isJsonMap, JsonMap, Optional } from '@salesforce/ts-types';\nimport { SfdxError } from '../sfdxError';\nimport { Config, ConfigPropertyMeta } from './config';\n\nconst propertyToEnvName = (property: string) => `SFDX_${snakeCase(property).toUpperCase()}`;\n\n/**\n * Information about a config property.\n */\nexport interface ConfigInfo {\n  /**\n   * key The config key.\n   */\n  key: string;\n\n  /**\n   * The location of the config property.\n   */\n  location?: ConfigAggregator.Location;\n\n  /**\n   * The config value.\n   */\n  value?: AnyJson;\n\n  /**\n   * The path of the config value.\n   */\n  path?: string;\n  /**\n   * `true` if the config property is in the local project.\n   */\n  isLocal: () => boolean;\n\n  /**\n   * `true` if the config property is in the global space.\n   */\n  isGlobal: () => boolean;\n\n  /**\n   * `true` if the config property is an environment variable.\n   */\n  isEnvVar: () => boolean;\n}\n\n/**\n * Aggregate global and local project config files, as well as environment variables for\n * `sfdx-config.json`. The resolution happens in the following bottom-up order:\n *\n * 1. Environment variables  (`SFDX_LOG_LEVEL`)\n * 1. Workspace settings  (`<workspace-root>/.sfdx/sfdx-config.json`)\n * 1. Global settings  (`$HOME/.sfdx/sfdx-config.json`)\n *\n * Use {@link ConfigAggregator.create} to instantiate the aggregator.\n *\n * ```\n * const aggregator = await ConfigAggregator.create();\n * console.log(aggregator.getPropertyValue('defaultusername'));\n * ```\n */\nexport class ConfigAggregator extends AsyncOptionalCreatable<JsonMap> {\n  // Initialized in loadProperties\n  private allowedProperties!: ConfigPropertyMeta[];\n  private localConfig!: Config;\n  private globalConfig!: Config;\n  private envVars!: Dictionary<string>;\n  private config!: JsonMap;\n\n  /**\n   * **Do not directly construct instances of this class -- use {@link ConfigAggregator.create} instead.**\n   * @ignore\n   */\n  public constructor(options?: JsonMap) {\n    super(options || {});\n  }\n\n  /**\n   * Initialize this instances async dependencies.\n   */\n  public async init(): Promise<void> {\n    await this.loadProperties();\n  }\n\n  /**\n   * Get a resolved config property.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'UnknownConfigKey' }* An attempt to get a property that's not supported.\n   *\n   * @param key The key of the property.\n   */\n  public getPropertyValue(key: string): Optional<AnyJson> {\n    if (this.getAllowedProperties().some(element => key === element.key)) {\n      return this.getConfig()[key];\n    } else {\n      throw new SfdxError(`Unknown config key: ${key}`, 'UnknownConfigKey');\n    }\n  }\n\n  /**\n   * Get a resolved config property.\n   *\n   * @param key The key of the property.\n   */\n  public getInfo(key: string): ConfigInfo {\n    const location = this.getLocation(key);\n    return {\n      key,\n      location,\n      value: this.getPropertyValue(key),\n      path: this.getPath(key),\n      isLocal: () => location === ConfigAggregator.Location.LOCAL,\n      isGlobal: () => location === ConfigAggregator.Location.GLOBAL,\n      isEnvVar: () => location === ConfigAggregator.Location.ENVIRONMENT\n    };\n  }\n\n  /**\n   * Gets a resolved config property location.\n   *\n   * For example, `getLocation('logLevel')` will return:\n   * 1. `Location.GLOBAL` if resolved to an environment variable.\n   * 1. `Location.LOCAL` if resolved to local project config.\n   * 1. `Location.ENVIRONMENT` if resolved to the global config.\n   *\n   * @param key The key of the property.\n   */\n  public getLocation(key: string): Optional<ConfigAggregator.Location> {\n    if (this.getEnvVars().get(key) != null) {\n      return ConfigAggregator.Location.ENVIRONMENT;\n    }\n    if (this.getLocalConfig() && this.getLocalConfig().get(key)) {\n      return ConfigAggregator.Location.LOCAL;\n    }\n    if (this.getGlobalConfig() && this.getGlobalConfig().get(key)) {\n      return ConfigAggregator.Location.GLOBAL;\n    }\n  }\n\n  /**\n   * Get a resolved file path or environment variable name of the property.\n   *\n   * For example, `getPath('logLevel')` will return:\n   * 1. `$SFDX_LOG_LEVEL` if resolved to an environment variable.\n   * 1. `./.sfdx/sfdx-config.json` if resolved to the local config.\n   * 1. `~/.sfdx/sfdx-config.json` if resolved to the global config.\n   * 1. `undefined`, if not resolved.\n   *\n   * **Note:** that the path returned may be the absolute path instead of\n   * relative paths such as `./` and `~/`.\n   *\n   * @param key The key of the property.\n   */\n  public getPath(key: string): Optional<string> {\n    if (this.envVars[key] != null) {\n      return `\\$${propertyToEnvName(key)}`;\n    }\n    if (get(this.getLocalConfig(), `contents[${key}]`) != null) {\n      return this.getLocalConfig().getPath();\n    }\n    if (get(this.getGlobalConfig(), `contents[${key}]`) != null) {\n      return this.getGlobalConfig().getPath();\n    }\n  }\n\n  /**\n   * Get all resolved config property keys, values, locations, and paths.\n   *\n   * ```\n   * > console.log(aggregator.getConfigInfo());\n   * [\n   *     { key: 'logLevel', val: 'INFO', location: 'Environment', path: '$SFDX_LOG_LEVEL'}\n   *     { key: 'defaultusername', val: '<username>', location: 'Local', path: './.sfdx/sfdx-config.json'}\n   * ]\n   * ```\n   */\n  public getConfigInfo(): ConfigInfo[] {\n    const infos = Object.keys(this.getConfig())\n      .map(key => this.getInfo(key))\n      .filter((info): info is ConfigInfo => !!info);\n    return sortBy(infos, 'key');\n  }\n\n  /**\n   * Get the local project config instance.\n   */\n  public getLocalConfig(): Config {\n    return this.localConfig;\n  }\n\n  /**\n   * Get the global config instance.\n   */\n  public getGlobalConfig(): Config {\n    return this.globalConfig;\n  }\n\n  /**\n   * Get the resolved config object from the local, global and environment config instances.\n   */\n  public getConfig(): JsonMap {\n    return this.config;\n  }\n\n  /**\n   * Get the config properties that are environment variables.\n   */\n  public getEnvVars(): Map<string, string> {\n    return new Map<string, string>(definiteEntriesOf(this.envVars));\n  }\n\n  /**\n   * Re-read all property configurations from disk.\n   */\n  public async reload(): Promise<ConfigAggregator> {\n    await this.loadProperties();\n    return this;\n  }\n\n  /**\n   * Loads all the properties and aggregates them according to location.\n   */\n  private async loadProperties(): Promise<void> {\n    // Don't throw an project error with the aggregator, since it should resolve to global if\n    // there is no project.\n    try {\n      this.setLocalConfig(await Config.create(Config.getDefaultOptions(false)));\n    } catch (err) {\n      if (err.name !== 'InvalidProjectWorkspace') {\n        throw err;\n      }\n    }\n\n    this.setGlobalConfig(await Config.create(Config.getDefaultOptions(true)));\n\n    this.setAllowedProperties(Config.getAllowedProperties());\n\n    const accumulator: Dictionary<string> = {};\n    this.setEnvVars(\n      this.getAllowedProperties().reduce((obj, property) => {\n        const val = process.env[propertyToEnvName(property.key)];\n        if (val != null) {\n          obj[property.key] = val;\n        }\n        return obj;\n      }, accumulator)\n    );\n\n    // Global config must be read first so it is on the left hand of the\n    // object assign and is overwritten by the local config.\n\n    await this.globalConfig.read();\n    const configs = [this.globalConfig.toObject()];\n\n    // We might not be in a project workspace\n    if (this.localConfig) {\n      await this.localConfig.read();\n      configs.push(this.localConfig.toObject());\n    }\n\n    configs.push(this.envVars);\n\n    const json: JsonMap = {};\n    const reduced = configs.filter(isJsonMap).reduce((acc: JsonMap, el: AnyJson) => merge(acc, el), json);\n    this.setConfig(reduced);\n  }\n\n  /**\n   * Set the resolved config object.\n   * @param config The config object to set.\n   */\n  private setConfig(config: JsonMap) {\n    this.config = config;\n  }\n\n  /**\n   * Set the local config object.\n   * @param config The config object value to set.\n   */\n  private setLocalConfig(config: Config) {\n    this.localConfig = config;\n  }\n\n  /**\n   * Set the global config object.\n   * @param config The config object value to set.\n   */\n  private setGlobalConfig(config: Config) {\n    this.globalConfig = config;\n  }\n\n  /**\n   * Get the allowed properties.\n   */\n  private getAllowedProperties(): ConfigPropertyMeta[] {\n    return this.allowedProperties;\n  }\n\n  /**\n   * Set the allowed properties.\n   * @param properties The properties to set.\n   */\n  private setAllowedProperties(properties: ConfigPropertyMeta[]) {\n    this.allowedProperties = properties;\n  }\n\n  /**\n   * Sets the env variables.\n   * @param envVars The env variables to set.\n   */\n  private setEnvVars(envVars: Dictionary<string>) {\n    this.envVars = envVars;\n  }\n}\n\nexport namespace ConfigAggregator {\n  /**\n   * An enum of all possible locations for a config value.\n   */\n  export const enum Location {\n    /**\n     * Represents the global config.\n     */\n    GLOBAL = 'Global',\n\n    /**\n     * Represents the local project config.\n     */\n    LOCAL = 'Local',\n\n    /**\n     * Represents environment variables.\n     */\n    ENVIRONMENT = 'Environment'\n  }\n}\n"],"names":["snakeCase","AsyncOptionalCreatable","SfdxError","get","sortBy","definiteEntriesOf","Config","isJsonMap","merge"],"mappings":"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"}