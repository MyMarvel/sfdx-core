{"version":3,"file":"config.js","sources":["../../src/config/config.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { keyBy, set } from '@salesforce/kit';\nimport { Dictionary, ensure, isNumber, isString } from '@salesforce/ts-types';\nimport { Crypto } from '../crypto';\nimport { Messages } from '../messages';\nimport { SfdxError } from '../sfdxError';\nimport { sfdc } from '../util/sfdc';\nimport { ConfigFile } from './configFile';\nimport { ConfigContents, ConfigValue } from './configStore';\n\nconst SFDX_CONFIG_FILE_NAME = 'sfdx-config.json';\n\n/**\n * Interface for meta information about config properties\n */\nexport interface ConfigPropertyMeta {\n  /**\n   *  The config property name.\n   */\n  key: string;\n\n  /**\n   *  Reference to the config data input validation.\n   */\n  input?: ConfigPropertyMetaInput;\n\n  /**\n   *  True if the property should be indirectly hidden from the user.\n   */\n  hidden?: boolean;\n\n  /**\n   * True if the property values should be stored encrypted.\n   */\n  encrypted?: boolean;\n}\n\n/**\n * Config property input validation\n */\nexport interface ConfigPropertyMetaInput {\n  /**\n   * Tests if the input value is valid and returns true if the input data is valid.\n   * @param value The input value.\n   */\n  validator: (value: ConfigValue) => boolean;\n\n  /**\n   * The message to return in the error if the validation fails.\n   */\n  failedMessage: string;\n}\n\n/**\n * The files where sfdx config values are stored for projects and the global space.\n *\n * *Note:* It is not recommended to instantiate this object directly when resolving\n * config values. Instead use {@link ConfigAggregator}\n *\n * ```\n * const localConfig = await Config.create({});\n * localConfig.set('defaultusername', 'username@company.org');\n * await localConfig.write();\n * ```\n * https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_config_values.htm\n */\nexport class Config extends ConfigFile<ConfigFile.Options> {\n  /**\n   * Username associated with the default dev hub org.\n   */\n  public static readonly DEFAULT_DEV_HUB_USERNAME: string = 'defaultdevhubusername';\n\n  /**\n   * Username associate with the default org.\n   */\n  public static readonly DEFAULT_USERNAME: string = 'defaultusername';\n\n  /**\n   * The sid for the debugger configuration.\n   */\n  public static readonly ISV_DEBUGGER_SID: string = 'isvDebuggerSid';\n\n  /**\n   * The url for the debugger configuration.\n   */\n  public static readonly ISV_DEBUGGER_URL: string = 'isvDebuggerUrl';\n\n  /**\n   * The api version\n   */\n  public static readonly API_VERSION = 'apiVersion';\n\n  /**\n   * Disables telemetry reporting\n   */\n  public static readonly DISABLE_TELEMETRY = 'disableTelemetry';\n\n  /**\n   * allows users to override the 10,000 result query limit\n   */\n  public static readonly MAX_QUERY_LIMIT = 'maxQueryLimit';\n\n  /**\n   * Returns the default file name for a config file.\n   *\n   * **See** {@link SFDX_CONFIG_FILE_NAME}\n   */\n  public static getFileName(): string {\n    return SFDX_CONFIG_FILE_NAME;\n  }\n\n  /**\n   * Returns an object representing the supported allowed properties.\n   */\n  public static getAllowedProperties(): ConfigPropertyMeta[] {\n    if (!Config.allowedProperties) {\n      throw new SfdxError('Config meta information has not been initialized. Use Config.create()');\n    }\n    return Config.allowedProperties;\n  }\n\n  /**\n   * Gets default options.\n   * @param isGlobal Make the config global.\n   * @param filename Override the default file. {@link Config.getFileName}\n   */\n  public static getDefaultOptions(isGlobal = false, filename?: string): ConfigFile.Options {\n    return {\n      isGlobal,\n      isState: true,\n      filename: filename || this.getFileName()\n    };\n  }\n\n  /**\n   * The value of a supported config property.\n   * @param isGlobal True for a global config. False for a local config.\n   * @param propertyName The name of the property to set.\n   * @param value The property value.\n   */\n  public static async update(isGlobal: boolean, propertyName: string, value?: ConfigValue): Promise<ConfigContents> {\n    const config = await Config.create(Config.getDefaultOptions(isGlobal));\n\n    const content = await config.read();\n\n    if (value == null) {\n      delete content[propertyName];\n    } else {\n      set(content, propertyName, value);\n    }\n\n    return config.write(content);\n  }\n\n  /**\n   * Clear all the configured properties both local and global.\n   */\n  public static async clear(): Promise<void> {\n    let config = await Config.create(Config.getDefaultOptions(true));\n    config.clear();\n    await config.write();\n\n    config = await Config.create(Config.getDefaultOptions(false));\n    config.clear();\n    await config.write();\n  }\n\n  private static allowedProperties: ConfigPropertyMeta[];\n  private static messages: Messages;\n  private static propertyConfigMap: Dictionary<ConfigPropertyMeta>;\n\n  private crypto?: Crypto;\n\n  public constructor(options?: ConfigFile.Options) {\n    super(options || Config.getDefaultOptions(false));\n  }\n\n  /**\n   * Read, assign, and return the config contents.\n   */\n  public async read(): Promise<ConfigContents> {\n    try {\n      await super.read();\n      await this.cryptProperties(false);\n      return this.getContents();\n    } finally {\n      await this.clearCrypto();\n    }\n  }\n\n  /**\n   * Writes Config properties taking into account encrypted properties.\n   * @param newContents The new Config value to persist.\n   */\n  public async write(newContents?: ConfigContents): Promise<ConfigContents> {\n    if (newContents != null) {\n      this.setContents(newContents);\n    }\n\n    await this.cryptProperties(true);\n\n    await super.write();\n\n    await this.cryptProperties(false);\n\n    return this.getContents();\n  }\n\n  /**\n   * Sets a value for a property.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'InvalidConfigValue' }* If the input validator fails.\n   * @param key The property to set.\n   * @param value The value of the property.\n   */\n  public set(key: string, value: ConfigValue): ConfigContents {\n    const property = Config.allowedProperties.find(allowedProp => allowedProp.key === key);\n\n    if (!property) {\n      throw SfdxError.create('@salesforce/core', 'config', 'UnknownConfigKey', [key]);\n    }\n    if (property.input) {\n      if (property.input && property.input.validator(value)) {\n        super.set(property.key, value);\n      } else {\n        throw SfdxError.create('@salesforce/core', 'config', 'InvalidConfigValue', [property.input.failedMessage]);\n      }\n    } else {\n      super.set(property.key, value);\n    }\n    return this.getContents();\n  }\n\n  /**\n   * Unsets a value for a property.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'UnknownConfigKey' }* If the input validator fails.\n   * @param key The property to unset.\n   */\n  public unset(key: string): boolean {\n    const property = Config.allowedProperties.find(allowedProp => allowedProp.key === key);\n\n    if (!property) {\n      throw SfdxError.create('@salesforce/core', 'config', 'UnknownConfigKey', [key]);\n    }\n    return super.unset(property.key);\n  }\n\n  /**\n   * Initializer for supported config types.\n   */\n  protected async init(): Promise<void> {\n    if (!Config.messages) {\n      Config.messages = Messages.loadMessages('@salesforce/core', 'config');\n    }\n\n    if (!Config.allowedProperties) {\n      Config.allowedProperties = [\n        {\n          key: 'instanceUrl',\n          input: {\n            // If a value is provided validate it otherwise no value is unset.\n            validator: value => value == null || (isString(value) && sfdc.isSalesforceDomain(value)),\n            failedMessage: Config.messages.getMessage('InvalidInstanceUrl')\n          }\n        },\n        {\n          key: Config.API_VERSION,\n          hidden: true,\n          input: {\n            // If a value is provided validate it otherwise no value is unset.\n            validator: value => value == null || (isString(value) && sfdc.validateApiVersion(value)),\n            failedMessage: Config.messages.getMessage('InvalidApiVersion')\n          }\n        },\n        { key: Config.DEFAULT_DEV_HUB_USERNAME },\n        { key: Config.DEFAULT_USERNAME },\n        {\n          key: Config.ISV_DEBUGGER_SID,\n          encrypted: true,\n          input: {\n            // If a value is provided validate it otherwise no value is unset.\n            validator: value => value == null || isString(value),\n            failedMessage: Config.messages.getMessage('InvalidIsvDebuggerSid')\n          }\n        },\n        {\n          key: Config.ISV_DEBUGGER_URL,\n          input: {\n            // If a value is provided validate it otherwise no value is unset.\n            validator: value => value == null || isString(value),\n            failedMessage: Config.messages.getMessage('InvalidIsvDebuggerUrl')\n          }\n        },\n        {\n          key: Config.DISABLE_TELEMETRY,\n          input: {\n            validator: value => value == null || ['true', 'false'].includes(value.toString()),\n            failedMessage: Config.messages.getMessage('InvalidBooleanConfigValue')\n          }\n        },\n        // This should be brought in by a plugin, but there isn't a way to do that right now.\n        {\n          key: 'restDeploy',\n          hidden: true,\n          input: {\n            validator: value => value != null && ['true', 'false'].includes(value.toString()),\n            failedMessage: Config.messages.getMessage('InvalidBooleanConfigValue')\n          }\n        },\n        {\n          key: Config.MAX_QUERY_LIMIT,\n          input: {\n            validator: value => isNumber(value),\n            failedMessage: Config.messages.getMessage('InvalidNumberConfigValue')\n          }\n        }\n      ];\n    }\n\n    Config.propertyConfigMap = keyBy(Config.allowedProperties, 'key');\n    // Super ConfigFile calls read, which has a dependecy on crypto, which finally has a dependency on\n    // Config.propertyConfigMap being set. This is why init is called after the setup.\n    await super.init();\n  }\n\n  /**\n   * Initialize the crypto dependency.\n   */\n  private async initCrypto(): Promise<void> {\n    if (!this.crypto) {\n      this.crypto = await Crypto.create();\n    }\n  }\n\n  /**\n   * Closes the crypto dependency. Crypto should be close after it's used and no longer needed.\n   */\n  private async clearCrypto(): Promise<void> {\n    if (this.crypto) {\n      this.crypto.close();\n      delete this.crypto;\n    }\n  }\n\n  /**\n   * Get an individual property config.\n   * @param propertyName The name of the property.\n   */\n  private getPropertyConfig(propertyName: string): ConfigPropertyMeta {\n    const prop = Config.propertyConfigMap[propertyName];\n\n    if (!prop) {\n      throw SfdxError.create('@salesforce/core', 'config', 'UnknownConfigKey', [propertyName]);\n    }\n    return prop;\n  }\n\n  /**\n   * Encrypts and content properties that have a encryption attribute.\n   * @param encrypt `true` to encrypt.\n   */\n  private async cryptProperties(encrypt: boolean): Promise<void> {\n    const hasEncryptedProperties = this.entries().some(([key]) => {\n      return !!ensure(Config.propertyConfigMap[key]).encrypted;\n    });\n\n    if (hasEncryptedProperties) {\n      await this.initCrypto();\n      const crypto = ensure(this.crypto);\n\n      this.forEach((key, value) => {\n        if (this.getPropertyConfig(key).encrypted && isString(value)) {\n          this.set(key, ensure(encrypt ? crypto.encrypt(value) : crypto.decrypt(value)));\n        }\n      });\n    }\n  }\n}\n"],"names":["ConfigFile","SfdxError","set","Messages","isString","sfdc","isNumber","keyBy","Crypto","ensure"],"mappings":"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"}