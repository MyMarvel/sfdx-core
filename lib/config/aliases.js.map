{"version":3,"file":"aliases.js","sources":["../../src/config/aliases.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { asString, Dictionary, JsonMap, Optional } from '@salesforce/ts-types';\nimport { SfdxError } from '../sfdxError';\nimport { ConfigGroup } from './configGroup';\nimport { ConfigContents, ConfigValue } from './configStore';\n\nconst ALIAS_FILE_NAME = 'alias.json';\n\n/**\n * Different groups of aliases. Currently only support orgs.\n */\nexport enum AliasGroup {\n  ORGS = 'orgs'\n}\n\n/**\n * Aliases specify alternate names for groups of properties used by the Salesforce CLI, such as orgs.\n * By default, all aliases are stored under 'orgs', but groups allow aliases to be applied for\n * other commands, settings, and parameters.\n *\n * **Note:** All aliases are stored at the global level.\n *\n * ```\n * const aliases = await Aliases.create({});\n * aliases.set('myAlias', 'username@company.org');\n * await aliases.write();\n * // Shorthand to get an alias.\n * const username: string = await Aliases.fetch('myAlias');\n * ```\n * https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_usernames_orgs.htm\n */\nexport class Aliases extends ConfigGroup<ConfigGroup.Options> {\n  /**\n   * The aliases state file filename.\n   */\n  public static getFileName(): string {\n    return ALIAS_FILE_NAME;\n  }\n\n  /**\n   * Get Aliases specific options.\n   */\n  public static getDefaultOptions(): ConfigGroup.Options {\n    return ConfigGroup.getOptions(AliasGroup.ORGS, Aliases.getFileName());\n  }\n\n  /**\n   * Updates a group of aliases in a bulk save and returns the new aliases that were saved.\n   *\n   * ```\n   * const aliases = await Aliases.parseAndUpdate(['foo=bar', 'bar=baz'])\n   * ```\n   * @param aliasKeyAndValues An array of strings in the format `<alias>=<value>`.\n   * Each element will be saved in the Aliases state file under the group.\n   * @param group The group the alias belongs to. Defaults to ORGS.\n   */\n  public static async parseAndUpdate(\n    aliasKeyAndValues: string[],\n    group: AliasGroup = AliasGroup.ORGS\n  ): Promise<JsonMap> {\n    const newAliases: Dictionary<string> = {};\n    if (aliasKeyAndValues.length === 0) {\n      throw SfdxError.create('@salesforce/core', 'core', 'NoAliasesFound', []);\n    }\n\n    for (const arg of aliasKeyAndValues) {\n      const split = arg.split('=');\n\n      if (split.length !== 2) {\n        throw SfdxError.create('@salesforce/core', 'core', 'InvalidFormat', [arg]);\n      }\n      const [name, value] = split;\n      newAliases[name] = value || undefined;\n    }\n\n    const aliases = await Aliases.create(Aliases.getDefaultOptions());\n\n    return await aliases.updateValues(newAliases, group);\n  }\n\n  /**\n   * Get an alias from a key and group. Shorthand for `Alias.create({}).get(key)`. Returns the promise resolved when the\n   * alias is created.\n   * @param key The value of the alias to match.\n   * @param group The group the alias belongs to. Defaults to Orgs.\n   */\n  public static async fetch(key: string, group = AliasGroup.ORGS): Promise<Optional<string>> {\n    const aliases = await Aliases.create(Aliases.getDefaultOptions());\n    return asString(aliases.getInGroup(key, group));\n  }\n\n  /**\n   * Constructor\n   * **Do not directly construct instances of this class -- use {@link Aliases.create} instead.**\n   * @param options The options for the class instance\n   */\n  public constructor(options: ConfigGroup.Options) {\n    super(options);\n  }\n\n  // Don't use kit's set to prevent nested object save\n  protected setMethod(contents: ConfigContents, key: string, value?: ConfigValue) {\n    contents[key] = value;\n  }\n}\n"],"names":["AliasGroup","ConfigGroup","SfdxError","asString"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAYA,MAAM,eAAe,GAAG,YAAY,CAAC;AAKrC,WAAY,UAAU;IACpB,2BAAa,CAAA;AACf,CAAC,EAFWA,kBAAU,KAAVA,kBAAU,QAErB;AAED;;;;;;;;;;;;;;;;MAgBa,OAAQ,SAAQC,8BAAgC;;;;IAIpD,OAAO,WAAW;QACvB,OAAO,eAAe,CAAC;KACxB;;;;IAKM,OAAO,iBAAiB;QAC7B,OAAOA,8BAAW,CAAC,UAAU,CAACD,kBAAU,CAAC,IAAI,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;KACvE;;;;;;;;;;;IAYM,aAAa,cAAc,CAChC,iBAA2B,EAC3B,QAAoBA,kBAAU,CAAC,IAAI;QAEnC,MAAM,UAAU,GAAuB,EAAE,CAAC;QAC1C,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,MAAME,mBAAS,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;SAC1E;QAED,KAAK,MAAM,GAAG,IAAI,iBAAiB,EAAE;YACnC,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE7B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAMA,mBAAS,CAAC,MAAM,CAAC,kBAAkB,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5E;YACD,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC;YAC5B,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,SAAS,CAAC;SACvC;QAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAElE,OAAO,MAAM,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;KACtD;;;;;;;IAQM,aAAa,KAAK,CAAC,GAAW,EAAE,KAAK,GAAGF,kBAAU,CAAC,IAAI;QAC5D,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAClE,OAAOG,kBAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;KACjD;;;;;;IAOD,YAAmB,OAA4B;QAC7C,KAAK,CAAC,OAAO,CAAC,CAAC;KAChB;;IAGS,SAAS,CAAC,QAAwB,EAAE,GAAW,EAAE,KAAmB;QAC5E,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACvB;;;;;"}