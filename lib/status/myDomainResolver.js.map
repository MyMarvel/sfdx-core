{"version":3,"file":"myDomainResolver.js","sources":["../../src/status/myDomainResolver.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { lookup } from 'dns';\nimport { URL } from 'url';\nimport { promisify } from 'util';\n\nimport { ensureString } from '@salesforce/ts-types';\n\nimport { AsyncOptionalCreatable, Duration } from '@salesforce/kit';\nimport { Logger } from '../logger';\nimport { StatusResult } from './client';\nimport { PollingClient } from './pollingClient';\n\n/**\n * A class used to resolve MyDomains. After a ScratchOrg is created it's host name my not be propagated to the\n * Salesforce DNS service. This service is not exclusive to Salesforce My Domain URL and could be used for any hostname.\n *\n * ```\n * (async () => {\n *  const options: MyDomainResolver.Options = {\n *      url: new URL('http://mydomain.salesforce.com'),\n *      timeout: Duration.minutes(5),\n *      frequency: Duration.seconds(10)\n *  };\n *  const resolver: MyDomainResolver = await MyDomainResolver.create(options);\n *  const ipAddress: AnyJson = await resolver.resolve();\n *  console.log(`Successfully resolved host: ${options.url} to address: ${ipAddress}`);\n * })();\n * ```\n */\nexport class MyDomainResolver extends AsyncOptionalCreatable<MyDomainResolver.Options> {\n  public static DEFAULT_DOMAIN = new URL('https://login.salesforce.com');\n\n  private logger!: Logger;\n\n  private options: MyDomainResolver.Options;\n\n  public constructor(options?: MyDomainResolver.Options) {\n    super(options);\n    this.options = options || { url: MyDomainResolver.DEFAULT_DOMAIN };\n  }\n\n  /**\n   * Method that performs the dns lookup of the host. If the lookup fails the internal polling client will try again\n   * given the optional interval. Returns the resolved ip address.\n   */\n  public async resolve(): Promise<string> {\n    const self: MyDomainResolver = this;\n    const pollingOptions: PollingClient.Options = {\n      async poll(): Promise<StatusResult> {\n        const host: string = self.options.url.host;\n        let dnsResult: { address: string };\n\n        try {\n          self.logger.debug(`Attempting to resolve url: ${host}`);\n          if (host && host.includes('.internal.salesforce.com')) {\n            return {\n              completed: true,\n              payload: '127.0.0.1'\n            };\n          }\n          dnsResult = await promisify(lookup)(host);\n          self.logger.debug(`Successfully resolved host: ${host} result: ${JSON.stringify(dnsResult)}`);\n          return {\n            completed: true,\n            payload: dnsResult.address\n          };\n        } catch (e) {\n          self.logger.debug(`An error occurred trying to resolve: ${host}`);\n          self.logger.debug(`Error: ${e.message}`);\n          self.logger.debug('Re-trying dns lookup again....');\n          return {\n            completed: false\n          };\n        }\n      },\n      timeout: this.options.timeout || Duration.seconds(30),\n      frequency: this.options.frequency || Duration.seconds(10),\n      timeoutErrorName: 'MyDomainResolverTimeoutError'\n    };\n    const client = await PollingClient.create(pollingOptions);\n    return ensureString(await client.subscribe());\n  }\n\n  /**\n   * Used to initialize asynchronous components.\n   */\n  protected async init(): Promise<void> {\n    this.logger = await Logger.child('MyDomainResolver');\n  }\n}\n\nexport namespace MyDomainResolver {\n  /**\n   * Options for the MyDomain DNS resolver.\n   */\n  export interface Options {\n    /**\n     * The host to resolve.\n     */\n    url: URL;\n\n    /**\n     * The retry interval.\n     */\n    timeout?: Duration;\n\n    /**\n     * The retry timeout.\n     */\n    frequency?: Duration;\n  }\n}\n"],"names":["AsyncOptionalCreatable","promisify","lookup","Duration","PollingClient","ensureString","Logger","URL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAkBA;;;;;;;;;;;;;;;;;MAiBa,gBAAiB,SAAQA,gCAAgD;IAOpF,YAAmB,OAAkC;QACnD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,GAAG,EAAE,gBAAgB,CAAC,cAAc,EAAE,CAAC;KACpE;;;;;IAMM,MAAM,OAAO;QAClB,MAAM,IAAI,GAAqB,IAAI,CAAC;QACpC,MAAM,cAAc,GAA0B;YAC5C,MAAM,IAAI;gBACR,MAAM,IAAI,GAAW,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC3C,IAAI,SAA8B,CAAC;gBAEnC,IAAI;oBACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;oBACxD,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;wBACrD,OAAO;4BACL,SAAS,EAAE,IAAI;4BACf,OAAO,EAAE,WAAW;yBACrB,CAAC;qBACH;oBACD,SAAS,GAAG,MAAMC,cAAS,CAACC,UAAM,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,IAAI,YAAY,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;oBAC9F,OAAO;wBACL,SAAS,EAAE,IAAI;wBACf,OAAO,EAAE,SAAS,CAAC,OAAO;qBAC3B,CAAC;iBACH;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,IAAI,EAAE,CAAC,CAAC;oBAClE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBACpD,OAAO;wBACL,SAAS,EAAE,KAAK;qBACjB,CAAC;iBACH;aACF;YACD,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,IAAIC,kBAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACrD,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,IAAIA,kBAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACzD,gBAAgB,EAAE,8BAA8B;SACjD,CAAC;QACF,MAAM,MAAM,GAAG,MAAMC,kCAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAC1D,OAAOC,wBAAY,CAAC,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;KAC/C;;;;IAKS,MAAM,IAAI;QAClB,IAAI,CAAC,MAAM,GAAG,MAAMC,aAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;KACtD;;AA1Da,+BAAc,GAAG,IAAIC,OAAG,CAAC,8BAA8B,CAAC;;;;"}