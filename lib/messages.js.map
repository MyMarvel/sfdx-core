{"version":3,"file":"messages.js","sources":["../src/messages.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n/*\n * NOTE: This is the lowest level class in core and should not import any\n * other local classes or utils to prevent circular dependencies or testing\n * stub issues.\n */\n\nimport { NamedError } from '@salesforce/kit';\nimport {\n  AnyJson,\n  asString,\n  ensureJsonMap,\n  ensureString,\n  isAnyJson,\n  isArray,\n  isObject,\n  Optional\n} from '@salesforce/ts-types';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as util from 'util';\n\nexport type Tokens = Array<string | boolean | number | null | undefined>;\n\nclass Key {\n  constructor(private packageName: string, private bundleName: string) {}\n\n  public toString() {\n    return `${this.packageName}:${this.bundleName}`;\n  }\n}\n\n/**\n * A loader function to return messages.\n * @param locale The local set by the framework.\n */\nexport type LoaderFunction = (locale: string) => Messages;\n\n/**\n * The core message framework manages messages and allows them to be accessible by\n * all plugins and consumers of sfdx-core. It is set up to handle localization down\n * the road at no additional effort to the consumer. Messages can be used for\n * anything from user output (like the console), to error messages, to returned\n * data from a method.\n *\n * Messages are loaded from loader functions. The loader functions will only run\n * when a message is required. This prevents all messages from being loaded into memory at\n * application startup. The functions can load from memory, a file, or a server.\n *\n * In the beginning of your app or file, add the loader functions to be used later. If using\n * json or js files in a root messages directory (`<moduleRoot>/messages`), load the entire directory\n * automatically with {@link Messages.importMessagesDirectory}. Message files must be in `.json` or `.js`\n * that exports a json object with **only** top level key-value pairs. The values support\n * [util.format](https://nodejs.org/api/util.html#util_util_format_format_args) style strings\n * that apply the tokens passed into {@link Message.getMessage}\n *\n * A sample message file.\n * ```\n * {\n *    'msgKey': 'A message displayed in the terminal'\n * }\n * ```\n *\n * **Note:** When running unit tests individually, you may see errors that the messages aren't found.\n * This is because `index.js` isn't loaded when tests run like they are when the package is required.\n * To allow tests to run, import the message directory in each test (it will only\n * do it once) or load the message file the test depends on individually.\n *\n * ```\n * // Create loader functions for all files in the messages directory\n * Messages.importMessagesDirectory(__dirname);\n *\n * // Now you can use the messages from anywhere in your code or file.\n * // If using importMessageDirectory, the bundle name is the file name.\n * const messages : Messages = Messages.loadMessages(packageName, bundleName);\n *\n * // Messages now contains all the message in the bundleName file.\n * messages.getMessage('JsonParseError');\n * ```\n */\nexport class Messages {\n  /**\n   * Internal readFile. Exposed for unit testing. Do not use util/fs.readFile as messages.js\n   * should have no internal dependencies.\n   * @param filePath read file target.\n   * @ignore\n   */\n  public static _readFile = (filePath: string): AnyJson => {\n    return require(filePath);\n  };\n\n  /**\n   * Get the locale. This will always return 'en_US' but will return the\n   * machine's locale in the future.\n   */\n  public static getLocale(): string {\n    return 'en_US';\n  }\n\n  /**\n   * Set a custom loader function for a package and bundle that will be called on {@link Messages.loadMessages}.\n   * @param packageName The npm package name.\n   * @param bundle The name of the bundle.\n   * @param loader The loader function.\n   */\n  public static setLoaderFunction(packageName: string, bundle: string, loader: LoaderFunction): void {\n    this.loaders.set(new Key(packageName, bundle).toString(), loader);\n  }\n\n  /**\n   * Generate a file loading function. Use {@link Messages.importMessageFile} unless\n   * overriding the bundleName is required, then manually pass the loader\n   * function to {@link Messages.setLoaderFunction}.\n   *\n   * @param bundleName The name of the bundle.\n   * @param filePath The messages file path.\n   */\n  public static generateFileLoaderFunction(bundleName: string, filePath: string): LoaderFunction {\n    return (locale: string): Messages => {\n      // Anything can be returned by a js file, so stringify the results to ensure valid json is returned.\n      const fileContents: string = JSON.stringify(Messages._readFile(filePath));\n\n      // If the file is empty, JSON.stringify will turn it into \"\" which will validate on parse, so throw.\n      if (!fileContents || fileContents === 'null' || fileContents === '\"\"') {\n        const error = new Error(`Invalid message file: ${filePath}. No content.`);\n        error.name = 'SfdxError';\n        throw error;\n      }\n\n      let json;\n\n      try {\n        json = JSON.parse(fileContents);\n\n        if (!isObject(json)) {\n          // Bubble up\n          throw new Error(`Unexpected token. Found returned content type '${typeof json}'.`);\n        }\n      } catch (err) {\n        // Provide a nicer error message for a common JSON parse error; Unexpected token\n        if (err.message.startsWith('Unexpected token')) {\n          const parseError = new Error(`Invalid JSON content in message file: ${filePath}\\n${err.message}`);\n          parseError.name = err.name;\n          throw parseError;\n        }\n        throw err;\n      }\n\n      const map = new Map<string, AnyJson>(Object.entries(json));\n\n      return new Messages(bundleName, locale, map);\n    };\n  }\n\n  /**\n   * Add a single message file to the list of loading functions using the file name as the bundle name.\n   * The loader will only be added if the bundle name is not already taken.\n   *\n   * @param packageName The npm package name.\n   * @param filePath The path of the file.\n   */\n  public static importMessageFile(packageName: string, filePath: string): void {\n    if (path.extname(filePath) !== '.json' && path.extname(filePath) !== '.js') {\n      throw new Error(`Only json and js message files are allowed, not ${path.extname(filePath)}`);\n    }\n    const bundleName = path.basename(filePath, path.extname(filePath));\n\n    if (!Messages.isCached(packageName, bundleName)) {\n      this.setLoaderFunction(packageName, bundleName, Messages.generateFileLoaderFunction(bundleName, filePath));\n    }\n  }\n\n  /**\n   * Import all json and js files in a messages directory. Use the file name as the bundle key when\n   * {@link Messages.loadMessages} is called. By default, we're assuming the moduleDirectoryPart is a\n   * typescript project and will truncate to root path (where the package.json file is). If your messages\n   * directory is in another spot or you are not using typescript, pass in false for truncateToProjectPath.\n   *\n   * ```\n   * // e.g. If your message directory is in the project root, you would do:\n   * Messages.importMessagesDirectory(__dirname);\n   * ```\n   *\n   * @param moduleDirectoryPath The path to load the messages folder.\n   * @param truncateToProjectPath Will look for the messages directory in the project root (where the package.json file is located).\n   * i.e., the module is typescript and the messages folder is in the top level of the module directory.\n   * @param packageName The npm package name. Figured out from the root directory's package.json.\n   */\n  public static importMessagesDirectory(\n    moduleDirectoryPath: string,\n    truncateToProjectPath = true,\n    packageName?: string\n  ): void {\n    let moduleMessagesDirPath = moduleDirectoryPath;\n    let projectRoot = moduleDirectoryPath;\n\n    if (!path.isAbsolute(moduleDirectoryPath)) {\n      throw new Error('Invalid module path. Relative URLs are not allowed.');\n    }\n\n    while (projectRoot.length >= 0) {\n      try {\n        fs.statSync(path.join(projectRoot, 'package.json'));\n        break;\n      } catch (err) {\n        if (err.code !== 'ENOENT') throw err;\n        projectRoot = projectRoot.substring(0, projectRoot.lastIndexOf(path.sep));\n      }\n    }\n\n    if (truncateToProjectPath) {\n      moduleMessagesDirPath = projectRoot;\n    }\n\n    if (!packageName) {\n      const errMessage = `Invalid or missing package.json file at '${moduleMessagesDirPath}'. If not using a package.json, pass in a packageName.`;\n      try {\n        packageName = asString(\n          ensureJsonMap(Messages._readFile(path.join(moduleMessagesDirPath, 'package.json'))).name\n        );\n        if (!packageName) {\n          throw new NamedError('MissingPackageName', errMessage);\n        }\n      } catch (err) {\n        throw new NamedError('MissingPackageName', errMessage, err);\n      }\n    }\n\n    moduleMessagesDirPath += `${path.sep}messages`;\n\n    for (const file of fs.readdirSync(moduleMessagesDirPath)) {\n      const filePath = path.join(moduleMessagesDirPath, file);\n      const stat = fs.statSync(filePath);\n\n      if (stat) {\n        if (stat.isDirectory()) {\n          // When we support other locales, load them from /messages/<local>/<bundleName>.json\n          // Change generateFileLoaderFunction to handle loading locales.\n        } else if (stat.isFile()) {\n          this.importMessageFile(packageName, filePath);\n        }\n      }\n    }\n  }\n\n  /**\n   * Load messages for a given package and bundle. If the bundle is not already cached, use the loader function\n   * created from {@link Messages.setLoaderFunction} or {@link Messages.importMessagesDirectory}.\n   *\n   * @param packageName The name of the npm package.\n   * @param bundleName The name of the bundle to load.\n   */\n  public static loadMessages(packageName: string, bundleName: string): Messages {\n    const key = new Key(packageName, bundleName);\n    let messages: Optional<Messages>;\n\n    if (this.isCached(packageName, bundleName)) {\n      messages = this.bundles.get(key.toString());\n    } else if (this.loaders.has(key.toString())) {\n      const loader = this.loaders.get(key.toString());\n      if (loader) {\n        messages = loader(Messages.getLocale());\n        this.bundles.set(key.toString(), messages);\n        messages = this.bundles.get(key.toString());\n      }\n    }\n    if (messages) {\n      return messages;\n    }\n\n    // Don't use messages inside messages\n    throw new NamedError('MissingBundleError', `Missing bundle ${key.toString()} for locale ${Messages.getLocale()}.`);\n  }\n\n  /**\n   * Check if a bundle already been loaded.\n   * @param packageName The npm package name.\n   * @param bundleName The bundle name.\n   */\n  public static isCached(packageName: string, bundleName: string) {\n    return this.bundles.has(new Key(packageName, bundleName).toString());\n  }\n\n  // It would be AWESOME to use Map<Key, Message> but js does an object instance comparison and doesn't let you\n  // override valueOf or equals for the === operator, which map uses. So, Use Map<String, Message>\n\n  // A map of loading functions to dynamically load messages when they need to be used\n  private static loaders: Map<string, (locale: string) => Messages> = new Map<string, (locale: string) => Messages>();\n\n  // A map cache of messages bundles that have already been loaded\n  private static bundles: Map<string, Messages> = new Map<string, Messages>();\n\n  /**\n   * The locale of the messages in this bundle.\n   */\n  public readonly locale: string;\n  /**\n   * The bundle name.\n   */\n  public readonly bundleName: string;\n\n  /**\n   * Create a new messages bundle.\n   *\n   * **Note:** Use {Messages.loadMessages} unless you are writing your own loader function.\n   * @param bundleName The bundle name.\n   * @param locale The locale.\n   * @param messages The messages. Can not be modified once created.\n   */\n  constructor(bundleName: string, locale: string, private messages: Map<string, AnyJson>) {\n    this.bundleName = bundleName;\n    this.locale = locale;\n  }\n\n  /**\n   * Get a message using a message key and use the tokens as values for tokenization.\n   * @param key The key of the message.\n   * @param tokens The values to substitute in the message.\n   *\n   * **See** https://nodejs.org/api/util.html#util_util_format_format_args\n   */\n  public getMessage(key: string, tokens: Tokens = []): string {\n    return this.getMessageWithMap(key, tokens, this.messages);\n  }\n\n  private getMessageWithMap(key: string, tokens: Tokens = [], map: Map<string, AnyJson>): string {\n    // Allow nested keys for better grouping\n    const group = key.match(/([a-zA-Z0-9_-]+)\\.(.*)/);\n    if (group) {\n      const parentKey = group[1];\n      const childKey = group[2];\n      const childObject = map.get(parentKey);\n      if (childObject && isAnyJson(childObject)) {\n        const childMap = new Map<string, AnyJson>(Object.entries(childObject));\n        return this.getMessageWithMap(childKey, tokens, childMap);\n      }\n    }\n\n    if (!map.has(key)) {\n      // Don't use messages inside messages\n      throw new NamedError(\n        'MissingMessageError',\n        `Missing message ${this.bundleName}:${key} for locale ${Messages.getLocale()}.`\n      );\n    }\n    const msg = map.get(key);\n    const messages = (isArray(msg) ? msg : [msg]) as string[];\n    return messages\n      .map(message => {\n        ensureString(message);\n        return util.format(message, ...tokens);\n      })\n      .join(os.EOL);\n  }\n}\n"],"names":["isObject","path.extname","path.basename","path.isAbsolute","fs.statSync","path.join","path.sep","asString","ensureJsonMap","NamedError","fs.readdirSync","isAnyJson","isArray","ensureString","util.format","os.EOL"],"mappings":"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"}