{"version":3,"file":"sfdc.js","sources":["../../src/util/sfdc.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { findKey } from '@salesforce/kit';\nimport { AnyJson, asJsonMap, isJsonMap, JsonMap, Optional } from '@salesforce/ts-types';\nimport { URL } from 'url';\n\nexport const sfdc = {\n  /**\n   * Returns `true` if a provided URL contains a Salesforce owned domain.\n   *\n   * @param urlString The URL to inspect.\n   */\n  isSalesforceDomain: (urlString: string): boolean => {\n    let url: URL;\n\n    try {\n      url = new URL(urlString);\n    } catch (e) {\n      return false;\n    }\n\n    // Source https://help.salesforce.com/articleView?id=000003652&type=1\n    const allowlistOfSalesforceDomainPatterns: string[] = [\n      '.cloudforce.com',\n      '.content.force.com',\n      '.force.com',\n      '.salesforce.com',\n      '.salesforceliveagent.com',\n      '.secure.force.com'\n    ];\n\n    const allowlistOfSalesforceHosts: string[] = ['developer.salesforce.com', 'trailhead.salesforce.com'];\n\n    return allowlistOfSalesforceDomainPatterns.some(pattern => {\n      return url.hostname.endsWith(pattern) || allowlistOfSalesforceHosts.includes(url.hostname);\n    });\n  },\n\n  /**\n   * Converts an 18 character Salesforce ID to 15 characters.\n   *\n   * @param id The id to convert.\n   */\n  trimTo15: (id?: string): Optional<string> => {\n    if (id && id.length && id.length > 15) {\n      id = id.substring(0, 15);\n    }\n    return id;\n  },\n\n  /**\n   * Tests whether an API version matches the format `i.0`.\n   *\n   * @param value The API version as a string.\n   */\n  validateApiVersion: (value: string): boolean => {\n    return value == null || /[1-9]\\d\\.0/.test(value);\n  },\n\n  /**\n   * Tests whether an email matches the format `me@my.org`\n   *\n   * @param value The email as a string.\n   */\n  validateEmail: (value: string): boolean => {\n    return /^[^.][^@]*@[^.]+(\\.[^.\\s]+)+$/.test(value);\n  },\n\n  /**\n   * Tests whether a Salesforce ID is in the correct format, a 15- or 18-character length string with only letters and numbers\n   * @param value The ID as a string.\n   */\n  validateSalesforceId: (value: string): boolean => {\n    return /[a-zA-Z0-9]{18}|[a-zA-Z0-9]{15}/.test(value) && (value.length === 15 || value.length === 18);\n  },\n\n  /**\n   * Tests whether a path is in the correct format; the value doesn't include the characters \"[\", \"]\", \"?\", \"<\", \">\", \"?\", \"|\"\n   * @param value The path as a string.\n   */\n  validatePathDoesNotContainInvalidChars: (value: string): boolean => {\n    return !/[\\[\"\\?<>\\|\\]]+/.test(value);\n  },\n\n  /**\n   * Returns the first key within the object that has an upper case first letter.\n   *\n   * @param data The object in which to check key casing.\n   * @param sectionBlocklist properties in the object to exclude from the search. e.g. a blocklist of `[\"a\"]` and data of `{ \"a\": { \"B\" : \"b\"}}` would ignore `B` because it is in the object value under `a`.\n   */\n  findUpperCaseKeys: (data?: JsonMap, sectionBlocklist: string[] = []): Optional<string> => {\n    let key: Optional<string>;\n    findKey(data, (val: AnyJson, k: string) => {\n      if (k[0] === k[0].toUpperCase()) {\n        key = k;\n      } else if (isJsonMap(val)) {\n        if (sectionBlocklist.includes(k)) {\n          return key;\n        }\n        key = sfdc.findUpperCaseKeys(asJsonMap(val));\n      }\n      return key;\n    });\n    return key;\n  }\n};\n"],"names":["url","URL","findKey","isJsonMap","asJsonMap"],"mappings":";;;;;;;;;AAAA;;;;;;MAWa,IAAI,GAAG;;;;;;IAMlB,kBAAkB,EAAE,CAAC,SAAiB;QACpC,IAAIA,KAAQ,CAAC;QAEb,IAAI;YACFA,KAAG,GAAG,IAAIC,OAAG,CAAC,SAAS,CAAC,CAAC;SAC1B;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,KAAK,CAAC;SACd;;QAGD,MAAM,mCAAmC,GAAa;YACpD,iBAAiB;YACjB,oBAAoB;YACpB,YAAY;YACZ,iBAAiB;YACjB,0BAA0B;YAC1B,mBAAmB;SACpB,CAAC;QAEF,MAAM,0BAA0B,GAAa,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;QAEtG,OAAO,mCAAmC,CAAC,IAAI,CAAC,OAAO;YACrD,OAAOD,KAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,0BAA0B,CAAC,QAAQ,CAACA,KAAG,CAAC,QAAQ,CAAC,CAAC;SAC5F,CAAC,CAAC;KACJ;;;;;;IAOD,QAAQ,EAAE,CAAC,EAAW;QACpB,IAAI,EAAE,IAAI,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,EAAE;YACrC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SAC1B;QACD,OAAO,EAAE,CAAC;KACX;;;;;;IAOD,kBAAkB,EAAE,CAAC,KAAa;QAChC,OAAO,KAAK,IAAI,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClD;;;;;;IAOD,aAAa,EAAE,CAAC,KAAa;QAC3B,OAAO,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpD;;;;;IAMD,oBAAoB,EAAE,CAAC,KAAa;QAClC,OAAO,iCAAiC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,MAAM,KAAK,EAAE,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC;KACtG;;;;;IAMD,sCAAsC,EAAE,CAAC,KAAa;QACpD,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACtC;;;;;;;IAQD,iBAAiB,EAAE,CAAC,IAAc,EAAE,mBAA6B,EAAE;QACjE,IAAI,GAAqB,CAAC;QAC1BE,iBAAO,CAAC,IAAI,EAAE,CAAC,GAAY,EAAE,CAAS;YACpC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;gBAC/B,GAAG,GAAG,CAAC,CAAC;aACT;iBAAM,IAAIC,qBAAS,CAAC,GAAG,CAAC,EAAE;gBACzB,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAChC,OAAO,GAAG,CAAC;iBACZ;gBACD,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAACC,qBAAS,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9C;YACD,OAAO,GAAG,CAAC;SACZ,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;KACZ;;;;;"}