{"version":3,"file":"org.js","sources":["../src/org.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { AsyncCreatable } from '@salesforce/kit';\nimport {\n  AnyFunction,\n  AnyJson,\n  asString,\n  ensure,\n  ensureJsonArray,\n  ensureString,\n  getNumber,\n  getString,\n  isArray,\n  isBoolean,\n  isString,\n  JsonArray,\n  JsonMap,\n  Optional\n} from '@salesforce/ts-types';\nimport { QueryResult } from 'jsforce';\nimport { join as pathJoin } from 'path';\nimport { AuthFields, AuthInfo } from './authInfo';\nimport { Aliases } from './config/aliases';\nimport { AuthInfoConfig } from './config/authInfoConfig';\nimport { Config } from './config/config';\nimport { ConfigAggregator, ConfigInfo } from './config/configAggregator';\nimport { ConfigContents } from './config/configStore';\nimport { OrgUsersConfig } from './config/orgUsersConfig';\nimport { SandboxOrgConfig } from './config/sandboxOrgConfig';\nimport { Connection } from './connection';\nimport { Global } from './global';\nimport { Logger } from './logger';\nimport { SfdxError } from './sfdxError';\nimport { fs } from './util/fs';\nimport { sfdc } from './util/sfdc';\n\n/**\n * Provides a way to manage a locally authenticated Org.\n *\n * **See** {@link AuthInfo}\n *\n * **See** {@link Connection}\n *\n * **See** {@link Aliases}\n *\n * **See** {@link Config}\n *\n * ```\n * // Email username\n * const org1: Org = await Org.create({ aliasOrUsername: 'foo@example.com' });\n * // The defaultusername config property\n * const org2: Org = await Org.create({});\n * // Full Connection\n * const org3: Org = await Org.create({\n *   connection: await Connection.create({\n *     authInfo: await AuthInfo.create({ username: 'username' })\n *   })\n * });\n * ```\n *\n * **See** https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_usernames_orgs.htm\n */\nexport class Org extends AsyncCreatable<Org.Options> {\n  // tslint:disable-next-line:no-unused-variable\n  private status: Org.Status = Org.Status.UNKNOWN;\n  private configAggregator!: ConfigAggregator;\n\n  // Initialized in create\n  private logger!: Logger;\n  private connection!: Connection;\n\n  private options: Org.Options;\n\n  /**\n   * @ignore\n   */\n  public constructor(options: Org.Options) {\n    super(options);\n    this.options = options;\n  }\n\n  /**\n   * Clean all data files in the org's data path. Usually <workspace>/.sfdx/orgs/<username>.\n   * @param orgDataPath A relative path other than \"orgs/\".\n   * @param throwWhenRemoveFails Should the remove org operations throw an error on failure?\n   */\n\n  public async cleanLocalOrgData(orgDataPath?: string, throwWhenRemoveFails = false): Promise<void> {\n    let dataPath: string;\n    try {\n      const rootFolder: string = await Config.resolveRootFolder(false);\n      dataPath = pathJoin(rootFolder, Global.STATE_FOLDER, orgDataPath ? orgDataPath : 'orgs');\n      this.logger.debug(`cleaning data for path: ${dataPath}`);\n    } catch (err) {\n      if (err.name === 'InvalidProjectWorkspace') {\n        // If we aren't in a project dir, we can't clean up data files.\n        // If the user unlink this org outside of the workspace they used it in,\n        // data files will be left over.\n        return;\n      }\n      throw err;\n    }\n\n    return this.manageDelete(async () => await fs.remove(dataPath), dataPath, throwWhenRemoveFails);\n  }\n\n  /**\n   * @ignore\n   */\n  public async retrieveOrgUsersConfig(): Promise<OrgUsersConfig> {\n    return await OrgUsersConfig.create(OrgUsersConfig.getOptions(this.getOrgId()));\n  }\n\n  /**\n   * Removes the scratch org config file at $HOME/.sfdx/[name].json, any project level org\n   * files, all user auth files for the org, matching default config settings, and any\n   * matching aliases.\n   * @param throwWhenRemoveFails Determines if the call should throw an error or fail silently.\n   */\n  public async remove(throwWhenRemoveFails = false): Promise<void> {\n    // If deleting via the access token there shouldn't be any auth config files\n    // so just return;\n    if (this.getConnection().isUsingAccessToken()) {\n      return Promise.resolve();\n    }\n    await this.removeSandboxConfig(throwWhenRemoveFails);\n    await this.removeUsers(throwWhenRemoveFails);\n    await this.removeUsersConfig();\n    // An attempt to remove this org's auth file occurs in this.removeUsersConfig. That's because this org's usersname is also\n    // included in the OrgUser config file.\n    //\n    // So, just in case no users are added to this org we will try the remove again.\n    await this.removeAuth();\n  }\n\n  /**\n   * Check that this org is a scratch org by asking the dev hub if it knows about it.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'NotADevHub' }* Not a Dev Hub.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'NoResults' }* No results.\n   *\n   * @param devHubUsernameOrAlias The username or alias of the dev hub org.\n   */\n  public async checkScratchOrg(devHubUsernameOrAlias?: string): Promise<Partial<AuthFields>> {\n    let aliasOrUsername = devHubUsernameOrAlias;\n    if (!aliasOrUsername) {\n      aliasOrUsername = asString(this.configAggregator.getPropertyValue(Config.DEFAULT_DEV_HUB_USERNAME));\n    }\n\n    const devHubConnection = (await Org.create({ aliasOrUsername })).getConnection();\n\n    const thisOrgAuthConfig = this.getConnection().getAuthInfoFields();\n\n    const trimmedId = sfdc.trimTo15(thisOrgAuthConfig.orgId);\n\n    const DEV_HUB_SOQL = `SELECT CreatedDate,Edition,ExpirationDate FROM ActiveScratchOrg WHERE ScratchOrg=\\'${trimmedId}\\'`;\n\n    let results;\n    try {\n      results = await (devHubConnection.query(DEV_HUB_SOQL) as Promise<QueryResult<object>>);\n    } catch (err) {\n      if (err.name === 'INVALID_TYPE') {\n        throw SfdxError.create('@salesforce/core', 'org', 'NotADevHub', [devHubConnection.getUsername()]);\n      }\n      throw err;\n    }\n\n    if (getNumber(results, 'records.length') !== 1) {\n      throw new SfdxError('No results', 'NoResults');\n    }\n\n    return thisOrgAuthConfig;\n  }\n\n  /**\n   * Returns the Org object or null if this org is not affiliated with a Dev Hub (according to the local config).\n   */\n  public async getDevHubOrg(): Promise<Optional<Org>> {\n    if (this.isDevHubOrg()) {\n      return this;\n    } else if (this.getField(Org.Fields.DEV_HUB_USERNAME)) {\n      const devHubUsername = ensureString(this.getField(Org.Fields.DEV_HUB_USERNAME));\n      return Org.create({\n        connection: await Connection.create({\n          authInfo: await AuthInfo.create({ username: devHubUsername })\n        })\n      });\n    }\n  }\n\n  /**\n   * Returns `true` if the org is a Dev Hub.\n   *\n   * **Note** This relies on a cached value in the auth file. If that property\n   * is not cached, this method will **always return false even if the org is a\n   * dev hub**. If you need accuracy, use the {@link Org.determineIfDevHubOrg} method.\n   */\n  public isDevHubOrg(): boolean {\n    const isDevHub = this.getField(Org.Fields.IS_DEV_HUB);\n    if (isBoolean(isDevHub)) {\n      return isDevHub;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Returns `true` if the org is a Dev Hub.\n   *\n   * Use a cached value. If the cached value is not set, then check access to the\n   * ScratchOrgInfo object to determine if the org is a dev hub.\n   *\n   * @param forceServerCheck Ignore the cached value and go straight to the server\n   * which will be required if the org flips on the dev hub after the value is already\n   * cached locally.\n   */\n  public async determineIfDevHubOrg(forceServerCheck = false) {\n    const cachedIsDevHub = this.getField(Org.Fields.IS_DEV_HUB);\n    if (!forceServerCheck && isBoolean(cachedIsDevHub)) {\n      return cachedIsDevHub;\n    }\n    if (this.isDevHubOrg()) {\n      return true;\n    }\n    this.logger.debug('isDevHub is not cached - querying server...');\n    const conn = this.getConnection();\n    let isDevHub = false;\n    try {\n      await conn.query('SELECT Id FROM ScratchOrgInfo');\n      isDevHub = true;\n    } catch (err) {\n      /* Not a dev hub */\n    }\n\n    const username = ensure(this.getUsername());\n    const auth = await AuthInfo.create({ username });\n    await auth.save({ isDevHub });\n    AuthInfo.clearCache(username);\n    // Reset the connection with the updated auth file\n    this.connection = await Connection.create({\n      authInfo: await AuthInfo.create({ username })\n    });\n    return isDevHub;\n  }\n\n  /**\n   * Refreshes the auth for this org's instance by calling HTTP GET on the baseUrl of the connection object.\n   */\n  public async refreshAuth(): Promise<void> {\n    this.logger.debug('Refreshing auth for org.');\n    const requestInfo = {\n      url: this.getConnection().baseUrl(),\n      method: 'GET'\n    };\n    const conn = this.getConnection();\n    await conn.request(requestInfo);\n  }\n\n  /**\n   *  Reads and returns the content of all user auth files for this org as an array.\n   */\n  public async readUserAuthFiles(): Promise<AuthInfo[]> {\n    const config: OrgUsersConfig = await this.retrieveOrgUsersConfig();\n    const contents: ConfigContents = await config.read();\n    const thisUsername = ensure(this.getUsername());\n    const usernames: JsonArray = ensureJsonArray(contents.usernames || [thisUsername]);\n    return Promise.all(\n      usernames.map(username => {\n        if (username === thisUsername) {\n          return AuthInfo.create({\n            username: this.getConnection().getUsername()\n          });\n        } else {\n          return AuthInfo.create({ username: ensureString(username) });\n        }\n      })\n    );\n  }\n\n  /**\n   * Adds a username to the user config for this org. For convenience `this` object is returned.\n   *\n   * ```\n   * const org: Org = await Org.create({\n   *   connection: await Connection.create({\n   *     authInfo: await AuthInfo.create('foo@example.com')\n   *   })\n   * });\n   * const userAuth: AuthInfo = await AuthInfo.create({\n   *   username: 'bar@example.com'\n   * });\n   * await org.addUsername(userAuth);\n   * ```\n   *\n   * @param {AuthInfo | string} auth The AuthInfo for the username to add.\n   */\n  public async addUsername(auth: AuthInfo | string): Promise<Org> {\n    if (!auth) {\n      throw new SfdxError('Missing auth info', 'MissingAuthInfo');\n    }\n\n    const _auth = isString(auth) ? await AuthInfo.create({ username: auth }) : auth;\n    this.logger.debug(`adding username ${_auth.getFields().username}`);\n\n    const orgConfig = await this.retrieveOrgUsersConfig();\n\n    const contents = await orgConfig.read();\n    // TODO: This is kind of screwy because contents values can be `AnyJson | object`...\n    // needs config refactoring to improve\n    const usernames = contents.usernames || [];\n\n    if (!isArray(usernames)) {\n      throw new SfdxError('Usernames is not an array', 'UnexpectedDataFormat');\n    }\n\n    let shouldUpdate = false;\n\n    const thisUsername = ensure(this.getUsername());\n    if (!usernames.includes(thisUsername)) {\n      usernames.push(thisUsername);\n      shouldUpdate = true;\n    }\n\n    const username = _auth.getFields().username;\n    if (username) {\n      usernames.push(username);\n      shouldUpdate = true;\n    }\n\n    if (shouldUpdate) {\n      orgConfig.set('usernames', usernames);\n      await orgConfig.write();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes a username from the user config for this object. For convenience `this` object is returned.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'MissingAuthInfo' }* Auth info is missing.\n   *\n   * @param {AuthInfo | string} auth The AuthInfo containing the username to remove.\n   */\n  public async removeUsername(auth: AuthInfo | string): Promise<Org> {\n    if (!auth) {\n      throw new SfdxError('Missing auth info', 'MissingAuthInfo');\n    }\n\n    const _auth: AuthInfo = isString(auth) ? await AuthInfo.create({ username: auth }) : auth;\n\n    this.logger.debug(`removing username ${_auth.getFields().username}`);\n\n    const orgConfig: OrgUsersConfig = await this.retrieveOrgUsersConfig();\n\n    const contents: ConfigContents = await orgConfig.read();\n\n    const targetUser = _auth.getFields().username;\n    const usernames = (contents.usernames || []) as string[];\n    contents.usernames = usernames.filter(username => username !== targetUser);\n\n    await orgConfig.write();\n    return this;\n  }\n\n  /**\n   * Sets the key/value pair in the sandbox config for this org. For convenience `this` object is returned.\n   *\n   *\n   * @param {key} The key for this value\n   * @param {value} The value to save\n   */\n  public async setSandboxOrgConfigField(field: SandboxOrgConfig.Fields, value: string): Promise<Org> {\n    const sandboxOrgConfig = await this.retrieveSandboxOrgConfig();\n    sandboxOrgConfig.set(field, value);\n    await sandboxOrgConfig.write();\n    return this;\n  }\n\n  /**\n   * Returns an org config field. Returns undefined if the field is not set or invalid.\n   */\n  public async getSandboxOrgConfigField(field: SandboxOrgConfig.Fields) {\n    const sandboxOrgConfig = await this.retrieveSandboxOrgConfig();\n    return sandboxOrgConfig.get(field);\n  }\n\n  /**\n   * Retrieves the highest api version that is supported by the target server instance. If the apiVersion configured for\n   * Sfdx is greater than the one returned in this call an api version mismatch occurs. In the case of the CLI that\n   * results in a warning.\n   */\n  public async retrieveMaxApiVersion(): Promise<string> {\n    return await this.getConnection().retrieveMaxApiVersion();\n  }\n\n  /**\n   * Returns the admin username used to create the org.\n   */\n  public getUsername(): Optional<string> {\n    return this.getConnection().getUsername();\n  }\n\n  /**\n   * Returns the orgId for this org.\n   */\n  public getOrgId(): string {\n    return this.getField(Org.Fields.ORG_ID) as string;\n  }\n\n  /**\n   * Returns for the config aggregator.\n   */\n  public getConfigAggregator(): ConfigAggregator {\n    return this.configAggregator;\n  }\n\n  /**\n   * Returns an org field. Returns undefined if the field is not set or invalid.\n   */\n  public getField(key: Org.Fields): AnyJson {\n    // @ts-ignore TODO: Need to refactor storage of these values on both Org and AuthFields\n    return this[key] || this.getConnection().getAuthInfoFields()[key];\n  }\n\n  /**\n   * Returns a map of requested fields.\n   */\n  public getFields(keys: Org.Fields[]): JsonMap {\n    const json: JsonMap = {};\n    return keys.reduce((map, key) => {\n      map[key] = this.getField(key);\n      return map;\n    }, json);\n  }\n\n  /**\n   * Returns the JSForce connection for the org.\n   */\n  public getConnection(): Connection {\n    return this.connection;\n  }\n\n  /**\n   * Initialize async components.\n   */\n  protected async init(): Promise<void> {\n    this.logger = await Logger.child('Org');\n\n    this.configAggregator = this.options.aggregator ? this.options.aggregator : await ConfigAggregator.create();\n\n    if (!this.options.connection) {\n      if (this.options.aliasOrUsername == null) {\n        this.configAggregator = this.getConfigAggregator();\n        const aliasOrUsername = this.options.isDevHub\n          ? getString(this.configAggregator.getInfo(Config.DEFAULT_DEV_HUB_USERNAME), 'value')\n          : getString(this.configAggregator.getInfo(Config.DEFAULT_USERNAME), 'value');\n        this.options.aliasOrUsername = aliasOrUsername || undefined;\n      }\n\n      const username = this.options.aliasOrUsername;\n      this.connection = await Connection.create({\n        // If no username is provided or resolvable from an alias, AuthInfo will throw an SfdxError.\n        authInfo: await AuthInfo.create({\n          username: (username != null && (await Aliases.fetch(username))) || username\n        })\n      });\n    } else {\n      this.connection = this.options.connection;\n    }\n  }\n\n  /**\n   * **Throws** *{@link SfdxError} Throws and unsupported error.\n   */\n  protected getDefaultOptions(): Org.Options {\n    throw new SfdxError('Not Supported');\n  }\n\n  /**\n   * Returns a promise to delete an auth info file from the local file system and any related cache information for\n   * this Org.. You don't want to call this method directly. Instead consider calling Org.remove()\n   */\n  private async removeAuth(): Promise<void> {\n    const username = ensure(this.getUsername());\n    this.logger.debug(`Removing auth for user: ${username}`);\n    const config = await AuthInfoConfig.create({\n      ...AuthInfoConfig.getOptions(username),\n      throwOnNotFound: false\n    });\n\n    this.logger.debug(`Clearing auth cache for user: ${username}`);\n    AuthInfo.clearCache(username);\n    if (await config.exists()) {\n      await config.unlink();\n    }\n  }\n\n  /**\n   * Deletes the users config file\n   */\n  private async removeUsersConfig() {\n    const config = await this.retrieveOrgUsersConfig();\n    if (await config.exists()) {\n      this.logger.debug(`Removing org users config at: ${config.getPath()}`);\n      await config.unlink();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  private async retrieveSandboxOrgConfig(): Promise<SandboxOrgConfig> {\n    return await SandboxOrgConfig.create(SandboxOrgConfig.getOptions(this.getOrgId()));\n  }\n\n  private manageDelete(cb: AnyFunction<Promise<void>>, dirPath: string, throwWhenRemoveFails: boolean): Promise<void> {\n    return cb().catch(e => {\n      if (throwWhenRemoveFails) {\n        throw e;\n      } else {\n        this.logger.warn(`failed to read directory ${dirPath}`);\n        return;\n      }\n    });\n  }\n\n  /**\n   * Remove the org users auth file.\n   * @param throwWhenRemoveFails true if manageDelete should throw or not if the deleted fails.\n   */\n  private async removeUsers(throwWhenRemoveFails: boolean) {\n    this.logger.debug(`Removing users associate with org: ${this.getOrgId()}`);\n    const config = await this.retrieveOrgUsersConfig();\n    this.logger.debug(`using path for org users: ${config.getPath()}`);\n    if (await config.exists()) {\n      const _auths: AuthInfo[] = await this.readUserAuthFiles();\n      const aliases: Aliases = await Aliases.create(Aliases.getDefaultOptions());\n      this.logger.info(`Cleaning up usernames in org: ${this.getOrgId()}`);\n\n      for (const auth of _auths) {\n        const username = auth.getFields().username;\n\n        const aliasKeys = (username && aliases.getKeysByValue(username)) || [];\n        aliases.unsetAll(aliasKeys);\n\n        let orgForUser;\n        if (username === this.getUsername()) {\n          orgForUser = this;\n        } else {\n          const _info = await AuthInfo.create({ username });\n          const connection: Connection = await Connection.create({ authInfo: _info });\n          orgForUser = await Org.create({ connection });\n        }\n\n        const orgType = this.isDevHubOrg() ? Config.DEFAULT_DEV_HUB_USERNAME : Config.DEFAULT_USERNAME;\n\n        const configInfo: ConfigInfo = await orgForUser.configAggregator.getInfo(orgType);\n\n        if (\n          (configInfo.value === username || aliasKeys.includes(configInfo.value as string)) &&\n          (configInfo.isGlobal() || configInfo.isLocal())\n        ) {\n          await Config.update(configInfo.isGlobal(), orgType, undefined);\n        }\n        await orgForUser.removeAuth();\n      }\n\n      await aliases.write();\n    }\n  }\n\n  /**\n   * Remove an associate sandbox config.\n   * @param throwWhenRemoveFails true if manageDelete should throw or not if the deleted fails.\n   */\n  private async removeSandboxConfig(throwWhenRemoveFails: boolean) {\n    const sandboxOrgConfig = await this.retrieveSandboxOrgConfig();\n    if (await sandboxOrgConfig.exists()) {\n      await this.manageDelete(\n        async () => await sandboxOrgConfig.unlink(),\n        sandboxOrgConfig.getPath(),\n        throwWhenRemoveFails\n      );\n    }\n  }\n}\n\nexport namespace Org {\n  /**\n   * Constructor Options for and Org.\n   */\n  export interface Options {\n    aliasOrUsername?: string;\n    connection?: Connection;\n    aggregator?: ConfigAggregator;\n    isDevHub?: boolean;\n  }\n\n  /**\n   * Scratch Org status.\n   */\n  export enum Status {\n    /**\n     * The scratch org is active.\n     */\n    ACTIVE = 'ACTIVE',\n    /**\n     * The scratch org has expired.\n     */\n    EXPIRED = 'EXPIRED',\n    /**\n     * The org is a scratch Org but no dev hub is indicated.\n     */\n    UNKNOWN = 'UNKNOWN',\n    /**\n     * The dev hub configuration is reporting an active Scratch org but the AuthInfo cannot be found.\n     */\n    MISSING = 'MISSING'\n  }\n\n  /**\n   * Org Fields.\n   */\n  // A subset of fields from AuthInfoFields and properties that are specific to Org,\n  // and properties that are defined on Org itself.\n  export enum Fields {\n    /**\n     * The org alias.\n     */\n    // From AuthInfo\n    ALIAS = 'alias',\n    CREATED = 'created',\n    /**\n     * The Salesforce instance the org was created on. e.g. `cs42`.\n     */\n    CREATED_ORG_INSTANCE = 'createdOrgInstance',\n    /**\n     * The username of the dev hub org that created this org. Only populated for scratch orgs.\n     */\n    DEV_HUB_USERNAME = 'devHubUsername',\n    /**\n     * The full url of the instance the org lives on.\n     */\n    INSTANCE_URL = 'instanceUrl',\n    /**\n     * Is the current org a dev hub org. e.g. They have access to the `ScratchOrgInfo` object.\n     */\n    IS_DEV_HUB = 'isDevHub',\n    /**\n     * The login url of the org. e.g. `https://login.salesforce.com` or `https://test.salesforce.com`.\n     */\n    LOGIN_URL = 'loginUrl',\n    /**\n     *  The org ID.\n     */\n    ORG_ID = 'orgId',\n    /**\n     * The `OrgStatus` of the org.\n     */\n    STATUS = 'status',\n    /**\n     * The snapshot used to create the scratch org.\n     */\n    SNAPSHOT = 'snapshot'\n\n    // Should it be on org? Leave it off for now, as it might\n    // be confusing to the consumer what this actually is.\n    // USERNAMES = 'usernames',\n\n    // Keep separation of concerns. I think these should be on a \"user\" that belongs to the org.\n    // Org can have a list of user objects that belong to it? Should connection be on user and org.getConnection()\n    // gets the orgs current user for the process? Maybe we just want to keep with the Org only model for\n    // the end of time?\n    // USER_ID = 'userId',\n    // USERNAME = 'username',\n    // PASSWORD = 'password',\n    // USER_PROFILE_NAME = 'userProfileName'\n  }\n}\n"],"names":["AsyncCreatable","Config","pathJoin","Global","fs","OrgUsersConfig","asString","sfdc","SfdxError","getNumber","ensureString","Connection","AuthInfo","isBoolean","ensure","ensureJsonArray","isString","isArray","Logger","ConfigAggregator","getString","Aliases","AuthInfoConfig","SandboxOrgConfig","connection"],"mappings":"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"}