{"version":3,"file":"global.js","sources":["../src/global.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { env } from '@salesforce/kit';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { fs } from './util/fs';\n\n/**\n * Represents an environment mode.  Supports `production`, `development`, `demo`, and `test`\n * with the default mode being `production`.\n *\n * To set the mode, `export SFDX_ENV=<mode>` in your current environment.\n */\nexport enum Mode {\n  PRODUCTION = 'production',\n  DEVELOPMENT = 'development',\n  DEMO = 'demo',\n  TEST = 'test'\n}\n\n/**\n * Global constants, methods, and configuration.\n */\nexport class Global {\n  /**\n   * The global folder in which state is stored.\n   */\n  public static readonly STATE_FOLDER = '.sfdx';\n\n  /**\n   * The full system path to the global state folder.\n   *\n   * **See** {@link Global.STATE_FOLDER}\n   */\n  public static readonly DIR: string = path.join(os.homedir(), Global.STATE_FOLDER);\n\n  /**\n   * The full system path to the global log file.\n   */\n  public static readonly LOG_FILE_PATH: string = path.join(Global.DIR, 'sfdx.log');\n\n  /**\n   * Gets the current mode environment variable as a {@link Mode} instance.\n   *\n   * ```\n   * console.log(Global.getEnvironmentMode() === Mode.PRODUCTION);\n   * ```\n   */\n  public static getEnvironmentMode(): Mode {\n    return Mode[env.getKeyOf('SFDX_ENV', Mode, Mode.PRODUCTION, value => value.toUpperCase())];\n  }\n\n  /**\n   * Creates a directory within {@link Global.DIR}, or {@link Global.DIR} itself if the `dirPath` param\n   * is not provided. This is resolved or rejected when the directory creation operation has completed.\n   *\n   * @param dirPath The directory path to be created within {@link Global.DIR}.\n   */\n  public static async createDir(dirPath?: string): Promise<void> {\n    dirPath = dirPath ? path.join(Global.DIR, dirPath) : Global.DIR;\n    await fs.mkdirp(dirPath, fs.DEFAULT_USER_DIR_MODE);\n  }\n}\n"],"names":["Mode","env","path.join","fs","os.homedir"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAkBA,WAAY,IAAI;IACd,iCAAyB,CAAA;IACzB,mCAA2B,CAAA;IAC3B,qBAAa,CAAA;IACb,qBAAa,CAAA;AACf,CAAC,EALWA,YAAI,KAAJA,YAAI,QAKf;AAED;;;MAGa,MAAM;;;;;;;;IAyBV,OAAO,kBAAkB;QAC9B,OAAOA,YAAI,CAACC,aAAG,CAAC,QAAQ,CAAC,UAAU,EAAED,YAAI,EAAEA,YAAI,CAAC,UAAU,EAAE,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;KAC5F;;;;;;;IAQM,aAAa,SAAS,CAAC,OAAgB;QAC5C,OAAO,GAAG,OAAO,GAAGE,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;QAChE,MAAMC,UAAE,CAAC,MAAM,CAAC,OAAO,EAAEA,UAAE,CAAC,qBAAqB,CAAC,CAAC;KACpD;;AArCD;;;AAGuB,mBAAY,GAAG,OAAO,CAAC;AAE9C;;;;;AAKuB,UAAG,GAAWD,SAAS,CAACE,UAAU,EAAE,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;AAElF;;;AAGuB,oBAAa,GAAWF,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC;;;;"}