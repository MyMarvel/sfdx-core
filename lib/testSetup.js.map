{"version":3,"file":"testSetup.js","sources":["../node_modules/@salesforce/ts-sinon/lib/index.js","../src/testSetup.ts"],"sourcesContent":["\"use strict\";\n/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * Licensed under the BSD 3-Clause license.\n * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ts_types_1 = require(\"@salesforce/ts-types\");\n/**\n * Provides the ability to stub methods on object instances and prototypes. More it specifically provides a mechanism\n * for stubbing private functions.\n * @param sandbox The Sinon sandbox in which to perform the relevant stubbing.\n * @param target The target object of the stubbing operation.\n * @param method The method name of the stub.\n */\nfunction stubMethod(sandbox, target, method) {\n    // force method to keyof T to allow stubbing private, protected, and methods otherwise not exposed in typings\n    return sandbox.stub(target, method);\n}\nexports.stubMethod = stubMethod;\n/**\n * Provides the ability to create a spy object on instance and prototype methods. More it specifically provides a\n * mechanism for spying on private functions.\n * @param sandbox The Sinon sandbox in which to perform the relevant stubbing.\n * @param target The target object of the stubbing operation.\n * @param method The method name of the stub.\n */\nfunction spyMethod(sandbox, target, method) {\n    // force method to keyof T to allow spying on private, protected, and methods otherwise not exposed in typings\n    return sandbox.spy(target, method);\n}\nexports.spyMethod = spyMethod;\n/**\n * Returns a proxy of an object of type `T` whose public function property values have been replaced by properly typed\n * Sinon stubs if not already otherwise stubbed.  If the `members` object param is provided, the proxy will treat them\n * as the object's real properties and functions.  These values become the returns and fakes backing a well-typed mock\n * object.\n *\n * Note that when stubbing an object created from a class with non-public members, the resulting `StubbedType<T>` will\n * not be accepted as a stand-in for `T`.  In order to use the result as an instance of `T` (say, for dependency\n * injection use cases), use {@link fromStub} to restore the type to `T` at the constrained call site.\n *\n * @param sandbox The Sinon sandbox in which to perform the relevant stubbing.\n * @param target The target object of the stubbing operation.\n * @param members Optional overrides of zero or more members of the object.\n */\nfunction stubObject(sandbox, target, members = {}) {\n    return new Proxy(target, {\n        get: makeProxyGet(sandbox, members, false)\n    });\n}\nexports.stubObject = stubObject;\n/**\n * Returns a proxy of an object of type `T` whose function properties have been replaced by properly typed Sinon stubs\n * if not already otherwise stubbed.  If the `members` object param is provided, the proxy will treat them\n * as the object's real properties and functions.  These values become the returns and fakes backing a well-typed mock\n * object.  This is particularly valuable when you need to provide a function or class under test with an implementation\n * of a complex interface without having to manually create values for properties not involved in the test, such as\n * extensive configuration interfaces.\n *\n * Any interface properties not provided by the `members` object will be provided by the proxy as a basic `SinonStub`.\n * If this is not the desired behavior, be sure to provide your own value on the `members` object.\n *\n * @param sandbox The Sinon sandbox in which to perform the relevant stubbing.\n * @param members Optional overrides of zero or more members of the object.\n */\nfunction stubInterface(sandbox, members = {}) {\n    return new Proxy({}, {\n        get: makeProxyGet(sandbox, members, true)\n    });\n}\nexports.stubInterface = stubInterface;\n/**\n * Similar to {@link stubObject} but supports callable TypeScript function types that have both a call signature and\n * properties.\n *\n * @param sandbox The Sinon sandbox in which to perform the relevant stubbing.\n * @param target The target object of the stubbing operation.\n * @param members Optional overrides of zero or more members of the object.\n */\nfunction stubCallable(sandbox, members = {}, fake = () => { }) {\n    return new Proxy(sandbox.stub().callsFake(fake), {\n        get: makeProxyGet(sandbox, members, false),\n        apply: (target, thisArg, argumentsList) => {\n            return target.apply(thisArg, argumentsList);\n        }\n    });\n}\nexports.stubCallable = stubCallable;\n/**\n * Reverses the type conversion of an instance of a class from a `StubbedType<T>` to type the original type `T`.  This\n * is sometimes necessary because TypeScript's mapped types don't capture non-public class members -- as a result,\n * `StubbedType<T>` must be coerced * back to `T` explicitly when `T` is a class with non-public members and is being\n * passed to something that expects a real `T` value.  This will typically only be needed when injecting the return of\n * a {@link stubObject} call into a function or constructor requiring the original class type `T`.\n */\nfunction fromStub(stubbed) {\n    // Since `stubObject` produces a `Proxy` of `T` backed by a real instance of `T`, it's safe to simply achieve this\n    // with a type assertion.  Since much of the point of this library is to help avoid the need for type assertions,\n    // prefer the use of using `fromStub` over the direct assertion.\n    return stubbed;\n}\nexports.fromStub = fromStub;\n// Internal implementation for the generated proxy getters.\nconst makeProxyGet = (sandbox, members, stubMissing) => {\n    const cache = {};\n    return (target, name) => {\n        const stubMemberFn = (fn) => {\n            if (Object.keys(fn).length > 0) {\n                return stubCallable(sandbox, fn, fn);\n            }\n            return sandbox.stub().callsFake(fn);\n        };\n        if (cache[name] != null) {\n            return cache[name];\n        }\n        if (members[name] != null) {\n            if (ts_types_1.isFunction(members[name])) {\n                cache[name] = stubMemberFn(members[name]);\n            }\n            else {\n                cache[name] = members[name];\n            }\n        }\n        else if (ts_types_1.isFunction(target[name])) {\n            cache[name] = stubMemberFn(target[name]);\n        }\n        else if (target[name] == null && stubMissing) {\n            cache[name] = sandbox.stub();\n        }\n        else {\n            cache[name] = target[name];\n        }\n        return cache[name];\n    };\n};\n//# sourceMappingURL=index.js.map","/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport * as sinonType from 'sinon';\n\nimport { once, set } from '@salesforce/kit';\nimport { stubMethod } from '@salesforce/ts-sinon';\nimport {\n  AnyFunction,\n  AnyJson,\n  Dictionary,\n  ensureAnyJson,\n  ensureJsonMap,\n  ensureString,\n  getBoolean,\n  isJsonMap,\n  JsonMap,\n  Optional\n} from '@salesforce/ts-types';\nimport { randomBytes } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { tmpdir as osTmpdir } from 'os';\nimport { join as pathJoin } from 'path';\nimport { ConfigFile } from './config/configFile';\nimport { ConfigContents } from './config/configStore';\nimport { Connection } from './connection';\nimport { Crypto } from './crypto';\nimport { Logger } from './logger';\nimport { Messages } from './messages';\nimport { SfdxError } from './sfdxError';\nimport { CometClient, CometSubscription, StreamingExtension } from './status/streamingClient';\n\n/**\n * Different parts of the system that are mocked out. They can be restored for\n * individual tests. Test's stubs should always go on the DEFAULT which is exposed\n * on the TestContext.\n */\nexport interface SandboxTypes {\n  DEFAULT: any; // tslint:disable-line:no-any\n  CRYPTO: any; // tslint:disable-line:no-any\n  CONFIG: any; // tslint:disable-line:no-any\n  CONNECTION: any; // tslint:disable-line:no-any\n}\n\n/**\n * Different hooks into {@link ConfigFile} used for testing instead of doing file IO.\n */\nexport interface ConfigStub {\n  /**\n   * readFn A function that controls all aspect of {@link ConfigFile.read}. For example, it won't set the contents\n   * unless explicitly done. Only use this if you know what you are doing. Use retrieveContents\n   * instead.\n   */\n  readFn?: () => Promise<ConfigContents>;\n  /**\n   * A function that controls all aspects of {@link ConfigFile.write}. For example, it won't read the contents unless\n   * explicitly done. Only use this if you know what you are doing. Use updateContents instead.\n   */\n  writeFn?: (contents: AnyJson) => Promise<void>;\n  /**\n   * The contents that are used when @{link ConfigFile.read} unless retrieveContents is set. This will also contain the\n   * new config when @{link ConfigFile.write} is called. This will persist through config instances,\n   * such as {@link Alias.update} and {@link Alias.fetch}.\n   */\n  contents?: ConfigContents;\n  /**\n   * A function to conditionally read based on the config instance. The `this` value will be the config instance.\n   */\n  retrieveContents?: () => Promise<JsonMap>;\n  /**\n   * A function to conditionally set based on the config instance. The `this` value will be the config instance.\n   */\n  updateContents?: () => Promise<JsonMap>;\n}\n\n/**\n * Different configuration options when running before each\n */\nexport interface TestContext {\n  /**\n   * The default sandbox is cleared out before each test run.\n   *\n   * **See** [sinon sandbox]{@link http://sinonjs.org/releases/v1.17.7/sandbox/}.\n   */\n  SANDBOX: sinonType.SinonSandbox;\n  /**\n   * An object of different sandboxes. Used when\n   * needing to restore parts of the system for customized testing.\n   */\n  SANDBOXES: SandboxTypes;\n  /**\n   * The test logger that is used when {@link Logger.child} is used anywhere. It uses memory logging.\n   */\n  TEST_LOGGER: Logger;\n  /**\n   * id A unique id for the test run.\n   */\n  id: string;\n  /**\n   * A function that returns unique strings.\n   */\n  uniqid: () => string;\n  /**\n   * An object used in tests that interact with config files.\n   */\n  configStubs: {\n    [configName: string]: Optional<ConfigStub>;\n    AuthInfoConfig?: ConfigStub;\n    Aliases?: ConfigStub;\n    SfdxProjectJson?: ConfigStub;\n    SfdxConfig?: ConfigStub;\n  };\n  /**\n   * A function used when resolving the local path.\n   * @param uid Unique id.\n   */\n  localPathRetriever: (uid: string) => Promise<string>;\n  /**\n   * A function used when resolving the global path.\n   * @param uid Unique id.\n   */\n  globalPathRetriever: (uid: string) => Promise<string>;\n  /**\n   * A function used for resolving paths. Calls localPathRetriever and globalPathRetriever.\n   * @param isGlobal `true` if the config is global.\n   * @param uid user id.\n   */\n  rootPathRetriever: (isGlobal: boolean, uid?: string) => Promise<string>;\n  /**\n   * Used to mock http request to Salesforce.\n   * @param request An HttpRequest.\n   * @param options Additional options.\n   *\n   * **See** {@link Connection.request}\n   */\n  fakeConnectionRequest: (request: AnyJson, options?: AnyJson) => Promise<AnyJson>;\n  /**\n   * Gets a config stub contents by name.\n   * @param name The name of the config.\n   * @param group If the config supports groups.\n   */\n  getConfigStubContents(name: string, group?: string): ConfigContents;\n  /**\n   * Sets a config stub contents by name\n   * @param name The name of the config stub.\n   * @param value The actual stub contents. The Mock data.\n   */\n  setConfigStubContents(name: string, value: ConfigContents): void;\n}\n\nconst _uniqid = () => {\n  return randomBytes(16).toString('hex');\n};\n\nfunction getTestLocalPath(uid: string): Promise<string> {\n  return Promise.resolve(pathJoin(osTmpdir(), uid, 'sfdx_core', 'local'));\n}\n\nfunction getTestGlobalPath(uid: string): Promise<string> {\n  return Promise.resolve(pathJoin(osTmpdir(), uid, 'sfdx_core', 'global'));\n}\n\nasync function retrieveRootPath(isGlobal: boolean, uid: string = _uniqid()): Promise<string> {\n  return isGlobal ? await getTestGlobalPath(uid) : await getTestLocalPath(uid);\n}\n\nfunction defaultFakeConnectionRequest(): Promise<AnyJson> {\n  return Promise.resolve(ensureAnyJson({ records: [] }));\n}\n\n/**\n * Instantiate a @salesforce/core test context. This is automatically created by `const $$ = testSetup()`\n * but is useful if you don't want to have a global stub of @salesforce/core and you want to isolate it to\n * a single describe.\n *\n * **Note:** Call `stubContext` in your beforeEach to have clean stubs of @salesforce/core every test run.\n *\n * @example\n * ```\n * const $$ = instantiateContext();\n *\n * beforeEach(() => {\n *   stubContext($$);\n * });\n *\n * afterEach(() => {\n *   restoreContext($$);\n * });\n * ```\n * @param sinon\n */\n// tslint:disable-next-line: no-any\nexport const instantiateContext = (sinon?: any) => {\n  if (!sinon) {\n    try {\n      sinon = require('sinon');\n    } catch (e) {\n      throw new Error(\n        'The package sinon was not found. Add it to your package.json and pass it in to testSetup(sinon.sandbox)'\n      );\n    }\n  }\n\n  // Import all the messages files in the sfdx-core messages dir.\n  // Messages.importMessagesDirectory(pathJoin(__dirname, '..', '..'));\n  Messages.importMessagesDirectory(pathJoin(__dirname));\n  // Create a global sinon sandbox and a test logger instance for use within tests.\n  const defaultSandbox = sinon.createSandbox();\n  const testContext: TestContext = {\n    SANDBOX: defaultSandbox,\n    SANDBOXES: {\n      DEFAULT: defaultSandbox,\n      CONFIG: sinon.createSandbox(),\n      CRYPTO: sinon.createSandbox(),\n      CONNECTION: sinon.createSandbox()\n    },\n    TEST_LOGGER: new Logger({\n      name: 'SFDX_Core_Test_Logger'\n    }).useMemoryLogging(),\n    id: _uniqid(),\n    uniqid: _uniqid,\n    configStubs: {},\n    localPathRetriever: getTestLocalPath,\n    globalPathRetriever: getTestGlobalPath,\n    rootPathRetriever: retrieveRootPath,\n    fakeConnectionRequest: defaultFakeConnectionRequest,\n    getConfigStubContents(name: string, group?: string): ConfigContents {\n      const stub: Optional<ConfigStub> = this.configStubs[name];\n      if (stub && stub.contents) {\n        if (group && stub.contents[group]) {\n          return ensureJsonMap(stub.contents[group]);\n        } else {\n          return stub.contents;\n        }\n      }\n      return {};\n    },\n\n    setConfigStubContents(name: string, value: ConfigContents) {\n      if (ensureString(name) && isJsonMap(value)) {\n        this.configStubs[name] = value;\n      }\n    }\n  };\n  return testContext;\n};\n\n/**\n * Stub a @salesforce/core test context. This will mock out logging to a file, config file reading and writing,\n * local and global path resolution, and http request using connection (soon)*.\n *\n * This is automatically stubbed in the global beforeEach created by\n * `const $$ = testSetup()` but is useful if you don't want to have a global stub of @salesforce/core and you\n * want to isolate it to a single describe.\n *\n * **Note:** Always call `restoreContext` in your afterEach.\n *\n * @example\n * ```\n * const $$ = instantiateContext();\n *\n * beforeEach(() => {\n *   stubContext($$);\n * });\n *\n * afterEach(() => {\n *   restoreContext($$);\n * });\n * ```\n * @param testContext\n */\nexport const stubContext = (testContext: TestContext) => {\n  // Most core files create a child logger so stub this to return our test logger.\n  stubMethod(testContext.SANDBOX, Logger, 'child').returns(Promise.resolve(testContext.TEST_LOGGER));\n\n  testContext.SANDBOXES.CONFIG.stub(ConfigFile, 'resolveRootFolder').callsFake((isGlobal: boolean) =>\n    testContext.rootPathRetriever(isGlobal, testContext.id)\n  );\n\n  // Mock out all config file IO for all tests. They can restore individually if they need original functionality.\n  testContext.SANDBOXES.CONFIG.stub(ConfigFile.prototype, 'read').callsFake(async function(\n    this: ConfigFile<ConfigFile.Options>\n  ) {\n    const stub: ConfigStub = testContext.configStubs[this.constructor.name] || {};\n\n    // @ts-ignore set this to true to avoid an infinite loop in tests when reading config files.\n    this.hasRead = true;\n\n    if (stub.readFn) {\n      return await stub.readFn.call(this);\n    }\n\n    let contents = stub.contents || {};\n\n    if (stub.retrieveContents) {\n      contents = await stub.retrieveContents.call(this);\n    }\n\n    this.setContentsFromObject(contents);\n    return Promise.resolve(this.getContents());\n  });\n  testContext.SANDBOXES.CONFIG.stub(ConfigFile.prototype, 'write').callsFake(async function(\n    this: ConfigFile<ConfigFile.Options>,\n    newContents: ConfigContents\n  ) {\n    if (!testContext.configStubs[this.constructor.name]) {\n      testContext.configStubs[this.constructor.name] = {};\n    }\n    const stub = testContext.configStubs[this.constructor.name];\n    if (!stub) return;\n\n    if (stub.writeFn) {\n      return await stub.writeFn.call(this, newContents);\n    }\n\n    let contents = newContents || this.getContents();\n\n    if (stub.updateContents) {\n      contents = await stub.updateContents.call(this);\n    }\n    this.setContents(contents);\n    stub.contents = this.toObject();\n  });\n\n  testContext.SANDBOXES.CRYPTO.stub(Crypto.prototype, 'getKeyChain').callsFake(() =>\n    Promise.resolve({\n      setPassword: () => Promise.resolve(),\n      getPassword: (data: object, cb: AnyFunction) => cb(undefined, '12345678901234567890123456789012')\n    })\n  );\n\n  testContext.SANDBOXES.CONNECTION.stub(Connection.prototype, 'request').callsFake(function(\n    this: Connection,\n    request: string,\n    options?: Dictionary\n  ) {\n    if (request === `${this.instanceUrl}/services/data`) {\n      return Promise.resolve([{ version: '42.0' }]);\n    }\n    return testContext.fakeConnectionRequest.call(this, request, options as AnyJson);\n  });\n\n  // Always start with the default and tests beforeEach or it methods can override it.\n  testContext.fakeConnectionRequest = defaultFakeConnectionRequest;\n};\n\n/**\n * Restore a @salesforce/core test context. This is automatically stubbed in the global beforeEach created by\n * `const $$ = testSetup()` but is useful if you don't want to have a global stub of @salesforce/core and you\n * want to isolate it to a single describe.\n *\n * @example\n * ```\n * const $$ = instantiateContext();\n *\n * beforeEach(() => {\n *   stubContext($$);\n * });\n *\n * afterEach(() => {\n *   restoreContext($$);\n * });\n * ```\n * @param testContext\n */\nexport const restoreContext = (testContext: TestContext) => {\n  testContext.SANDBOX.restore();\n  Object.values(testContext.SANDBOXES).forEach(theSandbox => theSandbox.restore());\n  testContext.configStubs = {};\n};\n\n// tslint:disable-next-line:no-any\nconst _testSetup = (sinon?: any) => {\n  const testContext = instantiateContext(sinon);\n\n  beforeEach(() => {\n    stubContext(testContext);\n  });\n\n  afterEach(() => {\n    restoreContext(testContext);\n  });\n\n  return testContext;\n};\n\n/**\n * Use to mock out different pieces of sfdx-core to make testing easier. This will mock out\n * logging to a file, config file reading and writing, local and global path resolution, and\n * *http request using connection (soon)*.\n *\n * **Note:** The testSetup should be outside of the describe. If you need to stub per test, use\n * `instantiateContext`, `stubContext`, and `restoreContext`.\n * ```\n * // In a mocha tests\n * import testSetup from '@salesforce/core/lib/testSetup';\n *\n * const $$ = testSetup();\n *\n * describe(() => {\n *  it('test', () => {\n *    // Stub out your own method\n *    $$.SANDBOX.stub(MyClass.prototype, 'myMethod').returnsFake(() => {});\n *\n *    // Set the contents that is used when aliases are read. Same for all config files.\n *    $$.configStubs.Aliases = { contents: { 'myTestAlias': 'user@company.com' } };\n *\n *    // Will use the contents set above.\n *    const username = Aliases.fetch('myTestAlias');\n *    expect(username).to.equal('user@company.com');\n *  });\n * });\n * ```\n */\nexport const testSetup = once(_testSetup);\n\n/**\n * A pre-canned error for try/catch testing.\n *\n * **See** {@link shouldThrow}\n */\nexport const unexpectedResult: SfdxError = new SfdxError('This code was expected to fail', 'UnexpectedResult');\n\n/**\n * Use for this testing pattern:\n * ```\n *  try {\n *      await call()\n *      assert.fail('this should never happen');\n *  } catch (e) {\n *  ...\n *  }\n *\n *  Just do this\n *\n *  try {\n *      await shouldThrow(call()); // If this succeeds unexpectedResultError is thrown.\n *  } catch(e) {\n *  ...\n *  }\n * ```\n * @param f The async function that is expected to throw.\n */\nexport async function shouldThrow(f: Promise<unknown>): Promise<never> {\n  await f;\n  throw unexpectedResult;\n}\n\n/**\n * A helper to determine if a subscription will use callback or errorback.\n * Enable errback to simulate a subscription failure.\n */\nexport enum StreamingMockSubscriptionCall {\n  CALLBACK,\n  ERRORBACK\n}\n\n/**\n * Additional subscription options for the StreamingMock.\n */\nexport interface StreamingMockCometSubscriptionOptions {\n  /**\n   * Target URL.\n   */\n  url: string;\n  /**\n   * Simple id to associate with this instance.\n   */\n  id: string;\n  /**\n   * What is the subscription outcome a successful callback or an error?.\n   */\n  subscriptionCall: StreamingMockSubscriptionCall;\n  /**\n   * If it's an error that states what that error should be.\n   */\n  subscriptionErrbackError?: SfdxError;\n  /**\n   * A list of messages to playback for the client. One message per process tick.\n   */\n  messagePlaylist?: JsonMap[];\n}\n\n/**\n * Simulates a comet subscription to a streaming channel.\n */\nexport class StreamingMockCometSubscription extends EventEmitter implements CometSubscription {\n  public static SUBSCRIPTION_COMPLETE = 'subscriptionComplete';\n  public static SUBSCRIPTION_FAILED = 'subscriptionFailed';\n  private options: StreamingMockCometSubscriptionOptions;\n\n  constructor(options: StreamingMockCometSubscriptionOptions) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * Sets up a streaming subscription callback to occur after the setTimeout event loop phase.\n   * @param callback The function to invoke.\n   */\n  public callback(callback: () => void): void {\n    if (this.options.subscriptionCall === StreamingMockSubscriptionCall.CALLBACK) {\n      setTimeout(() => {\n        callback();\n        super.emit(StreamingMockCometSubscription.SUBSCRIPTION_COMPLETE);\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets up a streaming subscription errback to occur after the setTimeout event loop phase.\n   * @param callback The function to invoke.\n   */\n  public errback(callback: (error: Error) => void): void {\n    if (this.options.subscriptionCall === StreamingMockSubscriptionCall.ERRORBACK) {\n      const error = this.options.subscriptionErrbackError;\n      if (!error) return;\n      setTimeout(() => {\n        callback(error);\n        super.emit(StreamingMockCometSubscription.SUBSCRIPTION_FAILED);\n      }, 0);\n    }\n  }\n}\n\n/**\n * Simulates a comet client. To the core streaming client this mocks the internal comet impl.\n * The uses setTimeout(0ms) event loop phase just so the client can simulate actual streaming without the response\n * latency.\n */\nexport class StreamingMockCometClient extends CometClient {\n  private readonly options: StreamingMockCometSubscriptionOptions;\n\n  /**\n   * Constructor\n   * @param {StreamingMockCometSubscriptionOptions} options Extends the StreamingClient options.\n   */\n  public constructor(options: StreamingMockCometSubscriptionOptions) {\n    super();\n    this.options = options;\n    if (!this.options.messagePlaylist) {\n      this.options.messagePlaylist = [{ id: this.options.id }];\n    }\n  }\n\n  /**\n   * Fake addExtension. Does nothing.\n   */\n  public addExtension(extension: StreamingExtension): void {}\n\n  /**\n   * Fake disable. Does nothing.\n   */\n  public disable(label: string): void {}\n\n  /**\n   * Fake handshake that invoke callback after the setTimeout event phase.\n   * @param callback The function to invoke.\n   */\n  public handshake(callback: () => void): void {\n    setTimeout(() => {\n      callback();\n    }, 0);\n  }\n\n  /**\n   * Fake setHeader. Does nothing,\n   */\n  public setHeader(name: string, value: string): void {}\n\n  /**\n   * Fake subscription that completed after the setTimout event phase.\n   * @param channel The streaming channel.\n   * @param callback The function to invoke after the subscription completes.\n   */\n  public subscribe(channel: string, callback: (message: JsonMap) => void): CometSubscription {\n    const subscription: StreamingMockCometSubscription = new StreamingMockCometSubscription(this.options);\n    subscription.on('subscriptionComplete', () => {\n      if (!this.options.messagePlaylist) return;\n      Object.values(this.options.messagePlaylist).forEach(message => {\n        setTimeout(() => {\n          callback(message);\n        }, 0);\n      });\n    });\n    return subscription;\n  }\n\n  /**\n   * Fake disconnect. Does Nothing.\n   */\n  public disconnect(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n\n/**\n * Mock class for OrgData.\n */\nexport class MockTestOrgData {\n  public testId: string;\n  public alias?: string;\n  public username: string;\n  public devHubUsername?: string;\n  public orgId: string;\n  public loginUrl: string;\n  public instanceUrl: string;\n  public clientId: string;\n  public clientSecret: string;\n  public authcode: string;\n  public accessToken: string;\n  public refreshToken: string;\n  public userId: string;\n  public redirectUri: string;\n\n  constructor(id: string = _uniqid()) {\n    this.testId = id;\n    this.userId = `user_id_${this.testId}`;\n    this.orgId = `${this.testId}`;\n    this.username = `admin_${this.testId}@gb.org`;\n    this.loginUrl = `http://login.${this.testId}.salesforce.com`;\n    this.instanceUrl = `http://instance.${this.testId}.salesforce.com`;\n    this.clientId = `${this.testId}/client_id`;\n    this.clientSecret = `${this.testId}/client_secret`;\n    this.authcode = `${this.testId}/authcode`;\n    this.accessToken = `${this.testId}/accessToken`;\n    this.refreshToken = `${this.testId}/refreshToken`;\n    this.redirectUri = `http://${this.testId}/localhost:1717/OauthRedirect`;\n  }\n\n  public createDevHubUsername(username: string): void {\n    this.devHubUsername = username;\n  }\n\n  public makeDevHub(): void {\n    set(this, 'isDevHub', true);\n  }\n\n  public createUser(user: string): MockTestOrgData {\n    const userMock = new MockTestOrgData();\n    userMock.username = user;\n    userMock.alias = this.alias;\n    userMock.devHubUsername = this.devHubUsername;\n    userMock.orgId = this.orgId;\n    userMock.loginUrl = this.loginUrl;\n    userMock.instanceUrl = this.instanceUrl;\n    userMock.clientId = this.clientId;\n    userMock.clientSecret = this.clientSecret;\n    userMock.redirectUri = this.redirectUri;\n    return userMock;\n  }\n\n  public getMockUserInfo(): JsonMap {\n    return {\n      Id: this.userId,\n      Username: this.username,\n      LastName: `user_lastname_${this.testId}`,\n      Alias: this.alias || 'user_alias_blah',\n      TimeZoneSidKey: `user_timezonesidkey_${this.testId}`,\n      LocaleSidKey: `user_localesidkey_${this.testId}`,\n      EmailEncodingKey: `user_emailencodingkey_${this.testId}`,\n      ProfileId: `user_profileid_${this.testId}`,\n      LanguageLocaleKey: `user_languagelocalekey_${this.testId}`,\n      Email: `user_email@${this.testId}.com`\n    };\n  }\n\n  public async getConfig(): Promise<ConfigContents> {\n    const crypto = await Crypto.create();\n    const config: JsonMap = {};\n    config.orgId = this.orgId;\n\n    const accessToken = crypto.encrypt(this.accessToken);\n    if (accessToken) {\n      config.accessToken = accessToken;\n    }\n\n    const refreshToken = crypto.encrypt(this.refreshToken);\n    if (refreshToken) {\n      config.refreshToken = refreshToken;\n    }\n\n    config.instanceUrl = this.instanceUrl;\n    config.loginUrl = this.loginUrl;\n    config.username = this.username;\n    config.createdOrgInstance = 'CS1';\n    config.created = '1519163543003';\n    config.userId = this.userId;\n    // config.devHubUsername = 'tn@su-blitz.org';\n\n    if (this.devHubUsername) {\n      config.devHubUsername = this.devHubUsername;\n    }\n\n    const isDevHub = getBoolean(this, 'isDevHub');\n    if (isDevHub) {\n      config.isDevHub = isDevHub;\n    }\n\n    return config;\n  }\n}\n"],"names":["randomBytes","pathJoin","osTmpdir","ensureAnyJson","Messages","Logger","ensureJsonMap","ensureString","isJsonMap","stubMethod","ConfigFile","Crypto","Connection","once","SfdxError","StreamingMockSubscriptionCall","EventEmitter","CometClient","set","getBoolean"],"mappings":"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"}