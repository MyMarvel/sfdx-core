{"version":3,"file":"user.js","sources":["../src/user.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { AsyncCreatable, lowerFirst, mapKeys, omit, parseJsonMap, upperFirst } from '@salesforce/kit';\nimport {\n  asJsonArray,\n  asNumber,\n  ensure,\n  ensureJsonMap,\n  ensureString,\n  getString,\n  isJsonMap,\n  Many\n} from '@salesforce/ts-types';\nimport { QueryResult, RequestInfo } from 'jsforce';\nimport { DescribeSObjectResult } from 'jsforce/describe-result';\nimport { EOL } from 'os';\nimport { AuthFields, AuthInfo } from './authInfo';\nimport { Connection } from './connection';\nimport { Logger } from './logger';\nimport { Messages } from './messages';\nimport { Org } from './org';\nimport { PermissionSetAssignment } from './permissionSetAssignment';\nimport { SecureBuffer } from './secureBuffer';\nimport { SfdxError } from './sfdxError';\nimport { sfdc } from './util/sfdc';\n\nconst PASSWORD_LENGTH = 10;\nconst LOWER = 'abcdefghijklmnopqrstuvwxyz';\nconst UPPER = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst NUMBERS = '1234567890';\nconst SYMBOLS = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '[', ']', '|', '-'];\nconst ALL = [LOWER, UPPER, NUMBERS, SYMBOLS.join('')];\n\nconst rand = (len: Many<string>) => Math.floor(Math.random() * len.length);\n\nconst scimEndpoint = '/services/scim/v1/Users';\nconst scimHeaders = { 'auto-approve-user': 'true' };\n\n/**\n * A Map of Required Salesforce User fields.\n */\nexport const REQUIRED_FIELDS = {\n  id: 'id',\n  username: 'username',\n  lastName: 'lastName',\n  alias: 'alias',\n  timeZoneSidKey: 'timeZoneSidKey',\n  localeSidKey: 'localeSidKey',\n  emailEncodingKey: 'emailEncodingKey',\n  profileId: 'profileId',\n  languageLocaleKey: 'languageLocaleKey',\n  email: 'email'\n};\n\n/**\n * Required fields type needed to represent a Salesforce User object.\n *\n * **See** https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_objects_user.htm\n */\nexport type UserFields = { -readonly [K in keyof typeof REQUIRED_FIELDS]: string };\n\n/**\n * Helper method to lookup UserFields.\n * @param username The username.\n */\nasync function _retrieveUserFields(this: { logger: Logger }, username: string): Promise<UserFields> {\n  const connection: Connection = await Connection.create({\n    authInfo: await AuthInfo.create({ username })\n  });\n\n  const fromFields = Object.keys(REQUIRED_FIELDS).map(upperFirst);\n  const requiredFieldsFromAdminQuery = `SELECT ${fromFields} FROM User WHERE Username='${username}'`;\n  const result: QueryResult<string[]> = await connection.query<string[]>(requiredFieldsFromAdminQuery);\n\n  this.logger.debug('Successfully retrieved the admin user for this org.');\n\n  if (result.totalSize === 1) {\n    const results = mapKeys(result.records[0], (value: unknown, key: string) => lowerFirst(key));\n\n    const fields: UserFields = {\n      id: ensure(getString(results, REQUIRED_FIELDS.id)),\n      username,\n      alias: ensure(getString(results, REQUIRED_FIELDS.alias)),\n      email: ensure(getString(results, REQUIRED_FIELDS.email)),\n      emailEncodingKey: ensure(getString(results, REQUIRED_FIELDS.emailEncodingKey)),\n      languageLocaleKey: ensure(getString(results, REQUIRED_FIELDS.languageLocaleKey)),\n      localeSidKey: ensure(getString(results, REQUIRED_FIELDS.localeSidKey)),\n      profileId: ensure(getString(results, REQUIRED_FIELDS.profileId)),\n      lastName: ensure(getString(results, REQUIRED_FIELDS.lastName)),\n      timeZoneSidKey: ensure(getString(results, REQUIRED_FIELDS.timeZoneSidKey))\n    };\n\n    return fields;\n  } else {\n    throw SfdxError.create('@salesforce/core', 'user', 'userQueryFailed', [username]);\n  }\n}\n\n/**\n * Gets the profile id associated with a profile name.\n * @param name The name of the profile.\n * @param connection The connection for the query.\n */\nasync function _retrieveProfileId(name: string, connection: Connection): Promise<string> {\n  if (!sfdc.validateSalesforceId(name)) {\n    const profileQuery = `SELECT Id FROM Profile WHERE name='${name}'`;\n    const result = await connection.query<{ Id: string }>(profileQuery);\n    if (result.records.length > 0) {\n      return result.records[0].Id;\n    }\n  }\n  return name;\n}\n\n/**\n * Provides a default set of fields values that can be used to create a user. This is handy for\n * software development purposes.\n *\n * ```\n * const connection: Connection = await Connection.create({\n *   authInfo: await AuthInfo.create({ username: 'user@example.com' })\n * });\n * const org: Org = await Org.create({ connection });\n * const options: DefaultUserFields.Options = {\n *   templateUser: org.getUsername()\n * };\n * const fields = (await DefaultUserFields.create(options)).getFields();\n * ```\n */\nexport class DefaultUserFields extends AsyncCreatable<DefaultUserFields.Options> {\n  // Initialized in init\n  private logger!: Logger;\n  private userFields!: UserFields;\n\n  private options: DefaultUserFields.Options;\n\n  /**\n   * @ignore\n   */\n  public constructor(options: DefaultUserFields.Options) {\n    super(options);\n    this.options = options || { templateUser: '' };\n  }\n\n  /**\n   * Get user fields.\n   */\n  public getFields(): UserFields {\n    return this.userFields;\n  }\n\n  /**\n   * Initialize asynchronous components.\n   */\n  protected async init(): Promise<void> {\n    this.logger = await Logger.child('DefaultUserFields');\n    this.userFields = await _retrieveUserFields.call({ logger: this.logger }, this.options.templateUser);\n    this.userFields.profileId = await _retrieveProfileId(\n      'Standard User',\n      await Connection.create({\n        authInfo: await AuthInfo.create({ username: this.options.templateUser })\n      })\n    );\n    this.logger.debug(`Standard User profileId: ${this.userFields.profileId}`);\n    if (this.options.newUserName) {\n      this.userFields.username = this.options.newUserName;\n    } else {\n      this.userFields.username = `${Date.now()}_${this.userFields.username}`;\n    }\n  }\n}\n\nexport namespace DefaultUserFields {\n  /**\n   * Used to initialize default values for fields based on a templateUser user. This user will be part of the\n   * Standard User profile.\n   */\n  export interface Options {\n    templateUser: string;\n    newUserName?: string;\n  }\n}\n\n/**\n * A class for creating a User, generating a password for a user, and assigning a user to one or more permission sets.\n * See methods for examples.\n */\nexport class User extends AsyncCreatable<User.Options> {\n  /**\n   * Generate default password for a user. Returns An encrypted buffer containing a utf8 encoded password.\n   */\n  public static generatePasswordUtf8(): SecureBuffer<void> {\n    // Fill an array with random characters from random requirement sets\n    const pass = Array(PASSWORD_LENGTH - ALL.length)\n      .fill(9)\n      .map(() => {\n        const _set = ALL[rand(ALL)];\n        return _set[rand(_set)];\n      });\n\n    const secureBuffer: SecureBuffer<void> = new SecureBuffer<void>();\n    secureBuffer.consume(Buffer.from(pass.join(''), 'utf8'));\n\n    return secureBuffer;\n  }\n\n  private org: Org;\n  private logger!: Logger;\n\n  /**\n   * @ignore\n   */\n  public constructor(options: User.Options) {\n    super(options);\n    this.org = options.org;\n  }\n\n  /**\n   * Initialize a new instance of a user and return it.\n   */\n  public async init(): Promise<void> {\n    this.logger = await Logger.child('User');\n    await this.org.refreshAuth();\n    this.logger.debug('Auth refresh ok');\n  }\n\n  /**\n   * Assigns a password to a user. For a user to have the ability to assign their own password, the org needs the\n   * following org preference: SelfSetPasswordInApi.\n   * @param info The AuthInfo object for user to assign the password to.\n   * @param password [throwWhenRemoveFails = User.generatePasswordUtf8()] A SecureBuffer containing the new password.\n   */\n  public async assignPassword(info: AuthInfo, password: SecureBuffer<void> = User.generatePasswordUtf8()) {\n    this.logger.debug(\n      `Attempting to set password for userId: ${info.getFields().userId} username: ${info.getFields().username}`\n    );\n\n    const userConnection = await Connection.create({ authInfo: info });\n\n    return new Promise((resolve, reject) => {\n      password.value(async (buffer: Buffer) => {\n        try {\n          // @ts-ignore TODO: expose `soap` on Connection however appropriate\n          const soap = userConnection.soap;\n          await soap.setPassword(info.getFields().userId, buffer.toString('utf8'));\n          this.logger.debug(`Set password for userId: ${info.getFields().userId}`);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  /**\n   * Methods to assign one or more permission set names to a user.\n   * @param id The Salesforce id of the user to assign the permission set to.\n   * @param permsetNames An array of permission set names.\n   *\n   * ```\n   * const username = 'user@example.com';\n   * const connection: Connection = await Connection.create({\n   *   authInfo: await AuthInfo.create({ username })\n   * });\n   * const org = await Org.create({ connection });\n   * const user: User = await User.create({ org });\n   * const fields: UserFields = await user.retrieve(username);\n   * await user.assignPermissionSets(fields.id, ['sfdx', 'approver']);\n   * ```\n   */\n  public async assignPermissionSets(id: string, permsetNames: string[]): Promise<void> {\n    if (!id) {\n      throw SfdxError.create('@salesforce/core', 'user', 'missingId');\n    }\n\n    if (!permsetNames) {\n      throw SfdxError.create('@salesforce/core', 'user', 'permsetNamesAreRequired');\n    }\n\n    const assignments: PermissionSetAssignment = await PermissionSetAssignment.init(this.org);\n\n    for (const permsetName of permsetNames) {\n      await assignments.create(id, permsetName);\n    }\n  }\n\n  /**\n   * Method for creating a new User.\n   *\n   * By default scratch orgs only allow creating 2 additional users. Work with Salesforce Customer Service to increase\n   * user limits.\n   *\n   * The Org Preferences required to increase the number of users are:\n   * Standard User Licenses\n   * Salesforce CRM Content User\n   *\n   * @param fields The required fields for creating a user.\n   *\n   * ```\n   * const connection: Connection = await Connection.create({\n   *   authInfo: await AuthInfo.create({ username: 'user@example.com' })\n   * });\n   * const org = await Org.create({ connection });\n   *\n   * const defaultUserFields = await DefaultUserFields.create({ templateUser: 'devhub_user@example.com' });\n   * const user: User = await User.create({ org });\n   * const info: AuthInfo = await user.createUser(defaultUserFields.getFields());\n   * ```\n   */\n  public async createUser(fields: UserFields): Promise<AuthInfo> {\n    // Create a user and get a refresh token\n    const refreshTokenSecret: {\n      buffer: SecureBuffer<string>;\n      userId: string;\n    } = await this.createUserInternal(fields);\n\n    // Create the initial auth info\n    const adminUserAuthFields: AuthFields = this.org.getConnection().getAuthInfoFields();\n\n    // Setup oauth options for the new user\n    const oauthOptions = {\n      loginUrl: adminUserAuthFields.loginUrl,\n      refreshToken: refreshTokenSecret.buffer.value((buffer: Buffer): string => buffer.toString('utf8')),\n      clientId: adminUserAuthFields.clientId,\n      clientSecret: adminUserAuthFields.clientSecret,\n      privateKey: adminUserAuthFields.privateKey\n    };\n\n    // Create an auth info object for the new user\n    const newUserAuthInfo: AuthInfo = await AuthInfo.create({\n      username: fields.username,\n      oauth2Options: oauthOptions\n    });\n\n    // Update the auth info object with created user id.\n    const newUserAuthFields: AuthFields = newUserAuthInfo.getFields();\n    newUserAuthFields.userId = refreshTokenSecret.userId;\n\n    // Make sure we can connect and if so save the auth info.\n    await this.describeUserAndSave(newUserAuthInfo);\n\n    // Let the org know there is a new user. See $HOME/.sfdx/[orgid].json for the mapping.\n    await this.org.addUsername(newUserAuthInfo);\n\n    return newUserAuthInfo;\n  }\n\n  /**\n   * Method to retrieve the UserFields for a user.\n   * @param username The username of the user.\n   *\n   * ```\n   * const username = 'boris@thecat.com';\n   * const connection: Connection = await Connection.create({\n   *   authInfo: await AuthInfo.create({ username })\n   * });\n   * const org = await Org.create({ connection });\n   * const user: User = await User.create({ org });\n   * const fields: UserFields = await user.retrieve(username);\n   * ```\n   */\n  public async retrieve(username: string): Promise<UserFields> {\n    return await _retrieveUserFields.call(this, username);\n  }\n\n  /**\n   * Helper method that verifies the server's User object is available and if so allows persisting the Auth information.\n   * @param newUserAuthInfo The AuthInfo for the new user.\n   */\n  private async describeUserAndSave(newUserAuthInfo: AuthInfo): Promise<AuthInfo> {\n    const connection = await Connection.create({ authInfo: newUserAuthInfo });\n\n    this.logger.debug(`Created connection for user: ${newUserAuthInfo.getUsername()}`);\n\n    const userDescribe: DescribeSObjectResult = await connection.describe('User');\n\n    if (userDescribe && userDescribe.fields) {\n      await newUserAuthInfo.save();\n      return newUserAuthInfo;\n    } else {\n      throw SfdxError.create('@salesforce/core', 'user', 'problemsDescribingTheUserObject');\n    }\n  }\n\n  /**\n   * Helper that makes a REST request to create the user, and update additional required fields.\n   * @param fields The configuration the new user should have.\n   */\n  private async createUserInternal(fields: UserFields): Promise<{ buffer: SecureBuffer<string>; userId: string }> {\n    if (!fields) {\n      throw SfdxError.create('@salesforce/core', 'user', 'missingFields');\n    }\n\n    const body = JSON.stringify({\n      username: fields.username,\n      emails: [fields.email],\n      name: {\n        familyName: fields.lastName\n      },\n      nickName: fields.username.substring(0, 40), // nickName has a max length of 40\n      entitlements: [\n        {\n          value: fields.profileId\n        }\n      ]\n    });\n\n    this.logger.debug(`user create request body: ${body}`);\n\n    const scimUrl = this.org.getConnection().normalizeUrl(scimEndpoint);\n    this.logger.debug(`scimUrl: ${scimUrl}`);\n\n    const info: RequestInfo = {\n      method: 'POST',\n      url: scimUrl,\n      headers: scimHeaders,\n      body\n    };\n\n    const response = await this.org.getConnection().requestRaw(info);\n    const responseBody = parseJsonMap(ensureString(response['body']));\n    const statusCode = asNumber(response.statusCode);\n\n    this.logger.debug(`user create response.statusCode: ${response.statusCode}`);\n    if (!(statusCode === 201 || statusCode === 200)) {\n      const messages = Messages.loadMessages('@salesforce/core', 'user');\n      let message = messages.getMessage('invalidHttpResponseCreatingUser', [statusCode]);\n\n      if (responseBody) {\n        const errors = asJsonArray(responseBody.Errors);\n        if (errors && errors.length > 0) {\n          message = `${message} causes:${EOL}`;\n          errors.forEach(singleMessage => {\n            if (!isJsonMap(singleMessage)) return;\n            message = `${message}${EOL}${singleMessage.description}`;\n          });\n        }\n      }\n      this.logger.debug(message);\n      throw new SfdxError(message, 'UserCreateHttpError');\n    }\n\n    fields.id = ensureString(responseBody.id);\n    await this.updateRequiredUserFields(fields);\n\n    const buffer = new SecureBuffer<string>();\n    const headers = ensureJsonMap(response.headers);\n    const autoApproveUser = ensureString(headers['auto-approve-user']);\n    buffer.consume(Buffer.from(autoApproveUser));\n    return {\n      buffer,\n      userId: fields.id\n    };\n  }\n\n  /**\n   * Update the remaining required fields for the user.\n   * @param fields The fields for the user.\n   */\n  private async updateRequiredUserFields(fields: UserFields) {\n    const leftOverRequiredFields = omit(fields, [\n      REQUIRED_FIELDS.username,\n      REQUIRED_FIELDS.email,\n      REQUIRED_FIELDS.lastName,\n      REQUIRED_FIELDS.profileId\n    ]);\n    const object = mapKeys(leftOverRequiredFields, (value: unknown, key: string) => upperFirst(key));\n    await this.org\n      .getConnection()\n      .sobject('User')\n      .update(object);\n    this.logger.debug(`Successfully Updated additional properties for user: ${fields.username}`);\n  }\n}\n\nexport namespace User {\n  /**\n   * Used to initialize default values for fields based on a templateUser user. This user will be part of the\n   * Standard User profile.\n   */\n  export interface Options {\n    org: Org;\n  }\n}\n"],"names":["connection","Connection","AuthInfo","upperFirst","mapKeys","lowerFirst","ensure","getString","SfdxError","sfdc","AsyncCreatable","Logger","secureBuffer","SecureBuffer","PermissionSetAssignment","parseJsonMap","ensureString","asNumber","messages","Messages","asJsonArray","EOL","isJsonMap","ensureJsonMap","omit"],"mappings":"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"}