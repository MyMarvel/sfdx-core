{"version":3,"file":"permissionSetAssignment.js","sources":["../src/permissionSetAssignment.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { mapKeys, upperFirst } from '@salesforce/kit';\nimport { getString, hasArray, Optional } from '@salesforce/ts-types';\nimport { QueryResult, RecordResult } from 'jsforce';\nimport { EOL } from 'os';\nimport { Logger } from './logger';\nimport { Messages } from './messages';\nimport { Org } from './org';\nimport { SfdxError } from './sfdxError';\n\n/**\n * Map of fields name for a permission set assignment\n */\nexport interface PermissionSetAssignmentFields {\n  assigneeId: string;\n  permissionSetId: string;\n}\n\n/**\n * A class for assigning a Salesforce User to one or more permission sets.\n */\nexport class PermissionSetAssignment {\n  /**\n   * Creates a new instance of PermissionSetAssignment.\n   * @param org The target org for the assignment.\n   */\n  public static async init(org: Org): Promise<PermissionSetAssignment> {\n    if (!org) {\n      throw SfdxError.create('@salesforce/core', 'permissionSetAssignment', 'orgRequired');\n    }\n\n    return new PermissionSetAssignment(org, await Logger.child('PermissionSetAssignment'));\n  }\n\n  private logger: Logger;\n  private org: Org;\n\n  private constructor(org: Org, logger: Logger) {\n    this.logger = logger;\n    this.org = org;\n  }\n\n  /**\n   * Assigns a user to one or more permission sets.\n   * @param id A user id\n   * @param permSetString An array of permission set names.\n   */\n  public async create(id: string, permSetString: string): Promise<PermissionSetAssignmentFields> {\n    if (!id) {\n      throw SfdxError.create('@salesforce/core', 'permissionSetAssignment', 'userIdRequired');\n    }\n\n    if (!permSetString) {\n      throw SfdxError.create('@salesforce/core', 'permissionSetAssignment', 'permSetRequired');\n    }\n\n    const { nsPrefix, permSetName } = this.parsePermissionSetString(permSetString);\n\n    let query = `SELECT Id FROM PermissionSet WHERE Name='${permSetName}'`;\n\n    if (nsPrefix) {\n      query += ` AND NamespacePrefix='${nsPrefix}'`;\n    }\n\n    const result: QueryResult<string> = await this.org.getConnection().query<string>(query);\n\n    const permissionSetId = getString(result, 'records[0].Id');\n\n    if (!permissionSetId) {\n      if (nsPrefix) {\n        throw SfdxError.create(\n          '@salesforce/core',\n          'permissionSetAssignment',\n          'assignCommandPermissionSetNotFoundForNSError',\n          [permSetName, nsPrefix]\n        );\n      } else {\n        throw SfdxError.create(\n          '@salesforce/core',\n          'permissionSetAssignment',\n          'assignCommandPermissionSetNotFoundError',\n          [permSetName]\n        );\n      }\n    }\n\n    const assignment: PermissionSetAssignmentFields = {\n      assigneeId: id,\n      permissionSetId\n    };\n\n    let createResponse: RecordResult;\n\n    createResponse = await this.org\n      .getConnection()\n      .sobject('PermissionSetAssignment')\n      .create(mapKeys(assignment, (value: unknown, key: string) => upperFirst(key)));\n\n    if (hasArray(createResponse, 'errors')) {\n      const messages: Messages = Messages.loadMessages('@salesforce/core', 'permissionSetAssignment');\n      let message = messages.getMessage('errorsEncounteredCreatingAssignment');\n\n      const errors = createResponse.errors;\n      if (errors && errors.length > 0) {\n        message = `${message}:${EOL}`;\n        errors.forEach(_message => {\n          message = `${message}${_message}${EOL}`;\n        });\n        throw new SfdxError(message, 'errorsEncounteredCreatingAssignment');\n      } else {\n        throw SfdxError.create('@salesforce/core', 'permissionSetAssignment', 'notSuccessfulButNoErrorsReported');\n      }\n    } else {\n      return assignment;\n    }\n  }\n\n  /**\n   * Parses a permission set name based on if it has a namespace or not.\n   * @param permSetString The permission set string.\n   */\n  private parsePermissionSetString(\n    permSetString: string\n  ): { nsPrefix: Optional<string>; permSetName: Optional<string> } {\n    const nsPrefixMatch = permSetString.match(/(\\w+(?=__))(__)(.*)/);\n\n    let nsPrefix: Optional<string>;\n    let permSetName: Optional<string>;\n    if (nsPrefixMatch) {\n      try {\n        nsPrefix = nsPrefixMatch[1];\n        permSetName = nsPrefixMatch[3];\n        this.logger.debug(`Using namespacePrefix ${nsPrefix} for permission set ${permSetName}`);\n      } catch (e) {\n        // Don't fail if we parse wrong.\n        this.logger.debug(e);\n      }\n    } else {\n      permSetName = permSetString;\n    }\n    return { nsPrefix, permSetName };\n  }\n}\n"],"names":["SfdxError","Logger","getString","mapKeys","upperFirst","hasArray","messages","Messages","EOL"],"mappings":"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"}