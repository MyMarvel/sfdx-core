{"version":3,"file":"crypto.js","sources":["../src/crypto.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { AsyncOptionalCreatable, env } from '@salesforce/kit';\nimport { ensure, Nullable, Optional } from '@salesforce/ts-types';\nimport * as crypto from 'crypto';\nimport * as os from 'os';\nimport { join as pathJoin } from 'path';\nimport { retrieveKeychain } from './keyChain';\nimport { KeyChain } from './keyChainImpl';\nimport { Logger } from './logger';\nimport { Messages } from './messages';\nimport { SecureBuffer } from './secureBuffer';\nimport { SfdxError } from './sfdxError';\n\nconst TAG_DELIMITER = ':';\nconst BYTE_COUNT_FOR_IV = 6;\nconst _algo = 'aes-256-gcm';\n\nconst KEY_NAME = 'sfdx';\nconst ACCOUNT = 'local';\n\nMessages.importMessagesDirectory(pathJoin(__dirname));\n\ninterface CredType {\n  username: string;\n  password: string;\n}\n\n/**\n * osxKeyChain promise wrapper.\n */\nconst keychainPromises = {\n  /**\n   * Gets a password item.\n   * @param service The keychain service name.\n   * @param account The keychain account name.\n   */\n  getPassword(_keychain: KeyChain, service: string, account: string): Promise<CredType> {\n    return new Promise((resolve, reject) =>\n      _keychain.getPassword({ service, account }, (err: Nullable<Error>, password?: string) => {\n        if (err) return reject(err);\n        return resolve({ username: account, password: ensure(password) });\n      })\n    );\n  },\n\n  /**\n   * Sets a generic password item in OSX keychain.\n   * @param service The keychain service name.\n   * @param account The keychain account name.\n   * @param password The password for the keychain item.\n   */\n  setPassword(_keychain: KeyChain, service: string, account: string, password: string): Promise<CredType> {\n    return new Promise((resolve, reject) =>\n      _keychain.setPassword({ service, account, password }, (err: Nullable<Error>) => {\n        if (err) return reject(err);\n        return resolve({ username: account, password });\n      })\n    );\n  }\n};\n\ninterface CryptoOptions {\n  keychain?: KeyChain;\n  platform?: string;\n  retryStatus?: string;\n  noResetOnClose?: boolean;\n}\n\n/**\n * Class for managing encrypting and decrypting private auth information.\n */\nexport class Crypto extends AsyncOptionalCreatable<CryptoOptions> {\n  private _key: SecureBuffer<string> = new SecureBuffer();\n\n  private options: CryptoOptions;\n\n  // Initialized in init\n  private messages!: Messages;\n  private noResetOnClose!: boolean;\n\n  /**\n   * Constructor\n   * **Do not directly construct instances of this class -- use {@link Crypto.create} instead.**\n   * @param options The options for the class instance.\n   * @ignore\n   */\n  public constructor(options?: CryptoOptions) {\n    super(options);\n    this.options = options || {};\n  }\n\n  /**\n   * Encrypts text. Returns the encrypted string or undefined if no string was passed.\n   * @param text The text to encrypt.\n   */\n  public encrypt(text?: string): Optional<string> {\n    if (text == null) {\n      return;\n    }\n\n    if (this._key == null) {\n      const errMsg = this.messages.getMessage('KeychainPasswordCreationError');\n      throw new SfdxError(errMsg, 'KeychainPasswordCreationError');\n    }\n\n    const iv = crypto.randomBytes(BYTE_COUNT_FOR_IV).toString('hex');\n\n    return this._key.value((buffer: Buffer): string => {\n      const cipher = crypto.createCipheriv(_algo, buffer.toString('utf8'), iv);\n\n      let encrypted = cipher.update(text, 'utf8', 'hex');\n      encrypted += cipher.final('hex');\n\n      const tag = cipher.getAuthTag().toString('hex');\n      return `${iv}${encrypted}${TAG_DELIMITER}${tag}`;\n    });\n  }\n\n  /**\n   * Decrypts text.\n   * @param text The text to decrypt.\n   */\n  public decrypt(text?: string): Optional<string> {\n    if (text == null) {\n      return;\n    }\n\n    const tokens = text.split(TAG_DELIMITER);\n\n    if (tokens.length !== 2) {\n      const errMsg = this.messages.getMessage('InvalidEncryptedFormatError');\n      const actionMsg = this.messages.getMessage('InvalidEncryptedFormatErrorAction');\n      throw new SfdxError(errMsg, 'InvalidEncryptedFormatError', [actionMsg]);\n    }\n\n    const tag = tokens[1];\n    const iv = tokens[0].substring(0, BYTE_COUNT_FOR_IV * 2);\n    const secret = tokens[0].substring(BYTE_COUNT_FOR_IV * 2, tokens[0].length);\n\n    return this._key.value((buffer: Buffer) => {\n      const decipher = crypto.createDecipheriv(_algo, buffer.toString('utf8'), iv);\n\n      let dec;\n      try {\n        decipher.setAuthTag(Buffer.from(tag, 'hex'));\n        dec = decipher.update(secret, 'hex', 'utf8');\n        dec += decipher.final('utf8');\n      } catch (e) {\n        const useGenericUnixKeychain =\n          env.getBoolean('SFDX_USE_GENERIC_UNIX_KEYCHAIN') || env.getBoolean('USE_GENERIC_UNIX_KEYCHAIN');\n        if (os.platform() === 'darwin' && !useGenericUnixKeychain) {\n          e.actions = Messages.loadMessages('@salesforce/core', 'crypto').getMessage('MacKeychainOutOfSync');\n        }\n        e.message = this.messages.getMessage('AuthDecryptError', [e.message]);\n        throw SfdxError.wrap(e);\n      }\n      return dec;\n    });\n  }\n\n  /**\n   * Clears the crypto state. This should be called in a finally block.\n   */\n  public close(): void {\n    if (!this.noResetOnClose) {\n      this._key.clear();\n    }\n  }\n\n  /**\n   * Initialize async components.\n   */\n  protected async init(): Promise<void> {\n    const logger = await Logger.child('crypto');\n\n    if (!this.options.platform) {\n      this.options.platform = os.platform();\n    }\n\n    logger.debug(`retryStatus: ${this.options.retryStatus}`);\n\n    this.messages = Messages.loadMessages('@salesforce/core', 'encryption');\n\n    this.noResetOnClose = !!this.options.noResetOnClose;\n\n    try {\n      this._key.consume(\n        Buffer.from(\n          (await keychainPromises.getPassword(await this.getKeyChain(this.options.platform), KEY_NAME, ACCOUNT))\n            .password,\n          'utf8'\n        )\n      );\n    } catch (err) {\n      // No password found\n      if (err.name === 'PasswordNotFoundError') {\n        // If we already tried to create a new key then bail.\n        if (this.options.retryStatus === 'KEY_SET') {\n          logger.debug('a key was set but the retry to get the password failed.');\n          throw err;\n        } else {\n          logger.debug('password not found in keychain attempting to created one and re-init.');\n        }\n\n        const key = crypto.randomBytes(Math.ceil(16)).toString('hex');\n        // Create a new password in the KeyChain.\n        await keychainPromises.setPassword(ensure(this.options.keychain), KEY_NAME, ACCOUNT, key);\n\n        return this.init();\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  private async getKeyChain(platform: string) {\n    if (!this.options.keychain) {\n      this.options.keychain = await retrieveKeychain(platform);\n    }\n    return this.options.keychain;\n  }\n}\n"],"names":["Messages","pathJoin","ensure","AsyncOptionalCreatable","SecureBuffer","SfdxError","crypto.randomBytes","crypto.createCipheriv","crypto.createDecipheriv","env","os.platform","logger","Logger","retrieveKeychain"],"mappings":"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"}