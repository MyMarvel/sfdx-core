{"version":3,"file":"sfdxProject.js","sources":["../src/sfdxProject.ts"],"sourcesContent":["/*\n * Copyright (c) 2018, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { sep as pathSep } from 'path';\n\nimport { ConfigAggregator } from './config/configAggregator';\nimport { ConfigFile } from './config/configFile';\nimport { ConfigContents } from './config/configStore';\n\nimport { defaults, env } from '@salesforce/kit';\nimport { JsonMap } from '@salesforce/ts-types';\nimport { SchemaValidator } from './schema/validator';\nimport { resolveProjectPath, resolveProjectPathSync, SFDX_PROJECT_JSON } from './util/internal';\n\nimport { SfdxError } from './sfdxError';\nimport { sfdc } from './util/sfdc';\n\nexport type PackageDirDependency = {\n  package: string;\n  versionNumber?: string;\n  [k: string]: unknown;\n};\n\nexport type PackageDir = {\n  ancestorId?: string;\n  ancestorVersion?: string;\n  default?: boolean;\n  definitionFile?: string;\n  dependencies?: PackageDirDependency[];\n  includeProfileUserLicenses?: boolean;\n  package?: string;\n  path: string;\n  postInstallScript?: string;\n  postInstallUrl?: string;\n  releaseNotesUrl?: string;\n  uninstallScript?: string;\n  versionDescription?: string;\n  versionName?: string;\n  versionNumber?: string;\n};\n\nexport type ProjectJson = ConfigContents & {\n  packageDirectories: PackageDir[];\n  namespace?: string;\n  sourceApiVersion?: string;\n  sfdcLoginUrl?: string;\n  signupTargetLoginUrl?: string;\n  oauthLocalPort?: number;\n  plugins?: { [k: string]: unknown };\n  packageAliases?: { [k: string]: string };\n};\n\n/**\n * The sfdx-project.json config object. This file determines if a folder is a valid sfdx project.\n *\n * *Note:* Any non-standard (not owned by Salesforce) properties stored in sfdx-project.json should\n * be in a top level property that represents your project or plugin.\n *\n * ```\n * const project = await SfdxProjectJson.retrieve();\n * const myPluginProperties = project.get('myplugin') || {};\n * myPluginProperties.myprop = 'someValue';\n * project.set('myplugin', myPluginProperties);\n * await project.write();\n * ```\n *\n * **See** [force:project:create](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ws_create_new.htm)\n */\nexport class SfdxProjectJson extends ConfigFile<ConfigFile.Options> {\n  public static BLOCKLIST = ['packageAliases'];\n\n  public static getFileName() {\n    return SFDX_PROJECT_JSON;\n  }\n\n  public static getDefaultOptions(isGlobal = false): ConfigFile.Options {\n    const options = ConfigFile.getDefaultOptions(isGlobal, SfdxProjectJson.getFileName());\n    options.isState = false;\n    return options;\n  }\n\n  public constructor(options: ConfigFile.Options) {\n    super(options);\n  }\n\n  public async read(): Promise<ConfigContents> {\n    const contents = await super.read();\n\n    // Verify that the configObject does not have upper case keys; throw if it does.  Must be heads down camel case.\n    const upperCaseKey = sfdc.findUpperCaseKeys(this.toObject(), SfdxProjectJson.BLOCKLIST);\n    if (upperCaseKey) {\n      throw SfdxError.create('@salesforce/core', 'core', 'InvalidJsonCasing', [upperCaseKey, this.getPath()]);\n    }\n\n    await this.schemaValidate();\n\n    return contents;\n  }\n\n  public async write(newContents?: ConfigContents): Promise<ConfigContents> {\n    // Verify that the configObject does not have upper case keys; throw if it does.  Must be heads down camel case.\n    const upperCaseKey = sfdc.findUpperCaseKeys(newContents, SfdxProjectJson.BLOCKLIST);\n    if (upperCaseKey) {\n      throw SfdxError.create('@salesforce/core', 'core', 'InvalidJsonCasing', [upperCaseKey, this.getPath()]);\n    }\n\n    await this.schemaValidate();\n\n    return super.write(newContents);\n  }\n\n  public getContents(): ProjectJson {\n    return super.getContents() as ProjectJson;\n  }\n\n  public getDefaultOptions(options?: ConfigFile.Options): ConfigFile.Options {\n    const defaultOptions: ConfigFile.Options = {\n      isState: false\n    };\n\n    Object.assign(defaultOptions, options || {});\n    return defaultOptions;\n  }\n\n  /**\n   * Validates sfdx-project.json against the schema.\n   *\n   * Set the `SFDX_PROJECT_JSON_VALIDATION` environment variable to `true` to throw an error when schema validation fails.\n   * A warning is logged by default when the file is invalid.\n   *\n   * ***See*** [sfdx-project.schema.json] (https://raw.githubusercontent.com/forcedotcom/schemas/master/schemas/sfdx-project.schema.json)\n   */\n  public async schemaValidate(): Promise<void> {\n    if (!this.hasRead) {\n      // read calls back into this method after necessarily setting this.hasRead=true\n      await this.read();\n    } else {\n      try {\n        const projectJsonSchemaPath = require.resolve('@salesforce/schemas/sfdx-project.schema.json');\n        const validator = new SchemaValidator(this.logger, projectJsonSchemaPath);\n        await validator.load();\n        await validator.validate(this.getContents());\n      } catch (err) {\n        if (env.getBoolean('SFDX_PROJECT_JSON_VALIDATION', false)) {\n          err.name = 'SfdxSchemaValidationError';\n          const sfdxError = SfdxError.wrap(err);\n          sfdxError.actions = [this.messages.getMessage('SchemaValidationErrorAction', [this.getPath()])];\n          throw sfdxError;\n        } else {\n          this.logger.warn(this.messages.getMessage('SchemaValidationWarning', [this.getPath(), err.message]));\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the `packageDirectories` within sfdx-project.json, first reading\n   * and validating the file if necessary.\n   */\n  public async getPackageDirectories(): Promise<PackageDir[]> {\n    // Ensure sfdx-project.json has first been read and validated.\n    if (!this.hasRead) {\n      await this.read();\n    }\n\n    const contents = this.getContents();\n    const packageDirs: PackageDir[] = contents.packageDirectories.map(packageDir => {\n      // Change packageDir paths to have path separators that match the OS\n      const regex = pathSep === '/' ? /\\\\/g : /\\//g;\n      packageDir.path = packageDir.path.replace(regex, pathSep);\n      return packageDir;\n    });\n    return packageDirs;\n  }\n}\n\n/**\n * Represents an SFDX project directory. This directory contains a {@link SfdxProjectJson} config file as well as\n * a hidden .sfdx folder that contains all the other local project config files.\n *\n * ```\n * const project = await SfdxProject.resolve();\n * const projectJson = await project.resolveProjectConfig();\n * console.log(projectJson.sfdcLoginUrl);\n * ```\n */\nexport class SfdxProject {\n  /**\n   * Get a Project from a given path or from the working directory.\n   * @param path The path of the project.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'InvalidProjectWorkspace' }* If the current folder is not located in a workspace.\n   */\n  public static async resolve(path?: string): Promise<SfdxProject> {\n    const _path = path || process.cwd();\n    if (!SfdxProject.instances.has(_path)) {\n      const project = new SfdxProject(await this.resolveProjectPath(_path));\n      SfdxProject.instances.set(_path, project);\n    }\n    // @ts-ignore Because of the pattern above this is guaranteed to return an instance\n    return SfdxProject.instances.get(_path);\n  }\n\n  /**\n   * Performs an upward directory search for an sfdx project file. Returns the absolute path to the project.\n   *\n   * @param dir The directory path to start traversing from.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'InvalidProjectWorkspace' }* If the current folder is not located in a workspace.\n   *\n   * **See** {@link traverseForFile}\n   *\n   * **See** [process.cwd()](https://nodejs.org/api/process.html#process_process_cwd)\n   */\n  public static async resolveProjectPath(dir?: string): Promise<string> {\n    return resolveProjectPath(dir);\n  }\n\n  /**\n   * Performs a synchronous upward directory search for an sfdx project file. Returns the absolute path to the project.\n   *\n   * @param dir The directory path to start traversing from.\n   *\n   * **Throws** *{@link SfdxError}{ name: 'InvalidProjectWorkspace' }* If the current folder is not located in a workspace.\n   *\n   * **See** {@link traverseForFileSync}\n   *\n   * **See** [process.cwd()](https://nodejs.org/api/process.html#process_process_cwd)\n   */\n  public static resolveProjectPathSync(dir?: string): string {\n    return resolveProjectPathSync(dir);\n  }\n\n  // Cache of SfdxProject instances per path.\n  private static instances = new Map<string, SfdxProject>();\n\n  private projectConfig: any; // tslint:disable-line:no-any\n\n  // Dynamically referenced in retrieveSfdxProjectJson\n  private sfdxProjectJson!: SfdxProjectJson;\n  private sfdxProjectJsonGlobal!: SfdxProjectJson;\n\n  /**\n   * Do not directly construct instances of this class -- use {@link SfdxProject.resolve} instead.\n   *\n   * @ignore\n   */\n  private constructor(private path: string) {}\n\n  /**\n   * Returns the project path.\n   */\n  public getPath(): string {\n    return this.path;\n  }\n\n  /**\n   * Get the sfdx-project.json config. The global sfdx-project.json is used for user defaults\n   * that are not checked in to the project specific file.\n   *\n   * *Note:* When reading values from {@link SfdxProjectJson}, it is recommended to use\n   * {@link SfdxProject.resolveProjectConfig} instead.\n   *\n   * @param isGlobal True to get the global project file, otherwise the local project config.\n   */\n  public async retrieveSfdxProjectJson(isGlobal = false): Promise<SfdxProjectJson> {\n    const options = SfdxProjectJson.getDefaultOptions(isGlobal);\n    if (isGlobal) {\n      if (!this.sfdxProjectJsonGlobal) {\n        this.sfdxProjectJsonGlobal = await SfdxProjectJson.create(options);\n      }\n      return this.sfdxProjectJsonGlobal;\n    } else {\n      options.rootFolder = this.getPath();\n      if (!this.sfdxProjectJson) {\n        this.sfdxProjectJson = await SfdxProjectJson.create(options);\n      }\n      return this.sfdxProjectJson;\n    }\n  }\n\n  /**\n   * The project config is resolved from local and global {@link SfdxProjectJson},\n   * {@link ConfigAggregator}, and a set of defaults. It is recommended to use\n   * this when reading values from SfdxProjectJson.\n   * @returns A resolved config object that contains a bunch of different\n   * properties, including some 3rd party custom properties.\n   */\n  public async resolveProjectConfig(): Promise<JsonMap> {\n    if (!this.projectConfig) {\n      // Get sfdx-project.json from the ~/.sfdx directory to provide defaults\n      const global = await this.retrieveSfdxProjectJson(true);\n      const local = await this.retrieveSfdxProjectJson();\n\n      await global.read();\n      await local.read();\n\n      const defaultValues = {\n        sfdcLoginUrl: 'https://login.salesforce.com'\n      };\n\n      this.projectConfig = defaults(local.toObject(), global.toObject(), defaultValues);\n\n      // Add fields in sfdx-config.json\n      Object.assign(this.projectConfig, (await ConfigAggregator.create()).getConfig());\n\n      // LEGACY - Allow override of sfdcLoginUrl via env var FORCE_SFDC_LOGIN_URL\n      if (process.env.FORCE_SFDC_LOGIN_URL) {\n        this.projectConfig.sfdcLoginUrl = process.env.FORCE_SFDC_LOGIN_URL;\n      }\n    }\n\n    return this.projectConfig;\n  }\n}\n"],"names":["ConfigFile","SFDX_PROJECT_JSON","sfdc","SfdxError","SchemaValidator","env","sfdxError","pathSep","resolveProjectPath","resolveProjectPathSync","defaults","ConfigAggregator"],"mappings":"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"}